@model TuvVision.Models.CustomerFeedback
@using NonFactors.Mvc.Grid;
@using System.Web.Mvc;


@{
    ViewBag.Title = "FeedBackList";
    Layout = "~/Views/Shared/_TuvVision.cshtml";
}

<link href="~/AllJsAndCss/css/MVCGridN.css" rel="stylesheet" />



@using (Html.BeginForm("", null, FormMethod.Get))
{

    <div class="main-content3 xs-max-height">

        <!--Start of header-->
        <div class="container-fluid">
            <div class="row assignfixedwidth rp-15">

                <div class="col-xs-12">
                    <h3 class="dynamic-page-title dynamic-page-title-2  text-left">FeedBack</h3>
                    @*<button type="button" value="CreateRole" class="btn btn-info dynamic-function-btn dynamic-function-btn-2" onclick="location.href='@Url.Action("CreateBranch", "Branch")'">Add New Branch</button>*@
                 
                   @*<button type="button" value="ExportToExcel" class="btn btn-info dynamic-function-btn dynamic-function-btn-2" onclick="location.href='@Url.Action("ExportIndex","JobMaster")'">
                        Export To Excel
                    </button>*@
                    <a href="@Url.Action("TrainingSchedule", "TrainingSchedule" , new {@UserID = Model.FeedBack_ID })" style="float:right;" class="btn btn-default insert-form-btn"><i class="fa fa-long-arrow-left"></i> Go Back</a>
                    
                    <a href="@Url.Action("ExportFeedBackList", "TrainingSchedule" , new {@PK_TrainingScheduleId = Model.FeedBack_ID })" style="margin-top:15px;margin-right:10px;" class="btn btn-info dynamic-function-btn dynamic-function-btn-2">Export To Excel</a>


                </div><!-- /.col -->

                <div class="col-xs-12">
                    <hr class="custom-hr">
                </div><!-- /.col -->
                <!--Table was here-->

            </div><!-- /.row -->

            <div class="col-xs-12">

            </div><!-- /.data table col -->
        
            <div class="col-xs-12">
                @Html.HiddenFor(m => m.FeedBack_ID)
                <table class="display dataTable no-footer" style="overflow-y:auto" id="gridMapping">
                    <tr>
                        <td>
                            @(Html
                            .Grid(Model.lstFeedback1)
                            .Build(columns =>
                            {


                columns.Add(c => c.RTraineeName).Titled("Name");
                columns.Add(c => c.Branch).Titled("Branch");
                columns.Add(c => c.Email).Titled("Email");
                columns.Add(c => c.MobileNo).Titled("Mobile");
                columns.Add(c => c.FeedBack).Titled("Feed Back");




            })
                            .Pageable(pager =>
                            {
                //pager.PageSizes = new DictionaryInt32, String > { { 0, "All" }, { 2, "2" }, { 4, "4" } };
                pager.ShowPageSizes = true;
                pager.PagesToDisplay = 3;
                pager.CurrentPage = 1;
                pager.RowsPerPage = 2;
            })
                            .UsingFilterMode(GridFilterMode.Row)
                            .Empty("No data found")
                            .Filterable()
                            .Sortable()

                            )


                        </td>
                    </tr>
                </table>


            </div>





        </div><!-- /.container-fluid -->
        <!--End of header-->

    </div>
    <!--End of Ashwini Code-->


}

<script>
           [].forEach.call(document.getElementsByClassName('mvc-grid'), function(element)
        {
            new MvcGrid(element);
        });
</script>

@*<script>
        document.getElementById("Job_Number"), function (element) {
                   new MvcGrid(element);
               };
    </script>*@

<script>
    var CustomTextFilter = (function (base) {
        MvcGridExtends(CustomTextFilter, base);

        function CustomTextFilter(column) {
            base.call(this, column);

            this.methods = ['contains'];
            column.grid.lang.custom = { contains: 'Contains' };
        }

        // Other extension points can be found at MvcGridFilter declaration

        return CustomTextFilter;
    })(MvcGridFilter);

    new MvcGrid(document.querySelector('.mvc-grid'), {
        filters: {
            'custom': CustomTextFilter
        }
    });
</script>

