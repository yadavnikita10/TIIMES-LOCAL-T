@model TuvVision.Models.NCR
@{
    ViewBag.Title = "CreateNCR";
    Layout = "~/Views/Shared/_TuvVision.cshtml";
}
<!--multiselect-->
<link href="~/AllJsAndCss/css/bootstrap-multiselect.css" rel="stylesheet" />
<!--filepond-->
<link href="~/AllJsAndCss/css/filepond.css" rel="stylesheet" />

<script src="~/AllJsAndCss/datatable/js/jquery.dataTables.js"></script>

<script src="~/AllJsAndCss/js/datatable-custom.js"></script>

<style>
    /*-- Delete color-profile --*/
    ul.Attachment {
        padding-left: 0px;
        list-style: none;
        margin-bottom: 0px;
    }

        ul.Attachment > li {
            border: 1px solid #999;
            margin: 7px 5px 0 0;
            display: inline-block;
            padding: 0px 10px;
            background-color: #dfdfdf;
            color: #000;
        }

            ul.Attachment > li a.title {
                color: #000;
                vertical-align: text-bottom;
                text-transform: capitalize;
            }

            ul.Attachment > li a.deleteItem {
                color: white;
                font-size: 10px;
                background: #e91e1e;
                padding: 2px 4px;
                border-radius: 50%;
                vertical-align: text-top;
            }
</style>

<div class="main-content3 xs-max-height grey-bg-f3">
    <div class="grey-bg-f3">
        <!--Start of header-->
        <div class="container-fluid">
            <div class="row assignfixedwidth rp-5">

                <div class="col-xs-12 form-col">
                    <div class="row">

                        <div class="col-xs-12 text-right">
                            @*<a href="@Url.Action("ListNCR", "NCR")" class="btn btn-info dynamic-function-btn"><i class="fa fa-long-arrow-left"></i>Back</a>*@
                            @Html.HiddenFor(model => model.Type)

                            @if (Model.Type == "VisitReport")
                            {

                                <button class="btn btn-default insert-form-btn" type="button" onclick="location.href='@Url.Action("Conclusion", "VisitReport",new { PK_Call_ID=Model.PK_Call_Id} )'">Back</button>
                            }
                            else
                            {
                                <button class="btn btn-default insert-form-btn" type="button" onclick="location.href='@Url.Action("ListNCR", "MISNCR" )'">Back</button>
                            }

                        </div>

                        <div class="col-xs-12">
                            <div class="white-bg section-box-shadow">
                                <h3 class="form-page-title" style="font-size:14px;"> @Html.DisplayFor(model => model.NCRNo)</h3>
                                <div class="row">
                                    <div class="col-xs-12 col-sm-offset-1 col-sm-10">
                                        <div class="form-box">
                                            <form method="post" enctype="multipart/form-data">


                                                <span style="color:#FA3746;">
                                                    Notes :  *
                                                </span> Mandatory.

                                                <div class="row">
                                                    @Html.HiddenFor(model => model.NCRNo)
                                                    @Html.HiddenFor(model => model.IVRId)
                                                    @Html.HiddenFor(model => model.Id)
                                                    @Html.HiddenFor(model => model.PK_Call_Id)



                                                    <div class="col-xs-12 col-sm-4">
                                                        <div class="form-group">
                                                            <label>Date:</label>
                                                            @Html.TextBoxFor(model => model.Date, "{0:dd/MMMM/yyyy}", htmlAttributes: new { placeholder = "Select Date", @class = "form-control form-control-custom Date", autocomplete = "off" })


                                                            @Html.ValidationMessageFor(model => model.Date, "", new { @class = "text-danger validation-msg" })


                                                        </div>
                                                    </div>

                                                    <div class="col-xs-12 col-sm-4">
                                                        <div class="form-group">
                                                            <label>TUV India Control No: </label>
                                                            @Html.TextBoxFor(model => model.TUVControlNo, htmlAttributes: new { placeholder = "TUVI Control No", @class = "form-control", autocomplete = "off", @readonly = "readonly" })


                                                            @Html.ValidationMessageFor(model => model.TUVControlNo, "", new { @class = "text-danger validation-msg" })

                                                        </div>

                                                    </div>
                                                    <div class="col-xs-12 col-sm-4">
                                                        <div class="form-group">
                                                            <label>SAP Number: </label>
                                                            @Html.TextBoxFor(model => model.SAP, htmlAttributes: new { placeholder = "SAP No", @class = "form-control", autocomplete = "off", @readonly = "readonly" })


                                                            @Html.ValidationMessageFor(model => model.SAP, "", new { @class = "text-danger validation-msg" })

                                                        </div>

                                                    </div>


                                                    <div class="col-xs-12 col-sm-4">
                                                        <div class="form-group">
                                                            <label>Customer Name: </label>
                                                            @Html.TextBoxFor(model => model.Client, new { @placeholder = "Customer Name:", @class = "form-control", autocomplete = "off", @readonly = "readonly" })
                                                            @Html.ValidationMessageFor(model => model.Client, "", new { @class = "text-danger validation-msg" })
                                                        </div>
                                                    </div>
                                                    <div class="col-xs-12 col-sm-4">
                                                        <div class="form-group">
                                                            <label>Project Name: </label>
                                                            @Html.TextBoxFor(model => model.ProjectName, new { @placeholder = "Project Name", @class = "form-control", autocomplete = "off", @readonly = "readonly" })
                                                            @Html.ValidationMessageFor(model => model.ProjectName, "", new { @class = "text-danger validation-msg" })
                                                        </div>
                                                    </div>
                                                </div>

                                                <div class="row">


                                                    <div class="col-xs-12 col-sm-4">
                                                        <div class="form-group">
                                                            <label>Vendor Name:</label>
                                                            @Html.TextBoxFor(model => model.VenderSubVendor, htmlAttributes: new { placeholder = "Vendor Name:", @class = "form-control", autocomplete = "off" })


                                                            @Html.ValidationMessageFor(model => model.VenderSubVendor, "", new { @class = "text-danger validation-msg" })

                                                        </div>

                                                    </div>
                                                    <div class="col-xs-12 col-sm-4">
                                                        <div class="form-group">
                                                            <label>PO No. (Client PO on Vendor) :</label>
                                                            @Html.TextBoxFor(model => model.VendorPoNo, htmlAttributes: new { placeholder = "PO No. (Client PO on Vendor) :", @class = "form-control", autocomplete = "off" })


                                                            @Html.ValidationMessageFor(model => model.VendorPoNo, "", new { @class = "text-danger validation-msg" })

                                                        </div>

                                                    </div>
                                                    <div class="col-xs-12 col-sm-4">
                                                        <div class="form-group">
                                                            <label>PO Date(Vendor):</label>
                                                            @Html.TextBoxFor(model => model.date_of_PO, htmlAttributes: new { placeholder = "PO Date(Vendor):", @class = "form-control", autocomplete = "off" })


                                                            @Html.ValidationMessageFor(model => model.date_of_PO, "", new { @class = "text-danger validation-msg" })

                                                        </div>

                                                    </div>
                                                    <div class="col-xs-12 col-sm-4">
                                                        <div class="form-group">
                                                            <label>Sub Vendor Name: </label>
                                                            @Html.TextBoxFor(model => model.SubVendorName, new { @placeholder = "Sub Vendor Name", @class = "form-control", autocomplete = "off" })
                                                            @Html.ValidationMessageFor(model => model.SubVendorName, "", new { @class = "text-danger validation-msg" })
                                                        </div>
                                                    </div>
                                                    <div class="col-xs-12 col-sm-4">
                                                        <div class="form-group">
                                                            <label>PO No.(Vendor PO on Sub Vendor):  </label>
                                                            @Html.TextBoxFor(model => model.SubVendorPoNo, new { @placeholder = "PO No.(Vendor PO on Sub Vendor): ", @class = "form-control", autocomplete = "off" })
                                                            @Html.ValidationMessageFor(model => model.SubVendorPoNo, "", new { @class = "text-danger validation-msg" })
                                                        </div>
                                                    </div>
                                                    <div class="col-xs-12 col-sm-4">
                                                        <div class="form-group">
                                                            <label>PO Date(Sub Vendor):</label>
                                                            @Html.TextBoxFor(model => model.date_of_POSubVendor, new { @placeholder = "PO Date(Sub Vendor):", @class = "form-control", autocomplete = "off" })
                                                            @Html.ValidationMessageFor(model => model.date_of_POSubVendor, "", new { @class = "text-danger validation-msg" })
                                                        </div>
                                                    </div>

                                                    <div class="col-xs-12 col-sm-6">
                                                        <div class="form-group">
                                                            <label>Item/Equipment Description: </label><span style="color:#FA3746;">*</span>
                                                            @Html.TextAreaFor(model => model.ItemEquipment, new { @placeholder = "Item/Equipment Description", @class = "form-control", autocomplete = "off" })
                                                            @Html.ValidationMessageFor(model => model.ItemEquipment, "", new { @class = "text-danger validation-msg" })
                                                        </div>
                                                    </div>

                                                    <div class="col-xs-12 col-sm-6">
                                                        <div class="form-group">
                                                            <label>Reference Documents:</label><span style="color:#FA3746;">*</span>
                                                            @Html.TextAreaFor(model => model.ReferenceDocument, new { @placeholder = "Reference Documents:", @class = "form-control", autocomplete = "off" })
                                                            @Html.ValidationMessageFor(model => model.ReferenceDocument, "", new { @class = "text-danger validation-msg" })
                                                        </div>
                                                    </div>

                                                </div>

                                                <div class="row">

                                                    <div class="col-xs-12 col-sm-12">
                                                        <div class="form-group">
                                                            <label>Description of the Nonconformity: </label><span style="color:#FA3746;">*</span>
                                                            @Html.TextAreaFor(model => model.DescriptionOfTheNonconformity, 4, 40, htmlAttributes: new { placeholder = "Description of the Nonconformity", @class = "form-control", autocomplete = "off" })


                                                            @Html.ValidationMessageFor(model => model.DescriptionOfTheNonconformity, "", new { @class = "text-danger validation-msg" })

                                                        </div>

                                                    </div>






                                                </div>
                                                <div class="row">
                                                    <div class="col-xs-12 col-sm-4">
                                                        <div class="form-group">
                                                            <label>NCR Status:</label><span style="color:#FA3746;">*</span>
                                                            @Html.DropDownListFor(m => m.Status, new List<SelectListItem>
                                                                     {
                                                                     new SelectListItem{ Text="---SELECT---", Value = "" },
                                                                     new SelectListItem{ Text="Open", Value = "Open" },
                                                                     new SelectListItem{ Text="Close", Value = "Close" },

                                                       }, new { @class = "form-control", @id = "PT" })
                                                            @Html.ValidationMessageFor(m => m.Status, "", new { @class = "text-danger validation-msg" })




                                                        </div>
                                                    </div>


                                                </div>
                                                <div class="row">
                                                    <div class="col-xs-12 col-sm-4">
                                                        <div class="form-group">
                                                            <label>NCR Raised By: </label>
                                                            @Html.TextBoxFor(model => model.NCRRaisedBy, new { @placeholder = "NCR Raised By", @class = "form-control", autocomplete = "off" })
                                                            @Html.ValidationMessageFor(model => model.NCRRaisedBy, "", new { @class = "text-danger validation-msg" })
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="col-xs-12">
                                                    <div class="form-group">
                                                        <label><i class="fa fa-paperclip" style="color:black;"></i> Related Documents (Attach NCR Closer records) : <span style="color:#ff0000;">*</span></label>
                                                        <input type="file" class="filepond" name="filepond" id="FileUpload" multiple>
                                                        <input hidden="hidden" id="hdfFileUpload" name="FileUpload" class="hidden" />
                                                    </div>
                                                </div>

                                                @if (Model != null)
                                                {
                                                    if (Model.FileDetails != null && Model.FileDetails.Count > 0)
                                                    {
                                                        <div class="row">
                                                            <div class="col-xs-12">
                                                                <div class="form-group">
                                                                    <ul class="Attachment">
                                                                        @foreach (var item in Model.FileDetails)
                                                                        {
                                                                            <li>
                                                                                <a class="title" href="/NCR/DownloadNCRAttach/?p=@(item.IDS + item.Extension)&d=@item.FileName">@item.FileName</a>
                                                                                <a href="javascript:void(0);" data-id="@item.IDS" class="deleteItem">X</a>
                                                                            </li>
                                                                        }
                                                                    </ul>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    }
                                                    else
                                                    {
                                                        <p style="color:red;text-align:center;font-weight:bold;">No Files Uploaded</p>
                                                    }
                                                }
                                                else
                                                {
                                                    <p style="color:red;text-align:center;font-weight:bold;">There are no Attachments !</p>
                                                }

                                                @*<div class="col-xs-12">
                                                        <div class="form-group">
                                                            @{
                                                                if (Model != null)
                                                                {

                                                                    if (!string.IsNullOrEmpty(Model.Attachment))
                                                                    {
                                                                        <div class="cform-group">
                                                                            @{
                                                                               string[] words = (Model.Attachment).Split(',');
                                                                               for (int i = 0; i < words.Count(); i++)
                                                                               {
                                                                                   <a id="btnAddToCart" class="btn btn-default insert-form-btn" href="@Url.Content("" + words[i])" role="button" download="@Url.Content("~/Content/Uploads/Images/" + words[i])">
                                                                                       <i class="fa fa-download"></i>           @words[i]
                                                                                   </a>
                                                                               }
                                                                            }
                                                                         </div>
                                                                                 }
                                                                                 else
                                                                                 {
                                                                                     <div class="form-group">

                                                                                     </div>
                                                                                    }
                                                                                }
                                                            }
                                                        </div>
                                                    </div>*@

                                                @if (Model != null)
                                                {
                                                    <div class="col-xs-12 col-sm-4">
                                                        <div class="form-group">
                                                            <label>Download PDF</label>

                                                            @if (!string.IsNullOrEmpty(Model.Pdf))
                                                            {
                                                                //string[] pdf = (Model.Pdf).Split(',');
                                                                <a id="btnPdf" class="btn btn-default insert-form-btn" href="@Url.Content("~/NCRPDF/"+@Model.Pdf)" role="button" download="@Url.Content("~/NCRPDF/" +@Model.Pdf)">
                                                                    <i class="fa fa-download">@Model.Pdf</i>
                                                                    @Html.HiddenFor(model => Model.Pdf)
                                                                </a>

                                                            }

                                                        </div>
                                                    </div>
                                                }




                                                <div class="row">
                                                    <div class="col-xs-12 col-sm-12">
                                                        <div class="form-group">
                                                            @*<button type="reset" class="btn btn-default insert-form-btn"> Reset </button>*@
                                                            <button type="submit" class="btn btn-default insert-form-btn"> Save </button>
                                                        </div>
                                                    </div>
                                                </div>
                                            </form>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>



@*Calender Control*@
<link rel="stylesheet" href="//code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css">
<script src="//code.jquery.com/jquery-1.10.2.js"></script>
<script src="//code.jquery.com/ui/1.11.4/jquery-ui.js"></script>

<script>
    $(function () {
        $(".Date").datepicker({
            dateFormat: 'dd/MM/yy',//check change
            changeMonth: true,
            changeYear: true,
            yearRange: "-100:+50"

        });
    });
</script>



<!--filepond-->
<!-- Load FilePond library -->
<script src="~/AllJsAndCss/js/filepond.js"></script>

<!-- Turn all file input elements into ponds -->
<script>
    FilePond.parse(document.body);
</script>
@*Custom Scripts*@
@*Binding Service Type Dropdownlist*@
<!--
@*<script>
    $(document).ready(function () {
        $("#ddlServiceType").change(function () {
            $("#ddlPedType").empty();
            $("#ddlOtherType").empty();
            $("#ddlEnergyType").empty();
            $("#ddlPedType").append('<option>--Select Ped Type--</option>');
            $("#ddlOtherType").append('<option>--Select Other Type--</option>');
            $("#ddlEnergyType").append('<option>--Select Energy Type--</option>');
            if ($("#ddlServiceType").val() != "--Select ServiceType--") {
                if ($("#ddlServiceType").val() == 200) {
                    $.ajax({
                        url: '@Url.Action("BindPedType", "EnquiryMaster")',
                        type: "POST",
                        dataType: "json",
                        data: JSON.stringify({ SubType: $("#ddlServiceType").val() }),
                        contentType: 'application/json',
                        success: function (Data) {
                            if (Data.ErrorMessage == "SystemSessionTimeOut") {
                                window.location = "../Login/UserLogin";
                            }
                            else {
                                $.each(Data, function (i, l) {
                                    $("#ddlPedType").append('<option value="' + l.Value + '">' +
                                         l.Text + '</option>');
                                });
                            }
                        },
                        error: function (ex) {
                            alert('Failed! ' + ex);
                        }
                    });
                }
                if ($("#ddlServiceType").val() == 300) {

                    $.ajax({
                        url: '@Url.Action("BindOtherType", "EnquiryMaster")',
                        type: "POST",
                        dataType: "json",
                        data: JSON.stringify({ OtherType: $("#ddlServiceType").val() }),
                        contentType: 'application/json',
                        success: function (Data) {
                            if (Data.ErrorMessage == "SystemSessionTimeOut") {
                                window.location = "../Login/UserLogin";
                            }
                            else {
                                $.each(Data, function (i, l) {
                                    $("#ddlOtherType").append('<option value="' + l.Value + '">' +
                                         l.Text + '</option>');
                                });
                            }
                        },
                        error: function (ex) {
                            alert('Failed! ' + ex);
                        }
                    });
                }
                if ($("#ddlServiceType").val() == 400) {

                    $.ajax({
                        url: '@Url.Action("BindEnergyType", "EnquiryMaster")',
                        type: "POST",
                        dataType: "json",
                        data: JSON.stringify({ EnergyType: $("#ddlServiceType").val() }),
                        contentType: 'application/json',
                        success: function (Data) {
                            if (Data.ErrorMessage == "SystemSessionTimeOut") {
                                window.location = "../Login/UserLogin";
                            }
                            else {
                                $.each(Data, function (i, l) {
                                    $("#ddlEnergyType").append('<option value="' + l.Value + '">' +
                                         l.Text + '</option>');
                                });
                            }
                        },
                        error: function (ex) {
                            alert('Failed! ' + ex);
                        }
                    });
                }
            }//First Bind Ped
        });
    });
</script>*@

    -->

<script>
    var SummaryExtension = false;
    var fileExtension = ["pdf", "PDF", "xls", "xlsx", "doc", "DOC", "docx", "DOCX", "png", "PNG", "jpg", "JPG", "JPEG", "gif"];
    $("#FileUpload").change(function (e) {
        debugger;
        var files = $("#FileUpload input[type='file']").get(0).files;
        for (var index = 0; index < files.length; index++)
        {
            var singleExtension = e.target.files[index].name.split('.').pop();
            var Condition = fileExtension.includes(singleExtension);
            if (Condition == true)
            {
                SummaryExtension = true;
            }
            else
            {
                alert("Only formats are allowed : " + fileExtension.join(','));
                SummaryExtension = false;
                return;
            }
        }
        if (SummaryExtension == true)
        {
            var fileData = new FormData();
            for (var i = 0; i < files.length; i++)
            {
                fileData.append("FileUpload input[type='file']", files[i]);
            }
            //Creating an XMLHttpRequest and sending
            var xhr = new XMLHttpRequest();
            var link = '@Url.Action("TemporaryFilePathDocumentAttachment", "NCR")';
            xhr.open('POST', link, 'true');
            xhr.send(fileData);
            xhr.onreadystatechange = function ()
            {
                if (xhr.readyState == 4 && xhr.status == 200)
                {
                    var data = xhr.responseText;
                    data = data.replace(/"/g, "");
                    $("#Attachment").val(data);
                }
            }
            //})
        }



    })
</script>
<script>
    $(document).ready(function () {
        $('.deleteItem').click(function (e) {
            debugger;
            e.preventDefault();
            var $ctrl = $(this);
            var EnquiryID = $("#EQ_ID").val();
            if (confirm('Do you really want to Delete this file?')) {
                $.ajax({
                    url: '@Url.Action("DeleteFile")',
                    type: 'POST',
                    data: { id: $(this).data('id'), EnquiryID: $("#EQ_ID").val() }
                }).done(function (data) {
                    if (data.Result == "OK") {
                        $ctrl.closest('li').remove();
                    }
                    else if (data.Result.Message) {
                        alert(data.Result.Message);
                    }
                }).fail(function () {
                    alert("Something went Wrong, Please try again!");
                })

            }
        });
    });

</script>
@*<script>
        var SummaryExtension = false;
        var fileExtension = ["pdf", "PDF", "xls", "xlsx", "doc", "DOC", "docx", "DOCX", "png", "PNG", "jpg", "JPEG", "gif"];
        $("#FileUpload").change(function (e) {
            debugger;
            var files = $("#FileUpload input[type='file']").get(0).files;
            for (var index = 0; index < files.length; index++) {
                var singleExtension = e.target.files[index].name.split('.').pop();
                var Condition = fileExtension.includes(singleExtension);
                if (Condition == true) {
                    SummaryExtension = true;
                }
                else {
                    alert("Only formats are allowed : " + fileExtension.join(','));
                    SummaryExtension = false;

                    return;
                }
            }
            if (SummaryExtension == true) {
                var fileData = new FormData();
                for (var i = 0; i < files.length; i++) {
                    fileData.append("FileUpload input[type='file']", files[i]);
                }
                //Creating an XMLHttpRequest and sending
                var xhr = new XMLHttpRequest();
                var link = '@Url.Action("TemporaryFilePathDocumentAttachment", "EnquiryMaster")';
                xhr.open('POST', link, 'true');
                xhr.send(fileData);
                xhr.onreadystatechange = function () {
                    if (xhr.readyState == 4 && xhr.status == 200) {
                        var data = xhr.responseText;
                        data = data.replace(/"/g, "");
                        $("#DocumentAttached").val(data);
                    }
                }
            }
        })
    </script>*@














