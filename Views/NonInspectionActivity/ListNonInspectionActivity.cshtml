
@model TuvVision.Models.NonInspectionActivity
@using NonFactors.Mvc.Grid;
@using System.Web.Mvc;


@helper CustomRenderingOfColumn(TuvVision.Models.NonInspectionActivity callmodel)
{
    if (callmodel.ActivityType == "Privilege Leave" || callmodel.ActivityType == "Sick Leave" || callmodel.ActivityType == "Casual Leave")
    {

    }
    else
    {
            <a href="@Url.Action("UpdateNonInspectionActivity", "NonInspectionActivity", new { id = callmodel.Id })" class="btn btn-info btn-xs" title="Edit"><i class="fa fa-pencil"></i></a>

            <a href="@Url.Action("Delete", "NonInspectionActivity", new { id = callmodel.Id })" class="delete" onclick="return confirm('Are you sure you wish to Delete selected Record?');" title="Delete"><i class="fa fa-trash"></i></a>
    

    }
}



@{
    ViewBag.Title = "ListNonInspectionActivity";
    Layout = "~/Views/Shared/_TuvVision.cshtml";
}
<link href="~/AllJsAndCss/css/MVCGridN.css" rel="stylesheet" />
@*calender control*@

<link rel="stylesheet" href="//code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css">
<script src="//code.jquery.com/jquery-1.10.2.js"></script>
<script src="//code.jquery.com/ui/1.11.4/jquery-ui.js"></script>




        @using (Html.BeginForm("ListNonInspectionActivity", "NonInspectionActivity", FormMethod.Post, new { enctype = "multipart/form-data", @id = "form1" }))
        {
            <div class="main-content3 xs-max-height">

                <!--Start of header-->
                <div class="container-fluid">
                    <div class="row assignfixedwidth rp-15">

                        <div class="col-xs-12">
                            <h3 class="dynamic-page-title dynamic-page-title-2  text-left">Non Inspection Activities</h3>
                            <button type="button" value="CreateRole" class="btn btn-info dynamic-function-btn dynamic-function-btn-2" style="margin-left: 16px" onclick="location.href='@Url.Action("NonInspectionActivity", "NonInspectionActivity")'">Add Non Inspection Activity</button>
                            <button type="button" value="ExportToExcel" class="btn btn-info dynamic-function-btn dynamic-function-btn-2" onclick="location.href='@Url.Action("ExportIndex","NonInspectionActivity")'"
                                    style="border:none;">
                                Export To Excel
                            </button>
                        </div><!-- /.col -->

                        <div class="col-xs-12">
                            <hr class="custom-hr">
                        </div><!-- /.col -->
                        <!--Table was here-->

                    </div>

                    <div class="row">
                        <div class="col-xs-4">
                            <div class="form-group">
                                <label>From Date:</label>
                                @Html.TextBoxFor(model => model.FromD, "{0:dd MMM yyyy}", htmlAttributes: new { placeholder = "Select Start Date", @class = "form-control form-control-custom FromD", autocomplete = "off" })
                                @Html.ValidationMessageFor(model => model.FromD, "", new { @class = "text-danger validation-msg" })
                            </div>
                        </div>


                        <div class="col-xs-4">
                            <div class="form-group">
                                <label>To Date:</label>
                                @Html.TextBoxFor(model => model.ToD, "{0:dd MMM yyyy}", htmlAttributes: new { placeholder = "Select To Date", @class = "form-control form-control-custom ToD", autocomplete = "off" })
                                @Html.ValidationMessageFor(model => model.ToD, "", new { @class = "text-danger validation-msg" })
                            </div>

                        </div>

                        <div class="col-xs-2">
                            <div class="form-group">
                                <label>Search:</label>
                                <input type="submit" value="Search" class="btn btn-primary form-control" />
                            </div>

                        </div>
                    </div>
                    @if (Convert.ToString(TempData["Error"]) != string.Empty)
                    {                        
                        <div class="col-xs-12">
                            @if (Convert.ToString(TempData["Error"]) != null && Convert.ToString(TempData["Error"]) != "")
                            {
                                <h5 style="color:red;font-weight:bold;">@Convert.ToString(TempData["Error"]).Replace("<br />", "\"<br/>\"")</h5>
                                @*<h5 style="color:red;font-weight:bold;">Testing <br/>purpose</h5>*@
                            }                            
                        </div>
                        TempData["Error"] = "";
                    }

                    @if (Convert.ToString(TempData["Success"]) != "")
                    {
                        
                        <div class="col-xs-12">

                            @{
                                if (Convert.ToString(TempData["Success"]) != null && Convert.ToString(TempData["Success"]) != "")
                                {
                                    <h4 style="color:green;font-weight:bold;">@Convert.ToString(TempData["Success"])</h4>
                                }
                            }
                        </div>
                                    TempData["Success"] = "";
                    }

                    @if (Convert.ToString(TempData["Failure"]) != "")
                    {
                        
                        <div class="col-xs-12">

                            @{
                                if (Convert.ToString(TempData["Failure"]) != null && Convert.ToString(TempData["Failure"]) != "")
                                {
                                    <h4 style="color:red;font-weight:bold;">@Convert.ToString(TempData["Failure"])</h4>
                                }
                            }
                        </div>
                                    TempData["Failure"] = "";
                    }

                               
                                <div class="col-xs-12">
                                    <table class="display dataTable no-footer" style="overflow-y:auto" id="gridMapping" onpageindexchanged="gridMapping_PageIndexChanged">
                                        <tr>
                                            <td>
                                                @(Html
                            .Grid(Model.NIADashBoard)
                            .Build(columns =>
                            {
                                columns.Add().Titled("Edit").RenderedAs(c => CustomRenderingOfColumn(c)).Sortable(true);
                                columns.Add(c => c.Id).Titled("ID");
                                columns.Add(c => c.ActivityType).Titled("Activity Type");
                                columns.Add(c => c.Location).Titled("Location");
                                columns.Add(c => c.DateSE).Titled("Date");

                                columns.Add(c => c.EndTime).Titled("Office Time/OffSite Time");
                                columns.Add(c => c.StartTime).Titled("Outdoor Time / OnSite Time");

                                columns.Add(c => c.TravelTime).Titled("Travel Time");
                                columns.Add(c => c.JobNumber).Titled("Job Number");
                                columns.Add(c => c.SAP_No).Titled("SAP Number");
                                columns.Add(c => c.ServiceCode).Titled("Service Code");
                                columns.Add(c => c.Description).Titled("Description");




                            })
                            .Pageable(pager =>
                            {
                                //pager.PageSizes = new DictionaryInt32, String > { { 0, "All" }, { 2, "2" }, { 4, "4" } };
                                pager.ShowPageSizes = true;
                                pager.PagesToDisplay = 3;
                                pager.CurrentPage = 1;
                                pager.RowsPerPage = 2;

                            })
                            .UsingFilterMode(GridFilterMode.Row)
                            .Empty("No Data Found")
                            .Filterable()
                            .Sortable()

                                                )
                                            </td>
                                        </tr>
                                    </table>

                                </div>

                            </div>

                        </div>
                                }




        @*Date Picker for From Date*@

        <script>
    $(function () {
        $(".FromD").datepicker({
            dateFormat: 'dd/mm/yy',//check change
            changeMonth: true,
            changeYear: true,
            yearRange: "-100:+50"
        });
    });
        </script>

        <script>
    $(function () {
        $(".ToD").datepicker({
            dateFormat: 'dd/mm/yy',//check change
            changeMonth: true,
            changeYear: true,
            yearRange: "-100:+50"
        });
    });
        </script>

        <script>
    var CustomTextFilter = (function (base) {
        MvcGridExtends(CustomTextFilter, base);

        function CustomTextFilter(column) {
            base.call(this, column);

            this.methods = ['contains'];
            column.grid.lang.custom = { contains: 'Contains' };
        }

        // Other extension points can be found at MvcGridFilter declaration

        return CustomTextFilter;
    })(MvcGridFilter);

    new MvcGrid(document.querySelector('.mvc-grid'), {
        filters: {
            'custom': CustomTextFilter
        }
    });
        </script>

