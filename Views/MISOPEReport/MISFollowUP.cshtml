@model TuvVision.Models.QuotationMaster
@using NonFactors.Mvc.Grid;
@using System.Web.Mvc;
@{
    ViewBag.Title = "MISFollowUP";
    Layout = "~/Views/Shared/_TuvVision.cshtml";
}

<link href="~/AllJsAndCss/css/MVCGridN.css" rel="stylesheet" />
<script type="text/javascript" language="javascript" src="~/AllJsAndCss/datatable/js/jquery.dataTables.js"></script>
<script type="text/javascript" language="javascript" src="~/AllJsAndCss/js/dataTables.buttons.min.js"></script>
<script type="text/javascript" language="javascript" src="~/AllJsAndCss/js/jszip.min.js"></script>
<script type="text/javascript" language="javascript" src="~/AllJsAndCss/js/buttons.html5.min.js"></script>
<script src="~/AllJsAndCss/js/datatable-custom2.js"></script>
@helper CustomRenderingOfReport1(TuvVision.Models.QuotationMaster Report)
{
    <a href="~/QuotationHtml/@Report.QuotationPDF" download="~/QuotationHtml/@Report.QuotationPDF" onclick="return confirm('Are you sure you want to download the quotation?')">
        @Report.QuotationNumber
    </a>
}
@helper Edit(TuvVision.Models.QuotationMaster Report)
{
    <a href="@Url.Action("Quotation", "QuotationMaster", new {PK_QM_ID = Report.PK_QTID })" title="Edit"><i class="fa fa-pencil"></i></a>
}


@using (Html.BeginForm())
{
    <div class="main-content3 xs-max-height">

        <!--Start of header-->
        <div class="container-fluid">
            <div class="row assignfixedwidth rp-15">

                <div class="col-xs-12">
                    <h3 class="dynamic-page-title dynamic-page-title-2  text-left">Quotation Follow Up</h3>
                    @*<a href="@Url.Action("Quotation","QuotationMaster")" class="btn btn-info dynamic-function-btn dynamic-function-btn-2"><i class="fa fa-plus-circle"></i> Add New Quotation</a>*@
                    <button type="button" value="ExportToExcel" class="btn btn-info dynamic-function-btn dynamic-function-btn-2" onclick="location.href='@Url.Action("ExportIndex_FollowUp","MISOPEReport")'">
                        Export To Excel
                    </button>

                </div><!-- /.col -->

                <div class="col-xs-12">
                    <hr class="custom-hr">
                </div><!-- /.col -->
                <!--Table was here-->

            </div><!-- /.row -->

            <div class="col-xs-12">
              

            </div><!-- /.data table col -->


            <div class="col-xs-12">
                <table class="display dataTable no-footer" style="overflow-y:auto" id="gridMapping">
                    <tr>
                        <td>
                            @(Html
                            .Grid(Model.lstQuotationMasterDashBoard1)
                            .Build(columns =>
                            {
                                //columns.Add(c => c.EnquiryNumber).Titled("Enquiry Reference No");
                                columns.Add().Titled("Edit").RenderedAs(c => Edit(c)).Sortable(true);
                                columns.Add(c => c.QuotationNumber).Titled("Quotation Number");
                                //columns.Add(c => c.QuotationNumber).Titled("Quotation Number");
                                columns.Add(c => c.InspectionLocation).Titled("Inspection Location");
                                columns.Add(c => c.StatusType).Titled("Status");
                                //columns.Add(c => c.ApprovalStatus).Titled("Approval Status");


                                columns.Add(c => c.CreatedBy).Titled("Created By");
                                columns.Add(c => c.CreatedDate).Titled("Created Date");
                                columns.Add(c => c.ProjectName).Titled("OBS Type");
                                columns.Add(c => c.PortfolioType).Titled("Service Portfolio Type");
                                columns.Add(c => c.SubServiceType).Titled("Service Type");
                                columns.Add(c => c.Followupddate).Titled("Followupdate");
                                columns.Add(c => c.Description).Titled("Followup Discription");
                                columns.Add(c => c.followcnt).Titled("Followup Number");

                            })
                            .Pageable(pager =>
                            {
                                //pager.PageSizes = new DictionaryInt32, String > { { 0, "All" }, { 2, "2" }, { 4, "4" } };
                                pager.ShowPageSizes = true;
                                pager.PagesToDisplay = 3;
                                pager.CurrentPage = 1;
                                pager.RowsPerPage = 2;
                            })
                            .UsingFilterMode(GridFilterMode.Row)
                            .Empty("No data found")
                            .Filterable()
                            .Sortable()

                            )


                        </td>
                    </tr>
                </table>


            </div>


        </div><!-- /.container-fluid -->
        <!--End of header-->

    </div>
  <!--End of main content 3-->
}




<script>
function myFunction() {
  alert("Already Revised");
}
</script>

<script>
           [].forEach.call(document.getElementsByClassName('mvc-grid'), function (element) {
               new MvcGrid(element);
           });
</script>
<script>
    var CustomTextFilter = (function (base) {
        debugger;
        MvcGridExtends(CustomTextFilter, base);

        function CustomTextFilter(column) {
            base.call(this, column);

            this.methods = ['contains'];
            column.grid.lang.custom = { contains: 'Contains' };
        }

        // Other extension points can be found at MvcGridFilter declaration

        return CustomTextFilter;
    })(MvcGridFilter);

    new MvcGrid(document.querySelector('.mvc-grid'), {
        filters: {
            'custom': CustomTextFilter
        }
    });
</script>