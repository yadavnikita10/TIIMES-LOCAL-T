@model TuvVision.Models.Internal_Audit_Report
@using NonFactors.Mvc.Grid;
@using System.Web.Mvc;


@helper CustomRenderingOfColumn1(TuvVision.Models.Internal_Audit_Report InternalAuditReport)
{
if (InternalAuditReport.NCDocument != "NA")
{
    string[] words = (InternalAuditReport.NCDocument).Split(',');
    for (int i = 0; i < words.Count(); i++)
    {
            <a id="btnAddToCart" class="btn btn-default insert-form-btn" href="@Url.Content("" + words[i])" role="button" download="@Url.Content("~/AuditReportNCDocument/" + words[i])">
                <i class="fa fa-download"></i>           @words[i]
            </a>
    }
}
else
{
        <a>
            NC Document Not Available
        </a>
}
}


@helper CustomRenderingOfEdit(TuvVision.Models.Internal_Audit_Report InternalAuditReport)
{


if (InternalAuditReport.Internal_Audit_Id > 0)
{
    //columns.Add().Titled("Prepare / Edit Report").Encoded(false).RenderedAs(o => Html.ActionLink(" ", "CreateInternal_Audit_Report", new { AuditId = o.Internal_Audit_Id, Edit = "Edit" }, new { @class = "fa fa-pencil", title = "Edit" }));
    <a href="@Url.Action("CreateInternal_Audit_Report", "Internal_Audit_Report", new { AuditId = InternalAuditReport.Internal_Audit_Id, Edit = "Edit" })" class="fa fa-pencil"></a>
}
else
{
    //  columns.Add().Titled("Prepare / Edit Report").Encoded(false).RenderedAs(o => Html.ActionLink(" ", "CreateInternal_Audit_Report", new { AuditId = o.AuditId, Edit = "" }, new { @class = "fa fa-pencil", title = "Edit" }));
    <a href="@Url.Action("CreateInternal_Audit_Report", "Internal_Audit_Report", new { AuditId = InternalAuditReport.AuditId, Edit = "" })" class="fa fa-pencil"></a>
}


}



@helper CustomRenderingOfPDF(TuvVision.Models.Internal_Audit_Report InternalAuditReport)
{


if (InternalAuditReport.PDF != null)
{
        <a href="~/IAR/@InternalAuditReport.PDF">
            <i class="fa fa-download">@InternalAuditReport.PDF</i>

        </a>
        @*<a href="/@InternalAuditReport.PDF">
            <i class="fa fa-download">@InternalAuditReport.PDF</i>

        </a>*@
}
else
{
        <a>
            
        </a>

}


}




@{
    ViewBag.Title = "AuditreportDashBoard";
    Layout = "~/Views/Shared/_TuvVision.cshtml";
}

<link href="~/AllJsAndCss/css/MVCGridN.css" rel="stylesheet" />
@*<script type="text/javascript" language="javascript" src="~/AllJsAndCss/datatable/js/jquery.dataTables.js"></script>*@

<!--export to excel-->
@*<script type="text/javascript" language="javascript" src="~/AllJsAndCss/js/dataTables.buttons.min.js"></script>
    <script type="text/javascript" language="javascript" src="~/AllJsAndCss/js/jszip.min.js"></script>
    <script type="text/javascript" language="javascript" src="~/AllJsAndCss/js/buttons.html5.min.js"></script>
    <script src="~/AllJsAndCss/js/datatable-custom2.js"></script>*@


@*<h2>AuditreportDashBoard</h2>*@
@using (Html.BeginForm("AuditreportDashBoard", "Internal_Audit_Report", FormMethod.Post, new { enctype = "multipart/form-data", @id = "form1" }))
            {
    <div class="main-content3 xs-max-height">


        <div class="container-fluid">
            <div class="row assignfixedwidth rp-15">

                <div class="col-xs-12">
                    <h3 class="dynamic-page-title dynamic-page-title-2  text-left">Audit Report</h3>
                    @*<a href="@Url.Action("CreateInternal_Audit_Report", "Internal_Audit_Report")" class="btn btn-info dynamic-function-btn dynamic-function-btn-2"><i class="fa fa-plus-circle"></i> Add Internal Audit Report</a>*@
                    <button type="button" value="ExportToExcel" class="btn btn-info dynamic-function-btn dynamic-function-btn-2" onclick="location.href='@Url.Action("ExportIndex","Internal_Audit_Report")'">
                        Export To Excel
                    </button>
                </div><!-- /.col -->

                <div class="col-xs-12">
                    <hr class="custom-hr">
                </div><!-- /.col -->


            </div>
            <div class="col-xs-12">
                @*<table id="example" class="display" cellspacing="0" width="100%">
                                        <thead>
                                            <tr>
                                                <th>Action</th>
                                                <th>Branch</th>
                                                <th>Plan Ref Serial No.</th>
                                                <th>Auditor</th>
                                                <th>Date of Audit</th>
                                                <th>Auditee</th>
                                                <th>Department</th>
                                                <th>Total NCR's Raised</th>
                                                <th>PDF</th>
                                                <th>NC Document</th>
                                                <th>Supporting Document</th>
                                                <th>Is Audit Completed</th>
                                                <th>Are Findings Close</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                        @foreach (var item in ViewData["dashboardreport"] as IEnumerable<TuvVision.Models.Internal_Audit_Report>)
                        {
                            <tr>
                                <td style="width:125px;">
                                    <a href="@Url.Action("CreateInternal_Audit_Report", "Internal_Audit_Report", new { @AuditId = item.AuditId })" title="Edit"><span class="fa fa-pencil"></span>&nbsp;</a>
                                    <a href="@Url.Action("Delete", "Internal_Audit_Report", new { @id = item.Internal_Audit_Id })" class="btn btn-danger btn-custom" onclick="return confirm('Are you sure you want to Delete this Record?')"><span class="fa fa-trash-o"></span>&nbsp;</a>
                                    </td>
                                <td>@item.Branch</td>
                                <td>@item.Plan_ref_No</td>
                                <td>@item.Auditor</td>
                                <td>@item.Date_Of_Audit</td>
                                <td>@item.Auditee</td>
                                <td>@item.Department</td>
                                <td>@item.Total_NCR_raised</td>
                                <td>
                                    @if (item.PDF != null)
                                    {
                                        <a href="~/IAR/@item.PDF">
                                            <i class="fa fa-download">@item.PDF</i>

                                        </a>
                                    }
                                    else
                                    {
                                        <a>

                                            PDF Not Available
                                        </a>
                                    }
                                </td>
                                <td>


                                            @if (item.NCDocument != "NA")
                                            {

                                                <a id="btnPdf" class="btn btn-default insert-form-btn" href="@Url.Content("~/" + @item.NCDocument)" role="button" download="@Url.Content("~/" + @item.NCDocument)">
                                                    <i class="fa fa-download">@item.NCDocument</i>
                                                    @Html.HiddenFor(model => item.NCDocument)
                                                </a>

                                            }
                                            else
                                            {
                                                <a>
                                                    NC Document Not Available
                                                </a>
                                            }





                                </td>
                                <td>


                    @if (item.SupportingDocument != "NA")
                    {

                        <a id="btnPdf" class="btn btn-default insert-form-btn" href="@Url.Content("~/" + @item.SupportingDocument)" role="button" download="@Url.Content("~/" + @item.SupportingDocument)">
                            <i class="fa fa-download">@item.SupportingDocument</i>
                            @Html.HiddenFor(model => item.SupportingDocument)
                        </a>

                    }
                    else
                    {
                        <a>

                            Supporting Document Not Available
                        </a>
                    }



                                </td>
                                <td>@item.IsAuditCompleted</td>

                                <td>@item.AreFindingsClose</td>
                                </tr>

                        }
                        </tbody>
                                    </table>*@
            </div>

            <div class="col-xs-12">
                <table class="display dataTable no-footer" style="overflow-y:auto" id="gridMapping">
                    <tr>
                        <td>
                            @(Html
                    .Grid(Model.lstReport1)
                    .Build(columns =>
                    {
                        //if (Model.Internal_Audit_Id > 0)
                        //{
                        //    columns.Add().Titled("Prepare / Edit Report").Encoded(false).RenderedAs(o => Html.ActionLink(" ", "CreateInternal_Audit_Report", new { AuditId = o.Internal_Audit_Id, Edit = "Edit" }, new { @class = "fa fa-pencil", title = "Edit" }));
                        //}
                        //else
                        //{
                        //    columns.Add().Titled("Prepare / Edit Report").Encoded(false).RenderedAs(o => Html.ActionLink(" ", "CreateInternal_Audit_Report", new { AuditId = o.AuditId, Edit = "" }, new { @class = "fa fa-pencil", title = "Edit" }));
                        //}
                        columns.Add(c => c.Internal_Audit_Id).Titled("Prepare / Edit Report").RenderedAs(c => CustomRenderingOfEdit(c)).Sortable(true);

                        //columns.Add().Titled("Delete").Encoded(false).RenderedAs(o => Html.ActionLink(" ", "Delete", new { id = o.Internal_Audit_Id }, new { @class = "fa fa-trash-o", title = "Delete", onclick = "return confirm('Are you sure you wish to delete ?');" }));


                        columns.Add(c => c.Plan_ref_No).Titled("Plan Ref Serial No.");
                        columns.Add(c => c.Branch).Titled("Branch");
                        columns.Add(c => c.Auditor).Titled("Auditor Name");
                        columns.Add(c => c.ExAuditor).Titled("External Auditor Name");
                        columns.Add(c => c.Auditee).Titled("Auditees");



                        //columns.Add(c => c.Date_Of_Audit.ToString("dd-MM-yyyy")).Titled("Date of Audit").Filterable(true);
                        //columns.Add(c => c.SDate_Of_Audit).Titled("Date of Audit").Filterable(true);
                        columns.Add(c => c.ProposeDateFrom).Titled("Proposed Date of Audit (From Date)").Filterable(true);
                        columns.Add(c => c.ProposeDateTo).Titled("Proposed Date of Audit (To Date)").Filterable(true);
                        //columns.Add(c => c.ActualAuditDateFrom).Titled("Date of Audit (From Date)").Filterable(true);
                        //columns.Add(c => c.ActualAuditDateTo).Titled("Date of Audit (To Date)").Filterable(true);
                        columns.Add(c => c.ActualAuditDateTo).Titled("Audit Date(s)").Filterable(true); //added by nikita on 13092023

                        columns.Add(c => c.Department).Titled("Process audited");
                        columns.Add(c => c.Total_NCR_raised).Titled("Total Findings");
                        //if (Model.PDF != null)
                        //{
                        //    columns.Add().Titled("Report").Encoded(false).RenderedAs(o => Html.ActionLink(o.PDF, "DownloadPDF", new { PDF = o.PDF })).Css("aa");

                        //}
                        //else
                        //{
                        //    columns.Add().Titled("Report");
                        //}
                        columns.Add().Titled("PDF").RenderedAs(c => CustomRenderingOfPDF(c)).Sortable(true);





                        //  columns.Add().Titled("NC Document").Encoded(false).RenderedAs(o => Html.ActionLink(o.NCDocument, "NCDocument", new { NCDocument = o.NCDocument }));





                        //columns.Add().Titled("Supporting Document").Encoded(false).RenderedAs(o => Html.ActionLink(o.SupportingDocument, "SupportingDocument", new { SupportingDocument = o.SupportingDocument }));
                        columns.Add(c => c.IsAuditCompleted).Titled("Is Audit Completed");
                        //columns.Add(c => c.IsAuditCompleted).Titled("Is Audit Completed");
                        columns.Add(c => c.AreFindingsClose).Titled("Are Findings Close");
                        columns.Add(c => c.NCDocument).Titled("NC Document").RenderedAs(c => CustomRenderingOfColumn1(c)).Sortable(true);


                    })
                            .Pageable(pager =>
                            {
                                //pager.PageSizes = new DictionaryInt32, String > { { 0, "All" }, { 2, "2" }, { 4, "4" } };
                                pager.ShowPageSizes = true;
                                pager.PagesToDisplay = 3;
                                pager.CurrentPage = 1;
                                pager.RowsPerPage = 2;
                            })
                            .UsingFilterMode(GridFilterMode.Row)
                            .Empty("No data found")
                            .Filterable()
                            .Sortable()

                            )


                        </td>
                    </tr>
                </table>

            </div>


        </div>
    </div>
}

<script>
    [].forEach.call(document.getElementsByClassName('mvc-grid'), function (element) {
        new MvcGrid(element);
    });
</script>

