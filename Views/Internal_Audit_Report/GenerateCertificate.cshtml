@model List<TuvVision.Models.GenerateCertificate>

@using NonFactors.Mvc.Grid;
@using System.Web.Mvc;

@{
    ViewBag.Title = "Generate Certificate";
    Layout = "~/Views/Shared/_TuvVision.cshtml";
}

<link href="~/AllJsAndCss/css/MVCGridN.css" rel="stylesheet" />
@using (Html.BeginForm("GenerateCertificate", "Internal_Audit_Report", FormMethod.Post, new { enctype = "multipart/form-data", @id = "form1" }))
{
    <div class="main-content3 xs-max-height">
        <div class="container-fluid">
            <div class="row assignfixedwidth rp-15">
                <div class="col-xs-6">
                    <h3 class="dynamic-page-title dynamic-page-title-2  text-left">Employee Certification</h3>
                   
                </div>
                <div class="col-xs-6 text-right">
                    <button id="downloadButton" class="btn btn-primary">Download</button>
                </div>
                <div class="col-xs-12">
                    <hr class="custom-hr">
                </div>
            </div>

            <div class="col-xs-12">
                <table class="display dataTable no-footer" style="overflow-y:auto" id="gridMapping">
                    <tr>
                        <td>
                    @(Html.Grid(Model)

.Build(columns =>
{

    columns.Add().Titled("").Encoded(false).RenderedAs(c =>
    {
        if (c.YesEye == "Yes")
        {
            return $"<input type='checkbox' class='row-checkbox' data-id='{c.RollNo}' />";
        }
        else
        {
            return "";
        }
    });
    // columns.Add().Titled("").Encoded(false).RenderedAs(c => { return $"<input type='checkbox' class='row-checkbox' data-id='{c.RollNo}' />"; });
    columns.Add(c => c.Name).Titled("Name");
    columns.Add(c => c.EmpCode).Titled("Employee Code");
    columns.Add(c => c.Branch).Titled("Branch");
    columns.Add(c => c.RollNo).Titled("Roll No");
    columns.Add(c => c.DateofJoining).Titled("Date of Joining");
    columns.Add().Titled("Magnetic Testing").Encoded(false).RenderedAs(c =>
    {
        // First, check if the column value is 'yes'

        if (c.MTCERT == "Yes")
        {

            c.MTimg = "Valid";
        }
        else if (c.MTCERT == "No")
        {
            c.MTimg = "-";
        }
        else
        {
            c.MTimg = "-";
        }






        // If the column value is not 'yes', return 'no'
        return c.MTimg;
    });

    columns.Add().Titled("Penetrante Testing").Encoded(false).RenderedAs(c =>
    {
        // First, check if the column value is 'yes'

        if (c.PTCERT == "Yes")
        {

            c.PTimg = "Valid";
        }
        else if (c.PTCERT == "No")
        {
            c.PTimg = "-";
        }
        else
        {
            c.PTimg = "-";
        }






        // If the column value is not 'yes', return 'no'
        return c.PTimg;
    });
    columns.Add().Titled("Visual Testing").Encoded(false).RenderedAs(c =>
    {

        if (c.VTCERT == "Yes")
        {

            c.VTimg = "Valid";
        }
        else if (c.VTCERT == "No")
        {
            c.VTimg = "-";
        }
        else
        {
            c.VTimg = "-";
        }



        // If the column value is not 'yes', return 'no'
        return c.VTimg;
    });
    columns.Add().Titled("Ultrasonic Testing").Encoded(false).RenderedAs(c =>
    {

        if (c.UTCERT == "Yes")
        {

            c.UTimg = "Valid";
        }
        else if (c.UTCERT == "No")
        {
            c.UTimg = "-";
        }
        else
        {
            c.UTimg = "-";
        }






        // If the column value is not 'yes', return 'no'
        return c.UTimg;
    });
    columns.Add().Titled("Radiographic Testing").Encoded(false).RenderedAs(c =>
    {

        if (c.RTCERT == "Yes")
        {

            c.RTimg = "Valid";
        }
        else if (c.RTCERT == "No")
        {
            c.RTimg = "-";
        }
        else
        {
            c.RTimg = "-";
        }

        // If the column value is not 'yes', return 'no'
        return c.RTimg;
    });
    columns.Add().Titled("Eye Test").Encoded(false).RenderedAs(c =>
    {
        // First, check if the column value is 'yes'
        if (c.EyeTest == "Yes")
        {
            if (c.YesEye == "Yes")
            {
                c.EyeTestCol = "Verified";
            }
            else if (c.YesEye == "No")
            {
                c.EyeTestCol = "Not Verified";
            }
            else
            {
                c.EyeTestCol = "-";
            }

        }


        // If the column value is not 'yes', return 'no'
        return c.EyeTestCol;
    });

})
                            .Pageable(pager =>
                            {
                                //pager.PageSizes = new DictionaryInt32, String > { { 0, "All" }, { 2, "2" }, { 4, "4" } };
                                pager.ShowPageSizes = true;
                                pager.PagesToDisplay = 3;
                                pager.CurrentPage = 1;
                                pager.RowsPerPage = 2;
                            })
                            .UsingFilterMode(GridFilterMode.Row)
                            .Empty("No data found")
                            .Filterable()
                            .Sortable()


                            )
                        </td>
                    </tr>


                </table>
            </div>
        </div>
    </div>
}

<script>
    [].forEach.call(document.getElementsByClassName('mvc-grid'), function (element) {
        new MvcGrid(element);
    });
</script>
<script>
   // $(document).ready(function () {
        // Handle 'Download' Button Click
    $('#downloadButton').on('click', function () {

        event.preventDefault();
            var selectedIds = [];

            // Collect IDs of selected checkboxes
            $('.row-checkbox:checked').each(function () {
                selectedIds.push($(this).data('id'));
            });

            // If no checkboxes are selected, show an alert
            if (selectedIds.length === 0) {
                alert('Please select at least one certificate.');
                return;
            }



            // Make an AJAX call to download certificates for selected IDs
            $.ajax({
                url: '/Internal_Audit_Report/DownloadCertificates',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ ids: selectedIds }),
                success: function (response) {
                    response.forEach(function (imageUrl) {
                        const link = document.createElement('a');
                        link.href = imageUrl;
                        link.download = 'Certificate.pdf';
                        document.body.appendChild(link);
                        link.click();
                        document.body.removeChild(link);

                    });
                    $('.row-checkbox:checked').prop('checked', false);
                },
                error: function () {
                    alert('An error occurred while downloading the certificates.');
                }
            });
        });
   // });
</script>
