
@model TuvVision.Models.UserRoles
@{
    ViewBag.Title = "UsersRole";
    Layout = "~/Views/Shared/_TuvVision.cshtml";
}

<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.js"></script>
@{
    var SelectedMenu = ViewBag.SelectedMainMenu as List<int>;
    var SelectedSubMenu = ViewBag.SelectedSubMenu as List<int>;
    var SelectedSubMenuChild = ViewBag.SelectedSubMenuChild as List<int>;
    var IsSubMenuChildPresent = 0;
}
@*<div class="">
        <div class="page-title">
            <div class="title_left">
                <h3>
                    Add Update Department
                </h3>
            </div>
        </div>

        <div class="clearfix"></div>
        <div class="row">
            <div class="col-md-12 col-sm-12 col-xs-12">
                <div class="x_panel">
                    <div class="x_title">
                        <ul class="nav navbar-right panel_toolbox">
                            <li>
                                <h2>
                                    <a href="@Url.Action("ViewDepartments", "IUserManagement")" class="btn btn-dark">Back To Previous Page</a>
                                </h2>
                            </li>
                        </ul>
                        <div class="clearfix"></div>
                    </div>
                    <div class="x_content">
                        @using (Html.BeginForm("Department", "IUserManagement", FormMethod.Post, new { @class = "form-horizontal form-label-left", role = "form", @novalidate = "novalidate", @enctype = "multipart/form-data", @autocomplete = "off" }))
                        {
                            @Html.AntiForgeryToken()
                            <div class="item form-group">
                                <label class="control-label col-md-3 col-sm-3 col-xs-12" for="name">
                                    Name <span class="required">*</span>
                                </label>
                                <div class="col-md-6 col-sm-6 col-xs-12">
                                        @Html.TextBoxFor(m => m.Name, new { @class = "form-control col-md-7 col-xs-12" })
                                        @Html.ValidationMessageFor(m => m.Name, "", new { @class = "text-danger" })
                                    </div>
                            </div>
                            <div class="item form-group">
                                <label class="control-label col-md-3 col-sm-3 col-xs-12">
                                    Menu <span class="required">*</span>
                                </label>
                                <div class="col-md-6 col-sm-6 col-xs-12" style="padding-top: 10px;">
                                    @{
                                        for (int i = 0; i < Model.lstMenuList.Count; i++)
                                        {
                                            var MainMenuId = Model.lstMenuList[i].Id;
                                            if (SelectedMenu != null)
                                            {
                                                bool isInMainMenuList = SelectedMenu.Contains(MainMenuId);
                                                if (isInMainMenuList == true)
                                                {
                                                    Model.lstMenuList[i].IsChecked = true;
                                                }
                                            }
                                            @Html.CheckBoxFor(m => m.lstMenuList[i].IsChecked, new { @id = "MainMenu" + MainMenuId, onclick = string.Format("GetMainMenu({0})", MainMenuId) })
                                            @Html.DisplayFor(m => Model.lstMenuList[i].Name)
                                            @Html.HiddenFor(s => s.lstMenuList[i].Id)
                                            @Html.HiddenFor(s => s.lstMenuList[i].Name)<br />
                                            <div class="form-group" id=@("divSubMenu"+MainMenuId)>
                                                <div class="col-md-offset-1">
                                                    @for (int j = 0; j < Model.lstMenuList[i].SubMenuList.Count; j++)
                                                    {
                                                        var SubMenuId = Model.lstMenuList[i].SubMenuList[j].Id;
                                                        if (SelectedSubMenu != null)
                                                        {
                                                            bool isInSubMenuList = SelectedSubMenu.Contains(SubMenuId);
                                                            if (isInSubMenuList == true)
                                                            {
                                                                Model.lstMenuList[i].SubMenuList[j].IsChecked = true;
                                                            }
                                                        }
                                                        @Html.CheckBoxFor(m => Model.lstMenuList[i].SubMenuList[j].IsChecked, new { @id = "SubMenu" + SubMenuId, @class = "clsSubMenu" + MainMenuId, onchange = string.Format("GetSubMenu({0},{1})", SubMenuId, MainMenuId) })
                                                        @Html.DisplayFor(m => Model.lstMenuList[i].SubMenuList[j].Name)
                                                        @Html.HiddenFor(m => Model.lstMenuList[i].SubMenuList[j].Id)
                                                        @Html.HiddenFor(m => Model.lstMenuList[i].SubMenuList[j].Name) <br />
                                                        <div class="form-group" id=@("ChildMenu"+SubMenuId)>
                                                            <div class="col-md-offset-1">
                                                                @for (int k = 0; k < Model.lstMenuList[i].SubMenuList[j].ChildMenuList.Count; k++)
                                                                {
                                                                    IsSubMenuChildPresent = 1;
                                                                    var ChildId = Model.lstMenuList[i].SubMenuList[j].ChildMenuList[k].Id;
                                                                    if (SelectedSubMenuChild != null)
                                                                    {
                                                                        bool isInSubMenuChildList = SelectedSubMenuChild.Contains(ChildId);
                                                                        if (isInSubMenuChildList == true)
                                                                        {
                                                                            Model.lstMenuList[i].SubMenuList[j].ChildMenuList[k].IsChecked = true;
                                                                        }
                                                                    }
                                                                    @Html.CheckBoxFor(m => Model.lstMenuList[i].SubMenuList[j].ChildMenuList[k].IsChecked, new { @class = "clsChildMenu" + SubMenuId, onchange = string.Format("GetSubMenuChild({0},{1})", SubMenuId, MainMenuId) })
                                                                    @Html.DisplayFor(m => Model.lstMenuList[i].SubMenuList[j].ChildMenuList[k].Child)
                                                                    @Html.HiddenFor(m => Model.lstMenuList[i].SubMenuList[j].ChildMenuList[k].Id)
                                                                    @Html.HiddenFor(m => Model.lstMenuList[i].SubMenuList[j].ChildMenuList[k].Child) <br />
                                                                }
                                                            </div>
                                                        </div>
                                                    }
                                                </div>
                                            </div>
                                        }
                                    }
                                </div>
                            </div>
                            @Html.HiddenFor(m => m.Pk_Id)
                                @Html.HiddenFor(m => m.Created_By)
                                @Html.HiddenFor(m => m.Created_On)
                                @Html.HiddenFor(m => m.Pk_RightId)
                                        <div class="ln_solid"></div>
                                        <div class="form-group">
                                            <div class="col-md-6 col-md-offset-3">
                                                <button id="send" type="submit" class="btn btn-success">Submit</button>
                                                <a href="@Url.Action("ViewDepartments", "IUserManagement")" class="btn btn-primary">Cancel</a>
                                            </div>
                                        </div>
                                        }
                    </div>
                </div>
            </div>
        </div>
    </div>*@


@using (Html.BeginForm("UsersRole", "UserRole", FormMethod.Post, new { @enctype = "multipart/form-data", @autocomplete = "off", @id = "form" }))
{
    @Html.AntiForgeryToken()

    <div class="grey-bg-f3">

        <!--Start of header-->
        <div class="container-fluid">
            <div class="row assignfixedwidth rp-5">

                <div class="col-xs-12 form-col">
                    <div class="row">

                        <div class="col-xs-12 text-right">
                            <a href="@Url.Action("RoleDashBoard", "UserRole")" class="btn btn-info dynamic-function-btn"><i class="fa fa-long-arrow-left"></i> Go Back</a>
                        </div>

                        <div class="col-xs-12">
                            <div class="white-bg section-box-shadow">
                                <h3 class="form-page-title">Role Registration</h3>
                                @Html.HiddenFor(model => model.UserRoleID)
                                <div class="row">
                                    <div class="col-xs-12 col-sm-offset-1 col-sm-10">
                                        <div class="form-box">
                                            <form>
                                                <div class="col-xs-12 col-sm-6">
                                                    <div class="form-group">
                                                        <label>Role Name:</label>
                                                        <span class="text-danger">*</span>
                                                        @Html.TextBoxFor(model => model.RoleName, new { placeholder = "Role Name Here", @class = "form-control" })
                                                        @Html.ValidationMessageFor(m => m.RoleName, "", new { @class = "text-danger" })
                                                     </div>
                                                </div>
                                                <div class="col-xs-12 col-sm-6">
                                                    <div class="form-group">
                                                        <label>Description:</label>
                                                        @Html.TextBoxFor(model => model.Description, new { placeholder = "Type Description Here...", @class = "form-control" })
                                                        @*@Html.TextAreaFor(model => model.Description, new { placeholder = "Type description here...", @class = "form-control", @rows = "1" })*@
                                                    </div>
                                                </div>
                                                <div class="col-xs-12">
                                                    <div class="form-group">
                                                        <label>Menu Rights:</label>
                                                        <div class="row">
                                                            <div class="col-md-6 col-sm-6 col-xs-12" style="padding-top: 10px;">
                                                                @{
                                                                    if (Model != null)
                                                                    {
                                                                        for (int i = 0; i < Model.lstMenuList.Count; i++)
                                                                        {
                                                                            var MainMenuId = Model.lstMenuList[i].Id;
                                                                            if (SelectedMenu != null)
                                                                            {
                                                                                bool isInMainMenuList = SelectedMenu.Contains(MainMenuId);
                                                                                if (isInMainMenuList == true)
                                                                                {
                                                                                    Model.lstMenuList[i].IsChecked = true;
                                                                                }
                                                                            }
                                                                            @Html.CheckBoxFor(m => m.lstMenuList[i].IsChecked, new { @id = "MainMenu" + MainMenuId, onclick = string.Format("GetMainMenu({0})", MainMenuId) })
                                                                            @Html.DisplayFor(m => Model.lstMenuList[i].Name)
                                                                            @Html.HiddenFor(s => s.lstMenuList[i].Id)
                                                                            @Html.HiddenFor(s => s.lstMenuList[i].Name)<br />
                                                                            <div class="form-group" id=@("divSubMenu" + MainMenuId)>
                                                                                <div class="col-md-offset-1">
                                                                                    @for (int j = 0; j < Model.lstMenuList[i].SubMenuList.Count; j++)
                                                                                    {
                                                                                        var SubMenuId = Model.lstMenuList[i].SubMenuList[j].Id;
                                                                                        if (SelectedSubMenu != null)
                                                                                        {
                                                                                            bool isInSubMenuList = SelectedSubMenu.Contains(SubMenuId);
                                                                                            if (isInSubMenuList == true)
                                                                                            {
                                                                                                Model.lstMenuList[i].SubMenuList[j].IsChecked = true;
                                                                                            }
                                                                                        }
                                                                                        @Html.CheckBoxFor(m => Model.lstMenuList[i].SubMenuList[j].IsChecked, new { @id = "SubMenu" + SubMenuId, @class = "clsSubMenu" + MainMenuId, onchange = string.Format("GetSubMenu({0},{1})", SubMenuId, MainMenuId) })
                                                                                        @Html.DisplayFor(m => Model.lstMenuList[i].SubMenuList[j].Name)
                                                                                        @Html.HiddenFor(m => Model.lstMenuList[i].SubMenuList[j].Id)
                                                                                        @Html.HiddenFor(m => Model.lstMenuList[i].SubMenuList[j].Name) <br />
                                                                                        <div class="form-group" id=@("ChildMenu" + SubMenuId)>
                                                                                            <div class="col-md-offset-1">
                                                                                                @for (int k = 0; k < Model.lstMenuList[i].SubMenuList[j].ChildMenuList.Count; k++)
                                                                                                {
                                                                                                    IsSubMenuChildPresent = 1;
                                                                                                    var ChildId = Model.lstMenuList[i].SubMenuList[j].ChildMenuList[k].Id;
                                                                                                    if (SelectedSubMenuChild != null)
                                                                                                    {
                                                                                                        bool isInSubMenuChildList = SelectedSubMenuChild.Contains(ChildId);
                                                                                                        if (isInSubMenuChildList == true)
                                                                                                        {
                                                                                                            Model.lstMenuList[i].SubMenuList[j].ChildMenuList[k].IsChecked = true;
                                                                                                        }
                                                                                                    }
                                                                                                    @Html.CheckBoxFor(m => Model.lstMenuList[i].SubMenuList[j].ChildMenuList[k].IsChecked, new { @class = "clsChildMenu" + SubMenuId, onchange = string.Format("GetSubMenuChild({0},{1})", SubMenuId, MainMenuId) })
                                                                                                    @Html.DisplayFor(m => Model.lstMenuList[i].SubMenuList[j].ChildMenuList[k].Child)
                                                                                                    @Html.HiddenFor(m => Model.lstMenuList[i].SubMenuList[j].ChildMenuList[k].Id)
                                                                                                    @Html.HiddenFor(m => Model.lstMenuList[i].SubMenuList[j].ChildMenuList[k].Child) <br />
                                                                                                }
                                                                                            </div>
                                                                                        </div>
                                                                                    }
                                                                                </div>
                                                                            </div>
                                                                        }
                                                                    }
                                                                }
                                                            </div>

                                                        </div>

                                                    </div>
                                                </div>


                                                <div class="col-xs-12 text-center">
                                                    @*<button type="button" class="btn btn-default news-btn" id="btnReset" value="Reset" title="Reset">Reset</button>*@
                                                    <input type="submit" value="Submit" class="btn btn-default insert-form-btn" id="btnGroups" />
                                                </div>
                                            </form>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div><!-- /.col -->

                    </div><!-- /.row -->
                </div><!-- /.col -->

            </div><!-- /.row -->
        </div><!-- /.container-fluid -->
        <!--End of header-->

    </div>
                                                                        //EndContext of Ashwini's design


                                                                        //MyCode start here
                                                                        //MyCode Ends here

                                                                    }


@****************************************************Live Data****************@
<script>
    function GetMainMenu(Id, ParentId) {
        debugger;
        if ($('#MainMenu' + Id).is(":checked")) {
            $('#divSubMenu' + Id).find(":checkbox").each(function () {
                debugger;
                $(this).prop('checked', true);
            });
        }
        else {
            $('#divSubMenu' + Id).find(":checkbox").each(function () {
                debugger;
                $(this).prop('checked', false);
            });
        }
    }
    function GetSubMenu(Id, ParentId) {
        debugger;
        if ($('#SubMenu' + Id).is(":checked") == true) {
            $('#MainMenu' + ParentId).prop('checked', true);
            $('#ChildMenu' + Id).find(":checkbox").each(function () {
                debugger;
                $(this).prop('checked', true);
            });
        }
        else {
            var IsSubMenuChecked = false
            $('.clsSubMenu' + ParentId + ':checkbox').each(function () {
                debugger;
                if ($(this).is(':checked') == true) {
                    IsSubMenuChecked = true
                }
            });
            $('#ChildMenu' + Id).find(":checkbox").each(function () {
                debugger;
                $(this).prop('checked', false);
            });
            if (IsSubMenuChecked == false) {
                $("#MainMenu" + ParentId).prop('checked', false);
            }
        }
    }
    function GetSubMenuChild(SubMenuId, ParentId) {
        var IsChildMenuChecked = false;
        $('.clsChildMenu' + SubMenuId + ':checkbox').each(function () {
            if ($(this).is(':checked') == true) {
                $('#SubMenu' + SubMenuId).prop('checked', true);
                $('#MainMenu' + ParentId).prop('checked', true);
                IsChildMenuChecked = true;
            }
        });
        if (IsChildMenuChecked == false) {
            $('#SubMenu' + SubMenuId).prop('checked', false);
            GetSubMenu(SubMenuId, ParentId)
        }
    }
</script>