@model TuvVision.Models.monitors
@using NonFactors.Mvc.Grid;
@using System.Web.Mvc;

@{
    ViewBag.Title = "MonitoringList";
    Layout = "~/Views/Shared/_TuvVision.cshtml";
}


@*<script type="text/javascript" language="javascript" src="~/AllJsAndCss/datatable/js/jquery.dataTables.js"></script>*@



@helper CustomRenderingOfColumn1(TuvVision.Models.monitors monitor)
{
    
        //<span class="btn btn-secondary" data-toggle="tooltip" data-placement="right" @monitor.Q2</span>
        <span class="tooltip-container" data-toggle="tooltip" data-placement="top" title="@monitor.Q2"> <img src="~/View1.png" /></span>
}

@helper CustomRenderingOfColumn2(TuvVision.Models.monitors monitor)
{

//<span class="btn btn-secondary" data-toggle="tooltip" data-placement="right" @monitor.Q2</span>
    <span class="tooltip-container" data-toggle="tooltip" data-placement="top" title="@monitor.Q4"><img src="~/View1.png" /></span>
}
@helper CustomRenderingOfColumn3(TuvVision.Models.monitors monitor)
{

//<span class="btn btn-secondary" data-toggle="tooltip" data-placement="right" @monitor.Q2</span>
    <span class="tooltip-container" data-toggle="tooltip" data-placement="top" title="@monitor.InspectorComment"><img src="~/View1.png" /></span>
}
@helper CustomRenderingOfColumn4(TuvVision.Models.monitors monitor)
{

//<span class="btn btn-secondary" data-toggle="tooltip" data-placement="right" @monitor.Q2</span>
    <span class="tooltip-container" data-toggle="tooltip" data-placement="top" title="@monitor.Reporting_manager_comments"><img src="~/View1.png" /></span>
}

<link href="~/AllJsAndCss/css/MVCGridN.css" rel="stylesheet" />
@*calender control*@

<link rel="stylesheet" href="//code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css">
<script src="//code.jquery.com/jquery-1.10.2.js"></script>
<script src="//code.jquery.com/ui/1.11.4/jquery-ui.js"></script>
<script src="~/AllJsAndCss/js/datatable-custom2.js"></script>

<script type="text/javascript" language="javascript" src="~/AllJsAndCss/datatable/js/jquery.dataTables.js"></script>



<script>

    $(function () {
        $(".FromD").datepicker({
            dateFormat: 'dd/mm/yy',//check change
            changeMonth: true,
            changeYear: true,
            yearRange: "-100:+50"
        });
    });
</script>
<script>

    $(function () {
        $(".ToD").datepicker({
            dateFormat: 'dd/mm/yy',//check change
            changeMonth: true,
            changeYear: true,
            yearRange: "-100:+50"
        });
    });
</script>










       
 
<div class="main-content3 xs-max-height">

    <!--Start of header-->
    <div class="container-fluid">
        @if (Session["RoleID"].ToString() == "1" || Session["RoleID"].ToString() == "34" || Session["RoleID"].ToString() == "36" || Session["IsMentor"].ToString() == "Exist")
        {
            <div id="reportView" class="row assignfixedwidth rp-15">

                <div class="col-xs-12">
                    <h3 class="dynamic-page-title dynamic-page-title-2  text-left">MONITORING</h3>

                </div><!-- /.col -->

                <div class="col-xs-12">
                    <hr class="custom-hr1">
                </div><!-- /.col -->
                <!--Table was here-->



                <div class="col-xs-12 col-sm-4">


                    <div class="form-group">
                        <label>Type of Monitoring:</label>


                        @Html.DropDownListFor(m => m.TypeOfmonitoring, new List<SelectListItem>
                                                                     {
                                                                     new SelectListItem{ Text="---SELECT---", Value = ""},
                                                                      new SelectListItem{ Text="On Site", Value = "OnSite"},
                                                                     new SelectListItem{ Text="Off Site", Value = "OffSite" },
                                                                     new SelectListItem{ Text="Mentoring", Value = "Mentoring"},
                                                                     new SelectListItem {Text="Monitoring Of Monitors ", Value = "MonitoringOfMonitors"},

                                                                     },

                                        new { @class = "form-control", @id = "PT"/*, @onchange = "$(this).closest('form').submit();"*/ })
                        @Html.ValidationMessageFor(m => m.TypeOfmonitoring, "", new { @class = "text-danger validation-msg" })
                    </div>
                </div>

                <div class="col-xs-2">
                    <div class="form-group">
                        @*<label>Search:</label>*@
                        @*<input type="submit" value="Search" class="btn btn-primary form-control" id="btnSearch"/>*@
                        <input type="submit" value="Generate report" class="btn btn-default insert-form-btn" id="btnSearch" style="margin-top:25px; " onclick="listdetails()" />

                    </div>

                </div>
                <div class="col-xs-2">
                    <div class="form-group">
                        <button type="button" id="btnExport" value="ExportToExcel" class="btn btn-info dynamic-function-btn dynamic-function-btn-2" onclick="location.href='@Url.Action("ExportIndex2", "CompentencyMetrixView")';">
                            Export To Excel
                        </button>
                    </div>
                </div>


                @*Generate Reports strat*@



                @*Generate Reports end*@



                <div class="col-xs-12">
                    <hr class="custom-hr">
                </div><!-- /.col -->
                <!--Table was here-->

            </div>
        }


@using (Html.BeginForm("MonitoringList", "CompentencyMetrixView", FormMethod.Post, new { enctype = "multipart/form-data", @id = "form1" }))
{

        <div class="row">
            <div class="col-xs-4">
                <div class="form-group">
                    <label>From Date:</label>
                    @Html.TextBoxFor(model => model.FromDate, "{0:dd MMM yyyy}", htmlAttributes: new { placeholder = "Select Start Date", @class = "form-control form-control-custom FromD", autocomplete = "off" })
                    @Html.ValidationMessageFor(model => model.FromDate, "", new { @class = "text-danger validation-msg" })
                </div>
            </div>


            <div class="col-xs-4">
                <div class="form-group">
                    <label>To Date:</label>
                    @Html.TextBoxFor(model => model.ToDate, "{0:dd MMM yyyy}", htmlAttributes: new { placeholder = "Select To Date", @class = "form-control form-control-custom ToD", autocomplete = "off" })
                    @Html.ValidationMessageFor(model => model.ToDate, "", new { @class = "text-danger validation-msg" })
                </div>

            </div>

            <div class="col-xs-2">
                <div class="form-group">
                    <label>Search:</label>
                    <input type="submit" value="Search" class="btn btn-primary form-control" />
                </div>

            </div>



            <div class="col-xs-12">
                <table class="display dataTable no-footer" style="overflow-y:auto" id="gridMapping">
                    <tr>
                        <td>


                            @(Html
.Grid(Model.lstComplaintDashBoard1)
.Build(columns =>

{

    var EditLink = Model.lstComplaintDashBoard1;
    //var Link = "";
    //if(EditLink.TypeOfmonitoring.Contains("Onsite Monitoring"))
    //{
    //    Link = "MonitoringDetails";
    //}
    //else if (EditLink.TypeOfmonitoring.Contains("Off Site"))
    //{
    //    Link = "";
    //}
    //else if (EditLink.TypeOfmonitoring.Contains("Mentoring"))
    //{
    //    Link = "Mentoring";
    //}
    //else if (EditLink.TypeOfmonitoring.Contains("Monitoring of Mentoring"))
    //{
    //    Link = "";
    //}
    //columns.Add(c => c.CallListData[j].FirstName).Titled("Inspector to be Assigned").RenderedAs(c => CustomRenderingOfColumnDropdown(c)).Sortable(true);
    //columns.Add(c => c.TypeOfmonitoring).Titled("Type").Hidden();

    columns.Add().Titled("Edit").Encoded(false).RenderedAs(model => Html.ActionLink(" ", "ViewDash", new { UID = model.UINId, Type = model.TypeOfmonitoring }, new { @class = "fa fa-pencil", title = "Edit" }));
    columns.Add().Titled("Delete").Encoded(false).RenderedAs(model => Html.ActionLink(" ", "DeleteData", new { UID = model.UINId }, new { @class = "fa fa-trash-o", title = "Delete", onclick = "Question Details Deleted Successfully" }));
    //columns.Add(c => c.PK_Complaint_ID).Titled("Complaint ID");

    columns.Add(c => c.UINId).Titled("UIN");
    columns.Add(c => c.Inspector_Name).Titled("Inspector Name");
    columns.Add(c => c.SpecialServicesData).Titled("Product Quality Services");
    columns.Add(c => c.BranchName).Titled("Branch Name");
    columns.Add(c => c.Monitor_Name).Titled("Monitor Name");
    columns.Add(c => c.TypeOfmonitoring).Titled("Type Of monitoring");
    columns.Add(c => c.Date).Titled("Date");
    columns.Add(c => c.Q3).Titled("Is this for Verification of earlier monitoring");


    //columns.Add(c => c.Q4).Titled("Observations");
    columns.Add(c => c.Q4).Titled("Observations").RenderedAs(c => CustomRenderingOfColumn2(c)).Sortable(true);

    //columns.Add(c => c.InspectorComment).Titled("Inspector comment");
    columns.Add(c => c.InspectorComment).Titled("Inspector comment").RenderedAs(c => CustomRenderingOfColumn3(c)).Sortable(true);

    columns.Add(c => c.Q1).Titled("Training need identified");

    //columns.Add(c => c.Q2).Titled("Training topic");


    columns.Add(c => c.Q2).Titled("Training topic").RenderedAs(c => CustomRenderingOfColumn1(c)).Sortable(true);

    //columns.Add(c => c.Reporting_manager_comments).Titled("Reporting manager comment");
    columns.Add(c => c.Reporting_manager_comments).Titled("Reporting manager comment").RenderedAs(c => CustomRenderingOfColumn4(c)).Sortable(true);
    columns.Add(c => c.chkManData).Titled("Man-Month asgmt.");
    columns.Add(c => c.CurrentAssignment).Titled("Type of Assignment");
    columns.Add(c => c.specialMonitoringdata).Titled("surprise Monitoring");




})
.Pageable(pager =>
{
    //pager.PageSizes = new DictionaryInt32, String > { { 0, "All" }, { 2, "2" }, { 4, "4" } };
    pager.ShowPageSizes = true;
    pager.PagesToDisplay = 3;
    pager.CurrentPage = 1;
    pager.RowsPerPage = 2;
})
.UsingFilterMode(GridFilterMode.Row)
.Empty("No data found")
.Filterable()
.Sortable()

                            )


                        </td>
                    </tr>
                </table>

            </div>




        </div>
}

    </div>
 </div>



@{
        if ((Convert.ToString(TempData["Result"])) != "" && Convert.ToString(TempData["Result"]) != null)
        {
            TempData["Result"] = null;
        <script type="text/javascript" language="javascript">
            alert("Details has been Deleted Successfully!!!!");
        </script>
        }
    }


<script>
    $(document).ready(function () {
        $('#Q2').qtip({
            track: true
        });
    });
</script>



<script type="text/javascript">
    $(document).ready(function () {

    });
    function listdetails() {
        debugger;
        var TypeOfmonitoring = $("#PT").val();
        if (TypeOfmonitoring == "OnSite") {
            // window.location.href = "/CompentencyMetrixView/MonitoringDetails";
            window.location.href = '@Url.Action("MonitoringDetails", "CompentencyMetrixView")';
        }
        if (TypeOfmonitoring == "OffSite") {
            // window.location.href = "/CompentencyMetrixView/OffSiteMonitoringDetails";
            window.location.href = '@Url.Action("OffSiteMonitoringDetails", "CompentencyMetrixView")';
        }
        if (TypeOfmonitoring == "Mentoring") {
            //window.location.href = "/CompentencyMetrixView/Mentoring";
            window.location.href = '@Url.Action("Mentoring", "CompentencyMetrixView")';
        }
        if (TypeOfmonitoring == "MonitoringOfMonitors") {
            // window.location.href = "/CompentencyMetrixView/MonitoringOfMonitors";
            window.location.href = '@Url.Action("MonitoringOfMonitors", "CompentencyMetrixView")';
        }
    };

</script>








<script>
        $(function () {
            $(".FromD").datepicker({
        dateFormat: 'dd/mm/yy',//check change
                changeMonth: true,
                changeYear: true,
                yearRange: "-100:+50"
            });
    });
</script>
<script>
        $(function () {
            $(".ToD").datepicker({
        dateFormat: 'dd/mm/yy',//check change
                changeMonth: true,
                changeYear: true,
                yearRange: "-100:+50"
            });
    });
</script>
<script>
    var CustomTextFilter = (function (base) {
        MvcGridExtends(CustomTextFilter, base);

        function CustomTextFilter(column) {
            base.call(this, column);

            this.methods = ['contains'];
            column.grid.lang.custom = { contains: 'Contains' };
        }

        // Other extension points can be found at MvcGridFilter declaration

        return CustomTextFilter;
    })(MvcGridFilter);

    new MvcGrid(document.querySelector('.mvc-grid'), {
        filters: {
        'custom': CustomTextFilter
        }
});
</script>


@*<script>


    $('#ddlMonitoringList').on("change", function () {
        var Project = $('#ddlMonitoringList').val();
        var obj = { Project: Project };
        $('#ddlMonitoringList').html('');
        $.ajax({
            type: "post",
            url: '@Url.Action("MonitoringDetails", "CompentencyMetrixView")',
            data: { Project: Project },
            datatype: "json",
            traditional: true,
            success: function (data) {

                //var district = "<select id='ddlPortfolioType'>";
                //district = district + '<option value="">--Select--</option>';
                //for (var i = 0; i < data.length; i++) {
                //    district = district + '<option value=' + data[i].Code + '>' + data[i].Name + '</option>';
                //}
                //district = district + '</select>';
                //$('#ddlPortfolioType').html(district);
            }
        });
    });

    </script>*@


