@model TuvVision.Models.Leave
@using NonFactors.Mvc.Grid;
@using System.Web.Mvc;

@{
    ViewBag.Title = "LeaveDetail";
    Layout = "~/Views/Shared/_TuvVision.cshtml";
}



<link href="~/AllJsAndCss/css/MVCGridN.css" rel="stylesheet" />
@*calender control*@

<link rel="stylesheet" href="//code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css">
<script src="//code.jquery.com/jquery-1.10.2.js"></script>
<script src="//code.jquery.com/ui/1.11.4/jquery-ui.js"></script>

@helper CustomRenderingOfColumnAttachment(TuvVision.Models.Leave LeaveModel)
{
    if (LeaveModel.Attachment == null || LeaveModel.Attachment == "")
    {

    }
    else
    {
        string[] words = (LeaveModel.Attachment).Split(',');
        for (int j = 1; j < words.Count(); j++)
        {
                <a target="_blank" href="@Url.Content("~/NonInspectionActivityDocument/" + words[j-1])">
                    
                    <span>@words[j - 1].ToString()</span>
                </a>                
        }
    }
}



@using (Html.BeginForm("LeaveDetail", "Leave", FormMethod.Post, new { enctype = "multipart/form-data", @id = "form1" }))
{
    <div class="main-content3 xs-max-height">

        <!--Start of header-->
        <div class="container-fluid">
            <div class="row assignfixedwidth rp-15">

                <div class="col-xs-12">
                    <h3 class="dynamic-page-title dynamic-page-title-2  text-left">Leave Detail</h3>
                    <button type="button" value="CreateRole" class="btn btn-info dynamic-function-btn dynamic-function-btn-2" style="margin-left: 16px" onclick="location.href='@Url.Action("AddLeave", "Leave")'">Add Leave</button>
                    @*<button type="button" value="ExportToExcel" class="btn btn-info dynamic-function-btn dynamic-function-btn-2" onclick="location.href='@Url.Action("ExportIndex","NonInspectionActivity")'"
                            style="border:none;">
                        Export To Excel
                    </button>*@
                </div><!-- /.col -->

                <div class="col-xs-12">
                    <hr class="custom-hr">
                </div><!-- /.col -->
                <!--Table was here-->

            </div>

            @if (Convert.ToString(TempData["MsgCallAssigned"]) != "")
            {

                <div class="col-xs-12">

                    @{
                        if (Convert.ToString(TempData["MsgCallAssigned"]) != null && Convert.ToString(TempData["MsgCallAssigned"]) != "")
                        {
                            <h4 style="color:red;font-weight:bold;">@Convert.ToString(TempData["MsgCallAssigned"])</h4>
                            <script>
                                alert(TempData["MsgCallAssigned"])
                            </script>
                            TempData["MsgCallAssigned"] = "";
                        }
                    }
                </div>
            }
            @if (Convert.ToString(TempData["MsgIfLeaveExist"]) != "")
            {

                <div class="col-xs-12">

                    @{
                        if (Convert.ToString(TempData["MsgIfLeaveExist"]) != null && Convert.ToString(TempData["MsgIfLeaveExist"]) != "")
                        {
                            <h4 style="color:red;font-weight:bold;">@Convert.ToString(TempData["MsgIfLeaveExist"])</h4>

                            TempData["MsgIfLeaveExist"] = "";
                        }
                    }
                </div>
                        }
            

            <div class="row">
                <div class="col-xs-4">
                    <div class="form-group">
                        <label>From Date:</label>
                        @Html.TextBoxFor(model => model.FromD, "{0:dd MMM yyyy}", htmlAttributes: new { placeholder = "Select Start Date", @class = "form-control form-control-custom FromD", autocomplete = "off" })
                        @Html.ValidationMessageFor(model => model.FromD, "", new { @class = "text-danger validation-msg" })
                    </div>
                </div>


                <div class="col-xs-4">
                    <div class="form-group">
                        <label>To Date:</label>
                        @Html.TextBoxFor(model => model.ToD, "{0:dd MMM yyyy}", htmlAttributes: new { placeholder = "Select To Date", @class = "form-control form-control-custom ToD", autocomplete = "off" })
                        @Html.ValidationMessageFor(model => model.ToD, "", new { @class = "text-danger validation-msg" })
                    </div>

                </div>

                <div class="col-xs-2">
                    <div class="form-group">
                        <label>Search:</label>
                        <input type="submit" value="Search" class="btn btn-primary form-control" />
                    </div>

                </div>
            </div>
            @if (Convert.ToString(TempData["Error"]) != "")
            {
                <div class="col-xs-12">

                    @{
                        if (Convert.ToString(TempData["Error"]) != null && Convert.ToString(TempData["Error"]) != "")
                        {
                            <h4 style="color:red;font-weight:bold;">@Convert.ToString(TempData["Error"])</h4>
                        }
                    }
                </div>
                        }
            @if (Convert.ToString(TempData["Success"]) != "")
            {
                <div class="col-xs-12">

                    @{
                        if (Convert.ToString(TempData["Success"]) != null && Convert.ToString(TempData["Success"]) != "")
                        {
                            <h4 style="color:green;font-weight:bold;">@Convert.ToString(TempData["Success"])</h4>
                        }
                    }
                </div>
                        }
            @if (Convert.ToString(TempData["Failure"]) != "")
            {
                <div class="col-xs-12">

                    @{
                        if (Convert.ToString(TempData["Failure"]) != null && Convert.ToString(TempData["Failure"]) != "")
                        {
                            <h4 style="color:red;font-weight:bold;">@Convert.ToString(TempData["Failure"])</h4>
                        }
                    }
                </div>
                        }

                     
                        <div class="col-xs-12">
                            <table class="display dataTable no-footer" style="overflow-y:auto" id="gridMapping">
                                <tr>

                                    <td>
                                        @(Html
                            .Grid(Model.LeaveDashBoard)
                            .Build(columns =>
                            {
                                columns.Add(c => c.Id).Titled("ID");
                                columns.Add(c => c.FirstName).Titled("Name");
                                columns.Add(c => c.DateSE).Titled("Leave Date");
                                columns.Add(c => c.ActivityType).Titled("Activity Type");
                                columns.Add(c => c.LTILeave).Titled("LTI Leave");
                                columns.Add().Titled("Attchments").RenderedAs(c => CustomRenderingOfColumnAttachment(c)).Sortable(true);

                                columns.Add().Titled("Edit").Encoded(false).RenderedAs(o => Html.ActionLink(" ", "AddLeave", new { @id = o.Id }, new { @class = "fa fa-pencil", title = "Edit" }));
                                columns.Add().Titled("Delete").Encoded(false).RenderedAs(o => Html.ActionLink(" ", "Delete", new { @id = o.Id }, new { @class = "fa fa-trash-o", title = "Delete", onclick = "return confirm('Are you sure you wish to delete this Record?');" }));

                            })
                            .Pageable(pager =>
                            {
                                pager.ShowPageSizes = true;
                                pager.PagesToDisplay = 3;
                                pager.CurrentPage = 1;
                                pager.RowsPerPage = 2;
                            })
                            .UsingFilterMode(GridFilterMode.Row)
                            .Empty("No Data Found")
                            .Filterable()
                            .Sortable()
                                        )
                                    </td>
                                </tr>
                            </table>

                        </div>

                    </div>

                </div>
                        }

@*<script type="text/javascript" language="javascript" src="~/AllJsAndCss/datatable/js/jquery.dataTables.js"></script>

    export to excel
    <script type="text/javascript" language="javascript" src="~/AllJsAndCss/js/dataTables.buttons.min.js"></script>
    <script type="text/javascript" language="javascript" src="~/AllJsAndCss/js/jszip.min.js"></script>
    <script type="text/javascript" language="javascript" src="~/AllJsAndCss/js/buttons.html5.min.js"></script>
    <script src="~/AllJsAndCss/js/datatable-custom2.js"></script>*@



@*Date Picker for From Date*@

<script>
    $(function () {
        $(".FromD").datepicker({
            dateFormat: 'dd/mm/yy',//check change
            changeMonth: true,
            changeYear: true,
            yearRange: "-100:+50"
        });
    });
</script>
<script>
    $(function () {
        $(".ToD").datepicker({
            dateFormat: 'dd/mm/yy',//check change
            changeMonth: true,
            changeYear: true,
            yearRange: "-100:+50"
        });
    });
</script>
<script>
    var CustomTextFilter = (function (base) {
        MvcGridExtends(CustomTextFilter, base);

        function CustomTextFilter(column) {
            base.call(this, column);

            this.methods = ['contains'];
            column.grid.lang.custom = { contains: 'Contains' };
        }

        // Other extension points can be found at MvcGridFilter declaration

        return CustomTextFilter;
    })(MvcGridFilter);

    new MvcGrid(document.querySelector('.mvc-grid'), {
        filters: {
            'custom': CustomTextFilter
        }
    });
</script>



