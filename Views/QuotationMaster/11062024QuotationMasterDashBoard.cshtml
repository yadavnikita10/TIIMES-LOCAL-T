@model TuvVision.Models.QuotationMaster
@using NonFactors.Mvc.Grid;
@using System.Web.Mvc;
@{
    ViewBag.Title = "QuotationMasterDashBoard";
    Layout = "~/Views/Shared/_TuvVision.cshtml";
}

<link href="~/AllJsAndCss/css/MVCGridN.css" rel="stylesheet" />

@*Manoj Scripts here for datatable starts here*@
<script type="text/javascript" language="javascript" src="~/AllJsAndCss/datatable/js/jquery.dataTables.js"></script>

<!--export to excel-->
<script type="text/javascript" language="javascript" src="~/AllJsAndCss/js/dataTables.buttons.min.js"></script>
<script type="text/javascript" language="javascript" src="~/AllJsAndCss/js/jszip.min.js"></script>
<script type="text/javascript" language="javascript" src="~/AllJsAndCss/js/buttons.html5.min.js"></script>
<script src="~/AllJsAndCss/js/datatable-custom2.js"></script>
@*Ashwini Scripts here for datatable ends here*@


@helper CustomRenderingOfReport1(TuvVision.Models.QuotationMaster Report)
{

    <a href="~/QuotationHtml/@Report.QuotationPDF" download="~/QuotationHtml/@Report.QuotationPDF" onclick="return confirm('Are you sure you want to download the quotation?')">
        @Report.QuotationNumber
    </a>
}
@helper Edit(TuvVision.Models.QuotationMaster Report)
{
        <a href="@Url.Action("Quotation", "QuotationMaster", new {PK_QM_ID = Report.PK_QTID })" title="Edit"><i class="fa fa-pencil"></i></a>
}


@using (Html.BeginForm())
{
   <!--Start of header-->
    <!--Start of main content 3-->
    <div class="main-content3 xs-max-height">

        <!--Start of header-->
        <div class="container-fluid">
            <div class="row assignfixedwidth rp-15">

                <div class="col-xs-12">
                    <h3 class="dynamic-page-title dynamic-page-title-2  text-left">Quotation</h3>
                    @*<a href="@Url.Action("Quotation","QuotationMaster")" class="btn btn-info dynamic-function-btn dynamic-function-btn-2"><i class="fa fa-plus-circle"></i> Add New Quotation</a>*@
                    <button type="button"  value="ExportToExcel" class="btn btn-info dynamic-function-btn dynamic-function-btn-2" onclick="location.href='@Url.Action("ExportIndex","QuotationMaster")'"
                            >
                        Export To Excel
                    </button>

                </div><!-- /.col -->

                <div class="col-xs-12">
                    <hr class="custom-hr">
                </div><!-- /.col -->
                <!--Table was here-->

            </div><!-- /.row -->

            <div class="col-xs-12">
                @*<table id="example" class="display" cellspacing="0" width="100%">
                    <thead>
                        <tr>
                            <th class="remove-search less-width">Revise Qt</th>
                            <th class="remove-search less-width">Delete</th>
                           
                            <th>Quotation Number</th>
                            <th>Description</th>
                            <th>Reference</th>
                            <th>Enquiry</th>
                            <th>Expiry Date</th>
                            <th>Status</th>
                            <th>Approval Status</th>

                        </tr>
                    </thead>
                    <tbody>
                        <tr class="hidden">
                           
                            <td>Revise Qt</td>
                            <th>Delete</th>

                            <td>Quotation Number</td>
                            <td>Description</td>
                            <td>Reference</td>
                            <td>Enquiry</td>
                            <td>Expiry Date</td>
                            <td>Status</td>
                            <td>Approval Status</td>

                        </tr>

                        <tr class="hidden">
                            
                            <td></td>
                            <td></td>

                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>

                        </tr>


                        @{
                        }
                        @foreach (var item in ViewData["QuotationMaster"] as IEnumerable<TuvVision.Models.QuotationMaster>)
                        {
                            <tr>
                                <td>
                                    @if (item.QTType != "")
                                    {
                                        <a href="#" id="REV" onclick="myFunction()" title="Revised Quotation"><span style="color:red;">Revised</span>&nbsp;</a>
                                    }
                                    else
                                    {
                                        <a href="@Url.Action("Quotation", "QuotationMaster", new {@PK_QM_ID = item.PK_QTID ,@Revise ="Revise"})" title="Revised Quotation"><span>Revise</span>&nbsp;</a>
                                    }
                                    
                                </td>
                                <td>
                                    
                                    <a href="@Url.Action("DeleteQuotation", "QuotationMaster", new {@PK_QTID = item.PK_QTID })" onclick="return confirm('Are you sure you want to Delete Quotation Record?')" title="Delete"><span class="fa fa-trash-o"></span>&nbsp;</a>
                                    @{
                                        if ((Convert.ToString(TempData["DeletedQuotation"])) != "" && Convert.ToString(TempData["DeletedQuotation"]) != null)
                                        {
                                            TempData["DeletedQuotation"] = null;
                                            <script type="text/javascript" language="javascript">
                                                alert("Quotation Data Deleted Successfully!!!");
                                            </script>
                                        }
                                        if ((Convert.ToString(TempData["AddQutation"])) != "" && Convert.ToString(TempData["AddQutation"]) != null)
                                        {
                                            TempData["AddQutation"] = null;
                                            <script type="text/javascript" language="javascript">
                                                alert("Quotation Added Successfully");
                                            </script>
                                        }
                                    }

                                </td>
                                <td style="font-size:12px!important;"><a href="@Url.Action("Quotation", "QuotationMaster", new {@QuotationNumber = item.QuotationNumber })" title="Edit Quotation">@item.QuotationNumber</a></td>
                                <td style="font-size:12px!important;">@item.Quotation_Description</td>
                                <td style="font-size:12px!important;">@item.Reference</td>
                                <td>@item.Enquiry</td>
                                <td>@item.ExpiryDate</td>
                                <td>@item.StatusType</td>
                                <td>@item.ApprovalStatus</td>
                            </tr>
                                        }
                    </tbody>
                </table>*@

            </div><!-- /.data table col -->


        <div class="col-xs-12">
            <table class="display dataTable no-footer" style="overflow-y:auto" id="gridMapping">
                <tr>
                    <td>
                        @(Html
                            .Grid(Model.lstQuotationMasterDashBoard1)
                            .Build(columns =>
                            {
                                columns.Add().Titled("Edit").RenderedAs(c => Edit(c)).Sortable(true);
                                columns.Add(c => c.EnquiryNumber).Titled("Enquiry Reference No");
                                //columns.Add(c => c.QuotationNumber).Titled("Quotation Number/Edit").Encoded(false).RenderedAs(o => Html.ActionLink(o.QuotationNumber, "Quotation", new { PK_QM_ID = o.PK_QTID }, new { title = "Quotation Number New" })).Filterable(true);
                                
                                columns.Add(c => c.QuotationPDF).Titled("Download File").RenderedAs(c => CustomRenderingOfReport1(c)).Sortable(true);
                                columns.Add(c => c.Enquiry).Titled("Customer Name");
                                columns.Add(c => c.Quotation_Description).Titled("Project Name");
                                columns.Add(c => c.EstimatedAmount).Titled("Quotation Amount (INR)");
                                columns.Add(c => c.InspectionLocation).Titled("Inspection Location");
                                columns.Add(c => c.StatusType).Titled("Status");
                                //columns.Add(c => c.ApprovalStatus).Titled("Approval Status");
                                columns.Add(c => c.DApprovalStatus).Titled("Domestic Approval Status");
                                columns.Add(c => c.IApprovalStatus).Titled("International Approval Status");
                                columns.Add(c => c.CreatedBy).Titled("Created By");
                                columns.Add(c => c.CreatedDate).Titled("Created Date");
                                columns.Add(c => c.ExpiryDate).Titled("Expiry Date");
                                columns.Add(c => c.JobNo).Titled("Job No");
                                columns.Add(c => c.ProjectName).Titled("OBS Type");
                                columns.Add(c => c.PortfolioType).Titled("Service Portfolio Type");
                                columns.Add(c => c.SubServiceType).Titled("Service Type");
                                if (Model.QTType != null)
                                {
                                    columns.Add().Titled("Revise Quotation").Encoded(false).RenderedAs(o => Html.ActionLink("Revise", "#", new { onclick = "myFunction()", id = "REV" }));
                                }
                                else
                                {
                                    columns.Add().Titled("Revise Quotation").Encoded(false).RenderedAs(o => Html.ActionLink("Revise", "Quotation", new { PK_QM_ID = o.PK_QTID, @Revise = "Revise", @QuotationNumber = o.QuotationNumber }));
                                }
                                columns.Add().Titled("Delete").Encoded(false).RenderedAs(o => Html.ActionLink(" ", "DeleteQuotation", new { PK_QTID = o.PK_QTID }, new { @class = "fa fa-trash-o", title = "Delete", onclick = "return confirm('Are you sure you wish to delete ?');" }));


                            })
                            .Pageable(pager =>
                            {
                                //pager.PageSizes = new DictionaryInt32, String > { { 0, "All" }, { 2, "2" }, { 4, "4" } };
                                pager.ShowPageSizes = true;
                                pager.PagesToDisplay = 3;
                                pager.CurrentPage = 1;
                                pager.RowsPerPage = 2;
                            })
                            .UsingFilterMode(GridFilterMode.Row)
                            .Empty("No data found")
                            .Filterable()
                            .Sortable()

                        )


                    </td>
                </tr>
            </table>


        </div>


        </div><!-- /.container-fluid -->
        <!--End of header-->

    </div>
  <!--End of main content 3-->
                                        }




<script>
function myFunction() {
  alert("Already Revised");
}
</script>

<script>
           [].forEach.call(document.getElementsByClassName('mvc-grid'), function (element) {
               new MvcGrid(element);
           });
</script>	
<script>
    var CustomTextFilter = (function (base) {
        debugger;
        MvcGridExtends(CustomTextFilter, base);

        function CustomTextFilter(column) {
            base.call(this, column);

            this.methods = ['contains'];
            column.grid.lang.custom = { contains: 'Contains' };
        }

        // Other extension points can be found at MvcGridFilter declaration

        return CustomTextFilter;
    })(MvcGridFilter);

    new MvcGrid(document.querySelector('.mvc-grid'), {
        filters: {
            'custom': CustomTextFilter
        }
    });
</script>