@model TuvVision.Models.SubJobs
@using NonFactors.Mvc.Grid;
@using System.Web.Mvc;



@*@helper CustomRenderingOfColumn1(TuvVision.Models.SubJobs SubJobs)
{
    if (SubJobs.Type == "SubSub Job")
    {
            <a href="@Url.Action("CreatSubSubJob", "SubJobMaster", new {@PK_SubJob_Id = SubJobs.PK_SubJob_Id , @subType = SubJobs.Type })" title="Edit">@SubJobs.SubSubJob_No</a>
    }
    else
    {
            <a href="@Url.Action("CreatSubJob", "SubJobMaster", new {@PK_SubJob_Id = SubJobs.PK_SubJob_Id , @subType = SubJobs.Type })" title="Edit">@SubJobs.SubJob_No</a>
    }
}*@


@helper CustomRenderingOfColumn1(TuvVision.Models.SubJobs SubJobs)
{
if (SubJobs.Type == "SubSub Job")
{
        <a href="@Url.Action("CreatSubSubJob", "SubJobMaster", new {@PK_SubJob_Id = SubJobs.PK_SubJob_Id , @subType = SubJobs.Type })" title="Edit">@SubJobs.SubSubJob_No</a>
}
else if (SubJobs.Type == "SubSubSub Job")
{
        <a href="@Url.Action("CreatSubSubSubJob", "SubJobMaster", new {@PK_SubJob_Id = SubJobs.PK_SubJob_Id , @subType = SubJobs.Type })" title="Edit">@SubJobs.SubSubSubJob_No</a>
}
else
{
        <a href="@Url.Action("CreatSubJob", "SubJobMaster", new {@PK_SubJob_Id = SubJobs.PK_SubJob_Id , @subType = SubJobs.Type })" title="Edit">@SubJobs.SubJob_No</a>
}
}










@{
    ViewBag.Title = "SubJobList";
    Layout = "~/Views/Shared/_TuvVision.cshtml";
}





<link href="~/AllJsAndCss/css/MVCGridN.css" rel="stylesheet" />


@using (Html.BeginForm())
{

    <div class="main-content3 xs-max-height">

        <!--Start of header-->
        @*<input id="GridSearch" />*@
       

        <div class="container-fluid">
            <div class="row assignfixedwidth rp-15">

                <div class="col-xs-12">
                    <h3 class="dynamic-page-title dynamic-page-title-2  text-left">List of Sub-Job</h3>
                   
                    <button type="button" id="a" value="ExportToExcel" class="btn btn-info dynamic-function-btn dynamic-function-btn-2"  onclick="location.href='@Url.Action("ExportIndex","SubJobMaster")'" 
                                 style="border:none;">Export To Excel
                        </button>
                    
                   
                    @*<button type="button" value="CreateRole" class="btn btn-info dynamic-function-btn dynamic-function-btn-2" onclick="location.href='@Url.Action("CreateBranch", "Branch")'">Add New Branch</button>*@
                    @*<button type="button" value="CreateRole" class="btn btn-info dynamic-function-btn dynamic-function-btn-2" onclick="location.href='@Url.Action("Export", "SubJobMaster")'">Export to excel</button>*@
                </div><!-- /.col -->

                <div class="col-xs-12">
                    <hr class="custom-hr">
                </div><!-- /.col -->
                <!--Table was here-->

            </div><!-- /.row -->

            <div class="col-xs-12">
        
            
                @*<table id="example" class="display custom-table" cellspacing="0" width="100%">
                    <thead>
                        <tr>
                            <th class="remove-search less-width">Action</th>
                            <th>Service type</th>
                            <th>Job Type</th>
                            <th>Company Name</th> 
                            <th>Project Name</th>
                           <th>Vendor Name</th>
                            <th>Sub Job Number</th>
                            <th>SAP No</th>
                            <th>P.O Number</th>
                            <th>P.O Date</th>
                        </tr>
                    </thead>
                  
                    <tbody>
                        <tr class="hidden">
                            <td class="remove-search less-width"></td>
                            
                            <td><strong>Service type</strong></td>
                            <td><strong>Job Type</strong></td>
                            <td><strong>Company Name</strong></td>
                            <td><strong>Project Name</strong></td>
                            <td><strong>Vendor Name</strong></td>
                            <td><strong>Sub Job Number</strong></td>
                            <td><strong>SAP No</strong></td>
                            <td><strong>P.O Number</strong></td>
                            <td><strong>P.O Date<</strong></td>
                          
                        </tr>
                        <tr class="hidden">
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                        </tr>
                       
                        @foreach (var item in ViewData["subJobList"] as IEnumerable<TuvVision.Models.SubJobs>)
                        {
                            <tr>
                                <td>
                                    <a href="@Url.Action("DeleteSubJobData", "SubJobMaster", new {@PK_SubJob_Id = item.PK_SubJob_Id })" onclick="return confirm('Are you sure you want to delete this record?')" title="Delete"><span class="fa fa-trash-o"></span>&nbsp;</a>
                                </td>
                                <td>@item.Service_type</td>
                                <td>@item.Type</td>
                                <td>@item.Company_Name</td>
                                <td>@item.Project_Name</td>
                                <td>@item.vendor_name</td>

                                @if (item.Type == "SubSub Job")
                                {
                                   
                                    <td><a href="@Url.Action("CreatSubJob", "SubJobMaster", new {@PK_SubJob_Id = item.PK_SubJob_Id })" title="Edit">@item.SubSubJob_No</a></td>
                                }
                                else
                                {
                                  
                                    <td><a href="@Url.Action("CreatSubJob", "SubJobMaster", new {@PK_SubJob_Id = item.PK_SubJob_Id })" title="Edit">@item.SubJob_No</a></td>
                                }
                                <td>@item.SAP_No</td>
                                <td>@item.Vendor_Po_No</td>
                                <td>@item.Date_of_Po</td>





                               
                               
                            </tr>
                               }

                    </tbody>

                </table>*@
            
                

                @*<input id="GridSearch" />*@



                @*@Html.AjaxGrid(Url.Action("IndexGrid"))*@

               

                <table class="display dataTable no-footer" style="overflow-y:auto" id="gridMapping">
                    <tr>
                        <td>
                            @(Html




                            .Grid(Model.lstSubJobDashBoard1)

                            .Build(columns =>
                            {

                                //columns.Add().Titled("Edit").Encoded(false).RenderedAs(o => Html.ActionLink(" ", "Enquiry", new { EQ_ID = o.EQ_ID }, new { @class = "fa fa-pencil", title = "Edit" }));
                                //columns.Add().Titled("Delete").Encoded(false).RenderedAs(o => Html.ActionLink(" ", "DeleteSubJobData", new { PK_SubJob_Id = o.PK_SubJob_Id } , new { @class = "fa fa-trash-o", title = "Delete" , onclick = "return confirm('Are you sure you wish to delete this article?');" }));
                                columns.Add(c => c.SubJob_No).Titled("Sub-Job Number").RenderedAs(c => CustomRenderingOfColumn1(c)).Sortable(true).Filterable(true);
                                columns.Add(c => c.Service_type).Titled("Service type");
                                columns.Add(c => c.Type).Titled("Job Type");
                                columns.Add(c => c.Project_Name).Titled("Project Name");
                                columns.Add(c => c.Company_Name).Titled("Customer Name");
                                columns.Add(c => c.vendor_name).Titled("Vendor Name");
                                columns.Add(c => c.CreatedBy).Titled("Sub Vendor Name");
                                columns.Add(c => c.V3).Titled("Sub Sub Vendor Name");
                                columns.Add(c => c.SAP_No).Titled("SAP No");
                                columns.Add(c => c.Vendor_Po_No).Titled("Customer PO No on Vendor");
                                columns.Add(c => c.ModifyBy).Titled("Vendor PO No on Sub Vendor");
                                columns.Add(c => c.P3).Titled("Sub Vendor PO No on Sub Sub Vendor");
                                //columns.Add(c => c.Vendor_Po_No).Titled("P.O Number");
                                //columns.Add(c => c.Date_of_Po).Titled("PO Date");
                                //columns.Add(c => c.StringDate_of_Po).Titled("P.O Date").RenderedAs(c => CustomRenderingOfColumn1(c)).Sortable(true);
                                columns.Add(c => c.Status).Titled("Order Status");


                            })
                            .Pageable(pager =>
                            {

                                pager.ShowPageSizes = true;
                                pager.PagesToDisplay = 3;
                                pager.CurrentPage = 1;
                                pager.RowsPerPage = 2;
                            })
                            .UsingFilterMode(GridFilterMode.Row)
                            .Empty("No data found")
                            .Filterable()
                            .Sortable()


                            )


                        </td>
                    </tr>
                </table>







            </div><!-- /.data table col -->


        </div><!-- /.container-fluid -->
        <!--End of header-->

    </div>
    <!--End of Ashwini Code-->


                                        }


@*<script>
           [].forEach.call(document.getElementsByClassName('mvc-grid'), function (element) {
               new MvcGrid(element);
           });
</script>*@


<script>
    var CustomTextFilter = (function (base) {
        MvcGridExtends(CustomTextFilter, base);

        function CustomTextFilter(column) {
            base.call(this, column);

            this.methods = ['contains'];
            column.grid.lang.custom = { contains: 'Contains' };
        }

        // Other extension points can be found at MvcGridFilter declaration

        return CustomTextFilter;
    })(MvcGridFilter);

    new MvcGrid(document.querySelector('.mvc-grid'), {
        filters: {
            'custom': CustomTextFilter
        }
    });
</script>

