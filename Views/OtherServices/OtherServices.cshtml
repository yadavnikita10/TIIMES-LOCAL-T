@model TuvVision.Models.NonInspectionActivity
@using NonFactors.Mvc.Grid;
@using System.Web.Mvc;
@{
    //ViewBag.Title = "NonInspectionActivity";
    Layout = "~/Views/Shared/_TuvVision.cshtml";
    int l = 0;
}

<link href="~/AllJsAndCss/css/MVCGridN.css" rel="stylesheet" />

<style>
    .addCSS {
        pointer-events: none;
    }
</style>



@helper CustomRenderingOfColumnExpense(TuvVision.Models.NonInspectionActivity callmodel)
{
<button id="btnAddExpenses" class="btn btn-info btn-xs" type="button" onclick="location.href='@Url.Action(" CreateExpenseItem", "ExpenseItem" , new { FKId=callmodel.Id, Type="NIA" , SubJobNo=callmodel.JobNumber, PK_Call_Id=callmodel.Id, Pk_CC_Id=callmodel.CostCenter, ActivityCode=callmodel.ActivityType })'"><i class="fa fa-inr" aria-hidden="true"></i></button>
}





@helper CustomRenderingOfColumn(TuvVision.Models.NonInspectionActivity callmodel)
{

    @*if (callmodel.issendforapprovalExpense == "True" || callmodel.issendforapprovalope == "True")
        {
<a href="@Url.Action(" NonInspectionActivity", "NonInspectionActivity" , new { id=callmodel.Id })" class="btn btn-info btn-xs" title="Edit" style="color:white;"><i class="fa fa-pencil"></i></a>

        }
        else
        {*@
if (callmodel.ActivityType == "Privilege Leave" || callmodel.ActivityType == "Sick Leave" || callmodel.ActivityType == "Casual Leave")
{

}
else
{
    @*<a href="@Url.Action(" UpdateNonInspectionActivity", "NonInspectionActivity" , new { id=callmodel.Id })" class="btn btn-info btn-xs" title="Edit"><i class="fa fa-pencil"></i></a>*@
<a href="@Url.Action(" NonInspectionActivity", "NonInspectionActivity" , new { id=callmodel.Id })" class="btn btn-info btn-xs" title="Edit" style="color:white;"><i class="fa fa-pencil"></i></a>

<a href="@Url.Action(" Delete", "NonInspectionActivity" , new { id=callmodel.Id })" class="delete" ; onclick="return confirm('Are you sure you wish to Delete selected Record?');" title="Delete"><i class="fa fa-trash"></i></a>


}
    @*}*@
}
@helper CustomRenderingOfColumnAttachment(TuvVision.Models.NonInspectionActivity callmodel)
{
if (callmodel.Attachment == null || callmodel.Attachment == "")
{

}
else
{
    string[] words = (callmodel.Attachment).Split(',');
    for (int j = 1; j < words.Count(); j++)
    {
<a target="_blank" href="@Url.Content(" ~/NonInspectionActivityDocument/" + words[j-1])">

<span>@words[j - 1].ToString()</span>
            </a>

    }


}
}


@*<button type="button" class="btn btn-default insert-form-btn" id="ddlInspectionLocation" style="width:125px;"> Expense</button>*@







@using (Html.BeginForm("Create", "OtherServices", FormMethod.Post, new { enctype = "multipart/form-data", @id = "form1" }))
{
<div class="main-content3 xs-max-height grey-bg-f3">
    <div class="grey-bg-f3">
        <!--Start of header-->
        <div class="container-fluid">
            <div class="row assignfixedwidth rp-5">
                @*<a href="@Url.Action(" ListNonInspectionActivity","NonInspectionActivity")" class="btn btn-default news-btn" style="float:right;"><i class="fa fa-long-arrow-left"></i> Go Back</a>*@

                <br />
                <div class="col-xs-12 form-col">
                    <div class="row">


                        <div class="col-xs-12">
                            <div class="white-bg section-box-shadow">
                                <h3 class="form-page-title"> Non Inspection Activities</h3>
                                <div class="row">
                                    <div class="col-xs-12 col-sm-offset-1 col-sm-10">
                                        <div class="form-box">
                                            <form>
                                                <div class="row">
                                                    <div class="col-xs-12 col-sm-4">
                                                        @Html.HiddenFor(model => model.Id)
                                                        @Html.HiddenFor(model => model.AddExpense)
                                                    </div>
                                                </div>


                                                <div class="row">
                                                    @if (Convert.ToString(TempData["Error"]) != string.Empty)
                                                    {
                                                    <div class="col-xs-12">
                                                        @if (Convert.ToString(TempData["Error"]) != null && Convert.ToString(TempData["Error"]) != "")
                                                        {
                                                        <h5 style="color:red;font-weight:bold;">@Convert.ToString(TempData["Error"]).Replace("<br />", "\"<br />\"")</h5>

                                                        }
                                                    </div>
                                                    TempData["Error"] = "";
                                                    }

                                                    @if (Convert.ToString(TempData["Success"]) != "")
                                                    {

                                                    <div class="col-xs-12">

                                                        @{
                                                        if (Convert.ToString(TempData["Success"]) != null && Convert.ToString(TempData["Success"]) != "")
                                                        {
                                                        <h5 style="color:green;font-weight:bold;">@Convert.ToString(TempData["Success"])</h5>
                                                        }
                                                        }
                                                    </div>
                                                    TempData["Success"] = "";
                                                    }

                                                    @if (Convert.ToString(TempData["Failure"]) != "")
                                                    {

                                                    <div class="col-xs-12">

                                                        @{
                                                        if (Convert.ToString(TempData["Failure"]) != null && Convert.ToString(TempData["Failure"]) != "")
                                                        {
                                                        <h5 style="color:red;font-weight:bold;">@Convert.ToString(TempData["Failure"])</h5>
                                                        }
                                                        }
                                                    </div>
                                                    TempData["Failure"] = "";
                                                    }

                                                    <span style="color:#E12F24;">
                                                        <strong>&nbsp;&nbsp;&nbsp;Notes </strong> :
                                                    </span>

                                                    <span>
                                                        1) <span style="color:red;">*</span> - Mandatory &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br />
                                                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                        @*2) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Enter multiple job numbers for project related activities i.e. Operation – Project Specific, QA Projects.<br />  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;E.g. 010101319721, 050101358621
                                                        <br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*@
                                                        &nbsp;&nbsp; 2) Continuous entry of more than 6 days of timesheet is restricted.

                                                    </span>



                                                    @*<div class="row">
                                                        *@
                                                        <div class="col-xs-12">
                                                            <hr class="custom-hr1">
                                                        </div>
                                                        @*
                                                    </div>*@

                                                    <div class="col-xs-12 col-sm-6">
                                                        <div class="form-group">
                                                            <label>Cost Centre:</label>
                                                            @Html.TextBoxFor(model => model.ServiceName, new { @placeholder = "Service Code", @class = "form-control", autocomplete = "off", @readonly = "readonly" })
                                                            @Html.ValidationMessageFor(model => model.ServiceName, "", new { @class = "text-danger validation-msg" })
                                                        </div>
                                                    </div>
                                                    @*<div class="col-xs-12 col-sm-6" style="pointer-events:none;">
                                                        <div class="form-group">
                                                            <label>Service Code:</label>
                                                            @if (ViewBag.SubCatlist != null)
                                                            {

                                                            @Html.DropDownListFor(m => m.ServiceCode, ViewBag.SubCatlist as IEnumerable<SelectListItem>
                                                                , "--Select Cost center--", new { @class = "form-control", @id = "Pk_CC_Id", })
                                                                @Html.ValidationMessageFor(model => model.ServiceCode, "", new { @class = "text-danger validation-msg" })
                                                                }
                                                        </div>
                                                    </div>*@
                                                    <div class="col-xs-12 col-sm-6">
                                                        <div class="form-group">
                                                            <label>Activity:</label>
                                                            @if (ViewBag.Activity != null)
                                                            {
                                                            @Html.DropDownListFor(m => m.ActivityType, ViewBag.Activity as IEnumerable<SelectListItem>
                                                                , "--Select Activity--", new { @class = "form-control", @id = "PT", @onchange = "onchangeddlStatus(this.value);" })

                                                                @Html.ValidationMessageFor(model => model.ActivityType, "", new { @class = "text-danger validation-msg" })
                                                                }

                                                        </div>
                                                    </div>

                                                    @if (Model.Id > 0)
                                                    {
                                                    <div class="col-xs-12 col-sm-6" style="pointer-events:none;">
                                                        <div class="form-group">
                                                            <label>Start Date:</label>

                                                            @Html.TextBoxFor(model => model.StartDate, "{0:dd MMM yyyy}", htmlAttributes: new { placeholder = "Select Start Date", @class = "form-control form-control-custom StartDate", autocomplete = "off" })
                                                            @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger validation-msg" })
                                                        </div>
                                                    </div>

                                                    <div class="col-xs-12 col-sm-6" style="pointer-events:none;">
                                                        <div class="form-group">
                                                            <label>End Date:</label>
                                                            @Html.TextBoxFor(model => model.EndDate, "{0:dd MMM yyyy}", new { @placeholder = "End Date", @class = "form-control form-control-custom EndDate", autocomplete = "off" })
                                                            @Html.ValidationMessageFor(model => model.EndDate, "", new { @class = "text-danger validation-msg" })
                                                        </div>
                                                    </div>
                                                    }
                                                    else
                                                    {
                                                    <div class="col-xs-12 col-sm-6">
                                                        <div class="form-group">
                                                            <label>Start Date:</label>

                                                            @Html.TextBoxFor(model => model.StartDate, "{0:dd MMM yyyy}", htmlAttributes: new { placeholder = "Select Start Date", @class = "form-control form-control-custom StartDate", autocomplete = "off" })
                                                            @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger validation-msg" })
                                                        </div>
                                                    </div>
                                                    <div class="col-xs-12 col-sm-6">
                                                        <div class="form-group">
                                                            <label>End Date:</label>
                                                            @Html.TextBoxFor(model => model.EndDate, "{0:dd MMM yyyy}", new { @placeholder = "End Date", @class = "form-control form-control-custom EndDate", autocomplete = "off" })
                                                            @Html.ValidationMessageFor(model => model.EndDate, "", new { @class = "text-danger validation-msg" })
                                                        </div>
                                                    </div>
                                                    }





                                                </div>
                                                @*<div class="row" id="pk_ccid">
                                                    <div class="col-xs-12 col-sm-6" id="pk_ccid">
                                                        <div class="form-group">
                                                            <label>Activity Against Cost Centre:</label>
                                                            @if (ViewBag.SubCatlist != null)
                                                            {
                                                            @Html.DropDownListFor(model => model.CostCenter, ViewBag.SubCatlist as IEnumerable<SelectListItem>
                                                                , "--Select Cost center--", new { @class = "form-control", @id = "Pk_CC_Id", })
                                                                @Html.ValidationMessageFor(model => model.CostCenter, "", new { @class = "text-danger validation-msg" })
                                                                }
                                                        </div>
                                                    </div>

                                                </div>*@
                                                <div class="row">
                                                    <div class="col-xs-12 col-sm-4" id="OnSiteReadOnly">
                                                        <div class="form-group">
                                                            <label>Outdoor / On-Site Time (Hrs.):</label>

                                                            @Html.TextBoxFor(model => model.ODTime, htmlAttributes: new
                                                            {
                                                            placeholder = "Outdoor / On-Site Time (Hrs.)",
                                                            @class = "form-control",
                                                            autocomplete = "off",
                                                            @OnKeyPress = "return isNumber(event)"@*, @id = "txtonsite"*@ })
                                                            @Html.ValidationMessageFor(model => model.ODTime, "", new { @class = "text-danger validation-msg" })
                                                        </div>
                                                    </div>
                                                    <div class="col-xs-12 col-sm-4" id="OffSiteReadOnly">
                                                        <div class="form-group">
                                                            <label>Office / Off-Site Time (Hrs.):</label>
                                                            @Html.TextBoxFor(model => model.EndTime, htmlAttributes: new
                                                            {
                                                            placeholder = "Office / Off-Site Time (Hrs.)",
                                                            @class = "form-control",
                                                            autocomplete = "off",
                                                            @OnKeyPress = "return isNumber(event)"@*, id = "txtoffsite"*@ })
                                                            @Html.ValidationMessageFor(model => model.EndTime, "", new { @class = "text-danger validation-msg" })
                                                        </div>
                                                    </div>

                                                    <div class="col-xs-12 col-sm-4">
                                                        <div class="form-group">
                                                            <label>Travel Time (Hrs.):</label>
                                                            @Html.TextBoxFor(model => model.TravelTime, htmlAttributes: new
                                                            {
                                                            placeholder = "Travel Time (Hrs.)",
                                                            @class = "form-control",
                                                            autocomplete = "off",
                                                            @OnKeyPress = "return isNumber(event)"@*, id = "txttraveltime"*@ })
                                                            @Html.ValidationMessageFor(model => model.TravelTime, "", new { @class = "text-danger validation-msg" })
                                                        </div>
                                                    </div>
                                                    @*
                                                </div>*@
                                        </div>
                                        <div class="row">

                                            <div class="col-xs-12 col-sm-4">
                                                <div class="form-group">
                                                    <label>City/Cities:</label>
                                                    @Html.TextBoxFor(model => model.Location, new { @placeholder = "City/Cities", @class = "form-control" })
                                                    @Html.ValidationMessageFor(model => model.Location, "", new { @class = "text-danger validation-msg" })
                                                </div>
                                            </div>

                                            <div class="col-xs-12 col-sm-4">
                                                <div class="form-group">
                                                    <label id="SalesOrderNo" style="display:none;">SalesOrder No.:</label>
                                                    <label id="ControlNo" style="display:none;">TIIMES Job No.:</label>
                                                    @*<label id="ControlNoWithSubJob" style="display:none;">TIIMES Sub Job No.:</label>*@
                                                    <span id="ControlSpan" style="color:#ff0000;">*</span>

                                                    @Html.TextBoxFor(model => model.JobNumber, htmlAttributes: new { placeholder = "TUV India Control No.", @class = "form-control", autocomplete = "off", @id = "JobNumber" })
                                                    @Html.ValidationMessageFor(model => model.JobNumber, "", new { @class = "text-danger validation-msg" })
                                                </div>
                                            </div>

                                            @*<div class="col-xs-12 col-sm-4" id="ControlNoWithSubJob" style="display:none;">
                                                <div class="form-group">
                                                    <label>TUV India Control (With Sub Job) No.:</label><span style="color:#ff0000;">*</span>

                                                    @Html.TextBoxFor(model => model.JobNumber, htmlAttributes: new { placeholder = "TUV India Control (With Sub Job) No.", @class = "form-control", autocomplete = "off",@id="JobNumbersub" })
                                                    @Html.ValidationMessageFor(model => model.JobNumber, "", new { @class = "text-danger validation-msg" })
                                                </div>
                                            </div>*@

                                            <div class="col-xs-12 col-sm-4" id="callNo" style="display:none;">
                                                <div class="form-group">
                                                    <label>Tiimes Call Number of Inspector.:</label><span style="color:#1C3DE3">*</span>

                                                    @Html.TextBoxFor(model => model.CallNumber, htmlAttributes: new { placeholder = "Call Number", @class = "form-control", autocomplete = "off", @id = "txtCallNumber", onchange = "CheckValidCall()" })
                                                    @Html.ValidationMessageFor(model => model.CallNumber, "", new { @class = "text-danger validation-msg" })
                                                </div>
                                            </div>


                                        </div>

                                        <div class="row" id="NewCust">
                                            <div class="col-xs-12 col-sm-4">
                                                <div class="form-group " id="DivExisting">
                                                    <label>Customer Type <span style="color:red">*</span> : </label>

                                                    @Html.RadioButtonFor(m => m.NewExistingCustomer, "New", new { id = "New" })
                                                    <label for="Active">New</label>
                                                    @Html.RadioButtonFor(m => m.NewExistingCustomer, "Existing", new { id = "Existing" })
                                                    <label for="InActive">Existing</label>
                                                </div>
                                            </div>

                                            <div class="col-xs-12 col-sm-4">
                                                <div class="form-group">

                                                    @Html.RadioButtonFor(m => m.DomesticInternationVisit, "Domestic", new { id = "Domestic" })
                                                    <label for="Active">Domestic</label>
                                                    @Html.RadioButtonFor(m => m.DomesticInternationVisit, "International", new { id = "InternationVisit" })
                                                    <label for="InActive">International</label>
                                                </div>
                                            </div>
                                        </div>

                                        <div class="row">
                                            <div class="col-xs-12 col-sm-8">
                                                <div class="form-group">
                                                    <label>Description of Activity:</label>
                                                    @Html.TextAreaFor(model => model.Description, htmlAttributes: new { placeholder = "Description of Activity", @class = "form-control form-control-custom ", autocomplete = "off", @rows = "5" })
                                                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger validation-msg" })
                                                </div>
                                            </div>

                                        </div>
                                        <div class="col-xs-12 col-sm-4" id="attach">
                                            <div class="form-group">
                                                <label>Attachments:</label>
                                                @*<input type="file" class="inputupload" name="Image" id="img_Banner" multiple="multiple" />*@
                                                <input type="file" class="inputupload" name="Image" id="img_Banner" multiple="multiple" />
                                                @Html.HiddenFor(m => m.Attachment)
                                                @if (Model != null && Model.Attachment != null && Model.Attachment != "")
                                                {
                                                string[] words = (Model.Attachment).Split(',');
                                                for (int j = 1; j < words.Count(); j++)
                                                {
                                                <a target="_blank" href="@Url.Content(" ~/NonInspectionActivityDocument/" + words[j-1])">
                                                @*<img src="~/PDF-Icon.png" width="50" height="50" />*@
                                                <span>@words[j - 1].ToString()</span>
                                                </a>
                                                @*<img src="@Url.Content(" ~/Content/JobDocument/" + words[j-1])" width="50" height="50" />*@
                                                }
                                                }
                                            </div>
                                        </div>





                                        <div class="row">

                                            <div class="col-xs-12 col-sm-4">

                                                <div class="form-group">

                                                    <button type="submit" class="btn btn-default insert-form-btn" id="btnAddFl"> Save </button>
                                                    @*<button type="button" class="btn btn-default insert-form-btn" id="ddlInspectionLocation"> Expense</button>*@


                                                </div>
                                            </div>

                                        </div>




                                        <div class="row">
                                            <div class="col-xs-12">
                                                <hr class="custom-hr1">
                                            </div>
                                        </div>
                                        </form>



                                        @*}*@
                                        @using (Html.BeginForm("ListNonInspectionActivity", "OtherServices", FormMethod.Post, new { enctype = "multipart/form-data", @id = "form1" }))
                                        {




                                        <div class="row">
                                            @*<div class="col-xs-12 col-sm-offset-1 col-sm-10">
                                                *@
                                                <div>
                                                    <div class="form-box">
                                                        <form>



                                                            <div class="row">
                                                                <div class="col-xs-12" style="text-align:center;">
                                                                    <h4><label>Records</label></h4>
                                                                </div>
                                                            </div>
                                                            <div class="row">
                                                                <div class="col-xs-4">
                                                                    <div class="form-group">
                                                                        <label>From Date:</label>
                                                                        @Html.TextBoxFor(model => model.FromD, "{0:dd MMM yyyy}", htmlAttributes: new { placeholder = "Select Start Date", @class = "form-control form-control-custom FromD", autocomplete = "off" })
                                                                        @Html.ValidationMessageFor(model => model.FromD, "", new { @class = "text-danger validation-msg" })
                                                                    </div>
                                                                </div>


                                                                <div class="col-xs-4">
                                                                    <div class="form-group">
                                                                        <label>To Date:</label>
                                                                        @Html.TextBoxFor(model => model.ToD, "{0:dd MMM yyyy}", htmlAttributes: new { placeholder = "Select To Date", @class = "form-control form-control-custom ToD", autocomplete = "off" })
                                                                        @Html.ValidationMessageFor(model => model.ToD, "", new { @class = "text-danger validation-msg" })
                                                                    </div>

                                                                </div>

                                                                <div class="col-xs-2">
                                                                    <div class="form-group">
                                                                        @*<label>Search:</label>*@<br />
                                                                        <input type="submit" value="Search" class="btn btn-default insert-form-btn" style="margin-top:3px" />
                                                                    </div>

                                                                </div>
                                                                <div class="col-xs-2">
                                                                    <div class="form-group">
                                                                        <br />
                                                                        <button type="button" value="ExportToExcel" class="btn btn-default insert-form-btn" onclick="location.href='@Url.Action(" ExportIndex","NonInspectionActivity")'"
                                                                                style="border:none;margin-top:0px;margin-top:3px;">
                                                                            Export To Excel
                                                                        </button>

                                                                    </div>
                                                                </div>
                                                            </div>



                                                            <div class="col-xs-12">
                                                                <table class="display dataTable no-footer" style="overflow-y:auto;width: 1121px;margin-left:-100px" id="gridMapping" onpageindexchanged="gridMapping_PageIndexChanged">
                                                                    <tr>
                                                                        <td>
                                                                            @(Html
                                                                            .Grid(Model.NIADashBoard)
                                                                            .Build(columns =>
                                                                            {
                                                                            columns.Add(c => c.DateSE).Titled("Date");
                                                                            columns.Add(c => c.ActivityTypeName).Titled("Activity");
                                                                            columns.Add(c => c.StartTime).Titled("Outdoor / On-Site Time (Hrs.)");
                                                                            columns.Add(c => c.EndTime).Titled("Office / Off-Site Time (Hrs.)");
                                                                            columns.Add(c => c.TravelTime).Titled("Travel Time (Hrs.)");
                                                                            columns.Add(c => c.CostCenter_name).Titled("CostCenter"); // added by nikita on 30042024
                                                                            columns.Add(c => c.Location).Titled("City/Cities");
                                                                            columns.Add(c => c.Description).Titled("Description of Activity");
                                                                            columns.Add(c => c.ServiceCode).Titled("Service Code");
                                                                            columns.Add(c => c.NewExistingCustomer).Titled("Customer Type1").Css("grdSAPWidth");
                                                                            columns.Add(c => c.DomesticInternationVisit).Titled("Customer Type2").Css("grdSAPWidth");
                                                                            columns.Add(c => c.Id).Titled("ID");
                                                                            columns.Add(c => c.JobNumber).Titled("TUVI Control No.");
                                                                            columns.Add(c => c.SAP_No).Titled("SAP Number").Css("grdSAPWidth");
                                                                            columns.Add().Titled("Add Expenses").RenderedAs(c => CustomRenderingOfColumnExpense(c)).Sortable(true);
                                                                            columns.Add().Titled("Edit/Delete").RenderedAs(c => CustomRenderingOfColumn(c)).Sortable(true);
                                                                            columns.Add().Titled("Attachments").RenderedAs(c => CustomRenderingOfColumnAttachment(c)).Sortable(true);
                                                                            })
                                                                            .Pageable(pager =>
                                                                            {
                                                                            pager.ShowPageSizes = true;
                                                                            pager.PagesToDisplay = 3;
                                                                            pager.CurrentPage = 1;
                                                                            pager.RowsPerPage = 15;
                                                                            })
                                                                            .UsingFilterMode(GridFilterMode.Row)
                                                                            .Empty("No Data Found")
                                                                            .Filterable()
                                                                            .Sortable()
                                                                            )

                                                                        </td>
                                                                    </tr>
                                                                </table>
                                                            </div>



                                                            <div class="modal" id="myModal">
                                                                <div class="modal-dialog">
                                                                    <div class="modal-content">


                                                                        <div class="modal-header">
                                                                            <button type="button" class="close NO" data-dismiss="modal">&times;</button>
                                                                        </div>
                                                                        <div class="modal-body">
                                                                            Do you want to Add Expense and Trip Segment?
                                                                        </div>

                                                                        <!-- Modal footer -->
                                                                        <div class="modal-footer">
                                                                            @*<a href="@Url.Action(" VisitReportForm", "VisitReport" , new {@PK_Call_ID=Model.PK_Call_ID })" class="btn btn-danger" style="background-color:green;" title="Edit">Yes</a>*@
                                                                            <a href="@Url.Action(" CreateExpenseItem", "ExpenseItem" , new { FKId=Model.Id,Type ="NIA" ,SubJobNo=Model.JobNumber,PK_Call_Id =Model.PK_Call_ID })" class="btn btn-danger" style="background-color:green;" title="Edit">Add Expense</a>
                                                                            <a href="@Url.Action(" CreateTripSegment", "TripSegment" , new { FKId=Model.Id,Type ="NIA" ,SubJobNo=Model.JobNumber,PK_Call_Id =Model.PK_Call_ID })" class="btn btn-danger" style="background-color:green;" title="Edit">Add Trip Segment</a>

                                                                            <button type="button" class="btn btn-danger NO" data-dismiss="modal">No</button>
                                                                        </div>

                                                                    </div>
                                                                </div>
                                                            </div>



                                                        </form>
                                                    </div>
                                                </div>
                                            </div>

                                            }

                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

                                                                    }


<script src="~/AllJsAndCss/moment.min.js"></script>

<link rel="stylesheet" href="//code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css">
<script src="//code.jquery.com/jquery-1.10.2.js"></script>
<script src="//code.jquery.com/ui/1.11.4/jquery-ui.js"></script>



<script>
    $(document).ready(function () {
        $('#ControlSpan').hide();
        $("#JobNumber").hide();

        var activity_code = @Session["obsId"];
        if (activity_code == "32") {
            $("#PT option[value='44']").show();
            $("#PT option[value='45']").show();

        }

        else if(activity_code == "21" || activity_code == "22") {
            $("#PT option[value='42']").show();

            $("#PT option[value='48']").show();
            $("#PT option[value='49']").show();
            $("#PT option[value='50']").show();
            $("#PT option[value='51']").show();
            $("#PT option[value='52']").show();
            $("#PT option[value='53']").show();
            $("#PT option[value='54']").show();
            $("#PT option[value='55']").show();
            $("#PT option[value='56']").show();
            $("#PT option[value='57']").show();



        }
        else if(activity_code == "20") {
            $("#PT option[value='37']").show();
        }
        //else {
        //    $("#PT option[value='37']").remove();
        //    $("#PT option[value='45']").remove();
        //}


        $("#PT option[value='15']").remove();
        $("#PT option[value='29']").remove();
        $("#PT option[value='14']").remove();
        $("#PT option[value='13']").remove();
        $("#PT option[value='38']").remove();
        $("#PT option[value='36']").remove();
        $("#PT option[value='39']").remove();
        $("#PT option[value='40']").remove();
        $("#PT option[value='41']").remove();
        $("#PT option[value='43']").remove();
        $("#PT option[value='46']").remove();

        $("#PT option[value='01']").remove();
        $("#PT option[value='02']").remove();
        $("#PT option[value='03']").remove();
        $("#PT option[value='31']").remove();
        $("#PT option[value='30']").remove();
        $("#PT option[value='34']").remove();
        $("#PT option[value='32']").remove();

        $("#PT option[value='04']").remove();
        $("#PT option[value='05']").remove();
        $("#PT option[value='06']").remove();
        $("#PT option[value='07']").remove();

        $("#PT option[value='19']").remove();
        $("#PT option[value='17']").remove();

        $("#PT option[value='25']").remove();
        $("#PT option[value='27']").remove();
        $("#PT option[value='28']").remove();

        $("#PT option[value='16']").remove();
        $("#PT option[value='20']").remove();
        $("#PT option[value='21']").remove();

        $("#PT option[value='22']").remove();

        $("#PT option[value='18']").remove();
        $("#PT option[value='40']").remove();
        $("#PT option[value='41']").remove();
        $("#PT option[value='19']").remove();
        $("#PT option[value='07']").remove();
        $("#PT option[value='17']").remove();
        $("#PT option[value='25']").remove();
        $("#PT option[value='27']").remove();

        $("#PT option[value='28']").remove();
        $("#PT option[value='47']").remove();

        //$("#PT option[value='37']").remove();

        var activity_code = @Session["obsId"];
        if (activity_code == "32") {
            $("#PT option[value='44']").show();
            $("#PT option[value='45']").show();


            $("#PT option[value='37']").hide();
            $("#PT option[value='42']").hide();
            $("#PT option[value='47']").hide();
            $("#PT option[value='48']").hide();
            $("#PT option[value='49']").hide();
            $("#PT option[value='50']").hide();
            $("#PT option[value='51']").hide();
            $("#PT option[value='52']").hide();
            $("#PT option[value='53']").hide();
            $("#PT option[value='54']").hide();
        }
            //else {
            //    $("#PT option[value='44']").remove();
            //    $("#PT option[value='45']").remove();
            //}


        else if (activity_code == "21"||activity_code=="22") {
            $("#PT option[value='44']").hide();
            $("#PT option[value='45']").hide();

            $("#PT option[value='37']").show();
            $("#PT option[value='42']").show();
            //$("#PT option[value='47']").show();
            $("#PT option[value='48']").show();
            $("#PT option[value='49']").show();
            $("#PT option[value='50']").show();
            $("#PT option[value='51']").show();
            $("#PT option[value='52']").show();
            $("#PT option[value='53']").show();
            $("#PT option[value='54']").show();
        }
        //else {
        //    $("#PT option[value='44']").remove();
        //    $("#PT option[value='45']").remove();
        //}



        $('#ddlInspectionLocation').on('click', function () {
            debugger;
            $('#myModal').show();
        });

    });
</script>


<script>

    function onchangeddlStatus(val)
    {
        debugger;
        var selectedValue = $("#PT").val();

        if(selectedValue == "37"){
            $("#SalesOrderNo").show();
            $("#ControlNo").hide();
            $('#ControlSpan').show();
            $("#JobNumber").show();
        }
        else{
            $("#ControlNo").show();
            $("#SalesOrderNo").hide();
            $('#ControlSpan').show();
            $("#JobNumber").show();
        }

    }
</script>







<script>
    $(function () {
        $(".StartDate").datepicker({
            dateFormat: 'dd/mm/yy',//check change
            changeMonth: true,
            changeYear: true,
            yearRange: "-100:+50"
        });
    });
</script>

<script>
    $(function () {
        $(".EndDate").datepicker({
            dateFormat: 'dd/mm/yy',//check change
            changeMonth: true,
            changeYear: true,
            yearRange: "-100:+50"
        });
    });
</script>

@*Date Picker for From Date*@

<script>
    $(function () {
        $(".FromD").datepicker({
            dateFormat: 'dd/mm/yy',//check change
            changeMonth: true,
            changeYear: true,
            yearRange: "-100:+50"
        });
    });
</script>

<script>
    $(function () {
        $(".ToD").datepicker({
            dateFormat: 'dd/mm/yy',//check change
            changeMonth: true,
            changeYear: true,
            yearRange: "-100:+50"
        });
    });
</script>



<script>
    function isNumber(evt) {
        evt = (evt) ? evt : window.event;
        //  alert(evt.keyCode);
        var charCode = (evt.which) ? evt.which : evt.keyCode;


        if ((charCode > 31 && (charCode < 48 || charCode > 57)) && (charcode != 46)) {
            return false;
        }
        return true;
    }
</script>

<script>
    [].forEach.call(document.getElementsByClassName('mvc-grid'), function (element) {
        new MvcGrid(element);
    });
</script>

<script>
    var CustomTextFilter = (function (base) {
        MvcGridExtends(CustomTextFilter, base);

        function CustomTextFilter(column) {
            base.call(this, column);

            this.methods = ['contains'];
            column.grid.lang.custom = { contains: 'Contains' };
        }

        // Other extension points can be found at MvcGridFilter declaration

        return CustomTextFilter;
    })(MvcGridFilter);

    new MvcGrid(document.querySelector('.mvc-grid'), {
        filters: {
            'custom': CustomTextFilter
        }
    });
</script>


<script>
    $(document).ready(function () {
        $('.NO').click('change', function () {

            $('#myModal').hide();
        });
    });
</script>

<script>
    $(document).ready(function () {
        debugger;
        var AddExpense = $("#AddExpense").val();
        if(AddExpense=="Yes")
        {

            //var button = document.getElementById("ddlInspectionLocation");
            //button.Click();
            $('#myModal').show();
        }
        else
        {

        }


    });
</script>



<script>

    function checkDateDifference() {
        debugger;
        //if ($('#chkPassport').prop('checked')) {
        var fromDate = $("#StartDate").val();
        var convertedfromDate = moment(fromDate).format('DD/MM/YYYY');



        var toDate = $("#EndDate").val();
        var convertedtoDate = moment(toDate).format('DD/MM/YYYY');

        if (moment(fromDate, 'DD/MM/YYYY').isValid() && moment(toDate, 'DD/MM/YYYY').isValid()) {
            var diffDuration = moment.duration(moment(toDate, 'DD/MM/YYYY').diff(moment(fromDate, 'DD/MM/YYYY')));

            var daysDifference = diffDuration.asDays();


        } else {
            console.log('Invalid date format');
        }




        //var timeDifference = toDate - fromDate;
        //var dayDifference = Math.floor(timeDifference / (1000 * 60 * 60 * 24));

        if (daysDifference > 6) {
            alert('System will not allow to fill Timesheet for more than 6 days.');
            $("#StartDate").val("");
            $("#EndDate").val("");
        }
    }

    function cheackSunday() {
        debugger;
        //var fromDate = $("#StartDate").val();
        //var toDate = $("#EndDate").val();

        //if (moment(fromDate, 'DD/MM/YYYY').isValid() && moment(toDate, 'DD/MM/YYYY').isValid()) {
        //    if (isSunday(fromDate) || isSunday(toDate)) {
        //        alert('Selected date is a Sunday. Please choose a different date.');

        //    }
        //}

        var startDate = moment($('#StartDate').val(), 'YYYY-MM-DD');
        var endDate = moment($('#EndDate').val(), 'YYYY-MM-DD');

        if (isSunday(startDate) || isSunday(endDate)) {
            alert('Selected date is a Sunday. Please choose a different date.');
            // You can add additional actions or modifications here if needed.
        }

    }

    //function isSunday(date) {
    //    return date.getDay() === 0; // 0 corresponds to Sunday
    //}
    function isSunday(date) {
        debugger
        return date.day() === 0; // 0 corresponds to Sunday
    }

</script>
<script>
    //$(".PoDates1").change(function () {
    $('#StartDate, #EndDate').change(function () {
        debugger;
        checkDateDifference();
        UserHolidayCheck();
        CheckWeeklyOff()
    });
</script>

<script>
    function UserHolidayCheck()
    {
        debugger;
        //$("#Status").html('<font color="blue">Checking ...</font>'),
        $.post("@Url.Action("chkIfHoliday", "NonInspectionActivity")",
            {
                //companyname: $("#Company_Name").val(),
                fromDate: $("#StartDate").val(),
                toDate: $("#EndDate").val()
            },
            function (data)
            {
                if (data == 0)
                {


                }
                else
                {
                    alert("Entering timesheet for Holiday / Sunday. Ensure dates before proceeding further.")
                }
            });
    }
</script>

<script>
    function CheckWeeklyOff()
    {
        debugger;
        $.post("@Url.Action("chkIfWeeklyOffEntered", "NonInspectionActivity")",
            {
                fromDate: $("#StartDate").val(),
                toDate: $("#EndDate").val()
            },
            function (data)
            {
                if (data == 0)
                {

                }
                else
                {
                    //alert("You have inserted leaves on selected dates");
                    //$("#StartDate").val("");
                    //$("#EndDate").val("");

                    var ActivityType = $("#PT").val();
                    if (ActivityType == '40')
                    {

                    }
                    else
                    {
                        alert("You have inserted leaves on selected dates");
                        $("#StartDate").val("");
                        $("#EndDate").val("");
                    }



                }
            });
    }
</script>


<script>
    function CheckSunday()
    {
        debugger;
        $.post("@Url.Action("chkIfSunday", "NonInspectionActivity")",
            {
                fromDate: $("#StartDate").val(),
                toDate: $("#EndDate").val()
            },
            function (data)
            {
                if (data == 0)
                {

                }
                else
                {
                    alert("Entering timesheet for Sunday. Ensure dates before proceeding further.")
                }
            });
    }
</script>

<script>


    $("#btnAddFl").click(function myfunction() {
        debugger;
        if (validateform() == false) {
            return false;
        }
        else {
            $("#form1").submit();
        }
    });

    function validateform()
    {
        debugger;
        var ActivityType = $("#PT").val();
        var STDate = $("#StartDate").val();
        var ENDate = $("#EndDate").val();

        var Location = $("#Location").val();
        var Description = $("#Description").val();


        var JN = $("#JobNumber").val();
        //var JNSub = $("#JobNumbersub").val();

        var TT = parseInt($("#TravelTime").val());// $("#TravelTime").val();
        var ODT = $("#ODTime").val();
        var ET = $("#EndTime").val();

        var Call = $("#txtCallNumber").val();
        var Rating = $("#IdRating").val();

        var NewExistingCustomer = $("input[type='radio'][name='NewExistingCustomer']:checked").val();
        var DomesticInternationVisit = $("input[type='radio'][name='DomesticInternationVisit']:checked").val();

        var Id = $("#Id").val();

        var TravelTime = $("#TravelTime").val();


        //added by nikita on 3004024
        var activity_code = @Session["obsId"];
        var roleid=@Session["RoleID"].ToString();



        if (activity_code == "21" || roleid == "1" || roleid == "46" ||roleid == "47" ||roleid == "48" || roleid == "49" || roleid == "51" || roleid == "53")
        {

            if(ActivityType == "01"||ActivityType == "02" || ActivityType == "03"||ActivityType == "30"|| ActivityType == "31"||ActivityType == "34"||ActivityType == "32"||ActivityType == "27")
            {
                if($("#Pk_CC_Id").val()==""){
                    alert("Please select cost Center!")
                    $("#Pk_CC_Id").focus();
                    return false;
                }
            }
        }


        //end


        if (JN == "" || JN == null) {
            alert("Please Enter Job Number !");
            $("#JobNumber").focus()
            return false;
        }

        if (0 <= parseInt(ODT) && parseInt(ODT) <= 16) {

        }
        else {
            alert("Please select OD Time between 0 to 16!");
            $("#ODTime").focus()
            return false;
        }
        if (0 <= parseInt(ET) && parseInt(ET) <= 16) {

        }
        else {
            alert("Please select Office Time between 0 to 16!");
            $("#EndTime").focus()
            return false;
        }


        //added by nikita on 12032024
        if (ActivityType == '28')
        {
            if ((parseInt($("#TravelTime").val()) > 24 || parseInt($("#TravelTime").val()) < 6))
            {
                alert("please select Travel Time between 6 to 24!");
                $("#TravelTime").focus();
                return false;
            }
        } else {
            if ((parseInt($("#TravelTime").val()) > 8 || parseInt($("#TravelTime").val()) < 0))
            {
                alert("Please select Travel Time between 0 to 8!");
                $("#TravelTime").focus();
                return false;
            }
        }

        //end
        //added by nikita on 12032024
        if (ActivityType === '40' || ActivityType === '41' || ActivityType === '28') {

        }
        else {
            if (parseInt(ODT) === 0 && parseInt(TT) === 0 && parseInt(ET) === 0) {
                alert("At least one value should be more than 0!");
                $("#ODTime").focus();
                return false;
            }
        }

        //end



        if (Id > 0)
        {

        }
        else
        {
            if (STDate == "" || STDate == null) {
                alert("Please select Start Date !");
                $("#StartDate").focus()
                return false;
            }
            else
            {

            }

            if (ENDate == "" || ENDate == null) {
                alert("Please select End  Date !");
                $("#EndDate").focus()
                return false;
            }
            else
            {

            }
        }


        if (($("#PT Option:selected").val() == ""))
        {
            alert("Please Select Activity Type !");
            $("#PT").focus()
            return false;
        }









        //  var LeaveFile = $("[name='img_Banner']").val();
        var LeaveFile = $("#img_Banner").val();

        if (NewExistingCustomer == "" || NewExistingCustomer == null) {
            alert("Select Customer Type!");
            $("#NewExistingCustomer").focus()
            return false;
        }
        if (DomesticInternationVisit == "" || DomesticInternationVisit == null) {
            alert("Select Customer Type!");
            $("#DomesticInternationVisit").focus()
            return false;
        }

        if (TravelTime=="" || TravelTime==null)
        {
            alert("Select Travel Time!");
            $("#TravelTime").focus()
            return false;
        }
        if (Location == "" || Location == null) {
            alert("Select Location!");
            $("#Location").focus()
            return false;
        }
        if (Description == "" || Description == null) {
            alert("Select Description!");
            $("#Description").focus()
            return false;
        }



    }

</script>

<script>
    $(document).ready(function ()
    {
        $("#JobNumber").focusout(function ()
        {

            var JobNoAS = $("#JobNumber").val();
            var ActivityType = $("#PT").val();
            // alert(ActivityType);
            if (JobNoAS != '')
            {
                $.post("@Url.Action("ValidateJob", "otherServices")",
                {
                    JobNo: $("#JobNumber").val(),
                    ActType: $("#PT").val()

                },
                function (data)
                {
                    if (data == 0)
                    {
                        alert("Job No does not exist !");
                        $("#JobNumber").val("");
                        return false;
                    }
                    if (data == 2) {
                        alert("SalesOrder No does not exist !");
                        $("#JobNumber").val("");
                        return false;
                    }
                }
                );
            }

        });

    });
</script>



