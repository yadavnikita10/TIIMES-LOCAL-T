
@model TuvVision.Models.CallsModel
@{
    ViewBag.Title = "WorkRegister";
    //Layout = "~/Views/Shared/_TuvVision.cshtml";
    Layout = null;
}


@*<script src="https://code.jquery.com/jquery-1.10.2.js"></script>
    <script src="https://code.jquery.com/ui/1.11.4/jquery-ui.js"></script>
    <link rel="stylesheet" href="https://code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css" />

    <link href="~/AllJsAndCss/css/MVCGridN.css" rel="stylesheet" />
    <script type="text/javascript" language="javascript" src="~/AllJsAndCss/datatable/js/jquery.dataTables.js"></script>*@

<script src="https://code.jquery.com/jquery-1.10.2.js"></script>
<script src="https://code.jquery.com/ui/1.11.4/jquery-ui.js"></script>
<link rel="stylesheet" href="https://code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css" />


<script src="~/Scripts/MvcGrid/mvc-grid.js"></script>
<link href="~/AllJsAndCss/css/MVCGridN.css" rel="stylesheet" />
<script type="text/javascript" language="javascript" src="~/AllJsAndCss/datatable/js/jquery.dataTables.js"></script>



<link href="~/AllJsAndCss/css/bootstrap.min.css" rel="stylesheet">
<link href="~/AllJsAndCss/css/style.css" rel="stylesheet">
<link href="~/AllJsAndCss/datatable/css/jquery.dataTables.css" rel="stylesheet">


@helper CustomRenderingOfReport1(TuvVision.Models.CallsModel IVR)
        {
    <a href="~/IVRReport/@IVR.IVR" download="~/IVRReport/@IVR.IVR">
        @*@Report.Report*@
        @IVR.IVR
    </a>
}

@helper CustomRenderingOfReport2(TuvVision.Models.CallsModel Inspection)
        {
    <a href="~/IVRReport/@Inspection.insopectionRecord" download="~/IVRReport/@Inspection.insopectionRecord">
        @*@Report.Report*@
        @Inspection.insopectionRecord
    </a>
}

@helper CustomRenderingOfReport3(TuvVision.Models.CallsModel Refdocument)
        {
    <a href="~/IVRReport/@Refdocument.RefDocument" download="~/IVRReport/@Refdocument.RefDocument">
        @*@Report.Report*@
        @Refdocument.RefDocument
    </a>
}





<script>
    $(function () {
        $(".FromD").datepicker({
            dateFormat: 'dd/mm/yy',//check change
            changeMonth: true,
            changeYear: true,
            yearRange: "-100:+50"
        });
    });
</script>
<script>
    $(function () {
        $(".ToD").datepicker({
            dateFormat: 'dd/mm/yy',//check change
            changeMonth: true,
            changeYear: true,
            yearRange: "-100:+50"
        });
    });
</script>


@using (Html.BeginForm("WorkRegister", "MisReport", FormMethod.Post, new { enctype = "multipart/form-data", @id = "form1" }))
{
    <div class="main-content3 xs-max-height">
        <div class="container-fluid">

            <div class="container-fluid">
                <div class="row">
                    <div class="col-lg-10">
                        <a href="@Url.Action("Welcome", "Login")" class="logo">
                            <img src="~/AllJsAndCss/images/logoN.png" alt="" style="max-width: 210%;margin-top: -59px;">
                        </a>
                        <h3 class="dynamic-page-title dynamic-page-title-2  text-left" style="color: #001ED2;font-size:23px;font-weight:bold;padding-left:147px;padding-top:10px;font-family:'TNG Pro'; ">TUV India Private Limited <br />Invoicing Data </h3>
                    </div>

                    <div class="col-lg-2" style="padding-right:20px;">
                        <button type="button" class="btn btn-info" style="margin-top: 16px;margin-left: 37px;width: 150px;background-color: #104193;color:white;border-radius: 0;" onclick="Redirect()">Go Back</button>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-4">
                    <div class="form-group">
                        <label class="small">From Date:</label>
                        @Html.TextBoxFor(model => model.FromDateI, "{0:dd MMM yyyy}", htmlAttributes: new { placeholder = "Select Start Date", @class = "form-control form-control-custom form-control-sm form FromD", autocomplete = "off" })
                        @Html.ValidationMessageFor(model => model.FromDateI, "", new { @class = "text-danger validation-msg" })
                    </div>
                </div>
                <div class="col-sm-4">
                    <div class="form-group">
                        <label class="small">To Date:</label>
                        @Html.TextBoxFor(model => model.ToDateI, "{0:dd MMM yyyy}", htmlAttributes: new { placeholder = "Select End Date", @class = "form-control form-control-custom form-control-sm form FromD", autocomplete = "off" })
                        @Html.ValidationMessageFor(model => model.ToDateI, "", new { @class = "text-danger validation-msg" })
                    </div>
                </div>
                @*<div class="col-sm-2">
                    <div class="form-group">
                        <label class="small">Job Number/Sap Number:</label>
                        @Html.TextBoxFor(model => model.Job, "{0:dd MMM yyyy}", htmlAttributes: new { placeholder = "Enter Job Number or Sap Number", @class = "form-control form-control-custom form-control-sm form", autocomplete = "off" })
                        @Html.ValidationMessageFor(model => model.Job, "", new { @class = "text-danger validation-msg" })
                    </div>
                </div>*@

                @*<div class="col-sm-1">
                    <div class="form-group">
                        <label class="small"></label>
                        <label style="margin-top:27px">OR</label>
                    </div>
                </div>
                <div class="col-sm-2">
                    <div class="form-group">
                        <label class="small">Inspector Name:</label>

                        @Html.DropDownListFor(model => model.Inspector, (IEnumerable<SelectListItem>)ViewData["Emp"], "---Select Name---", new { @id = "ddlemp1", @class = "form-control form-control-sm" })
                        @Html.ValidationMessageFor(model => model.Inspector, "", new { @class = "text-danger validation-msg" })
                    </div>
                </div>

                <div class="col-sm-2">
                    <div class="form-group">
                        <label class="small">Customer PO Number on TUVI:</label>
                        @Html.TextBoxFor(model => model.PO_Number, "{0:dd MMM yyyy}", htmlAttributes: new { @class = "form-control form-control-custom form-control-sm form", autocomplete = "off" })
                        @Html.ValidationMessageFor(model => model.PO_Number, "", new { @class = "text-danger validation-msg" })
                    </div>
                </div>
                <div class="col-sm-2">
                    <div class="form-group">
                        <label class="small">PO Date::</label>
                        @Html.TextBoxFor(model => model.po_Date, "{0:dd MMM yyyy}", htmlAttributes: new { @class = "form-control form-control-custom form-control-sm form", autocomplete = "off" })
                        @Html.ValidationMessageFor(model => model.po_Date, "", new { @class = "text-danger validation-msg" })
                    </div>
                </div>*@
                <div class="col-sm-2">
                    <div class="form-group">
                        <label class="small"></label>
                        <input type="submit" value="Search" class="btn btn-default insert-form-btn insert form-control-sm" id="btnsave"/>
                    </div>
                </div>
                <div class="col-sm-2">
                    <div class="form-group">
                        <label class="small"></label>
                        <button type="button" id="btnExport" value="ExportToExcel" class="btn btn-info dynamic-function-btn dynamic-function-btn-2" onclick="location.href='@Url.Action("ExportIndex2", "MisReport")';">
                            Export To Excel
                        </button>
                    </div>
                </div>
                </div>
                @*<div class="col-xs-12">
                    <div class="form-group">
                        <hr class="custom-hr">
                        <div>
                            <button type="button" id="btnExport" value="ExportToExcel" class="btn btn-info dynamic-function-btn dynamic-function-btn-2" onclick="location.href='@Url.Action("ExportIndex1", "MISOPEReport")';">
                                Export To Excel
                            </button>

                        </div>
                    </div>
                </div>*@


                <div class="col-xs-12">
                    <table class="display dataTable no-footer" style="overflow-y:auto" id="gridMapping">
                        <tr>
                            <td>


                                @(Html
.Grid(Model.lstComplaintDashBoard1)
.Build(columns =>

{
    columns.Add(c => c.Call_No).Titled("Call No");
    columns.Add(c => c.Actual_Visit_Date).Titled("Date");
    columns.Add(c => c.SAP_Number).Titled("Sap Number");
    columns.Add(c => c.Company_Name).Titled("Customer Name");
    columns.Add(c => c.Job).Titled("Job");
    columns.Add(c => c.Sub_Job).Titled("Sub job Number");
    columns.Add(c => c.VendorName).Titled("Vendor Name");
    columns.Add(c => c.TopSubVendorName).Titled("sub Vendor Name");
    columns.Add(c => c.SubSubVendorName).Titled("sub sub Vendor Name");
    //columns.Add(c => c.VendorPONo).Titled("Vendor PO Number");
    //columns.Add(c => c.TopSubVendorPONo).Titled("sub Vendor PO Number");
    columns.Add(c => c.Inspector).Titled("Inspector Name");
    //columns.Add(c => c.SAPEmpCode).Titled("SAP Employee Code");
    //columns.Add(c => c.TUVEmpCode).Titled("TUV Employee Code");
    columns.Add(c => c.ExecutingBranch).Titled("Executing Branch");
    //columns.Add(c => c.MandayRate).Titled("Manday Rate in INR");
    columns.Add(c => c.Onsite).Titled("On site Time");
    columns.Add(c => c.Offsite).Titled("Off site Time");

    columns.Add(c => c.TravelTime).Titled("Travel Time");
    columns.Add(c => c.InspectionLocation_).Titled("Inspection Location");
    //columns.Add(c => c.Status).Titled("Call Status");

    //columns.Add(c => c.PresentDay).Titled("Full/Half days");

    columns.Add(c => c.CustomerRepresentative).Titled("Call raised by");
    columns.Add(c => c.OriginatingBranch).Titled("Originating Branch");

    columns.Add(c => c.IVR).Titled("IVR Number").RenderedAs(c => CustomRenderingOfReport1(c)).Sortable(true);


    //columns.Add(c => c.insopectionRecord).Titled("insopection Record").RenderedAs(c => CustomRenderingOfReport2(c)).Sortable(true);
    //columns.Add(c => c.RefDocument).Titled("Reference Documents").RenderedAs(c => CustomRenderingOfReport3(c)).Sortable(true);

    columns.Add(c => c.RefDocument)
   .Titled("Reference Documents")
   .RenderedAs(model =>
   {
       if (model.RefDocument != null && model.RefDocument != "")
       {
           var output = "<ul>";
           foreach (var d in model.RefDocument.Split('!'))
           {
               var attach = d.Split('|');
               if (attach.Length >= 3)
               {
                   var linkText = attach[0].ToString();
                   var linkUrl = Url.Action("Download2", "VisitReport", new { d = attach[2].ToString() });
                   output += $"<li><a href='{linkUrl}' download='{linkUrl}'>{linkText}</a></li>";
               }
           }
           output += "</ul>";
           return new HtmlString(output); ;
       }
       else
       {
           return "";
       }
   })
   .Sortable(true);
    //columns.Add(c => c.RefDocument)
    // .Titled("Reference Documents")
    // .RenderedAs(model =>
    // {
    //     if (model.RefDocument != null && model.RefDocument != "")
    //     {
    //         var output = "";
    //         foreach (var d in model.RefDocument.Split('!'))
    //         {
    //             var attach = d.Split('|');
    //             if (attach.Length >= 3) // Check if there are at least 3 elements in the array
    //             {
    //                 output += $"<li>{CustomRenderingOfReport3(new TuvVision.Models.CallsModel { RefDocument = attach[2].ToString() })}</li>";
    //             }
    //         }
    //         return $"<ul>{output}</ul>";
    //     }
    //     else
    //     {
    //         return "&nbsp;";
    //     }
    // })
    // .Sortable(true);

    columns.Add(c => c.Attachment)
    .Titled("Inspection Records / Reports Documents")
    .RenderedAs(model =>
    {
        if (model.Attachment != null && model.Attachment != "")
        {
            var output = "<ul>";
            foreach (var d in model.Attachment.Split('!'))
            {
                var attach = d.Split('|');
                if (attach.Length >= 3)
                {
                    var linkText = attach[0].ToString();
                    var linkUrl = Url.Action("Download1", "VisitReport", new { d = attach[2].ToString() });
                    output += $"<li><a href='{linkUrl}' download='{linkUrl}'>{linkText}</a></li>";
                }
            }
            output += "</ul>";
            return new HtmlString(output); ;
        }
        else
        {
            return "";
        }
    })
    .Sortable(true);

    columns.Add(c => c.insopectionRecord)
   .Titled("Details of Measuring Instrument Calibration Documents")
   .RenderedAs(model =>
   {
       if (model.insopectionRecord != null && model.insopectionRecord != "")
       {
           var output = "<ul>";
           foreach (var d in model.insopectionRecord.Split('!'))
           {
               var attach = d.Split('|');
               if (attach.Length >= 3)
               {
                   var linkText = attach[0].ToString();
                   var linkUrl = Url.Action("Download3", "VisitReport", new { d = attach[2].ToString() });
                   output += $"<li><a href='{linkUrl}' download='{linkUrl}'>{linkText}</a></li>";
               }
           }
           output += "</ul>";
           return new HtmlString(output); ;
       }
       else
       {
           return "";
       }
   })
   .Sortable(true);


})
.Pageable(pager =>
{

    pager.ShowPageSizes = true;
    pager.PagesToDisplay = 3;
    pager.CurrentPage = 1;
    pager.RowsPerPage = 2;
})
.UsingFilterMode(GridFilterMode.Row)
.Empty("No data found")
.Filterable()
.Sortable()

                                )


                            </td>
                        </tr>
                    </table>

                </div>

            </div>
        </div>
    @*</div>*@

}


<script>
         var CustomTextFilter = (function (base) {
                MvcGridExtends(CustomTextFilter, base);

                function CustomTextFilter(column) {
                    base.call(this, column);

                    this.methods = ['contains'];
                    column.grid.lang.custom = { contains: 'Contains' };
                }

                // Other extension points can be found at MvcGridFilter declaration

                return CustomTextFilter;
            })(MvcGridFilter);

            new MvcGrid(document.querySelector('.mvc-grid'), {
                filters: {
                    'custom': CustomTextFilter
                }
            });
</script>






@*<script>
    $('#Job').change(function () {
        debugger;

        $('#partialtabledata').html('');
        var Job = $('#Job').val();
        debugger;

        $.ajax({
            url: '@Url.Action("Getdata", "MISOPEReport")',
            type: "post",
            datatype: 'json',
            data: { Job: Job },
            success: function (address) {
                //alert(address.TUVIConrolNumber);
                // $('#CNNO').val(ObjModelQuotationMast.Sap_And_Controle_No).val()
                debugger

                $("#PO_Number").val(address.PO_Number).val();
                $("#po_Date").val(address.po_Date).val();

            }
        });



    });
</script>*@


<script>
function Redirect() {
        window.location.href = "@Url.Action("Welcome", "Login")"
        }
</script>