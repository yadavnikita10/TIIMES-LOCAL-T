
@using TuvVision.Models;
@model TuvVision.Models.MonitorRecordData
@using NonFactors.Mvc.Grid;
@using System.Web.Mvc;
@{
    ViewBag.Title = "MonitoringRecords";
    Layout = "~/Views/Shared/_TuvVision.cshtml";
}
@*//Misreport Controller*@
<link href="~/AllJsAndCss/css/MVCGridN.css" rel="stylesheet" />
<script src="~/AllJsAndCss/datatable/js/jquery.dataTables.js"></script>
<link rel="stylesheet" href="//code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css">
<script src="~/AllJsAndCss/js/datatable-custom2.js"></script>

<script src="//code.jquery.com/jquery-1.10.2.js"></script>
<script src="//code.jquery.com/ui/1.11.4/jquery-ui.js"></script>


<script>

    $(function () {
        $(".FromD").datepicker({
            dateFormat: 'dd/mm/yy',//check change
            changeMonth: true,
            changeYear: true,
            yearRange: "-100:+50"
        });
    });
</script>
<script>

    $(function () {
        $(".ToD").datepicker({
            dateFormat: 'dd/mm/yy',//check change
            changeMonth: true,
            changeYear: true,
            yearRange: "-100:+50"
        });
    });
</script>

@using (Html.BeginForm("MonitoringRecords", "MisReport", FormMethod.Post, new { enctype = "multipart/form-data", @id = "form1" }))
{
    <div class="main-content3 xs-max-height">

        <!--Start of header-->
        <div class="container-fluid">
            @*<div class="row assignfixedwidth rp-15">*@

                <div class="col-xs-12">
                    <h3 class="dynamic-page-title dynamic-page-title-2  text-left">Monitoring Records</h3>
                    <div>
                        @*<button type="button" id="a" value="ExportToExcel" class="btn btn-info dynamic-function-btn dynamic-function-btn-2" onclick="location.href='@Url.Action("ExportIndex1", "CompentencyMetrixView")';">
                            Export To Excel
                        </button>*@
                    </div>
                </div>
               

                <div class="col-xs-12">
                    <hr class="custom-hr1">
                </div>

            </div><!-- /.row -->
            <div class="row">



                <div class="col-xs-4">
                    <div class="form-group">
                        <label>From Date:</label>
                        @Html.TextBoxFor(model => model.FromDate, "{0:dd MMM yyyy}", htmlAttributes: new { placeholder = "Select Start Date", @class = "form-control form-control-custom FromD", autocomplete = "off" })
                        @Html.ValidationMessageFor(model => model.FromDate, "", new { @class = "text-danger validation-msg" })
                    </div>
                </div>


                <div class="col-xs-4">
                    <div class="form-group">
                        <label>To Date:</label>
                        @Html.TextBoxFor(model => model.ToDate, "{0:dd MMM yyyy}", htmlAttributes: new { placeholder = "Select To Date", @class = "form-control form-control-custom ToD", autocomplete = "off" })
                        @Html.ValidationMessageFor(model => model.ToDate, "", new { @class = "text-danger validation-msg" })
                    </div>
                </div>

                <div class="col-xs-2">
                    <div class="form-group">
                        <label></label><br />
                        <input type="submit" value="Search" class="btn btn-primary form-control" />
                    </div>


                </div>
                <div class="col-xs-2">
                    <div class="form-group">
                        <label></label><br />
                        <button type="button" id="a" value="ExportToExcel" class="btn btn-primary form-control" onclick="location.href='@Url.Action("ExportIndexMonitoringRecords", "MisReport")'">
                            Export To Excel
                        </button>
                    </div>


                </div>
            </div>
        @*</div>*@



        <div class="col-xs-12">
            <table class="display dataTable no-footer" style="overflow-y:auto" id="gridMapping">
                <tr>
                    <td>
                        @if (Model.listingmonitoringrecord != null)
                        {
                            @(Html
                                      .Grid(Model.listingmonitoringrecord)
                                      .Build(columns =>
                                      {

                                          columns.Add(c => c.EmployeeName).Titled("Employee Name");
                                          columns.Add(c => c.Brach_Name).Titled("Branch Name");
                                          columns.Add(c => c.Tuv_Email_Id).Titled("Email ID");
                                          columns.Add(c => c.MobileNo).Titled("Mobile No");
                                          columns.Add(c => c.Designation).Titled("Designation");
                                          columns.Add(c => c.IsMentor).Titled("Is Mentor Yes/No");
                                          //columns.Add(c => c.Mentoring).Titled("Mentoring").RenderedAs(model =>
                                          //{
                                          //    if (!string.IsNullOrWhiteSpace(model.Mentoring))
                                          //    {
                                          //        var mentoringValues = model.Mentoring.Split(',').Select(value => value.Trim());
                                          //        return new HtmlString(string.Join("<br>", mentoringValues));
                                          //    }
                                          //    else
                                          //    {
                                          //        return "";
                                          //    }
                                          //})
                                          //.Sortable(true);    
                                          columns.Add(c => c.Mentoring)
   .Titled("Mentoring")
   .RenderedAs(model =>
   {
       if (!string.IsNullOrWhiteSpace(model.Mentoring))
       {
           var mentoringValues = model.Mentoring.Split(',')
                                   .Select(value => value.Trim());

           // Create a list to hold the hyperlinks
           var hyperlinks = new List<string>();

           // Create a hyperlink for each value
           foreach (var value in mentoringValues)
           {
               // Extract the number part from the value
               var numberPart = value.Split(' ')[0];

               var hyperlink = $"<a href='/CompentencyMetrixView/Mentoring?UID={numberPart}' target='_blank'>{value}</a>";
               hyperlinks.Add(hyperlink);
           }

           // Join the hyperlinks with <br> tag
           return new HtmlString(string.Join("<br>", hyperlinks));
       }
       else
       {
           return "";
       }
   })
   .Sortable(true);
                                          /*.Encoded(false).RenderedAs(c => CustomRenderingOfColumn1(c)).Sortable(true);*/
                                          columns.Add(c => c.Mentoring_Count).Titled("Mentoring Count");                              /*.Encoded(false).RenderedAs(c => CustomRenderingOfColumn1(c)).Sortable(true);*/

                                          // columns.Add(c => c.OnsiteMonitoring).Titled("Onsite Monitoring").RenderedAs(model =>
                                          // {
                                          //     if (!string.IsNullOrWhiteSpace(model.OnsiteMonitoring))
                                          //     {
                                          //         var mentoringValues = model.OnsiteMonitoring.Split(',').Select(value => value.Trim());
                                          //         return new HtmlString(string.Join("<br>", mentoringValues));
                                          //     }
                                          //     else
                                          //     {
                                          //         return "";
                                          //     }
                                          // })
                                          //.Sortable(true);
                                          columns.Add(c => c.OnsiteMonitoring)
    .Titled("Onsite Monitoring")
    .RenderedAs(model =>
    {
        if (!string.IsNullOrWhiteSpace(model.OnsiteMonitoring))
        {
            var mentoringValues = model.OnsiteMonitoring.Split(',')
                                    .Select(value => value.Trim());

            // Create a list to hold the hyperlinks
            var hyperlinks = new List<string>();

            // Create a hyperlink for each value
            foreach (var value in mentoringValues)
            {
                // Extract the number part from the value
                var numberPart = value.Split(' ')[0];

                var hyperlink = $"<a href='/CompentencyMetrixView/MonitoringDetails?UID={numberPart}' target='_blank'>{value}</a>";
                hyperlinks.Add(hyperlink);
            }

            // Join the hyperlinks with <br> tag
            return new HtmlString(string.Join("<br>", hyperlinks));
        }
        else
        {
            return "";
        }
    })
    .Sortable(true);


                                          columns.Add(c => c.Onsite_Monitoring_Count).Titled("Onsite Monitoring Count");               /*.Encoded(false).RenderedAs(c => CustomRenderingOfColumn2(c)).Sortable(true);*/

                                          // columns.Add(c => c.OffsiteMonitoring).Titled("Off Monitoring").RenderedAs(model =>
                                          // {
                                          //     if (!string.IsNullOrWhiteSpace(model.OffsiteMonitoring))
                                          //     {
                                          //         var mentoringValues = model.OffsiteMonitoring.Split(',').Select(value => value.Trim());
                                          //         return new HtmlString(string.Join("<br>", mentoringValues));
                                          //     }
                                          //     else
                                          //     {
                                          //         return "";
                                          //     }
                                          // })
                                          //.Sortable(true);
                                          columns.Add(c => c.OffsiteMonitoring)
    .Titled("Offsite Monitoring")
    .RenderedAs(model =>
    {
        if (!string.IsNullOrWhiteSpace(model.OffsiteMonitoring))
        {
            var mentoringValues = model.OffsiteMonitoring.Split(',')
                                    .Select(value => value.Trim());

            // Create a list to hold the hyperlinks
            var hyperlinks = new List<string>();

            // Create a hyperlink for each value
            foreach (var value in mentoringValues)
            {
                // Extract the number part from the value
                var numberPart = value.Split(' ')[0];

                var hyperlink = $"<a href='/CompentencyMetrixView/OffSiteMonitoringDetails?UID={numberPart}' target='_blank'>{value}</a>";
                hyperlinks.Add(hyperlink);
            }

            // Join the hyperlinks with <br> tag
            return new HtmlString(string.Join("<br>", hyperlinks));
        }
        else
        {
            return "";
        }
    })
    .Sortable(true);

                                          columns.Add(c => c.Offsite_Monitoring_Count).Titled("Offsite Monitoring Count");               /*.Encoded(false).RenderedAs(c => CustomRenderingOfColumn2(c)).Sortable(true);*/

                                          //columns.Add(c => c.MonitoringOfmonitors).Titled("Monitoring of Monitoring").RenderedAs(model =>
                                          //{
                                          //    if (!string.IsNullOrWhiteSpace(model.MonitoringOfmonitors))
                                          //    {
                                          //        var mentoringValues = model.MonitoringOfmonitors.Split(',').Select(value => value.Trim());
                                          //        return new HtmlString(string.Join("<br>", mentoringValues));
                                          //    }
                                          //    else
                                          //    {
                                          //        return "";
                                          //    }
                                          //})
                                          //.Sortable(true);
                                          columns.Add(c => c.MonitoringOfmonitors)
     .Titled("Monitoring of Monitoring")
     .RenderedAs(model =>
     {
         if (!string.IsNullOrWhiteSpace(model.MonitoringOfmonitors))
         {
             var mentoringValues = model.MonitoringOfmonitors.Split(',')
                                     .Select(value => value.Trim());

             // Create a list to hold the hyperlinks
             var hyperlinks = new List<string>();

             // Create a hyperlink for each value
             foreach (var value in mentoringValues)
             {
                 // Extract the number part from the value
                 var numberPart = value.Split(' ')[0];

                 var hyperlink = $"<a href='/CompentencyMetrixView/MonitoringOfMonitors?UID={numberPart}' target='_blank'>{value}</a>";
                 hyperlinks.Add(hyperlink);
             }

             // Join the hyperlinks with <br> tag
             return new HtmlString(string.Join("<br>", hyperlinks));
         }
         else
         {
             return "";
         }
     })
     .Sortable(true);
                                          columns.Add(c => c.Monitoring_of_monitors_Count).Titled("Monitoring of Monitoring Count");    /*.Encoded(false).RenderedAs(c => CustomRenderingOfColumn4(c)).Sortable(true);*/

                                      })
                                      .Pageable(pager =>
                                      {
                                          pager.ShowPageSizes = true;
                                          pager.PagesToDisplay = 3;
                                          pager.CurrentPage = 1;
                                          pager.RowsPerPage = 2;
                                      })
                                      .UsingFilterMode(GridFilterMode.Row)
                                      .Empty("No data found")
                                      .Filterable()
                                      .Sortable()

                            )
                        }

                    </td>
                </tr>
            </table>
        </div>
    </div>
       
}

<script>
            [].forEach.call(document.getElementsByClassName('mvc-grid'), function (element) {
                new MvcGrid(element);
            });
</script>
<script>
            var CustomTextFilter = (function (base) {
                MvcGridExtends(CustomTextFilter, base);

                function CustomTextFilter(column) {
                    base.call(this, column);

                    this.methods = ['contains'];
                    column.grid.lang.custom = { contains: 'Contains' };
                }

                return CustomTextFilter;
            })(MvcGridFilter);

            new MvcGrid(document.querySelector('.mvc-grid'), {
                filters: {
                    'custom': CustomTextFilter
                }
            });
</script>

<script>
            var CustomTextFilter = (function (base) {
                MvcGridExtends(CustomTextFilter, base);

                function CustomTextFilter(column) {
                    base.call(this, column);

                    this.methods = ['contains'];
                    column.grid.lang.custom = { contains: 'Contains' };
                }

                return CustomTextFilter;
            })(MvcGridFilter);

            new MvcGrid(document.querySelector('.mvc-grid'), {
                filters: {
                    'custom': CustomTextFilter
                }
            });
</script>