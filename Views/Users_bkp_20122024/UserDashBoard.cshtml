@model TuvVision.Models.ProfileUser
@using NonFactors.Mvc.Grid;
@using System.Web.Mvc;

@helper CustomRenderingOfColumn(TuvVision.Models.ProfileUser ProfileUser)
{
    if (ProfileUser.Verified.ToString().ToUpper() == "NO")
    {
            <span style='color:red; font-weight:bold;'>@ProfileUser.Verified.ToString().ToUpper()</span>
    }
    else
    {
            <span style='color: black; font-weight:bold;'>@ProfileUser.Verified.ToString().ToUpper()</span>
    }
}

@helper CustomRenderingOfColumn2(TuvVision.Models.ProfileUser ProfileUser)
{
    if (ProfileUser.ActiveStatus.ToString().ToUpper() == "YES")
    {
            <span style='color:black; font-weight:bold;'>@ProfileUser.ActiveStatus.ToString().ToUpper()</span>
    }
    else
    {
            <span style='color:red ; font-weight:bold;'>@ProfileUser.ActiveStatus.ToString().ToUpper()</span>
    }
}

@helper CustomRenderingOfColumn1(TuvVision.Models.ProfileUser ProfileUser)
{
    
}

@helper CustomRenderingOfColumnEduAtta(TuvVision.Models.ProfileUser ProfileUser)
{


            

}

@helper CustomRenderingOfColumnProAtta(TuvVision.Models.ProfileUser ProfileUser)
{
            

}



@{
    ViewBag.Title = "UserDashBoard";
    Layout = "~/Views/Shared/_TuvVision.cshtml";
}

<link href="~/AllJsAndCss/css/MVCGridN.css" rel="stylesheet" />

@*Ashwini Scripts here for datatable starts here
        <script type="text/javascript" language="javascript" src="~/AllJsAndCss/datatable/js/jquery.dataTables.js"></script>

        <!--export to excel-->
        <script type="text/javascript" language="javascript" src="~/AllJsAndCss/js/dataTables.buttons.min.js"></script>
    <script type="text/javascript" language="javascript" src="~/AllJsAndCss/js/jszip.min.js"></script>
    <script type="text/javascript" language="javascript" src="~/AllJsAndCss/js/buttons.html5.min.js"></script>
    <script src="~/AllJsAndCss/js/datatable-custom2.js"></script>*@
@*Ashwini Scripts here for datatable ends here*@
@*<script>
        $(document).ready(function () {
            $("#UserDetails").DataTable();
        });
    </script>*@
@using (Html.BeginForm())
{
    <!--Start of header-->
    <!--Start of main content 3-->
    <div class="main-content3 xs-max-height">

        <!--Start of header-->
        <div class="container-fluid">
            <div class="row assignfixedwidth rp-15">

                <div class="col-xs-12">
                    <h3 class="dynamic-page-title dynamic-page-title-2  text-left">User Management</h3>
                    @if (Session["RoleID"].ToString() == "36")
                    {
                        <a href="@Url.Action("CreateUser", "Users",new { @UserID = "Superadmin" })" style="margin-left: 10px" class="btn btn-info dynamic-function-btn dynamic-function-btn-2">Add New User</a>
                    }
                    <button type="button" id="a" value="ExportToExcel" class="btn btn-info dynamic-function-btn dynamic-function-btn-2" onclick="location.href='@Url.Action("ExportIndex","Users")'">
                        Export To Excel
                    </button>
                </div><!-- /.col -->

                <div class="col-xs-12">
                    <hr class="custom-hr">
                </div><!-- /.col -->
                <!--Table was here-->

            </div><!-- /.row -->

          



            <div class="col-lg-12">
                <table class="display dataTable no-footer" style="overflow-y:auto" id="gridMapping">
                    <tr>
                        <td>
                            @(Html
                            .Grid(Model.LstDashboard)
                            .Build(columns =>
                            {
                                //< a href = "@Url.Action("ContactDetails","CompanyMasters",new { @CNT_ID = item.PK_ContID })" style = "margin-right:15px;" title = "Edit" >< i class="fa fa-pencil"></i></a>
                                //                   <a href = "@Url.Action("DeleteContact","CompanyMasters",new {@CNT_ID=item.PK_ContID })" onclick="return confirm('Are you sure you want to delete Contact record?')" title="Delete"><i class="fa fa-trash"></i></a>


                                //columns.Add().Titled("Edit").Encoded(false).RenderedAs(o => Html.ActionLink("IRNForm", "InspectionReleaseNote", new { PK_IVR_ID = o.PK_IVR_ID }, new { @class = "fa fa-pencil", title = "Edit" }));
                                columns.Add().Titled("Edit").Encoded(false).RenderedAs(o => Html.ActionLink(" ", "CreateUser", new { UserID = o.PK_UserID }, new { @class = "fa fa-pencil", title = "Edit" }));
                                //columns.Add().Titled("Delete").Encoded(false).RenderedAs(o => Html.ActionLink(" ", "Delete", new { UserID = o.PK_UserID }, new { @class = "fa fa-trash", title = "Delete", onclick = "return confirm('Are you sure you wish to delete ?');" }));
                                columns.Add(c => c.PK_UserID).Titled("TIIMES UIN");
                                columns.Add(c => c.EmployeeCode).Titled("HR Employee Code");
                                columns.Add(c => c.SAPEmployeeCode).Titled("SAP Employee Code");
                                columns.Add(c => c.SAP_VendorCode).Titled("SAP Vendor Code");
                                columns.Add(c => c.FirstName + ' ' + c.LastName).Titled("Name").Filterable(true).FilteredAs("custom").Sortable(true).Css("aa");
                                columns.Add(c => c.Branch).Titled("Branch");
                                columns.Add(c => c.UserRole).Titled("Role");

                               // columns.Add(c => c.Image).Titled("Photo").RenderedAs(c => CustomRenderingOfColumn1(c)).Sortable(true);

                                columns.Add(c => c.EmployeeGrade).Titled("Employee Grade");
                                columns.Add(c => c.DateOfJoining).Titled("Date Of Joining");
                                columns.Add(c => c.Designation).Titled("Designation");
                                columns.Add(c => c.Cost_Center).Titled("Cost Center");
                                //columns.Add(c => c.Additional_Qualification).Titled("Professional Qualification");                                
                                columns.Add(c => c.MobileNo).Titled("Mobile No");
                                columns.Add(c => c.EmergencyMobile_No).Titled("Emergency Mobile No");
                                columns.Add(c => c.EmailID).Titled("Personal Email ID");
                                columns.Add(c => c.TuvEmailId).Titled("TUVI Email ID");
                                columns.Add(c => c.DOB).Titled("Date Of Birth");
                                columns.Add(c => c.Gender).Titled("Gender");
                                columns.Add(c => c.BloodGroup).Titled("Blood Group");
                                columns.Add(c => c.ShoesSize).Titled("Shoes Size");
                                columns.Add(c => c.ShirtSize).Titled("Shirt Size");
                                columns.Add(c => c.PanNo).Titled("PAN");
                                columns.Add(c => c.TUVIStampNo).Titled("TUVI Stamp No");
                                columns.Add(c => c.Verified).Titled("Verification").RenderedAs(c => CustomRenderingOfColumn(c)).Sortable(true);
                                columns.Add(c => c.ModifiedBy).Titled("Modified By");
                                columns.Add(c => c.strModifiedDate).Titled("Modified Date");
                                columns.Add(c => c.ActiveStatus).Titled("Active Status").RenderedAs(c => CustomRenderingOfColumn2(c)).Sortable(true);


                                columns.Add(c => c.MainBranch).Titled("Main Branch");
                                columns.Add(c => c.OBSTYPE).Titled("OBS Type");
                                columns.Add(c => c.ProffesionalQualificationDetails).Titled("Professional Qualification  Details");
                                columns.Add(c => c.UserAttachment1).Titled("User Attachment Details");
                                columns.Add(c => c.EyeTest).Titled("Eye Test Report Details");
                            })
                            .Pageable(pager =>
                            {
                                //pager.PageSizes = new DictionaryInt32, String > { { 0, "All" }, { 2, "2" }, { 4, "4" } };
                                pager.ShowPageSizes = true;
                                pager.PagesToDisplay = 3;
                                pager.CurrentPage = 1;
                                pager.RowsPerPage = 2;
                            })
                            .UsingFilterMode(GridFilterMode.Row)
                            .Empty("No Data Found")
                            .Filterable()
                            .Sortable()
                            )
                        </td>
                    </tr>
                </table>
            </div>


        </div><!-- /.container-fluid -->
        <!--End of header-->
    </div>
  <!--End of main content 3-->
}


<script>
    var CustomTextFilter = (function (base) {
        MvcGridExtends(CustomTextFilter, base);

        function CustomTextFilter(column) {
            base.call(this, column);

            this.methods = ['contains'];
            column.grid.lang.custom = { contains: 'Contains' };
        }

        // Other extension points can be found at MvcGridFilter declaration

        return CustomTextFilter;
    })(MvcGridFilter);

    new MvcGrid(document.querySelector('.mvc-grid'), {
        filters: {
            'custom': CustomTextFilter
        }
    });
</script>

<script>
    [].forEach.call(document.getElementsByClassName('mvc-grid'), function (element) {
        new MvcGrid(element);
    });
</script>
