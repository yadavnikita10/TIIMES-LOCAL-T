@model TuvVision.Models.CallsRegister
@using NonFactors.Mvc.Grid;
@using System.Web.Mvc;
@{
    ViewBag.Title = "CallNotDoneData";
    Layout = "~/Views/Shared/_TuvVision.cshtml";
}

@*DATEPICKER*@

<script src="https://code.jquery.com/jquery-1.10.2.js"></script>
<script src="https://code.jquery.com/ui/1.11.4/jquery-ui.js"></script>
<link rel="stylesheet" href="https://code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css" />

<script>
    $(function () {
        $(".Fromdate").datepicker({
            dateFormat: 'dd/mm/yy',//check change
            changeMonth: true,
            changeYear: true,
            yearRange: "-100:+50"
        });
    });
</script>

<script>

    $(function ()
    {
        $(".ToDate").datepicker({
            dateFormat: 'dd/mm/yy',//check change
            changeMonth: true,
            changeYear: true,
            yearRange: "-100:+50"

        });
    });

</script>

<link href="~/AllJsAndCss/css/MVCGridN.css" rel="stylesheet" />




@using (Html.BeginForm())
{

    <div class="main-content3 xs-max-height">

        <!--Start of header-->
        <div class="container-fluid">
            <div class="row assignfixedwidth rp-15">

                <div class="col-xs-12">
                    <h3 class="dynamic-page-title dynamic-page-title-2  text-left">Not Done Call Register</h3>
                    @*<button type="button" value="CreateRole" class="btn btn-info dynamic-function-btn dynamic-function-btn-2" style="background-color:#001ED2;margin-right:10px;" onclick="location.href='@Url.Action("ListCompentencyMetrixView", "CompentencyMetrixView")'">CAIL</button>
                        <button type="button" value="CreateRole" class="btn btn-info dynamic-function-btn dynamic-function-btn-2" style="background-color:#001ED2;margin-right:10px;" onclick="location.href='@Url.Action("ListCompentencyMetrixViewN", "CompentencyMetrixView")'">Competency Matrix</button>
                        <button type="button" id="a" value="ExportToExcel" class="btn btn-info dynamic-function-btn dynamic-function-btn-2" style="margin-right:10px;" onclick="location.href='@Url.Action("ExportCallList","CallsMaster")'">
                            Export To Excel
                        </button>*@
                    <button type="button" id="a" value="ExportToExcel" class="btn btn-info dynamic-function-btn dynamic-function-btn-2" style="margin-right:10px;" onclick="location.href='@Url.Action("ExportNotDoneData","CallsMaster")'">
                        Export To Excel
                    </button>



                </div><!-- /.col -->
                <div class="row">
                    <div class="col-xs-12 col-sm-3">
                        <div class="form-group">
                            <label>From Date:</label>
                            @Html.TextBoxFor(model => model.FromDate, "{0:dd MMM yyyy}", htmlAttributes: new { placeholder = "From Date", @class = "form-control Fromdate", autocomplete = "off" })

                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-3">
                        <div class="form-group">
                            <label>To Date:</label>
                            @Html.TextBoxFor(model => model.ToDate, "{0:dd MMM yyyy}", htmlAttributes: new { placeholder = "To Date", @class = "form-control ToDate", autocomplete = "off" })

                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-3">
                        <div class="form-group">
                            <button type="submit" class="btn btn-default insert-form-btn" style="margin-top:22px;"><i class="fa "></i> Search</button>
                            @*</div>
                                <div class="form-group">*@
                            @Html.ActionLink("Reset", "CallNotDoneData", "CallsMaster", new { @class = "btn btn-default insert-form-btn", style = "margin-top: 22px;" })
                        </div>
                    </div>

                </div>
                <div class="col-xs-12">
                    <hr class="custom-hr">
                </div><!-- /.col -->
                <!--Table was here-->

            </div><!-- /.row -->



            <div class="col-xs-12">
                <table class="display dataTable no-footer" style="overflow-y:auto" id="gridMapping">
                    <tr>
                        <td>
                            @(Html
                            .Grid(Model.listingCallRegister)
                            .Build(columns =>
                            {


                                columns.Add(c => c.Job).Titled("Job");
                                columns.Add(c => c.call_no).Titled("Call No");
                                columns.Add(c => c.status).Titled("Status");
                                columns.Add(c => c.Reason).Titled("Reason for Cancel");
                                columns.Add(c => c.inspector).Titled("Inspector Name");
                                columns.Add(c => c.Vendor_Name).Titled("Vendor Name");
                                columns.Add(c => c.vendorLoaction).Titled("Inspection Location");
                                columns.Add(c => c.client).Titled("Customer Name");
                                columns.Add(c => c.End_Customer).Titled("End Customer Name");
                                columns.Add(c => c.ProjectName).Titled("Project Name");
                                columns.Add(c => c.DECPMCName).Titled("DEC/PMC/EPC Name");
                                columns.Add(c => c.itemTobeInspected).Titled("Item to be Inspected");
                                columns.Add(c => c.stageOfinspection).Titled("Stages of Inspection");
                                columns.Add(c => c.primaryMaterial).Titled("Primary Material");
                                columns.Add(c => c.StageDescription).Titled("Stage Description");
                                columns.Add(c => c.itemQty).Titled("Item Quantity");
                                columns.Add(c => c.EstimatedTimeinHours).Titled("Estimated Inspection Time in hours");
                                columns.Add(c => c.Originating_Branch).Titled("Originating Branch");
                                columns.Add(c => c.Executing_Branch).Titled("Executing Branch");
                                columns.Add(c => c.createddate).Titled("Call Created Date");
                                columns.Add(c => c.Call_Received_Date).Titled("Call Received Date");
                                columns.Add(c => c.Call_Request_Date).Titled("Call Request Date");
                                columns.Add(c => c.Actual_Visit_Date).Titled("Actual Visit Date");
                                columns.Add(c => c.CreatedBy).Titled("Call Created By");
                                columns.Add(c => c.CallAssignBy).Titled("Call Assign By");
                                //columns.Add(c => c.EndDate).Titled("End Date");

                                columns.Add(c => c.Continuous_Call).Titled("Continuous Call");
                                columns.Add(c => c.iscompetant).Titled("Is inspector Competant");
                                columns.Add(c => c.FormFilled).Titled("TCE Form Filled");
                                columns.Add(c => c.Finalinsepection).Titled("Final Insepection");
                                columns.Add(c => c.ManMonthsAssi).Titled("Man Month Assignment");
                                columns.Add(c => c.subendusername).Titled("Sub sub End User Name");
                                columns.Add(c => c.subsubendusername).Titled("Sub Sub End User Name");
                                columns.Add(c => c.callcancelby).Titled("Call NotDone by");
                                columns.Add(c => c.CallCancelDate).Titled("Call NotDone Date");





                            })
                            .Pageable(pager =>
                            {
                                //pager.PageSizes = new DictionaryInt32, String > { { 0, "All" }, { 2, "2" }, { 4, "4" } };
                                pager.ShowPageSizes = true;
                                pager.PagesToDisplay = 3;
                                pager.CurrentPage = 1;
                                pager.RowsPerPage = 2;
                            })
                            .UsingFilterMode(GridFilterMode.Row)
                            .Empty("No data found")
                            .Filterable()
                            .Sortable()

                            )


                        </td>
                    </tr>
                </table>

            </div>


        </div>
        <!--End of header-->

    </div>
    <!--End of Ashwini Code-->

}

<script>
           [].forEach.call(document.getElementsByClassName('mvc-grid'), function (element) {
               new MvcGrid(element);
           });
</script>


<script>
    var CustomTextFilter = (function (base) {
        MvcGridExtends(CustomTextFilter, base);

        function CustomTextFilter(column) {
            base.call(this, column);

            this.methods = ['contains'];
            column.grid.lang.custom = { contains: 'Contains' };
        }

        // Other extension points can be found at MvcGridFilter declaration

        return CustomTextFilter;
    })(MvcGridFilter);

    new MvcGrid(document.querySelector('.mvc-grid'), {
        filters: {
            'custom': CustomTextFilter
        }
    });


</script>
