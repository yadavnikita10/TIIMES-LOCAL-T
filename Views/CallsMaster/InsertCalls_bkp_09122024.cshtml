@model TuvVision.Models.CallsModel

@{
    ViewBag.Title = "InsertCalls";
    Layout = "~/Views/Shared/_TuvVision.cshtml";
    List<string> EditProdName = ViewBag.EditproductName as List<string>;
    List<string> EditJobProdName = ViewBag.EditJobproductName as List<string>;
}



<script type="text/javascript" language="javascript" src="~/AllJsAndCss/datatable/js/jquery.dataTables.js"></script>
<script type="text/javascript" language="javascript" src="~/AllJsAndCss/js/jquery.min.js"></script>

<!--multiselect-->
<link href="~/AllJsAndCss/css/bootstrap-multiselect.css" rel="stylesheet" />

@*Image Upload Use*@
<link href="~/AllJsAndCss/css/filepond.css" rel="stylesheet" />


@*DATEPICKER*@

<script src="https://code.jquery.com/ui/1.11.4/jquery-ui.js"></script>
<link rel="stylesheet" href="https://code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css" />

@*Testing purpose of Time Picker*@
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.15.1/moment.min.js"></script>


<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/4.7.14/js/bootstrap-datetimepicker.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/4.7.14/css/bootstrap-datetimepicker.min.css">


<script>
   

    $(function () {
        // Calculate min and max dates
        //var today = new Date();
        //var minDate = new Date();
        //minDate.setDate(today.getDate() - 20); // last 20 days
        //var maxDate = new Date();
        //maxDate.setDate(today.getDate() + 40); // next 40 days

        $("#datepicker1").datetimepicker({
            format: 'DD/MM/YYYY HH:mm'
            //minDate: minDate,
            //maxDate: maxDate
        });


    });
</script>

@*Testing purpose of Time Picker*@


<script type="text/javascript">
    function ShowHideDiv(chkPassport) {
        var dvPassport = document.getElementById("dvPassport");
        dvPassport.style.display = chkPassport.checked ? "block" : "none";
    }

    //function ShowHideDivman(chkPassport) {
    //    //added by shrutika salve 20032024
    //    var dvPassportMan = document.getElementById("dvPassportman");
    //    //var dvPassport = document.getElementById("dvPassport");
    //    dvPassportMan.style.display = chkManMonths.checked ? "block" : "none";



    //}

    function ShowHideDivman(chkManMonths) {
        var dvPassportMan = document.getElementById("dvPassportman");
        var chkPassport = document.getElementById("chkPassport");

        // Check if both chkManMonths and chkPassport are checked
        if (chkManMonths.checked && chkPassport.checked) {
            // If both are checked, show dvPassportMan
            dvPassportMan.style.display = "block";
        } else {
            // Otherwise, hide dvPassportMan
            dvPassportMan.style.display = "none";
        }
    }


</script>
<script>

    $(function () {
        $(".PoDates").datepicker({
            dateFormat: 'dd/mm/yy',//check change
            changeMonth: true,
            changeYear: true,
            yearRange: "-100:+50"
        });
    });
</script>
<script>

    $(function () {
        $(".TODate").datepicker({
            dateFormat: 'dd/mm/yy',//check change
            changeMonth: true,
            changeYear: true,
            yearRange: "-100:+50"
        });
    });
</script>

<script>
    $(function () {
        $(".PoDates1").datepicker({
            dateFormat: 'dd/mm/yy',
            changeMonth: true,
            changeYear: true,
            yearRange: "-100:+50",
            //minDate: "-2m", // Set to the previous one month
            minDate: "-45d", // Set to the previous one month
            //minDate: "-90d", 
            maxDate: "+40d"
        });
    });
</script>



<script>

    $(function () {
        $(".TODate1").datepicker({
            dateFormat: 'dd/mm/yy',
            changeMonth: true,
            changeYear: true,
            yearRange: "-100:+50",
            //minDate: "-2m", // Set to the previous one month
            minDate: "-45d", // Set to the previous one month
            //minDate: "-90d",
            maxDate: "+40d"
        });
    });
</script>


<script>
    $(function () {
        $(".CallRecivedate").datepicker({
            dateFormat: 'dd/mm/yy',//check change
            changeMonth: true,
            changeYear: true,
            yearRange: "-100:+50",
            //minDate: "-40d", // Set to the previous one month
            minDate: "-45d", // Set to the previous one month
            //minDate: "-90d",
            maxDate: "+40d"
        });
    });
</script>
<script>
    $(function () {
        $(".CallRequestdate").datepicker({
            dateFormat: 'dd/mm/yy',//check change
            changeMonth: true,
            changeYear: true,
            yearRange: "-100:+50",
            //minDate: "-40d", // Set to the previous one month
            minDate: "-45d", // Set to the previous one month
            //minDate: "-90d",
            maxDate: "+40d"
        });
    });
</script>

<script>
    $(function () {
        $(".PlannedDate").datepicker({
            dateFormat: 'dd/mm/yy',
            changeMonth: true,
            changeYear: true,
            yearRange: "-100:+50",
            // minDate: "-40d", // Set to the previous one month
            minDate: "-45d", // Set to the previous one month
            //minDate: "-90d",
            maxDate: "+40d"
        });
    });
</script>

<script>
    $(function () {
        $(".NewPlannedDate").datepicker({
            dateFormat: 'dd/mm/yy',
            changeMonth: true,
            changeYear: true,
            yearRange: "-100:+50",
            //minDate: "-4m", // Set to the previous one month
            minDate: "-45d", // Set to the previous one month
            //minDate: "-90d",
            maxDate: "+40d"
        });
    });
</script>
<script>
    $(function () {
        $(".callrecDate").datepicker({
            dateFormat: 'dd/mm/yy',
            changeMonth: true,
            changeYear: true,
            yearRange: "-100:+50",
            //minDate: "-4m", // Set to the previous one month
            minDate: "-45d", // Set to the previous one month
            //minDate: "-90d",
            maxDate: "+40d"
        });
    });
</script>
<script>
    $(document).ready(function () {
        $(document).on("click", ".classAdd", function () {
            debugger;

            if ($('#WOSummaryTable tr').length - 1 >= DTRowCount) {
                var count = $('#WOSummaryTable tr').length - 1;
                DTRowCount = count;
            }

            DTRowCount += 1;

            var contactdiv = '<tr> ' +
            ' <td><select name="ddlActionType"  class="form-control CActionType" id="ddlActionType' + DTRowCount + '"  onchange="DDropdownChange()"><option value="">Select Action</option><option value="CHST">Change Status to Assign</option><option value="CHDT">Change Visit Date in IVR</option><option value="LumSum">Delete Date in IVR</option></select></td>';
            ' <td><input type="text" name="statusReason" id="statusReason' + DTRowCount + '" style="text-align:center;width:100%;font-size:smaller;"  /></td>'
            ' <td><input type="text"  name="NewPlannedDate"  id="NewPlannedDate' + DTRowCount + '" style="text-align:center;width:100%;font-size:smaller;" class="PoDate" /></td>'
            ' <td style="text-align:center;font-size:smaller;"><a class="Update" href="javascript:;">Add</a>&nbsp;&nbsp;&nbsp;</td> ';
            ' </tr>'

            $('#WOSummaryTable').append(contactdiv); // Adding these controls to Main table class
        });
    });
</script>

<style>
    .ui-widget-header {
        background: #001ED2 !important;
    }

    .ui-datepicker-month, .ui-datepicker-year {
        color: #333 !important;
    }
    /*-- Delete color-profile --*/
    ul.Attachment {
        padding-left: 0px;
        list-style: none;
        margin-bottom: 0px;
    }

        ul.Attachment > li {
            border: 1px solid #999;
            margin: 7px 5px 0 0;
            display: inline-block;
            padding: 0px 10px;
            background-color: #dfdfdf;
            color: #000;
        }

            ul.Attachment > li a.title {
                color: #000;
                vertical-align: text-bottom;
                text-transform: capitalize;
            }

            ul.Attachment > li a.deleteItem {
                color: white;
                font-size: 10px;
                background: #e91e1e;
                padding: 2px 4px;
                border-radius: 50%;
                vertical-align: text-top;
            }
    /*EndCode*/
</style>

<style>
    .ui-widget-header {
        background: #001ED2 !important;
    }

    .ui-datepicker-month, .ui-datepicker-year {
        color: #333 !important;
    }
</style>

@if ((Convert.ToString(TempData["InsertCall"])) != "" && Convert.ToString(TempData["InsertCall"]) != null)
{
    TempData["InsertCall"] = "";
    <script type="text/javascript" language="javascript">

        //  alert("Calls Added Successfully!!!!");
    </script>
}

@using (Html.BeginForm("InsertCalls", "CallsMaster", FormMethod.Post, new { enctype = "multipart/form-data", @id = "form1" }))
{
    @Html.AntiForgeryToken()
    <div class="main-content3 xs-max-height grey-bg-f3">
        <div class="grey-bg-f3">
            <!--Start of header-->
            <div class="container-fluid">
                <div class="row assignfixedwidth rp-5">
                    <div class="col-xs-12 form-col">
                        <div class="row">
                            @if (Model.MandaysConsumedValidity == "Yes")
                            {
                                <p style="color:#FB5F6B;font-weight:bold;text-align:center;">80% of Man-days have been consumed, inform to all concern persons.</p>

                            }
                            else
                            {

                            }

                        </div>
                        <div class="row">

                            <div class="col-xs-12 text-right">
                                <a href="@Url.Action("CallsList","CallsMaster")" class="btn btn-info dynamic-function-btn"><i class="fa fa-long-arrow-left"></i> Go Back</a>
                            </div>

                            <div class="col-xs-12">
                                <div class="white-bg section-box-shadow">
                                    @if (Model.Call_No == null)
                                    {
                                        <h3 class="form-page-title">Create Call @Model.POAmountGreaterThan</h3>
                                    }
                                    else
                                    {
                                        <h3 class="form-page-title" style="font-size:14px; font-weight:normal"> Call No :- @Model.Call_No</h3>
                                    }

                                    <div class="row">
                                        <div class="col-xs-12 col-sm-offset-1 col-sm-10">
    <div class="form-box">
        <form method="post" enctype="multipart/form-data" id="formic">
            @Html.HiddenFor(m => m.PK_SubJob_Id)
            @Html.HiddenFor(m => m.PK_Call_ID)
            @Html.HiddenFor(m => m.Actual_Visit_Date)
            @*@Html.HiddenFor(model => model.checkIFExpeditingReport)*@
            <div class="row">

                <span style="color:#FB5F6B;">
                    <strong>&nbsp;&nbsp;&nbsp;Notes </strong> :
                </span>

                <span>
                    1) <span style="color:#FB5F6B;">*</span> - Mandatory <br />
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2) Enter correct value of estimated inspection Time in hours (4 hours and below - Half manday, Above 4 hours - full manday).
                </span>





                <div class="col-xs-12">
                    <hr class="custom-hr1">
                </div>
                <div class="col-xs-12">
                    <label style="color:#001ED2;">Call Originator Details:</label>
                </div>


                @*//added by nikita on 12122023*@
                <div class="col-xs-12 col-sm-4">
                    <div class="form-group">
                        <label>FBranch:</label>

                        @if (ViewBag.SubCatlist != null)
                        {
                            @Html.DropDownListFor(m => m.Originating_Branch, ViewBag.SubCatlist as IEnumerable<SelectListItem>, "--Select Branch--", new { @class = "form-control", @disabled = "disabled" })
                            @Html.HiddenFor(m => m.Originating_Branch)
                        }
                        @Html.ValidationMessageFor(model => model.Originating_Branch, "", new { @class = "text-danger validation-msg" })
                    </div>
                </div>
                <div class="col-xs-12 col-sm-4">
                    <div class="form-group">
                        <label>Coordinator Name(Originating Branch):</label>
                        @Html.TextBoxFor(model => model.Coordinatorname_, new { @placeholder = "Coordinator Name", @class = "form-control", @readonly = "readonly" })
                        @Html.ValidationMessageFor(model => model.Coordinatorname_, "", new { @class = "text-danger validation-msg" })
                    </div>
                </div>
                <div class="col-xs-12 col-sm-4">
                    <div class="form-group">
                        <label>Coordinator Mob No.(Originating Branch):</label>
                        @Html.TextBoxFor(model => model.CoordinatorMobileNo_, new { @placeholder = "Mob Number", @class = "form-control", @readonly = "readonly" })
                        @Html.ValidationMessageFor(model => model.CoordinatorMobileNo_, "", new { @class = "text-danger validation-msg" })
                    </div>
                </div>

                @*///end*@




            </div>
            <div class="row">
                <div class="from-group">
                    <div class="col-xs-12">
                        <hr class="custom-hr1">
                    </div>
                </div>
                <div class="col-xs-12">
                    <label style="color:#001ED2;">General Information:</label>
                </div>
                <div class="col-xs-12 col-sm-4">
                    <div class="form-group">
                        <label>Service Type:</label>
                        @*<input type="text" class="form-control" placeholder="Phone Here">*@
                        @Html.TextBoxFor(model => model.Type, new { @placeholder = "Service Type", @class = "form-control", @readonly = "readonly" })
                        @Html.ValidationMessageFor(model => model.Type, "", new { @class = "text-danger validation-msg" })
                    </div>
                </div>


                @*@if (Model.SubSubJobNo == "" || Model.SubSubJobNo == null)*@
                @if (Model.SJobType == "SUB JOB")
                {
                    <div class="col-xs-12 col-sm-4">
                        <div class="form-group">
                            <label> TUV India Control number:</label>
                            @*<input type="text" class="form-control" placeholder="TAN Here">*@
                            @Html.TextBoxFor(model => model.Job, new { @placeholder = "TUV India Control number", @class = "form-control", @readonly = "readonly" })
                            @Html.ValidationMessageFor(model => model.Job, "", new { @class = "text-danger validation-msg" })
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-4">
                        <div class="form-group">
                            <label> SAP Number:</label>
                            @Html.TextBoxFor(model => model.SAP_no, new { @placeholder = "SAP Number", @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.SAP_no, "", new { @class = "text-danger validation-msg" })
                        </div>
                    </div>
                                                            @*<div class="row">*@
                                                            <div class="col-xs-4">
                                                                <div class="form-group">
                                                                    <label> TUV India Control (With Sub Job) No.:</label>
                                                                    @Html.TextBoxFor(model => model.Sub_Job, new { @placeholder = "TUV India Control (With Sub Job) No.", @class = "form-control" })
                                                                    @Html.ValidationMessageFor(model => model.Sub_Job, "", new { @class = "text-danger validation-msg" })
                                                                </div>
                                                            </div>
                                                            @*</div>*@


                }
                else if (Model.SJobType == "SUBSUB JOB")
                {
                    <div class="col-xs-12 col-sm-4">
                        <div class="form-group">
                            <label>Job Number:</label>
                            @*<input type="text" class="form-control" placeholder="TAN Here">*@
                            @Html.TextBoxFor(model => model.Job, new { @placeholder = "Job Number", @class = "form-control", @readonly = "readonly" })
                            @Html.ValidationMessageFor(model => model.Job, "", new { @class = "text-danger validation-msg" })
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-4">
                        <div class="form-group">
                            <label> SubSub-Job Number:</label>
                            @*<input type="text" class="form-control" placeholder="TAN Here">*@
                            @Html.TextBoxFor(model => model.Sub_Job, new { @placeholder = "SubSub-Job Number", @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Sub_Job, "", new { @class = "text-danger validation-msg" })
                        </div>
                    </div>

                                                            <div class="col-xs-12 col-sm-4">
                                                                <div class="form-group">
                                                                    <label> SAP Number:</label>
                                                                    @Html.TextBoxFor(model => model.SAP_no, new { @placeholder = "SAP Number", @class = "form-control" })
                                                                    @Html.ValidationMessageFor(model => model.SAP_no, "", new { @class = "text-danger validation-msg" })
                                                                </div>
                                                            </div>
                }
                else
                {
                    <div class="col-xs-12 col-sm-4">
                        <div class="form-group">
                            <label>Job Number:</label>
                            @*<input type="text" class="form-control" placeholder="TAN Here">*@
                            @Html.TextBoxFor(model => model.Job, new { @placeholder = "Job Number", @class = "form-control", @readonly = "readonly" })
                            @Html.ValidationMessageFor(model => model.Job, "", new { @class = "text-danger validation-msg" })
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-4">
                        <div class="form-group">
                            <label> SubSubSub-Job Number:</label>
                            @*<input type="text" class="form-control" placeholder="TAN Here">*@
                            @Html.TextBoxFor(model => model.Sub_Job, new { @placeholder = "SubSub-Job Number", @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Sub_Job, "", new { @class = "text-danger validation-msg" })
                        </div>
                    </div>

                                                            <div class="col-xs-12 col-sm-4">
                                                                <div class="form-group">
                                                                    <label> SAP Number:</label>
                                                                    @Html.TextBoxFor(model => model.SAP_no, new { @placeholder = "SAP Number", @class = "form-control" })
                                                                    @Html.ValidationMessageFor(model => model.SAP_no, "", new { @class = "text-danger validation-msg" })
                                                                </div>
                                                            </div>
                }
            </div>
            <div class="row">

                <div class="col-xs-12 col-sm-4">
                    <div class="form-group">
                        <label>Customer Name:</label>
                        @*<input type="text" class="form-control" placeholder="Company Name Here">*@
                        @Html.TextBoxFor(model => model.Company_Name, new { @placeholder = "Customer Name", @class = "form-control", @readonly = "readonly" })
                        @Html.ValidationMessageFor(model => model.Company_Name, "", new { @class = "text-danger validation-msg" })
                    </div>
                </div>
                <div class="col-xs-12 col-sm-4">
                    <div class="form-group">
                        <label> End Customer Name:</label>
                        @*<input type="text" class="form-control" placeholder="TAN Here">*@
                        @Html.TextBoxFor(model => model.End_Customer, new { @placeholder = "End Customer Name", @class = "form-control", @readonly = "readonly" })
                        @Html.ValidationMessageFor(model => model.End_Customer, "", new { @class = "text-danger validation-msg" })
                    </div>
                </div>
                <div class="col-xs-12 col-sm-4">
                    <div class="form-group">
                        <label> Project Name:</label>
                        @*<input type="text" class="form-control" placeholder="TAN Here">*@
                        @Html.TextBoxFor(model => model.Project_Name, new { @placeholder = "Project Name", @class = "form-control", @readonly = "readonly" })
                        @Html.ValidationMessageFor(model => model.Project_Name, "", new { @class = "text-danger validation-msg" })
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-xs-12 col-sm-6">
                    <div class="form-group">
                        <label>DEC/PMC/EPC Name:</label>
                        @Html.TextBoxFor(model => model.DECName, new { @placeholder = "DEC/PMC/EPC Name", @class = "form-control", @readonly = "readonly" })

                        @Html.ValidationMessageFor(model => model.DECName, "", new { @class = "text-danger validation-msg" })
                    </div>
                </div>
                <div class="col-xs-12 col-sm-6">
                    <div class="form-group">
                        <label>DEC/PMC/EPC Assignment No :</label>
                        @Html.TextBoxFor(model => model.DECNumber, new { @placeholder = "DEC/PMC/EPC Assignment No", @class = "form-control", @readonly = "readonly" })


                        @Html.ValidationMessageFor(model => model.DECNumber, "", new { @class = "text-danger validation-msg" })
                    </div>
                </div>
            </div>

            <div class="row">

                <div class="col-xs-12 col-sm-4">
                    <div class="form-group">
                        <label> Vendor Name:</label>
                        @*<input type="text" class="form-control" placeholder="TAN Here">*@
                        @Html.TextBoxFor(model => model.TopSubVendorName, new { @placeholder = "Vendor Name", @class = "form-control", @readonly = "readonly" })
                        @Html.ValidationMessageFor(model => model.TopSubVendorName, "", new { @class = "text-danger validation-msg" })
                    </div>
                </div>
                <div class="col-xs-12 col-sm-4">
                    <div class="form-group">
                        <label>PO No. (Client PO on Vendor) :</label>
                        @Html.TextBoxFor(model => model.TopSubVendorPONo, new { @placeholder = " PO No. (Client PO on Vendor) ", @class = "form-control", @readonly = "readonly" })
                        @Html.ValidationMessageFor(model => model.TopSubVendorPONo, "", new { @class = "text-danger validation-msg" })
                    </div>
                </div>
                <div class="col-xs-12 col-sm-4">
                    <div class="form-group">
                        <label>PO Date(Vendor):</label>
                        @Html.TextBoxFor(model => model.TopvendorPODate, "{0:dd MMM yyyy}", htmlAttributes: new { placeholder = "PO Date(Vendor)", @class = "form-control Date_of_PO", autocomplete = "off", @readonly = "readonly" })
                        @Html.ValidationMessageFor(model => model.TopvendorPODate, "", new { @class = "text-danger validation-msg" })
                    </div>
                </div>

                @*@if (Model.SubSubJobNo != "" && Model.SubSubJobNo != null)
                    {*@

                @if (Model.SJobType == "SUBSUB JOB")
                {
                    <div class="col-xs-12 col-sm-4">
                        <div class="form-group">
                            <label>Sub Vendor Name:</label>
                            @*<input type="text" class="form-control" placeholder="TAN Here">*@
                            @Html.TextBoxFor(model => model.SubSubVendorName, new { @placeholder = "Sub Vendor Name", @class = "form-control", @readonly = "readonly" })
                            @Html.ValidationMessageFor(model => model.SubSubVendorName, "", new { @class = "text-danger validation-msg" })
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-4">
                        <div class="form-group">
                            <label>PO No.(Vendor PO on Sub Vendor):</label>
                            @Html.TextBoxFor(model => model.SubSubVendorPO, new { @placeholder = "PO No.(Vendor PO on Sub Vendor)", @class = "form-control", @readonly = "readonly" })
                            @Html.ValidationMessageFor(model => model.SubSubVendorPO, "", new { @class = "text-danger validation-msg" })
                        </div>
                    </div>
                                                            <div class="col-xs-12 col-sm-4">
                                                                <div class="form-group">
                                                                    <label>PO Date(Sub Vendor):</label>
                                                                    @Html.TextBoxFor(model => model.SubSubVendorDate, "{0:dd MMM yyyy}", htmlAttributes: new { placeholder = "PO Date(Sub Vendor)", @class = "form-control Date_of_PO", autocomplete = "off", @readonly = "readonly" })
                                                                    @Html.ValidationMessageFor(model => model.SubSubVendorDate, "", new { @class = "text-danger validation-msg" })
                                                                </div>
                                                            </div>
                }


                @if (Model.SJobType == "SUBSUBSUB JOB")
                {
                    <div class="col-xs-12 col-sm-4">
                        <div class="form-group">
                            <label>Sub Vendor Name:</label>
                            @*<input type="text" class="form-control" placeholder="TAN Here">*@
                            @Html.TextBoxFor(model => model.SubSubVendorName, new { @placeholder = "Sub Vendor Name", @class = "form-control", @readonly = "readonly" })
                            @Html.ValidationMessageFor(model => model.SubSubVendorName, "", new { @class = "text-danger validation-msg" })
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-4">
                        <div class="form-group">
                            <label>PO No.(Vendor PO on Sub Vendor):</label>
                            @Html.TextBoxFor(model => model.SubSubVendorPO, new { @placeholder = "PO No.(Vendor PO on Sub Vendor)", @class = "form-control", @readonly = "readonly" })
                            @Html.ValidationMessageFor(model => model.SubSubVendorPO, "", new { @class = "text-danger validation-msg" })
                        </div>
                    </div>
                                                            <div class="col-xs-12 col-sm-4">
                                                                <div class="form-group">
                                                                    <label>PO Date(Sub Vendor):</label>
                                                                    @Html.TextBoxFor(model => model.SubSubVendorDate, "{0:dd MMM yyyy}", htmlAttributes: new { placeholder = "PO Date(Sub Vendor)", @class = "form-control Date_of_PO", autocomplete = "off", @readonly = "readonly" })
                                                                    @Html.ValidationMessageFor(model => model.SubSubVendorDate, "", new { @class = "text-danger validation-msg" })
                                                                </div>
                                                            </div>


                                                            <div class="col-xs-12 col-sm-4">
                                                                <div class="form-group">
                                                                    <label>Sub Sub Vendor Name:</label>
                                                                    @*<input type="text" class="form-control" placeholder="TAN Here">*@
                                                                    @Html.TextBoxFor(model => model.Vendor_Name, new { @placeholder = "Sub Sub Sub Vendor Name", @class = "form-control", @readonly = "readonly" })
                                                                    @Html.ValidationMessageFor(model => model.Vendor_Name, "", new { @class = "text-danger validation-msg" })
                                                                </div>
                                                            </div>
                                                            <div class="col-xs-12 col-sm-4">
                                                                <div class="form-group">
                                                                    <label>PO No.(Vendor PO on Sub Sub vendor) :</label>
                                                                    @Html.TextBoxFor(model => model.PO_Number, new { @placeholder = "PO No.(SubSubSubVendor PO on Sub Vendor)", @class = "form-control", @readonly = "readonly" })
                                                                    @Html.ValidationMessageFor(model => model.PO_Number, "", new { @class = "text-danger validation-msg" })
                                                                </div>
                                                            </div>
                                                            <div class="col-xs-12 col-sm-4">
                                                                <div class="form-group">
                                                                    <label>PO Date (Sub Sub Vendor):</label>
                                                                    @Html.TextBoxFor(model => model.SubVendorPODate, "{0:dd MMM yyyy}", htmlAttributes: new { placeholder = "PO Date(Sub Vendor)", @class = "form-control Date_of_PO", autocomplete = "off", @readonly = "readonly" })
                                                                    @Html.ValidationMessageFor(model => model.SubVendorPODate, "", new { @class = "text-danger validation-msg" })
                                                                </div>
                                                            </div>
                }




                @*}*@


            </div>

            @* added by shrutika salve 01082024 *@


            @*<div class="row">
                    <div class="col-xs-12">
                        <hr class="custom-hr1">
                    </div>
                </div>*@

            <div class="row">
                <div class="col-xs-12">
                    <hr class="custom-hr1">
                </div>

                <div class="col-xs-12">
                    <label style="color:#001ED2;">IVR data control access:</label>
                </div>

                <div class="col-xs-12 col-sm-6">
                    <div class="form-group">
                        @Html.CheckBoxFor(model => model.chkARC, new { @onclick = "return false;" })
                        <label for="InActive" style="color:black;">ARC Assignnment (General Section Editable)</label>

                    </div>
                </div>
                <div class="col-xs-12 col-sm-6">

                    <div class="form-group">
                        @Html.CheckBoxFor(model => model.checkIFExpeditingReport, new { @onclick = "return false;" })
                        <label for="InActive" style="color:black;">Expediting Assignment</label>


                    </div>
                </div>

            </div>
            <div class="row">
                <div class="col-xs-12 col-sm-6">
                    <div class="form-group">
                        @Html.CheckBoxFor(model => model.checkIFCustomerSpecific, new { @onclick = "return false;" })
                        <label for="InActive" style="color:black;">Report required in Customer Specific Format</label>

                    </div>
                </div>

                <div class="col-xs-12 col-sm-6">

                    <div class="form-group">
                        @Html.CheckBoxFor(model => model.checkIFCustomerSpecificReportNo, new { @onclick = "return false;" })
                        <label for="InActive" style="color:black;">Customer defined numbering is required for IVR & IRN</label>


                    </div>
                </div>
            </div>

            <div class="row">

                <div class="col-xs-12 col-sm-6">

                    <div class="form-group">
                        @Html.CheckBoxFor(model => model.checkIFConcernDisplay, new { @onclick = "return false;" })
                        <label for="InActive" style="color:black;">Display Areas of Concern  on IVR</label>


                    </div>
                </div>
                <div class="col-xs-12 col-sm-6">

                    <div class="form-group">
                        @Html.CheckBoxFor(model => model.ItemDescriptionDynamic, new { @onclick = "return false;" })
                        <label for="InActive" style="color:black;">Display Heat number in item description of IVR & IRN</label>
                    </div>
                </div>
            </div>

            @*//added on 07122024*@
            <div class="row">

                <div class="col-xs-12 col-sm-6">

                    <div class="form-group">
                        @Html.CheckBoxFor(model => model.checkInouttime, new { @onclick = "return false;" })
                        <label for="InActive" style="color:black;">Display In & Out time on IVR</label>
                    </div>
                </div>
                <div class="col-xs-12 col-sm-6">

                    <div class="form-group">
                        @Html.CheckBoxFor(model => model.checkusereditableonpdf, new { @onclick = "return false;" })
                        <label for="InActive" style="color:black;">End User Editable On IVR</label>
                    </div>
                </div>
            </div>
            @*end*@

            <div class="row">
                <div class="col-xs-12">
                    <hr class="custom-hr1">
                </div>
            </div>

            <div class="row">
                <div class="col-xs-12">
                    <label style="color:#001ED2;">Call Information:</label>
                </div>
            </div>

            <div class="row">
                <div class="col-xs-12 col-sm-2">
                    <div class="form-group">
                        <label> Priority:</label><span style="color:#ff0000;">*</span>
                        @*<input type="text" class="form-control" placeholder="TAN Here">*@
                        @Html.DropDownListFor(m => m.Urgency, new List<SelectListItem>
                                                                                                      {
                                                                                                        new SelectListItem{ Text="High", Value = "High" },
                                                                                                        new SelectListItem{ Text="Low", Value = "Low" },
                                                                                                        new SelectListItem{ Text="Med-High", Value = "Med-High" },
                                                                                                        new SelectListItem{ Text="Med-Low", Value = "Med-Low" },
                                                                                                        new SelectListItem{ Text="Low", Value = "SubSub Job" },

                                                                                                     }, new { @class = "form-control", @id = "Type" })
                        @Html.ValidationMessageFor(m => m.Urgency, "", new { @class = "text-danger" })

                    </div>
                </div>

                <div class="col-xs-12 col-sm-3">
                    <div class="form-group">
                        <label> Notification Number:</label><span style="color:#ff0000;">*</span>

                        @*@Html.DropDownListFor(m => m.Source, new List<SelectListItem>
                             {
                              new SelectListItem{ Text="Select Source", Value = "" },
                               new SelectListItem{ Text="Email", Value = "Email" },
                               new SelectListItem{ Text="Fax", Value = "Fax" },
                               new SelectListItem{ Text="Phone", Value = "Phone" },
                               new SelectListItem{ Text="Walk-in", Value = "Walk-in" },
                               new SelectListItem{ Text="Web", Value = "Web" },

                            }, new { @class = "form-control" })*@

                        @Html.TextBoxFor(model => model.Source, new { @placeholder = "Source", @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Source, "", new { @class = "text-danger validation-msg" })
                    </div>
                </div>

                <div class="col-xs-4">
                    <div class="form-group">
                        <label>Inspection Location:</label><span style="color:#ff0000;">*</span>
                        @Html.TextBoxFor(model => model.Job_Location, new { @placeholder = "Inspection Location", @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Job_Location, "", new { @class = "text-danger validation-msg" })
                    </div>
                </div>

                <div class="col-xs-12 col-sm-3" id="divMandayRate">
                    <div class="form-group">
                        <label>Man-day Rate ₹ <font color="#FB5F6B">(Editable)</font>:</label><span style="color:#ff0000;">*</span>

                        @Html.TextBoxFor(model => model.MandayRate, new { @placeholder = "Manday Rate", @class = "form-control", @Maxlength = "5", @minlength = "4", @onkeypress = "return isNumberKey(event);" })
                        @Html.ValidationMessageFor(model => model.MandayRate, "", new { @class = "text-danger validation-msg" })
                    </div>
                </div>
            </div>
            <div class="row">

                <div class="col-xs-12 col-sm-4">
                    <div class="form-group">
                        <label>Primary Material:</label><span style="color:#ff0000;">*</span>
                        <select id="IdPrimaryMaterial" class="form-control form-multiselect-city" multiple="multiple" name="IdPrimaryMaterialName" placeholder="Select Option">
                            @{
                                foreach (var item in ViewData["PrimaryMaterial"] as IEnumerable<SelectListItem>)
                                {

                                    if (ViewData["PrimaryMaterialchecked"] != null)
                                    {
                                        if (Convert.ToString(ViewData["PrimaryMaterialchecked"]).Split(',').Contains(item.Value.ToString()))
                                        {
                                            <option selected="selected" value="@item.Value">@item.Text&nbsp; &nbsp;</option>

                                        }
                                        else
                                        {
                                            <option value="@item.Value">@item.Text&nbsp; &nbsp;</option>
                                        }
                                    }
                                    else
                                    {
                                        <option value="@item.Value">@item.Text&nbsp; &nbsp;</option>
                                    }
                                }
                            }
                        </select>
                        @Html.HiddenFor(model => model.PrimaryMaterial, new { id = "hdnObsType" })


                    </div>
                </div>

                <div class="col-xs-12 col-sm-4">
                    <div class="form-group">
                        <label>Item to be Inspected:</label><span style="color:#ff0000;">*</span>
                        <div class="drpdomn" id="drpdomn">
                        </div>
                        @if (ViewBag.check == "productcheck")
                        {

                            <select id="ProductLists" class="form-control form-multiselect-city" multiple="multiple" name="ProductList" placeholder="Select Option" required="required">
                                @foreach (var item in ViewBag.ProjectTypeItems)
                                {
                                    if (EditProdName.Contains(item.Text))
                                    {
                                        <option value="@item.Value" selected>@item.Text</option>
                                    }
                                    else
                                    {
                                        <option value="@item.Value">@item.Text</option>
                                    }

                                }
                            </select>
                        }
                        else
                        {
                            <select id="ProductLists" class="form-control form-multiselect-city" multiple="multiple" name="ProductList" placeholder="Select Option" required="required">

                                @{
                                    foreach (var item in ViewData["Drpproduct"] as IEnumerable<TuvVision.Models.Calls>)
                                    {

                                        <option value="@item.Product_Name">@item.Product_Name&nbsp; &nbsp;</option>


                                    }
                                }
                            </select>
                                    }

                        @Html.ValidationMessageFor(model => model.ProductList, "", new { @class = "text-danger" })

                    </div>

                    <input type="text" class="hidden" id="Scope" />


                    <input type="text" class="hidden" id="ProductLists" />
                </div>





                @*<div class="col-xs-12 col-sm-3">
                        <div class="form-group">
                            <label>Stages of Inspection:</label><span style="color:#ff0000;">*</span>
                            @Html.DropDownListFor(m => m.Sub_Category, new List<SelectListItem>
                                    {
                           new SelectListItem{ Text="---Select---", Value = "" },
                                    new SelectListItem{ Text="Kick Off/Pre Inspection", Value = "kick Off Meeting" },
                                    //new SelectListItem{ Text="Pre inspection meeting", Value = "Pre inspection meeting" },
                                    new SelectListItem{ Text="Material Identification", Value = "Material Identification" },
                                    new SelectListItem{ Text="Interim Stages", Value = "Stage Inspection" },
                                    new SelectListItem{ Text="Document Review", Value = "Document Review" },
                                    new SelectListItem{ Text="Final Inspection", Value = "Final Inspection" },
                                    new SelectListItem{ Text="Re-Inspection", Value = "Re-Inspection" },
                                    }, new { @class = "form-control", @id = "IdType" })
                            @Html.ValidationMessageFor(m => m.Sub_Category, "", new { @class = "text-danger" })
                        </div>
                    </div>*@

                <div class="col-xs-12 col-sm-4">
                    <div class="form-group">
                        <label>Stages of Inspection:</label><span style="color:#ff0000;">*</span>
                        <select id="Sub_Category" name="Sub_Category" class="form-control form-multiselect-city" multiple>
                            @{


                                var defaultOptions = ViewBag.DefaultOptions as SelectList;

                                // Ensure that defaultOptions is not null before proceeding
                                @*if (defaultOptions != null)
                                    {
                                        foreach (var option in defaultOptions)
                                        {
                                            <option value="@option.Value" @(Model.Sub_Category?.Split(',')?.Contains(option.Value) ?? false ? "selected" : "")>@option.Text</option>
                                        }
                                    }
                                    else
                                    {
                                        <option value="">Default Option</option>
                                    }*@


                            if (defaultOptions != null)
                            {
                                foreach (var option in defaultOptions)
                                {
                                    var isSelected = Model.Sub_Category != null && Model.Sub_Category.Contains(option.Text);
                                    <option value="@option.Value" @(isSelected ? "selected" : "")>@option.Text</option>
                                }
                            }
                            else
                            {
                                <option value="">Default Option</option>
                            }
                            }


                        </select>
                    </div>
                </div>





            </div>

            <div class="row">


                @*<div class="col-xs-12 col-sm-4">
                        <div class="form-group">
                            <label>Stage Description:</label><span style="color:#ff0000;">*</span>
                            @Html.TextBoxFor(model => model.Description, new { placeholder = "Stage Description", @class = "form-control form-control-custom ProdDesc", id = "ProdDesc" })
                            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                        </div>
                    </div>*@
                @*<div class="col-xs-12 col-sm-4">
                        <div class="form-group">


                            @if (Model.checkIFExpeditingReport != true)
                            {
                                <label>Stage Description:</label>
                                @Html.TextBoxFor(model => model.Description, new { placeholder = "Stage Description", @class = "form-control form-control-custom ProdDesc", id = "ProdDesc" })
                                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                            }
                            else
                            {
                                <label>Stage Description:</label>


                                string expeditingJobValue = Model.checkIFExpeditingReport == true ? "Expediting" : Model.Description;

                                @Html.TextBoxFor(model => model.Description, new { placeholder = "Stage Description", @class = "form-control form-control-custom ProdDesc", id = "ProdDesc", @Value = expeditingJobValue })
                                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })

                            }
                        </div>
                    </div>*@
                <div class="col-xs-12 col-sm-3">
                    <div class="form-group">
                        <label>Item Quantity With UOM:</label><span style="color:#ff0000;">*</span>
                        @Html.TextBoxFor(model => model.Quantity, new { placeholder = "Item Quantity", @class = "form-control form-control-custom ProdQty", id = "ProdQty" })
                        @*@Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })*@
                    </div>
                </div>
                <div class="col-xs-12 col-sm-3">
                    <div class="form-group">
                        <label>Estimated Time in hours:</label><span style="color:#ff0000;">*</span>
                        @*<textarea rows="3" class="form-control" placeholder="Type your address here..."></textarea>*@
                        @Html.TextBoxFor(model => model.EstimatedHours, new { @placeholder = "in hours", @class = "form-control", @onkeypress = "return isNumberKey(event);" })
                        @Html.ValidationMessageFor(model => model.EstimatedHours, "", new { @class = "text-danger validation-msg" })
                    </div>
                </div>
                <div class="col-xs-12 col-sm-3">
                    <div class="form-group">
                        <label>Note: </label>

                        @{
                            string DayHours = string.Empty;
                            if (Model.EstimatedHours != null && Model.EstimatedHours != "0")
                            {
                                if (Convert.ToInt32(Model.EstimatedHours) >= 5)
                                {

                                    //DayHours = "Full day";
                                    <input type="text" value="Full day" class="form-control" />
                                }
                                else if (Convert.ToInt32(Model.EstimatedHours) < 5)
                                {
                                    //DayHours = "Half day";
                                    <input type="text" value="Half day" class="form-control" />
                                }
                            }

                        }


                    </div>

                </div>


                <div class="col-xs-12 col-sm-3">
                    <div class="form-group">

                        @if (Model.checkIFExpeditingReport == true)
                        {
                            <label>Expediting Type:</label><span style="color:#ff0000;">*</span>
                            var selectListItems1 = new List<SelectListItem>
    {
                                                                        new SelectListItem{ Text="---Select---", Value = "" },
        new SelectListItem{ Text="Onsite", Value = "Onsite" },
        new SelectListItem{ Text="Desk", Value = "Desk" }

    };



                            @Html.DropDownListFor(m => m.ExpeditingType, selectListItems1, new { @class = "form-control", @id = "IdType" })
                            @Html.ValidationMessageFor(m => m.ExpeditingType, "", new { @class = "text-danger" })
                        }

                    </div>
                </div>


            </div>

            <div class="row">
                <div class="col-xs-12 col-sm-3" style="height: 75px;">
                    <div class="form-group">

                        <div class="form-group">
                            @Html.CheckBoxFor(model => model.ChkContinuousCall, new { @id = "chkPassport", @onclick = "ShowHideDiv(this)" })
                            <label for="InActive">Continuous Call</label>

                        </div>
                    </div>
                </div>
                <div class="col-xs-12 col-sm-3" style="height: 75px;">
                    <div class="form-group">

                        <div class="form-group">
                            @Html.CheckBoxFor(model => model.ManMonths, new { @id = "chkManMonths", @onclick = "ShowHideDivman(this)" })
                            <label for="InActive">Man-Month asgmt.</label>

                        </div>
                    </div>
                </div>

                <div class="col-xs-12 col-sm-3">
                    <div class="form-group">
                        @*@Html.CheckBoxFor(m => m.FinalInspection)
                            <label for="InActive" style="color:#FB5F6B;">Final Inspection</label>*@


                        @*@Html.CheckBoxFor(m => m.FinalInspection)*@
                        <label>Final Inspection</label><span style="color:#ff0000;">*</span>
                        @Html.DropDownListFor(model => model.FinalInspectionValue, new List<SelectListItem>
                                                                            {
                                                                                new SelectListItem{ Text="Select Action", Value = "" },
                                                                                new SelectListItem{ Text="Yes", Value = "1" , Selected = (Model.FinalInspectionValue == "1") ?true : false} ,
                                                                                new SelectListItem{ Text="No", Value = "0" , Selected = (Model.FinalInspectionValue == "0") ?true : false} ,


                                                                            }, new { @class = "form-control CFinalInspection", @id = "FinalInspectionValue" })



                    </div>
                </div>

                <div id="dvPassportman" style="display: none">
                    <div class="col-xs-12 col-sm-3">
                        <label>Weekly of on Day:</label><span style="color:#ff0000;">*</span>

                        @Html.DropDownListFor(m => m.WeekDays, new List<SelectListItem>
{

    new SelectListItem{ Text="Monday", Value = "Monday" },
    new SelectListItem{ Text="Tuesday", Value = "Tuesday" },
    new SelectListItem{ Text="Wednesday", Value = "Wednesday" },
    new SelectListItem{ Text="Thursday", Value = "Thursday" },
    new SelectListItem{ Text="Friday", Value = "Friday" },
    new SelectListItem{ Text="Saturday", Value = "Saturday" },
    new SelectListItem{ Text="Sunday", Value = "Sunday" },
}, new { @class = "form-control CItem form-multiselect-city", multiple = "multiple" })

                    </div>

                </div>


            </div>
            <div class="row">

                <div id="dvPassport" style="display: none">

                    <div class="col-xs-12 col-sm-4">
                        <label>Call Requested Date (From):</label><span style="color:#ff0000;">*</span>
                        @Html.TextBoxFor(model => model.FromDateNew, "{0:dd MMM yyyy}", htmlAttributes: new { placeholder = "From Date", @class = "form-control PoDates1 ", autocomplete = "off" })
                        @Html.ValidationMessageFor(model => model.FromDateNew, "", new { @class = "text-danger validation-msg" })
                    </div>
                    <div class="col-xs-12 col-sm-4">
                        <label>Call Requested Date (To):</label><span style="color:#ff0000;">*</span>
                        @Html.TextBoxFor(model => model.ToDateNew, "{0:dd MMM yyyy}", htmlAttributes: new { placeholder = "To Date", @class = "form-control TODate1 ", autocomplete = "off" })
                        @Html.ValidationMessageFor(model => model.ToDateNew, "", new { @class = "text-danger validation-msg" })
                    </div>
                    @*<label>From Date:</label>
                        @Html.TextBoxFor(model => model.FromDateNew, "{0:dd MMM yyyy}", htmlAttributes: new { placeholder = "From Date", @class = "form-control PoDates1 ", autocomplete = "off" })
                        @Html.ValidationMessageFor(model => model.FromDateNew, "", new { @class = "text-danger validation-msg" })
                        <label>To Date:</label>
                        @Html.TextBoxFor(model => model.ToDateNew, "{0:dd MMM yyyy}", htmlAttributes: new { placeholder = "To Date", @class = "form-control TODate1 ", autocomplete = "off" })
                        @Html.ValidationMessageFor(model => model.ToDateNew, "", new { @class = "text-danger validation-msg" })*@
                </div>

                @*added by shrutika salve 20032024*@




                @*</div>


                    </div>*@


                @if (Model.PK_Call_ID == 0)
                {

                    <div class="col-xs-12 col-sm-12" id="autoUpdate">
                        <div class="form-group">
                            @Html.CheckBoxFor(model => model.ChkMultipleSubJobNo)
                            <label>Select Multiple Sub-Job no </label>

                            @*<select id="Auditee" class="form-control form-multiselect-city" multiple="multiple" name="AuditeeName" placeholder="Select Option" required="required">*@
                            <select id="Auditee" class="form-control form-multiselect-city" multiple="multiple" name="AuditeeName" placeholder="Select Option">
                                @{
                                    foreach (var item in ViewData["SubJob_NoByJobNo"] as IEnumerable<TuvVision.Models.CallsModel>)
                                    {
                                        <option value="@item.DPK_SubJob_Id">@item.DSubJob_No&nbsp; &nbsp;</option>
                                    }
                                }
                            </select>
                        </div>
                    </div>
                                    }
                @if (Model.Company_Name.ToString().ToUpper().Contains("RELIANCE"))
                {
                    if (Model.PK_Call_ID == 0)
                    {
                        <div class="col-xs-12 col-sm-12 hidden" id="autoUpdate">
                            <div class="form-group">
                                @Html.CheckBoxFor(model => model.ChkMultipleJobNo)
                                <label>Select Multiple Job No</label>

                                <select id="MultiJob" class="form-control form-multiselect-city" multiple="multiple" name="MultiJob" placeholder="Select Option">
                                    @{
                                        foreach (var item in ViewData["JobNos"] as IEnumerable<TuvVision.Models.CallsModel>)
                                        {
                                            <option value="@item.DPK_Job_Id">@item.DJob_No&nbsp; &nbsp;</option>
                                        }
                                    }
                                </select>
                                @Html.ValidationMessageFor(model => model.JobList, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <input type="text" class="hidden" id="MultiJob" />
                                        }
                                        else
                                        {
                                            if (ViewBag.JobCheck == "JobCheck")
                                            {
                                                <div class="col-xs-12 col-sm-12" id="autoUpdate">
                                                    <div class="form-group">
                                                        @Html.CheckBoxFor(model => model.ChkMultipleJobNo, new { @onclick = "return false;" })

                                                        <label>Select Multiple Job No</label>
                                                        <select id="MultiJob" class="form-control form-multiselect-city" multiple="multiple" name="MultiJob" placeholder="Select Option">

                                                            @foreach (var item in ViewBag.MultiJobNos)
                                                            {
                                                                if (EditJobProdName.Contains(Convert.ToString(item.DPK_Job_Id)))
                                                                {
                                                                    <option value="@item.DPK_Job_Id" selected>@item.DJob_No</option>
                                                                }
                                                                else
                                                                {
                                                                    <option value="@item.DPK_Job_Id">@item.DJob_No</option>
                                                                }
                                                            }
                                                        </select>
                                                    </div>
                                                </div>
                                                }
                                            }
                                        }


            </div>



            <div class="row">
                @*<div class="col-xs-12 col-sm-4">
                        <div class="form-group">
                            <label>Call Received Date:</label><span style="color:#ff0000;">*</span>
                            @Html.TextBoxFor(model => model.Call_Recived_date, htmlAttributes: new { placeholder = "Call Received Date", @class = "form-control CallRecivedate ", autocomplete = "off" })
                            @Html.ValidationMessageFor(model => model.Call_Recived_date, "", new { @class = "text-danger validation-msg" })
                        </div>
                    </div>*@

                <div class="col-xs-12 col-sm-4">
                    <div class="form-group">
                        <label>Call Received Date:</label><span style="color:#ff0000;">*</span>
                        @*@if (Model.CallReceiveTime != null)
                            {
                                <div class='input-group date' id='datepicker2'>
                                    @Html.TextBoxFor(model => model.CallReceiveTime, htmlAttributes: new { placeholder = "Call Received Date", @class = "form-control  ", autocomplete = "off" })
                                    @Html.ValidationMessageFor(model => model.CallReceiveTime, "", new { @class = "text-danger" })
                                    <span class="input-group-addon" id="TDTime">
                                        <span class="glyphicon glyphicon-calendar"></span>
                                    </span>
                                </div>
                            }*@

                        @*<div class='input-group date' id='datepicker1'>
                                @Html.TextBoxFor(model => model.CallReceiveTime, htmlAttributes: new { placeholder = "Call Received Date", @class = "form-control datepicker1 ", autocomplete = "off" })
                                @Html.ValidationMessageFor(model => model.CallReceiveTime, "", new { @class = "text-danger" })
                                <span class="input-group-addon" id="TDTime">
                                    <span class="glyphicon glyphicon-calendar"></span>
                                </span>
                            </div>*@

                        @Html.TextBoxFor(model => model.CallReceiveTime, htmlAttributes: new { placeholder = "Call Received Date", @class = "form-control CallRecivedate ", autocomplete = "off" })
                        @Html.ValidationMessageFor(model => model.CallReceiveTime, "", new { @class = "text-danger validation-msg" })

                    </div>
                </div>
                <div class="col-xs-12 col-sm-4">
                    <div class="form-group">
                        <label> Call Requested Date:</label><span style="color:#ff0000;">*</span>
                        @*<input type="text" class="form-control" placeholder="TAN Here">*@
                        @Html.TextBoxFor(model => model.Call_Request_Date, "{0:dd MMM yyyy}", htmlAttributes: new { placeholder = "Call Requested callrecDate", @class = "form-control CallRequestdate ", autocomplete = "off" })

                        @Html.ValidationMessageFor(model => model.Call_Request_Date, "", new { @class = "text-danger validation-msg" })
                    </div>
                </div>

                <div class="col-xs-12 col-sm-4">
                    <div class="form-group">
                        <label> Planned Date:</label><span style="color:#ff0000;">*</span>
                        @*<input type="text" class="form-control" placeholder="TAN Here">*@
                        @Html.TextBoxFor(model => model.Planned_Date, "{0:dd MMM yyyy}", htmlAttributes: new { placeholder = "Planned Date", @class = "form-control PlannedDate ", autocomplete = "off", onchange = "CheckIFLeaveAdded()" })

                        @Html.ValidationMessageFor(model => model.Planned_Date, "", new { @class = "text-danger validation-msg" })
                    </div>
                </div>
            </div>



            <div class="row">
                <div class="col-xs-12 col-sm-4">
                    <div class="form-group">
                        <label>Executing Service:</label><span style="color:#ff0000;">*</span>

                        @if (ViewBag.ExeService != null)
                        {
                            @Html.DropDownListFor(m => m.ExecutingService, ViewBag.ExeService as IEnumerable<SelectListItem>, "--Select Service--", new { @class = "form-control" })
                            @Html.HiddenFor(m => m.ExecutingService)
                        }
                        @Html.ValidationMessageFor(model => model.ExecutingService, "", new { @class = "text-danger validation-msg" })
                    </div>
                </div>
                <div class="col-xs-12 col-sm-4">
                    <div class="form-group">
                        <label>Executing Branch:</label><span style="color:#ff0000;">*</span>
                        @*<input type="text" class="form-control" placeholder="Status Here">*@
                        @*@Html.TextBoxFor(model => model.Executing_Branch, new { @placeholder = "Executing Branch", @class = "form-control" })*@
                        @if (ViewBag.SubCatlist != null)
                        {
                            @Html.DropDownListFor(m => m.Br_Id, ViewBag.SubCatlist as IEnumerable<SelectListItem>, "--Select Branch--", new { @class = "form-control", @required = "required" })

                        }

                        @Html.ValidationMessageFor(model => model.Br_Id, "", new { @class = "text-danger validation-msg" })
                    </div>
                </div>
                <div class="col-xs-12 col-sm-3">
                    <div class="form-group">
                        <label>Call Status:</label>
                        @*<input type="email" class="form-control" placeholder="Email Here">*@
                        @Html.TextBoxFor(model => model.Status, new { @placeholder = "Call Status", @class = "form-control", @readonly = "readonly" })
                        @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger validation-msg" })
                    </div>
                </div>




            </div>


            <div class="row hidden">
                <div class="col-xs-12 col-sm-4">
                    <div class="form-group">
                        <label for="InActive" style="color:#FB5F6B;">Competency Check</label>
                        @Html.RadioButtonFor(m => m.Competency_Check, "Competency_Check", new { id = "InComplete" })
                    </div>
                </div>

                <div class="col-xs-12 col-sm-4">
                    <div class="form-group">
                        <label for="InActive" style="color:#FB5F6B;">Impartiality Check</label>
                        @Html.RadioButtonFor(m => m.Empartiality_Check, "Empartiality_Check", new { id = "Empartiality_Check" })

                    </div>
                </div>

                <div class="col-xs-12 col-sm-4">
                    <div class="form-group">
                        <label for="InActive" style="color:#FB5F6B;">Final Inspection</label>
                        @Html.RadioButtonFor(m => m.Final_Inspection, "Final_Inspection", new { id = "Final_Inspection" })

                    </div>
                </div>

            </div>




            <div class="row">
                <div class="col-xs-12 col-sm-3">
                    <div class="form-group">
                        <label> Inspector Name:</label>

                        @if (ViewBag.Userlist != null)
                        {
                            if (Model.Status.ToUpper() == "CLOSED")
                            {
                                @Html.DropDownListFor(m => m.FirstName, ViewBag.Userlist as IEnumerable<SelectListItem>, "--Select Inspector--", new { @class = "form-control", id = 'a', @disabled = "disabled", onchange = "updateLink()" })
                            }
                            else
                            {
                                @Html.DropDownListFor(m => m.FirstName, ViewBag.Userlist as IEnumerable<SelectListItem>, "--Select Inspector--", new { @class = "form-control", id = 'a', onBlur = "CheckIFLeaveAdded()", onchange = "updateLink()" })
                            }

                        }
                        @*@Html.TextBoxFor(model => model.FirstName, new { @placeholder = "Inspector", @class = "form-control"  })*@
                        @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger validation-msg" })
                    </div>
                </div>
                <div class="col-xs-12 col-sm-3">
                    <div class="form-group">
                        <label>Is inspector Competant:</label>
                        @Html.TextBoxFor(model => model.inspectorCompetant, new { @class = "form-control", @readonly = "readonly", @id = "inspectorCompetant" })
                        @Html.ValidationMessageFor(model => model.inspectorCompetant, "", new { @class = "text-danger validation-msg" })
                    </div>
                </div>
                @*<div class="col-xs-12 col-sm-2">
                        <div class="form-group">
                            <label>TCE Filled:</label>
                            @Html.TextBoxFor(model => model.TCEFilled, new { @class = "form-control", @readonly = "readonly" })
                            @Html.ValidationMessageFor(model => model.TCEFilled, "", new { @class = "text-danger validation-msg" })
                        </div>
                    </div>*@
                <div class="col-xs-12 col-sm-3">
                    <div class="form-group">
                        <label>Is inspector Approved:</label>
                        @Html.TextBoxFor(model => model.inspectorapproved, new { @class = "form-control", @readonly = "readonly" })
                        @Html.ValidationMessageFor(model => model.inspectorapproved, "", new { @class = "text-danger validation-msg" })
                    </div>
                </div>
                <div class="col-xs-12 col-sm-1">
                    <div class="form-group">
                        <label>&nbsp;</label>
                        @*<span class="tooltip-container" data-toggle="tooltip" data-placement="top" title="Compentency Metrix View">
                                <a href="@Url.Action("ListCompentencyMetrixViewN","CompentencyMetrixView")" target="_blank" style="margin-right:128px;"><img src="~/View1.png" /></a>
                            </span>*@
                        <a id="inspectionLink" href="#" target="_blank" style="margin-right:128px; display:none;">
                            <img src="~/View1.png" />
                        </a>


                    </div>
                    @*<div class="col-xs-12 col-sm-4">
                            <div class="form-group">
                                <label>&nbsp;</label>
                                <a href="@Url.Action("ListCompentencyMetrixViewN","CompentencyMetrixView")" target="_blank" class="btn btn-info dynamic-function-btn dynamic-function-btn-2" style="margin-right:128px;"> Competency Matrix</a>
                            </div>
                        </div>*@

                </div>
            </div>

            @*<div class="row">
                    <div class="col-xs-12 col-sm-6">
                        <div class="form-group">
                            <label>Customer Representative's Name:</label>
                            @Html.TextBoxFor(model => model.CustomerRepresentative, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.CustomerRepresentative, "", new { @class = "text-danger validation-msg" })
                        </div>
                    </div>
                </div>*@
            <div class="row">
                <div class="col-xs-12 col-sm-6">

                    <div class="form-group">
                        <div id="btnshowdataproject">
                            <div class="row">
                                @*<a id="lnkNewContact" href="@Url.Action("ContactDetails","EnquiryMaster")" style="margin-left: 15px;"
                                       data-toggle="modal" data-target="#AddNewContactDetails">
                                        <i class="fa fa-plus-circle"></i>Add New Contact Person
                                    </a>*@
                                <a id="lnkNewContact"
                                   data-toggle="modal" style="margin-left: 15px;" data-target="#AddNewContactDetails">
                                    <i class="fa fa-plus-circle"></i>Add New Contact Person
                                </a>
                            </div>


                            <div>
                                <label>Call raised by:</label>


                                @Html.DropDownListFor(
    model => model.CustomerRepresentative,
    Enumerable.Empty<SelectListItem>(), // Initialize with empty list
    new { @id = "Contact", @class = "form-control form-select-city" }
)

                            </div>
                        </div>
                    </div>
                </div>
            </div>
           
    <div class="row">
        <div class="col-xs-12">
            <hr class="custom-hr1">
        </div>
    </div>
            <div class="row">
                <div class="col-xs-12">
                    <label style="color:#001ED2;">Action:</label>
                </div>
            </div>
    @if (Model.PK_Call_ID != 0)
    {
        if (Model.Status.ToUpper() != "CLOSED" || Model.Status.ToUpper() != "NOTDONE")
        {
            <div class="row">
                <div class="col-xs-12 col-sm-4">
                    <div class="form-group">
                        @Html.CheckBoxFor(model => model.chkCallCancelled)
                        <label for="chkCallCancelled" style="color:#FB5F6B;">Cancel Call</label>
                    </div>
                </div>

                <div class="col-xs-12 col-sm-8" id='INTERNATIONAL' style='display:none;'>
                    <div class="form-group">
                        <label>Reason for Cancellation:</label><span style="color:#ff0000;">*</span>

                        @*@Html.TextBoxFor(model => model.Reasion, new { placeholder = "Enter Reason", @class = "form-control form-control-custom reason", id = "Reasion" })
                            @Html.ValidationMessageFor(model => model.Reasion, "", new { @class = "text-danger" })*@

                        @if (ViewBag.ReasonList != null)
                        {
                            @Html.DropDownListFor(m => m.Reasion, ViewBag.ReasonList as IEnumerable<SelectListItem>, "--Select Reason--", new { @class = "form-control" })
                            @Html.HiddenFor(m => m.Reasion)
                        }
                        @Html.ValidationMessageFor(model => model.Reasion, "", new { @class = "text-danger validation-msg" })

                    </div>
                </div>
            </div>

        }
    }



    @*<div class="row">
        <div class="col-xs-12">
            <hr class="custom-hr1">
        </div>
    </div>*@

    @if (Model.PK_Call_ID != null)
    {
        if (Model.Status.ToUpper() == "CLOSED")
        {
            <div id="divdisplaytable">
                <table id="WOSummaryTable" cellspacing="0" cellpadding="3" border="1" style="width: 100%;overflow-y:auto;margin-left: auto;margin-right: auto;">
                    <tr style="background-color:lightgray">
                        <td width="25%" style="text-align:center;">
                            Action
                        </td>
                        <td width="40%" style="text-align:center;">
                            Reason
                        </td>
                        <td width="20%" style="text-align:center;">
                            Actual Visit Date
                        </td>
                        <td>&nbsp;</td>
                    </tr>

                    @if (Model.lstAddCallDetails != null && Model.lstAddCallDetails.Count() > 0)
                    {

                        foreach (var item in Model.lstAddCallDetails)
                        {
                            <tr>
                                <td>
                                    <input type="hidden" id="PK_AddCallID" name="PK_AddCallID" value="@item.PK_AddCallID" />
                                    @Html.DropDownListFor(model => model.ActionSelected, new List<SelectListItem>
                                                                            {
                                                                                new SelectListItem{ Text="Select Action", Value = "" },
                                                                                new SelectListItem{ Text="Change Status to Assign", Value = "CHST" , Selected = (item.ActionSelected == "CHST") ?true : false} ,
                                                                                new SelectListItem{ Text="Change Visit Date in IVR", Value = "CHDT" , Selected = (item.ActionSelected == "CHDT") ?true : false} ,
                                                                                new SelectListItem{ Text="Delete Date in IVR", Value = "DLDT" , Selected = (item.ActionSelected == "DLDT") ?true : false} ,

                                                                            }, new { @class = "form-control CActionType", @id = "ddlActionType", @style = "pointer-events: none" })
                                </td>
                                <td>
                                    <span>@item.Reason</span>
                                </td>

                                <td>
                                    <span>@item.NewPlannedDate</span>
                                    @*<input type="text" value="@item.NewPlannedDate" id="@("NewPlannedDate" + @item.PK_AddCallID)" name="NewPlannedDate" style="text-align:center;width:100%;font-size:smaller;" class="PoDate" />*@

                                </td>
                                <td style="text-align:center;font-size:smaller;">
                                    <button type="button" id="btnAdd" disabled="true" class="btn btn-xs btn-primary classAdd">Update</button>
                                </td>
                            </tr>
                        }
                    }

                    @*else if (ViewBag.issendforapproval.ToString() == "Yes")
                          {
                              <tr>
                                  <td>

                                      @Html.DropDownListFor(model => model.ActionSelected, new List<SelectListItem>
                          {
                              new SelectListItem{ Text="Select Action", Value = "" },
                              new SelectListItem{ Text="Change Status to Assign", Value = "CHST"} ,
                              new SelectListItem{ Text="Change Visit Date in IVR", Value = "CHDT"},
                              new SelectListItem{ Text="Delete Date in IVR", Value = "DLDT"},
                          },
                        new { @class = "form-control CActionType", @id = "ddlActionType" })
                                  </td>
                                  <td>
                                      @Html.TextBoxFor(model => model.statusReason, new { @placeholder = "Reason", @class = "form-control Reason", autocomplete = "off", @readonly = "readonly", @id = "statusReason", @onclick = "onclickevent()" })
                                      @Html.ValidationMessageFor(model => model.statusReason, "", new { @class = "text-danger validation-msg" })
                                  </td>

                                  <td>
                                      @Html.TextBoxFor(model => model.NewPlannedDate, htmlAttributes: new { placeholder = "New Planned Date", @class = "form-control NewPlannedDate ", @readonly = "readonly", autocomplete = "off", @onclick = "onclickevent()" })
                                      @Html.ValidationMessageFor(model => model.NewPlannedDate, "", new { @class = "text-danger validation-msg" })
                                  </td>
                                  <td style="text-align:center;font-size:smaller;">


                                      <button type="button" id="btnAdd" disabled="true" class="btn btn-xs btn-primary classAdd">Update</button>
                                  </td>
                              </tr>
                          }*@
                    else
                    {
                        <tr>
                            <td>

                                @Html.DropDownListFor(model => model.ActionSelected, new List<SelectListItem>
                                                                    {
                                                                        new SelectListItem{ Text="Select Action", Value = "" },
                                                                        new SelectListItem{ Text="Change Status to Assign", Value = "CHST"} ,
                                                                        new SelectListItem{ Text="Change Visit Date in IVR", Value = "CHDT"},
                                                                        new SelectListItem{ Text="Delete Date in IVR", Value = "DLDT"},
                                                                    },
                                                                  new { @class = "form-control CActionType", @id = "ddlActionType" })
                            </td>
                            <td>
                                @Html.TextBoxFor(model => model.statusReason, new { @placeholder = "Reason", @class = "form-control Reason", autocomplete = "off", @id = "statusReason" })
                                @Html.ValidationMessageFor(model => model.statusReason, "", new { @class = "text-danger validation-msg" })
                            </td>

                            <td>
                                @Html.TextBoxFor(model => model.NewPlannedDate, htmlAttributes: new { placeholder = "New Planned Date", @class = "form-control NewPlannedDate ", autocomplete = "off" })
                                @Html.ValidationMessageFor(model => model.NewPlannedDate, "", new { @class = "text-danger validation-msg" })
                            </td>
                            <td style="text-align:center;font-size:smaller;">


                                <button type="button" id="btnAdd" class="Update">Update</button>
                            </td>
                        </tr>
                    }
                </table>

            </div><br /><br />
            <div class="row">
                <div class="col-xs-12">
                    <hr class="custom-hr1">
                </div>
            </div>
        }
    }



            <div class="row">
                <div class="col-xs-12">
                    <label style="color:#001ED2;">Communication Matrix:</label>
                </div>
            </div>

    <div class="row">
        <div class="col-xs-12">
            <div class="form-group">
                <label>Sub Vendor Contact Details:</label>
                @*<textarea rows="3" class="form-control" placeholder="Type your address here..."></textarea>*@
                @Html.TextAreaFor(model => model.Sub_Vendor_Contact, new { @placeholder = "Sub Vendor Contact Details", @class = "form-control", @rows = "3", @readonly = "readonly" })
                @Html.ValidationMessageFor(model => model.Sub_Vendor_Contact, "", new { @class = "text-danger validation-msg" })
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-xs-12">
            <div class="form-group">
                <label>Vendor Contact Details:</label>
                @*<textarea rows="3" class="form-control" placeholder="Type your address here..."></textarea>*@
                @Html.TextAreaFor(model => model.Vendor_Contact, new { @placeholder = "Vendor Contact Details", @class = "form-control", @rows = "3", @readonly = "readonly" })
                @Html.ValidationMessageFor(model => model.Vendor_Contact, "", new { @class = "text-danger validation-msg" })
            </div>
        </div>
    </div>
    <div class="row">

        <div class="col-xs-12">
            <div class="form-group">
                <label>Customer Contact Details:</label>
                @*<textarea rows="3" class="form-control" placeholder="Type your address here..."></textarea>*@
                @Html.TextAreaFor(model => model.Client_Contact, new { @placeholder = "Customer Contact Details", @class = "form-control", @rows = "3", @readonly = "readonly" })
                @Html.ValidationMessageFor(model => model.Client_Contact, "", new { @class = "text-danger validation-msg" })
            </div>
        </div>
    </div>

    <div class="row">

        <div class="col-xs-12 col-sm-12">
            <label>Distribution list : Tick for sending inspection call confirmation Email notification</label>
        </div>
    </div>
    <div class="row">

        <div class="col-xs-12 col-sm-4">
            <div class="form-group">
                @Html.CheckBoxFor(model => model.Homecheckbox)  <label>TUVI Email ID</label>
                @*<input type="text" class="form-control" placeholder="TAN Here">*@
                @Html.TextAreaFor(model => model.Tuv_Branch, new { @placeholder = " Home Branch", @class = "form-control", @readonly = "readonly" })
                @Html.ValidationMessageFor(model => model.Tuv_Branch, "", new { @class = "text-danger validation-msg" })
            </div>
        </div>

        <div class="col-xs-12 col-sm-4">
            <div class="form-group">
                @Html.CheckBoxFor(model => model.ClientEmailcheckbox)<label> Customer Email ID</label>
                @*<input type="text" class="form-control" placeholder="TAN Here">*@
                @Html.TextAreaFor(model => model.Client_Email, new { @placeholder = "Client Email", @class = "form-control", @readonly = "readonly" })
                @Html.ValidationMessageFor(model => model.Client_Email, "", new { @class = "text-danger validation-msg" })
            </div>
        </div>

        <div class="col-xs-12 col-sm-4">
            <div class="form-group">
                @Html.CheckBoxFor(model => model.Vendorcheckbox)<label>Vendor and Sub Vendor Email ID</label>
                @*<input type="text" class="form-control" placeholder="TAN Here">*@
                @Html.TextAreaFor(model => model.Vendor_Email, new { @placeholder = "Vendor Email", @class = "form-control", @readonly = "readonly" })
                @Html.ValidationMessageFor(model => model.Vendor_Email, "", new { @class = "text-danger validation-msg" })
            </div>
        </div>

    </div>

    <div class="row">
        <div class="col-xs-12">
            <hr class="custom-hr1">
        </div>
    </div>
            <div class="col-xs-12">
                <label style="color:#001ED2;">Reference Documents:</label>
            </div>


    <div class="col-xs-12">
        <div class="form-group">
            <label><i class="fa fa-paperclip" style="color:black;"></i> Attach Reference Documents Related to Inspection call: </label>
            <br />
            <strong>Note :</strong> 1) Attach Inspection call / notification / Instruction given by customer for subject call etc. <br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2) Attached documents will be available to inspector for ready reference on inspection call page.
            <input type="file" class="filepond" name="filepond" id="FileUpload" multiple>
            <input hidden="hidden" id="hdfFileUpload" name="FileUpload" class="hidden" />
        </div>
    </div>

    @if (Model != null)
    {
        if (Model.FileDetails != null && Model.FileDetails.Count > 0)
        {
            <div class="col-xs-12">
                <div class="form-group">
                    <ul class="Attachment">
                        @foreach (var item in Model.FileDetails)
                        {
                            <li>
                                @*<a class="title" href="/CallsMaster/Download/?p=@(item.IDS + item.Extension)&d=@item.FileName">@item.FileName</a>*@
                                @*<a class="title" href="@Url.Action("Download", "CallsMaster", new { @p = item.IDS + item.Extension, @d = item.FileName})">@item.FileName</a>*@
                                <a class="title" href="~/CallsMaster/Download/?p=@(item.IDS + item.Extension)&d=@item.PK_ID">@item.FileName</a>
                                <a href="javascript:void(0);" data-id="@item.IDS" class="deleteItem">X</a>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        }
        else
        {
            <p style="color:#FB5F6B;text-align:center;font-weight:bold;">File Not Uploaded</p>
        }
    }
    else
    {
        <p style="color:#FB5F6B;text-align:center;font-weight:bold;">There are no attachments !!!</p>
    }
    

    @*//added by nikita on 12122023*@
           

    

          
    <div class="col-xs-12 col-sm-3">

        <div class="form-group">
            <label>@*Report Formates*@ Job Page </label>
            @{

                if (Model != null)
                {



                    <div class="row">
                        @if (Model != null)
                        {
                            if (Model.FileDetailsFormat1 != null && Model.FileDetailsFormat1.Count > 0)
                            {
                                <div class="col-xs-12">
                                    <div class="form-group">
                                        <ul class="AttachmentFormat">
                                            @foreach (var item in Model.FileDetailsFormat1)
                                            {
                                                <li>
                                                    @*<a class="title1" href="~/JobMaster/DownloadFormat/?p=@(item.IDS + item.Extension)&d=@item.PK_ID">@item.FileName</a>*@
                                                    <a class="title1" href="~/JobMaster/DownloadJobPage/?p=@(item.IDS + item.Extension)&d=@item.PK_ID">@item.FileName</a>
                                                </li>
                                            }
                                        </ul>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <p style="color:#d9534f;text-align:center;font-weight:normal;">No File Formats</p>
                            }
                        }
                        else
                        {
                            <p style="color:#d9534f;text-align:center;font-weight:normal;">There are no attachments !!!</p>
                        }
                    </div>

                    //}

                }
            }
        </div>
    </div>

    <div class="col-xs-12 col-sm-3">
        <div class="form-group">
            <label>@*Attachment:*@ Sub Job Page</label>
            @Html.HiddenFor(m => m.Attachment)



            <div class="row">
                @if (Model != null)
                {
                    if (Model.SubJobFileDetails != null && Model.SubJobFileDetails.Count > 0)
                    {
                        <div class="col-xs-12">
                            <div class="form-group">
                                <ul class="AttachmentFormat">
                                    @foreach (var item in Model.SubJobFileDetails)
                                    {
                                        @*<li>
                                                <a class="title" href="~/CallsMaster/Download/?p=@(item.IDS + item.Extension)&d=@item.PK_ID">@item.FileName</a>
                                                <a href="javascript:void(0);" data-id="@item.PK_ID" class="deleteItem">X</a>

                                            </li>*@

                                        <li>
                                            @*<a class="title" href="~/CallsMaster/DownloadSubJobAttchment/?p=@(item.IDS + item.Extension)&d=@item.PK_ID">@item.FileName</a>*@

                                            @*<a class="title" href="~/jobMaster/DownloadSubJobAttachement/?p=@(item.IDS + item.Extension)&d=@item.PK_ID">@item.FileName</a>*@
                                            <a class="title" href="~/jobMaster/DownloadSubJobPage/?p=@(item.IDS + item.Extension)&d=@item.PK_ID">@item.FileName</a>
                                            @*<a href="javascript:void(0);" data-id="@item.PK_ID" class="deleteItem">X</a>*@
                                        </li>

                                    }
                                </ul>
                            </div>
                        </div>
                    }
                    else
                    {
                        <p style="color:#d9534f;text-align:center;font-weight:normal;">File Not Uploaded against Sub Job</p>
                    }
                }
                else
                {
                    <p style="color:#d9534f;text-align:center;font-weight:normal;">There are no attachments !!!</p>
                }
            </div>


        </div>
    </div>

    <div class="col-xs-12 col-sm-3">
        <div class="form-group">
            <label>Sub Sub Job Page</label>
            @Html.HiddenFor(m => m.Attachment)



            <div class="row">
                @if (Model != null)
                {
                    if (Model.SubSubJobFileDetails != null && Model.SubSubJobFileDetails.Count > 0)
                    {
                        <div class="col-xs-12">
                            <div class="form-group">
                                <ul class="AttachmentFormat">
                                    @foreach (var item in Model.SubSubJobFileDetails)
                                    {
                                        @*<li>
                                                <a class="title" href="~/CallsMaster/Download/?p=@(item.IDS + item.Extension)&d=@item.PK_ID">@item.FileName</a>
                                                <a href="javascript:void(0);" data-id="@item.PK_ID" class="deleteItem">X</a>

                                            </li>*@

                                        <li>
                                            @*<a class="title" href="~/jobMaster/DownloadSubJobAttachement/?p=@(item.IDS + item.Extension)&d=@item.PK_ID">@item.FileName</a>*@
                                            <a class="title" href="~/jobMaster/DownloadSubJobPage/?p=@(item.IDS + item.Extension)&d=@item.PK_ID">@item.FileName</a>
                                            @*<a href="javascript:void(0);" data-id="@item.PK_ID" class="deleteItem">X</a>*@
                                        </li>

                                    }
                                </ul>
                            </div>
                        </div>
                    }
                    else
                    {
                        <p style="color:#d9534f;text-align:center;font-weight:normal;">File Not Uploaded against Sub Job</p>
                    }
                }
                else
                {
                    <p style="color:#d9534f;text-align:center;font-weight:normal;">There are no attachments !!!</p>
                }
            </div>


        </div>
    </div>

    <div class="col-xs-12 col-sm-3">
        <div class="form-group">
            <label>Sub Sub Sub Job Page</label>
            @Html.HiddenFor(m => m.Attachment)



            <div class="row">
                @if (Model != null)
                {
                    if (Model.SubSubSubJobFileDetails != null && Model.SubSubSubJobFileDetails.Count > 0)
                    {
                        <div class="col-xs-12">
                            <div class="form-group">
                                <ul class="AttachmentFormat">
                                    @foreach (var item in Model.SubSubSubJobFileDetails)
                                    {


                                        <li>
                                            <a class="title" href="~/jobMaster/DownloadSubJobPage/?p=@(item.IDS + item.Extension)&d=@item.PK_ID">@item.FileName</a>
                                        </li>

                                    }
                                </ul>
                            </div>
                        </div>
                    }
                    else
                    {
                        <p style="color:#d9534f;text-align:center;font-weight:normal;">File Not Uploaded against Sub Job</p>
                    }
                }
                else
                {
                    <p style="color:#d9534f;text-align:center;font-weight:normal;">There are no attachments !!!</p>
                }
            </div>


        </div>
    </div>

    <div class="col-xs-12 col-sm-3">
        <div class="form-group">
            <label>Call Page</label>

            <div class="row">
                @if (Model != null)
                {
                    if (Model.CallFileDetails != null && Model.CallFileDetails.Count > 0)
                    {
                        <div class="col-xs-12">
                            <div class="form-group">
                                <ul class="AttachmentFormat">
                                    @foreach (var item in Model.CallFileDetails)
                                    {
                                        <li>
                                            <a class="title1" href="~/CallsMaster/DownloadFromCall/?p=@(item.IDS + item.Extension)&d=@item.PK_ID"><span style="width:10px;">@item.FileName</span></a>

                                        </li>
                                    }
                                </ul>
                            </div>
                        </div>
                    }
                    else
                    {
                        <p style="color:#d9534f;text-align:center;font-weight:normal;">File Not Uploaded against Call</p>
                    }
                }
                else
                {
                    <p style="color:#d9534f;text-align:center;font-weight:normal;">There are no attachments !!!</p>
                }
            </div>
        </div>
    </div>


            <div class="row">
                <div class="col-xs-12">
                    <hr class="custom-hr1">
                </div>
            </div>

            <div class="row">
                <div class="col-xs-12">
                    <label style="color:#001ED2;">Instructions to Inspector:</label>
                </div>
            </div>


                <div class="row">
                    <div class="col-xs-12 col-sm-12">
                        <div class="form-group">
                            <label>Call specific:</label>
                            @Html.TextAreaFor(model => model.CallRemarks, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.CallRemarks, "", new { @class = "text-danger validation-msg" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-xs-12 col-sm-12">
                        <div class="form-group">
                            <label>Project Specific:</label>
                            @*<textarea rows="3" class="form-control" placeholder="Type your Special Notes..."></textarea>*@

                            @Html.TextAreaFor(model => model.Special_Notes, new { @placeholder = "Special Notes", @class = "form-control", @readonly = "readonly" })
                            @Html.ValidationMessageFor(model => model.Special_Notes, "", new { @class = "text-danger validation-msg" })
                        </div>
                    </div>
                </div>
            <div class="row">
                <div class="col-xs-12">
                    <hr class="custom-hr1">
                </div>
            </div>

            <div class="row">
                <div class="col-xs-12">
                    <label style="color:#001ED2;">History:</label>
                </div>
            </div>


                <div class="row">
                    <div class="col-xs-12 text-center">
                        <a href="@Url.Action("IRNReportsBySubjob","SubJobMaster",new {@PK_Call_ID=Model.PK_Call_ID })" class="btn btn-default news-btn"> IRN List</a>
                        <a href="@Url.Action("IVRReportsBySubjob","SubJobMaster",new {@SubJob_No=Model.Sub_Job })" class="btn btn-default news-btn"> IVR List</a>
                        <a href="@Url.Action("NCRReportsBySubjob","SubJobMaster",new {@SubJob_No=Model.Sub_Job })" class="btn btn-default news-btn"> NCR List</a>
                        @*<a href="@Url.Action("ComplaintsDashBoardByCallNo","Complaint",new { @VendorName = Model.Vendor_Name })" class="btn btn-default news-btn"> Complaint List</a>*@
                        <a href="@Url.Action("ComplaintsDashBoardByCallNo","Complaint",new { @VendorName = Model.TopSubVendorName , @PK_Call_ID = Model.PK_Call_ID})" class="btn btn-default news-btn"> Complaint List</a>

                        <a href="@Url.Action("AllConcern","VisitReport",new { @PK_CALL_ID = Model.PK_Call_ID, @Type="InspectorCall" })" class="btn btn-default news-btn"> List of Issues</a>
                        @*<button class="btn btn-default insert-form-btn" type="button" onclick="location.href='@Url.Action("AllConcern", "VisitReport", new { @PK_CALL_ID = Model.PK_Call_ID, @Type="InspectorCall" })'">All Concerns</button>*@
                    </div>

                </div>
                @*@if (Model.Status == "Closed" || Model.Status == "Cancelled")
            {

            }
            else
            {
                <div class="col-xs-12 text-center">

                    <button type="submit" class="btn btn-default insert-form-btn" id="btnjc"> Save </button>

                </div>
            }*@
</form>
















                <div class="col-xs-12 text-center">
                    @if (Model.Call_No == null)
                    {
                        <button type="submit" id="btnic" class="btn btn-default insert-form-btn"><i class="fa fa-plus-circle"></i> Save </button>
                    }
                    else
                    {
                        if (Model.Status.ToUpper() != "CANCELLED" && Model.Status.ToUpper() != "CLOSED")
                        {
                            <button type="submit" class="btn btn-default insert-form-btn" id="btnic"><i class="fa fa-plus-circle"></i>Update</button>
                        }
                    }

                </div>
                @*</form>*@
                                    </div>
                                        </div>
                                    </div>
                                    <!--Contact Details By Manoj -->


                                </div><!-- /.box-shadow -->
                            </div><!-- /.col -->

                        </div><!-- /.row -->
                    </div><!-- /.col -->



                </div><!-- /.row -->
            </div><!-- /.container-fluid -->
            <!--End of header-->

        </div>
    </div>
                                                                }

<div class="modal fade bs-example-modal-lg modal fade" id="AddNewContactDetails" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header text-center" style="background-color: #001ED2;color: #fff;">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="myModalLabel">Add new contact</h4>
            </div>



            <div class="modal-body">
                <div class="form-box" style="padding-bottom:0!important;">
                    <div class="row">
                        <div class="col-xs-12 col-sm-12">

                            <span style="color:#E12F24;">
                                <strong>Notes </strong> :
                            </span> 1) <span style="color:#ff0000;">*</span> - Mandatory.<br /><br />

                        </div>

                        <div class="col-xs-12">
                            <hr class="custom-hr1">
                        </div>

                        <div class="col-xs-12 col-sm-4">
                            <div class="form-group">
                                <label>Contact Person name:<span style="color:#ff0000;">*</span></label>
                                @Html.TextBoxFor(model => model.ContactNames, new { @placeholder = "Contact Name Here", @class = "form-control" })
                                @*@Html.ValidationMessageFor(model => model.ContactNames, "", new { @class = "text-danger" })*@

                            </div>
                        </div>
                        @Html.HiddenFor(m => m.Attachment)
                        <div class="col-xs-12 col-sm-4 hidden">

                            <div class="form-group">
                                <label>Company name:</label>

                                @if (Model != null)
                                {
                                    if (ViewBag.ContactCompanyName != null)
                                    {
                                        @Html.DropDownListFor(model => model.ContactCompanyName, new SelectList(@ViewBag.ContactCompanyName, "Code", "Name"), "---Select Company---", new { @id = "ddlContactCompanyname", @class = "form-control" })
                                    }
                                }
                                else
                                {
                                    if (ViewBag.ContactCompanyName != null)
                                    {
                                        @Html.DropDownListFor(model => model.ContactCompanyName, new SelectList(@ViewBag.ContactCompanyName, "Code", "Name"), new { @id = "ddlContactCompanyname", @class = "form-control" })
                                    }

                                }
                            </div>
                            @Html.Hidden("hidCompany")
                        </div>

                        <div class="col-xs-12 col-sm-4">
                            <div class="form-group">
                                <label>Designation:<span style="color:#ff0000;">*</span></label>

                                @Html.TextBoxFor(model => model.TitleName, new { @placeholder = "Designation", @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.TitleName, "", new { @class = "text-danger" })


                            </div>
                        </div>
                        <div class="col-xs-12 col-sm-4">
                            <div class="form-group">
                                <label>Email Id:<span style="color:#ff0000;">*</span></label>

                                @Html.TextBoxFor(model => model.Email, new { @placeholder = "Email Here", @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-xs-12 col-sm-4">
                            <div class="form-group">
                                <label>Landline number:</label>
                                @*<input type="text" class="form-control" placeholder="Home Phone Here">*@
                                @Html.TextBoxFor(model => model.HomePhone, new { @placeholder = "Landline Number Here", @class = "form-control" })
                                @*@Html.ValidationMessageFor(model => model.HomePhone, "", new { @class = "text-danger" })*@
                            </div>
                        </div>

                        <div class="col-xs-12 col-sm-4">
                            <div class="form-group">
                                <label>Mobile number:<span style="color:#ff0000;">*</span></label>
                                @*<input type="text" class="form-control" placeholder="Mobile Here">*@
                                @Html.TextBoxFor(model => model.Mobile, new { @placeholder = "Mobile Number Here", @class = "form-control" })
                                @*@Html.ValidationMessageFor(model => model.Mobile, "", new { @class = "text-danger" })*@
                            </div>
                        </div>
                        <div class="col-xs-12 col-sm-4">
                            <div class="form-group">
                                <label>Fax number:</label>
                                @Html.TextBoxFor(model => model.Fax_No, new { @placeholder = "Enter Fax Number", @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Fax_No, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="row">

                        <div class="col-xs-12 col-sm-4">
                            <div class="form-group">
                                @*<label>Primary Contact :</label>*@
                                @if (Model != null)
                                {
                                    if (Model.IsMainContact == true)
                                    {
                                        <div>
                                            <label>
                                                <input type="checkbox" name="IsMainContact" id="IsMainContact" value="true" checked="checked" />Primary Contact
                                            </label>
                                        </div>
                                    }
                                    else if (Model.IsMainContact == false)
                                    {
                                        <div class="checkbox">
                                            <label>
                                                <input type="checkbox" name="IsMainContact" id="IsMainContact" value="true" />Primary Contact
                                            </label>
                                        </div>
                                    }

                                }
                                else
                                {
                                    <div class="checkbox">
                                        <label>
                                            <input type="checkbox" name="IsMainContact" id="IsMainContact" value="true" /> Primary Contact
                                            <input name="IsMainContact" type="hidden" value="false" />
                                        </label>
                                    </div>
                                }
                            </div>
                        </div>


                        <div class="col-xs-12 col-sm-4">
                            <div class="form-group">
                                <label>Status:<span style="color:#ff0000;">*</span></label>

                                @Html.DropDownListFor(m => m.ContactStatus, new List<SelectListItem>
                                                                                     {
                                                                                         new SelectListItem{ Text="---SELECT---", Value = "" },
                                                                                         new SelectListItem{ Text="Active", Value = "Active" },
                                                                                         new SelectListItem{ Text="In-Active", Value = "In-Active" },



                                                                                        }, new { @class = "form-control", @id = "PT" })

                            </div>
                        </div>

                        <div class="col-xs-12 col-sm-4">

                        </div>
                    </div>
                    <div class="row">
                        <div class="col-xs-12">
                            <div class="form-group">
                                <label>Address:<span style="color:#ff0000;">*</span></label>
                                @*@Html.TextAreaFor(model => model.Address, new { @placeholder = "Address  Here", @class = "form-control", @rows = "3" })*@

                                @Html.DropDownListFor(model => model.Address, new SelectList(Enumerable.Empty<SelectListItem>(), "--Select Company Address--", "--Select Company Address--"), "--Select Company Address--", new { @id = "ddlCaddr", @class = "form-control" })

                            </div>
                        </div>
                    </div>


                    <div class="row">
                        <div class="col-xs-12 text-center">
                            <button type="button" class="btn btn-default insert-form-btn " id="btnAddNewContact" title="Add New Contact"><i class="fa fa-plus-circle"></i> Add Contact</button>
                        </div>
                    </div>

                </div>

            </div>

            <div class="modal-footer" style="padding: 10px 15px;">
                <button type="button" class="btn btn-default news-btn" data-dismiss="modal" id="btncosenew">Close</button>

                @*<button type="button" class="btn btn-primary">Save changes</button>*@
            </div>
            <div class="modal-footer" style="padding: 10px 15px;">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" id="addmodalCloseButton"><span aria-hidden="true">&times;</span></button>

                @*<button type="button" class="btn btn-primary">Save changes</button>*@
            </div>
        </div>


    </div>
</div>


<script>
    (function() {
        var isSendForApproval = @Html.Raw(Json.Encode(ViewBag.issendforapproval));
        var dateStatus = @Html.Raw(Json.Encode(ViewBag.datestatus));

        if (isSendForApproval === "Yes" || dateStatus === "Yes") {
            document.getElementById('divdisplaytable').style.display = 'none';
        }
    })();
</script>

<script type="text/javascript">
    $(function () {
        var v = $('#Br_Id').val();
        debugger;
        $("#FirstName").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: "/CallsMaster/GetAutoCompleteData/",
                    // data: "{'InspectorName':'" + request.term + "'}",
                    data: '{InspectorName: "' + request.term + '" ,Br_Id: "' + v + '"}',
                    datatype: "json",
                    type: "POST",
                    contentType: "application/json;charset-utf-8",
                    success: function (data) {
                        response($.map(data, function (item) {
                            return { label: item.FirstName, value: item.FirstName };
                        }))
                    },
                    minLength: 1
                });
            }
        });
    });

</script>

<script type="text/javascript">
    $(document).ready(function () {
        $("#Br_Id").change(function () {
            debugger;


            var E = $('#Br_Id').val();
            var O = $('#Originating_Branch').val();

            if (E == O) {

                $("#FirstName").removeAttr("disabled");

            } else {
                $("#FirstName").attr("disabled", "disabled");
            }


        })

        var customer = $('#Company_Name').val();
        $.ajax({
            url: '@Url.Action("GetCompanyAddress", "subJobMaster")',
            data: "{ 'Prefix': '" + customer + "'}",
            dataType: "json",
            type: "POST",
            contentType: "application/json; charset=utf-8",
            success: function (response) {
                //  alert(response);
                $("#ddlCaddr").empty();

                var s = '<option value="-1">--Select Vendor Address--</option>';
                for (var i = 0; i < response.length; i++) {
                    s += '<option value="' + response[i].pkID + '">' + response[i].Company_Name + '</option>';
                }
                $("#ddlCaddr").html(s);

            },
            error: function (response) {
                // alert(response.responseText);
            },
            failure: function (response) {
                //   alert(response.responseText);
            }
        })

        var customer = $('#Company_Name').val();
        loadVendorDetails(customer);
    });

</script>

<script type="text/javascript">
    $(document).ready(function () {
        $("#chkCallCancelled").change(function () {

            /// alert(123);
            if ($("#chkCallCancelled").prop("checked")) {
                $("#INTERNATIONAL").show();
                $("#Reasion").focus();
            }
            else {
                $("#INTERNATIONAL").hide();
            }


        })
    });

</script>

<script type="text/javascript">

    $(document).ready(function () {
        debugger;
        if ($("#chkCallCancelled").prop("checked")) {
            $("#INTERNATIONAL").show();
            $("#Reasion").focus();
            $("#Reasion").attr("disabled", "disabled");
        }
        else {
            $("#INTERNATIONAL").hide();
        }

        //  $('#CallReceiveTime').timepicker();
        var E = $('#Br_Id').val();
        var O = $('#Originating_Branch').val();
        var s = '@Session["UserBranchId"]';

        //alert("User Branch" + s);
        //alert("Executing Branch" + E);
        //alert("Originating Branch" + O);





        var match = s.split(',')

        var blnExist = false;
        var blnOExist = false;

        var PK_Call_IDVal = $('#PK_Call_ID').val();

        for (var a in match) {
            if (E == match[a]) {
                $("#FirstName").removeAttr("disabled");
                blnExist = true;
            }
        }


        if (blnExist == false) {
            $("#FirstName").attr("disabled", "disabled");
            $("#a").prop("disabled", true);
        }


        if (PK_Call_IDVal != "0") {
            for (var b in match) {
                if (O == match[b]) {
                    blnOExist = true;
                }
            }

            //alert("blnOExist " + blnOExist);
            //alert("blnExist " + blnExist);

            if (blnOExist == false) {
                document.getElementById("Call_Request_Date").style.pointerEvents = "none";
                //document.getElementById("Call_Recived_date").style.pointerEvents = "none";
                document.getElementById("CallReceiveTime").style.pointerEvents = "none";
                //document.getElementById("TDTime").style.pointerEvents = "none";
                document.getElementById("Br_Id").style.pointerEvents = "none";

                
                $("#divMandayRate").css("display", "none");
            }
        }


    });

</script>

<script type="text/javascript">
    $(function () {

        debugger;
        $("#Sub_Job").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: "/CallsMaster/GetSubNoAutoComplete/",
                    data: "{'InspectorName':'" + request.term + "'}",
                    // data: '{InspectorName: "' + request.term + '" ,Br_Id: "' + v + '"}',
                    datatype: "json",
                    type: "POST",
                    contentType: "application/json;charset-utf-8",
                    success: function (data) {
                        response($.map(data, function (item) {
                            return { label: item.Sub_Job, value: item.Sub_Job };
                        }))
                    },
                    minLength: 1
                });
            }
        });
    });

</script>

@*---------------*@
<!--filepond-->
<!-- Load FilePond library -->
<script src="~/AllJsAndCss/js/filepond.js"></script>

<!-- Turn all file input elements into ponds -->
<script>
    FilePond.parse(document.body);
</script>

<script>
    FilePond.registerPlugin(
    // encodes the file as base64 data
    FilePondPluginFileEncode,
    // validates the size of the file
    FilePondPluginFileValidateSize,
    // corrects mobile image orientation
    FilePondPluginImageExifOrientation,
    // previews dropped images
    FilePondPluginImagePreview
    );
    // Select the file input and use create() to turn it into a pond
    FilePond.create(document.querySelector('.filepond'));
</script>
<script>
    FilePond.setOptions({
        server: '@Url.Action("TemporaryFilePathDocumentAttachment", "CallsMaster")'
    });
</script>

<script>
    var SummaryExtension = false;
    var fileExtension = ["pdf", "PDF", "xls", "xlsx", "doc", "DOC", "docx", "DOCX", "png", "PNG", "jpg", "JPG", "jpeg", "JPEG", "gif", "GIF"];
    $("#FileUpload").change(function (e) {
        debugger;
        var files = $("#FileUpload input[type='file']").get(0).files;
        for (var index = 0; index < files.length; index++) {
            var singleExtension = e.target.files[index].name.split('.').pop();
            var Condition = fileExtension.includes(singleExtension);
            if (Condition == true) {
                SummaryExtension = true;
            }
            else {
                alert("Only formats are allowed : " + fileExtension.join(','));
                SummaryExtension = false;
                return;
            }
        }
        if (SummaryExtension == true) {
            var fileData = new FormData();
            for (var i = 0; i < files.length; i++) {
                fileData.append("FileUpload input[type='file']", files[i]);
            }
            //Creating an XMLHttpRequest and sending
            var xhr = new XMLHttpRequest();
            var link = '@Url.Action("TemporaryFilePathDocumentAttachment", "CallsMaster")';
            xhr.open('POST', link, 'true');
            xhr.send(fileData);
            xhr.onreadystatechange = function () {
                if (xhr.readyState == 4 && xhr.status == 200) {
                    var data = xhr.responseText;
                    data = data.replace(/"/g, "");
                    $("#Attachment").val(data);
                }
            }
            //})
        }



    })
</script>

@*Delete Uploaded File Code added by manoj Sharma 12 March 2020*@

<script>
    $(document).ready(function () {


        $('.deleteItem').click(function (e) {
            debugger;
            e.preventDefault();
            var $ctrl = $(this);
            if (confirm('Do you really want to delete this file?')) {
                $.ajax({
                    url: '@Url.Action("DeleteFile")',
                    type: 'POST',
                    data: { id: $(this).data('id') }
                }).done(function (data) {
                    if (data.Result == "OK") {
                        $ctrl.closest('li').remove();
                    }
                    else if (data.Result.Message) {
                        alert(data.Result.Message);
                    }
                }).fail(function () {
                    alert("There is something wrong. Please try again.");
                })

            }
        });
    });

</script>

<!--multiselect-->
<script src="~/AllJsAndCss/js/bootstrap-multiselect.js"></script>


<script>
    $('.form-multiselect-city').multiselect({
        enableFiltering: true,
        includeSelectAllOption: true,
        enableCaseInsensitiveFiltering: true
    });
</script>

<script type="text/javascript">
    $(function () {
        $('#ProductLists').multiselect({
            includeSelectAllOption: true
        });

    });

    $(function () {
        $("#Product_item").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: "/Virtual_Call/GetAutoCompleteDataPItem/",
                    data: "{'Productname':'" + request.term + "'}",
                    datatype: "json",
                    type: "POST",
                    contentType: "application/json;charset-utf-8",
                    success: function (data) {
                        response($.map(data, function (item) {
                            return { label: item.Product_item, value: item.Product_item };
                        }))
                    },
                    minLength: 1
                });
            }
        });
    });

    $(document).ready(function () {

        IsinspectorApproved();
        var Inspector = $('#a').val();
        if (Inspector != "") {
            FormFilled(Inspector);
        }

        $("#Br_Id").change(function () {
            debugger;
            if ($("#Br_Id").val() != "") {
                $.ajax
                ({
                    url: '@Url.Action("GetEBEmailByBrName", "CallsMaster")',
                    type: "Get",
                    data: { id: $("#Br_Id").val() },
                    datatype: "json",
                    ContentType: "application/json",
                    success: function (ObjModelsubJob) {
                        //$('#Tuv_Branch').val(ObjModelsubJob.EB_Email).val()

                        var E = $('#Br_Id').val();
                        var O = $('#Originating_Branch').val();

                        if (E == O) {

                            $("#a").removeAttr("disabled");

                        } else {
                            $("#a").attr("disabled", "disabled");
                        }


                    }

                });
            }
            else {
                $("#Tuv_Branch").empty();
                $("#Tuv_Branch").prop("disabled", true);
            }
        });
    });

</script>

<script>
    $(document).ready(function () {




        $("#Br_Id").change(function () {
            debugger;
            if ($("#Br_Id").val() != "Select") {
                var StateOptions = {};
                //StateOptions.url = "/Roll/GetCityByRoll";
                StateOptions.url = '@Url.Action("GetInsByExBr", "CallsMaster")';
                StateOptions.type = "Get";
                StateOptions.data = { sid: $("#Br_Id").val() };
                StateOptions.datatype = "json";
                StateOptions.ContentType = "application/jason";
                StateOptions.success = function (citylist) {
                    $("#FirstName").empty();
                    for (var i = 0; i < citylist.length; i++) {
                        $("#FirstName").append("<option value=" + citylist[i].PK_UserID + ">" + citylist[i].FirstName + "</option>");
                    }
                    $("#FirstName").prop("disabled", false);
                };
                StateOptions.error = function () { alert("Error in getting Inspector Names !"); };
                $.ajax(StateOptions);
            }
            else {
                $("#FirstName").empty();
                $("#FirstName").prop("disabled", true);
            }
        });
    });
</script>




<script>
    $(document).ready(function () {
        var chkPassport = document.getElementById("chkPassport");
        var dvPassport = document.getElementById("dvPassport");
        dvPassport.style.display = chkPassport.checked ? "block" : "none";

        /// var NewPlannedDate = document.getElementById("NewPlannedDate");



        var a = $('#ddlActionType').val();
        ///alert(a)
        if (a == "CHDT") {
            //alert(123);
            document.getElementById("NewPlannedDate").disabled = false;
        }
        else {
            // alert(456);
            document.getElementById("NewPlannedDate").disabled = true;
        }




    });
</script>

<script type="text/javascript">
    $(function () {
        $("#chkPassport").click(function () {
            if ($(this).is(":checked")) {
                $("#Call_Request_Date").attr("disabled", "disabled");


            } else {
                $("#Call_Request_Date").removeAttr("disabled");
            }
        });
    });
</script>

<script src="~/AllJsAndCss/js/bootstrap-multiselect.js"></script>
<link href="~/AllJsAndCss/css/bootstrap-multiselect.css" rel="stylesheet" />

<script>
    $('.form-multiselect-city').multiselect({
        enableFiltering: true,
        includeSelectAllOption: true,
        enableCaseInsensitiveFiltering: true
    });
</script>

<script type="text/javascript">
    $(function () {
        $('#Auditee').multiselect({
            includeSelectAllOption: true
        });

    });

</script>


<script>
    $("#btnic").click(function myfunction() {
        if (validateform() == false) {

            return false;
        }
        else {
            $("#formic").submit();
        }
    });




    function validateform() {


        var RecDate = $("#Call_Recived_date").val();
        var ReqDate = $("#Call_Request_Date").val();
        var PlnDate = $("#Planned_Date").val();
        //var ProdDesc = $("#ProdDesc").val();
        var ProdQty = $("#ProdQty").val();
        var Reason = $("#Reasion").val();
        var EstimatedHours = $("#EstimatedHours").val();
        var Source = $("#Source").val();
        var ExeBranch = $("#Br_Id").val();

        var callstChange = $("#ddlActionType").val();
        var statusreason = $("#statusreason").val();
        var CallReceiveTime = $("#CallReceiveTime").val();
        var ManDayRate = $("#ManDayRate").val();
        var Job_Location = $("#Job_Location").val();

        var PrimaryMaterial = $("#IdPrimaryMaterial option:selected").val();

        var FinalInspectionValue = $("#FinalInspectionValue").val();

        var Sub_Category = $("#Sub_Category").val();

        if (PrimaryMaterial == "" || PrimaryMaterial == null) {
            alert("Please Select Primary Material !!!");
            $("#IdPrimaryMaterial").focus()
            return false;
        }
        //alert(RecDate)
        //alert(CallReceiveTime);
        //return false;
        /*
                if (CallReceiveTime == "" || CallReceiveTime == null) {
                    alert("Please select Call Received Date !");
                    $("#Call_Recived_date").focus()
                    return false;
                }
                */
        if (Sub_Category == "" || Sub_Category == null) {
            alert("Please select Stages of Inspection !");
            return false;
        }

        if (CallReceiveTime == "" || CallReceiveTime == null) {
            alert("Please select Call Received Date & Time !");
            $("#CallReceiveTime").focus()
            return false;
        }
        if ((ReqDate == "" || ReqDate == null) && chkPassport.checked == false) {
            alert("Please select Call Requested Date !");
            $("#Call_Request_Date").focus()
            return false;
        }
        //if ((PlnDate == "" || PlnDate == null) && chkPassport.checked == false)
        if (PlnDate == "" || PlnDate == null) {
            alert("Please select Planned Date !");
            $("#Planned_Date").focus()
            return false;
        }

        if (ExeBranch == "" || ExeBranch == null) {
            alert("Please select Executing Branch !");
            $("#Br_Id").focus()
            return false;
        }

        //if (ProdDesc == "" || ProdDesc == null) {
        //    alert("Please Enter Stage Description !");
        //    $("#ProdDesc").focus()
        //    return false;
        //}

        if (ProdQty == "" || ProdQty == null) {
            alert("Please Enter Item Quantity With Unit !");
            $("#ProdQty").focus()
            return false;
        }


        if ($("#chkCallCancelled").prop("checked")) {
            if (Reason == "" || Reason == null) {
                alert("Please Enter Reason for Cancellation !!!");
                $("#Reasion").focus();
                return false;
            }
        }

        if (EstimatedHours == "" || EstimatedHours == null) {
            alert("Enter Estimated Hours !");
            $("#EstimatedHours").focus()
            return false;
        }
        if (Source == "" || Source == null) {
            alert("Enter Notification Number !");
            $("#Source").focus()
            return false;
        }

        if (Job_Location == "" || Job_Location == null || Job_Location == "NA" || Job_Location == "0") {
            alert("Enter Inspection Location !");
            $("#Job_Location").focus()
            return false;
        }

        //added by shrutika salve 27032024
        if (FinalInspectionValue == "" || FinalInspectionValue == null) {
            alert("Please select Final Inspection!");
            $("#FinalInspectionValue").focus()
            return false;
        }

        if ($("#checkIFExpeditingReport").prop("checked"))
        {
            var Expeditingreport = $("#IdType").val();
            if (Expeditingreport == null || Expeditingreport == "") {
                alert("please select Expediting Type!")
                return false;
            }
        }

        //if ($('#chkManMonths').is(':checked')) {
        //    if ($('#WeekDays').val() == null) {
        //        alert("please select Weekly of on Day")
        //        $("#WeekDays").focus()
        //        return false; // Prevent form submission
        //    }
        //}
        //alert($('#a').val());
       


        //if ($('#a').val() != null || $('#a').val() != "") {
        //    var iscompedent = $("#inspectorCompetant").val();
        //    if (iscompedent == "" || iscompedent == null) {
        //        alert("Please Enter inspector Competant  !!!");
        //        $("#inspectorCompetant").focus()
        //        return false;
        //    }

        //}

        if ($("#PK_Call_ID").val() == "0") {
            if ($('#chkManMonths').is(':checked')) {
                if ($('#WeekDays').val() == null) {
                    alert("please select Weekly of on Day")
                    $("#WeekDays").focus()
                    return false; // Prevent form submission
                }
                else {
                    return true;
                }
            }
        } else {
            return true;
        }

        //if (CallReceiveTime == "" || CallReceiveTime == null) {
        //    alert("Please enter Call Receive Time!");
        //    $("#CallReceiveTime").focus()
        //    return false;
        //}

    }
</script>

<script>
    function CheckIFLeaveAdded() {
        // debugger;

        var chkContinuousCall = $("#chkPassport").val()
        var FromDate = $("#FromDateNew").val()
        var ToDate = $("#ToDateNew").val()
        var ActualVisitDate = $("#Planned_Date").val()
        var Inspector = $("#a").val()

        if (Inspector != '') {
            $.post("@Url.Action("CheckLeave", "CallsMaster")",
            {
                FromDate: FromDate,
                ToDate: ToDate,
                ActualVisitDate: ActualVisitDate,
                Inspector: Inspector

            },

            function (data) {
                if (data == 0) {

                }
                else {
                    $("#a").val("");
                    alert(data);
                }
            });
        }
    }
</script>

@*<script>
        $("#Sub_Category").change(function () {
            debugger;
            var E = $('#Sub_Category').val();

        })
    </script>*@

<script>
    //$('#Sub_Category').on('change', function () {
    //    debugger
    //    var a = $('#Sub_Category').val();
    //    if (a = 'Final Inspection') {

    //        document.getElementById("FinalInspection").checked = true;
    //        //alert(this.value)
    //    }
    //    else {
    //        document.getElementById("FinalInspection").checked = false;
    //    }
    //});

    $('#ddlActionType').on('change', function () {
        debugger
        var a = $('#ddlActionType').val();
        //alert(a);
        if (a == "CHDT") {
            //  alert(1234);
            document.getElementById("NewPlannedDate").disabled = false;
        }
        else {
            //alert(4564);
            document.getElementById("NewPlannedDate").disabled = true;
        }
    });
</script>

<script>
    $(function () {
        $(".NewPlannedDate").datepicker({
            dateFormat: 'dd/mm/yy',//check change
            changeMonth: true,
            changeYear: true,
            yearRange: "-100:+50"
        });
    });




    $("body").on("click", "#WOSummaryTable .Update", function () {
        var row = $(this).closest("tr");
        //// var ddlvalue = row.find('td:eq(1)').html();

        var ddlvalue = $("#ddlActionType").val();

        $("td", row).each(function () {
            if ($(this).find("input").length > 0) {
                var span = $(this).find("span");
                var input = $(this).find("input");
                span.html(input.val());
                span.show();
                input.hide();
            }
        });

        row.find(".Cancel").hide();

        $(this).hide();
        debugger;
        var customer =
            {

                PK_AddCallID: row.find("#PK_AddCallID").val(),
                PK_Call_ID: $("#PK_Call_ID").val(),
                ActionSelected: ddlvalue,
                Reason: row.find("#statusReason").val(),
                NewPlannedDate: row.find("#NewPlannedDate").val(),
            };

        $.ajax({
            type: "POST",
            url: '@Url.Action("UpdateCustomer", "CallsMaster")',
            data: '{AddPO:' + JSON.stringify(customer) + '}',
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (response) {
                location.reload();
            }
        });
    });

    //Cancel event handler.
    $("body").on("click", "#WOSummaryTable .Cancel", function () {
        var row = $(this).closest("tr");
        $("td", row).each(function () {
            if ($(this).find("input").length > 0) {
                var span = $(this).find("span");
                var input = $(this).find("input");
                input.val(span.html());
                span.show();
                input.hide();
            }
        });
        row.find(".Edit").show();
        //  row.find(".Delete").show();
        row.find(".Update").hide();
        $(this).hide();
    });

</script>

<script>
    $("#a").change(function () {
        debugger;
        var Inspector = "";
        var scopeVal = "";
        var ProdList = "";
        Inspector = $('#a').val();



        if (($("#ProductLists").val() != "" && $("#ProductLists").val() != null) && (Inspector != "" && Inspector != null)) {
            var selected = $("#ProductLists option:selected");
            var stageOf = $("#Sub_Category option:selected");

            var ddlCityValue = "";
            selected.each(function () {
                ddlCityValue += $(this).text().trim() + ",";
            });
            var stageofData = "";
            stageOf.each(function () {
                stageofData += $(this).text().trim() + ",";
            });
            //alert(ddlCityValue);
            ProdList = ddlCityValue;
            StageList = stageofData;
            ///  ProdList = $("#ProductLists").val();

            Scopefunction(ProdList, Inspector, StageList);
            FormFilled(Inspector);
            IsinspectorApproved();

        }
        else {
            $("#inspectorCompetant").val("");
            $("#TCEFilled").val("");
            
        }

    });


    $("#ProductLists").change(function () {

        if (($("#ProductLists").val() != "" && $("#ProductLists").val() != null)) {
            debugger;

            //alert(123);
            //alert($("#ProductLists").val());

            var Inspector = "";
            var scopeVal = "";
            var ProdList = "";
            Inspector = $('#a').val();

            if (($("#ProductLists").val() != "" && $("#ProductLists").val() != null) && (Inspector != "" && Inspector != null)) {
                var selected = $("#ProductLists option:selected");
                var stageOf = $("#Sub_Category option:selected");
                var ddlCityValue = "";
                selected.each(function () {
                    ddlCityValue += $(this).text().trim() + ",";
                });
                var stageofData = "";
                stageOf.each(function () {
                    stageofData += $(this).text().trim() + ",";
                });
                // alert(ddlCityValue);
                ProdList = ddlCityValue;
                StageList = stageofData;

                Scopefunction(ProdList, Inspector, StageList);
                FormFilled(Inspector);

            }

            console.log(Inspector);

        }
    });

    $("#Sub_Category").change(function () {

        if (($("#Sub_Category").val() != "" && $("#Sub_Category").val() != null)) {
            debugger;

            //alert(123);
            //alert($("#ProductLists").val());

            var Inspector = "";
            var scopeVal = "";
            var ProdList = "";
            Inspector = $('#a').val();

            if (($("#ProductLists").val() != "" && $("#ProductLists").val() != null) && (Inspector != "" && Inspector != null)) {
                var selected = $("#ProductLists option:selected");
                var stageOf = $("#Sub_Category option:selected");
                var ddlCityValue = "";
                selected.each(function () {
                    ddlCityValue += $(this).text().trim() + ",";
                });
                var stageofData = "";
                stageOf.each(function () {
                    stageofData += $(this).text().trim() + ",";
                });
                // alert(ddlCityValue);
                ProdList = ddlCityValue;
                StageList = stageofData;

                Scopefunction(ProdList, Inspector, StageList);
                FormFilled(Inspector);

            }

            console.log(Inspector);

        }
    });



    function Scopefunction(ProdList, Inspector, StageList) {
        debugger;
        // alert(ProdList);
        $.ajax
       ({
           url: '@Url.Action("GetCompetancy", "CallsMaster")',
           type: "POST",
           data: '{Name:' + JSON.stringify(Inspector) + ', Status: ' + JSON.stringify(ProdList) + ',StageOf: ' + JSON.stringify(StageList) + '}',
           datatype: "json",
           contentType: "application/json; charset=utf-8",
           async: false,
           success: function (response) {
               //  alert(response);

               if (response == "YES") {
                   //  alert("Inspector is Competant");

                   $("#inspectorCompetant").val("YES");
               }
               else if (response == "NO") {
                   $("#inspectorCompetant").val("NO");
               }
               else {

               }
           }

       });
    }


    function FormFilled(Inspector) {
        debugger;
        // alert(ProdList);
        $.ajax
       ({
           url: '@Url.Action("GetFormFilled", "CallsMaster")',
           type: "POST",
           data: '{Name:' + JSON.stringify(Inspector) + '}',
           datatype: "json",
           contentType: "application/json; charset=utf-8",
           async: false,
           success: function (response) {
               //  alert(response);



               if (response == "YES") {
                   //  alert("Inspector is Competant");

                   $("#TCEFilled").val("YES");
               }
               else if (response == "NO") {
                   $("#TCEFilled").val("NO");
               }
               else {

               }
           }

       });
    }

    function IsinspectorApproved() {
        debugger;
        var status = $('#Status').val();
        var CustomerName = $('#Company_Name').val();
        var Inspector = $('#a').val();
        if (status == "Open" && Inspector == "") {
            $("#inspectorapproved").val("INA");

        }
        else {

            $.ajax
          ({
              url: '@Url.Action("Getisinspectorapproved", "CallsMaster")',
              type: "POST",
              data: '{Name:' + JSON.stringify(Inspector) + ', CustomerName: ' + JSON.stringify(CustomerName) + '}',
              datatype: "json",
              contentType: "application/json; charset=utf-8",
              async: false,
              success: function (response) {
                  //  alert(response);
                  $("#inspectorapproved").val(response);


              }

          });

        }


    }


    function isNumberKey(evt) {
        var charCode = (evt.which) ? evt.which : evt.keyCode;


        if (charCode != 46 && charCode > 31
          && (charCode < 48 || charCode > 57))
            return false;

        return true;
    }


    function CheckLength(strVal) {

        alert(strVal)

    }
</script>


<script>
    function CheckSunday() {
        debugger;
        $.post("@Url.Action("chkIfSunday", "NonInspectionActivity")",
            {
                fromDate: $("#FromDateNew").val(),
                toDate: $("#ToDateNew").val()
            },
            function (data) {
                if (data == 0) {

                }
                else {
                    alert("Entering timesheet for Sunday. Ensure dates before proceeding further.")
                }
            });
    }
</script>

<script>
    function CheckSundayOnSingleCall() {
        debugger;
        $.post("@Url.Action("chkIfSunday", "NonInspectionActivity")",
            {
                fromDate: $("#Planned_Date").val(),
                toDate: $("#Planned_Date").val()
            },
            function (data) {
                if (data == 0) {

                }
                else {
                    alert("Entering Calls for Sunday. Ensure dates before proceeding further.")
                }
            });
    }
</script>

<script>

    function checkDateDifference() {
        debugger;
        //if ($('#chkPassport').prop('checked')) {
        var fromDate = $("#FromDateNew").val();
        var convertedfromDate = moment(fromDate).format('DD/MM/YYYY');
        var toDate = $("#ToDateNew").val();
        var convertedtoDate = moment(toDate).format('DD/MM/YYYY');

        if (moment(fromDate, 'DD/MM/YYYY').isValid() && moment(toDate, 'DD/MM/YYYY').isValid()) {
            var diffDuration = moment.duration(moment(toDate, 'DD/MM/YYYY').diff(moment(fromDate, 'DD/MM/YYYY')));

            var daysDifference = diffDuration.asDays();


        } else {
            console.log('Invalid date format');
        }




        //var timeDifference = toDate - fromDate;
        //var dayDifference = Math.floor(timeDifference / (1000 * 60 * 60 * 24));

        if (daysDifference > 6) {
            alert('System will not allow to generate continuous call for more than 6 days.');
            $("#FromDateNew").val("");
            $("#ToDateNew").val("");
        }
    }


</script>


<script>
    function UserHolidayCheck() {
        debugger;
        //$("#Status").html('<font color="blue">Checking ...</font>'),
        $.post("@Url.Action("chkIfHoliday", "NonInspectionActivity")",
            {
                //companyname: $("#Company_Name").val(),
                fromDate: $("#FromDateNew").val(),
                toDate: $("#ToDateNew").val()
            },
            function (data) {
                if (data == 0) {

                }
                else {
                    alert("You are entering a timesheet on a holiday , kindly check From Date and To Date")
                }
            });
    }
</script>

<script>
    function UserHolidayCheckOnSingleDay() {
        debugger;
        //$("#Status").html('<font color="blue">Checking ...</font>'),
        $.post("@Url.Action("chkIfHoliday", "NonInspectionActivity")",
            {
                //companyname: $("#Company_Name").val(),
                fromDate: $("#Planned_Date").val(),
                toDate: $("#Planned_Date").val()
            },
            function (data) {
                if (data == 0) {

                }
                else {
                    alert("You are entering a timesheet on a holiday , kindly check From Date and To Date")
                }
            });
    }
</script>


<script>

    //$('#FromDateNew, #ToDateNew').change(function () {
    //    debugger;

    //    CheckSunday();
    //    UserHolidayCheck();
    //    checkDateDifference();
    //});
    $('#FromDateNew, #ToDateNew').change(function () {
        debugger;

        CheckSunday();
        UserHolidayCheck();
        var FromDateNew = $("#FromDateNew").val();
        if (FromDateNew != null || FromDateNew != "") {
            $("#Call_Request_Date").val(FromDateNew);
        }

        //checkDateDifference();
        if ($('#chkManMonths').prop('checked') && !$('#chkPassport').prop('checked') || $('#chkManMonths').prop('checked') && $('#chkPassport').prop('checked')) {
            checkDateDifferenceMaxDaysValidation();
        }
        else {
            checkDateDifference();

        }



    });

    $('#Planned_Date').change(function () {
        CheckSundayOnSingleCall();
        UserHolidayCheckOnSingleDay();
    });


</script>


@*<script>
        //$(document).ready(function () {
            //debugger;
            function checkDateDifference() {
                debugger;
                if ($('#chkPassport').prop('checked')) {
                    var fromDate = new Date($("#FromDateNew").val());
                    var toDate = new Date($("#ToDateNew").val());

                    //var fromDateMoment = moment(fromDate, 'DD/MM/YYYY');
                    //var toDateMoment = moment(toDate, 'DD/MM/YYYY');


                    //let fromdatecal = fromDateMoment.format('YYYY-MM-DD');
                    //let todatecal = toDateMoment.format('YYYY-MM-DD');

                    var timeDifference = toDate - fromDate;
                    var dayDifference = Math.floor(timeDifference / (1000 * 60 * 60 * 24));

                    if (dayDifference > 6) {
                        alert('Day Exceed 6 days');
                        $("#FromDateNew").val("");
                        $("#ToDateNew").val("");
                    }
                }
            }


    </script>*@

<script>
    //$(".PoDates1").change(function () {
    //$('#FromDateNew, #ToDateNew, #ChkContinuousCall').change(function () {
    //    debugger;
    //    checkDateDifference();
    //});

    $('#FromDateNew, #ToDateNew, #ChkContinuousCall').change(function () {
        debugger;
        if ($('#chkManMonths').prop('checked') && !$('#chkPassport').prop('checked') || $('#chkManMonths').prop('checked') && $('#chkPassport').prop('checked')) {
            checkDateDifferenceMaxDaysValidation();
        }
        else {
            checkDateDifference();

        }
        //checkDateDifference();
    });
</script>

<script>
    function checkDateConstraints(fromDate, toDate, errorMessage) {
        debugger;
        var fromDateMoment = moment(fromDate, 'DD/MM/YYYY');
        var toDateMoment = moment(toDate, 'DD/MM/YYYY');


        let fromdate = fromDateMoment.format('YYYY-MM-DD');
        let todate = toDateMoment.format('YYYY-MM-DD');


        if (Date.parse(fromdate) > Date.parse(todate)) {

            alert(errorMessage);
            return 1;

        } else {
            return 0;
        }


    }

    $('#Call_Request_Date').change(function () {
        debugger;
        var CallReceiveTime = $('#CallReceiveTime').val();
        var Call_Request_Date = $(this).val();

        var a = checkDateConstraints(CallReceiveTime, Call_Request_Date, "Call Receive Date cannot be greater than Call Request Date.");
        if (a == 1) {
            $(this).val("");

        }
    })


    $('#Planned_Date').change(function () {
        var Call_Request_Date = $('#Call_Request_Date').val();
        var Planned_Date = $(this).val();
        var a = checkDateConstraints(Call_Request_Date, Planned_Date, "Call Request Date cannot be greater than Planned Date.");
        if (a == 1) {

            $(this).val("");

        }

    })

</script>


<script>
    function checkDateDifferenceMaxDaysValidation() {
        debugger;
        //if ($('#chkPassport').prop('checked')) {

        //old working code
        var fromDate = $("#FromDateNew").val();
        //var convertedfromDate = moment(fromDate).format('DD/MM/YYYY');
        var toDate = $("#ToDateNew").val();
        //var convertedtoDate = moment(toDate).format('DD/MM/YYYY');

        //if (moment(fromDate, 'DD/MM/YYYY').isValid() && moment(toDate, 'DD/MM/YYYY').isValid()) {
        //    var diffDuration = moment.duration(moment(toDate, 'DD/MM/YYYY').diff(moment(fromDate, 'DD/MM/YYYY')));

        //    var daysDifference = diffDuration.asDays();


        //} else {
        //    console.log('Invalid date format');
        //}


        //new code added by satish
        var fromDateMoment = moment(fromDate, 'DD/MM/YYYY');
        var toDateMoment = moment(toDate, 'DD/MM/YYYY');
        if (fromDateMoment.isValid() && toDateMoment.isValid()) {
            var diffDuration = moment.duration(toDateMoment.diff(fromDateMoment));
            var daysDifference = diffDuration.asDays();
        }
        else {
            console.log("One or both dates are invalid.");
        }
        //end

        if (daysDifference < 15) {
            alert('System will not allow to generate continuous call for less then 15 days.');
            $("#FromDateNew").val("");
            $("#ToDateNew").val("");
        }
    }



</script>

<script>
    function onclickevent() {
        alert("OPE Already Approved By Finance Against This Call.")
    }
</script>

<script>
    $("#btnAddNewContact").on('click', function () {
        debugger
        var testcompanynameparam = $('#Company_Name').val();

        var ContactNames = $("#ContactNames").val();
        var ddlContactCompanyName = ContactNames;
        var ddlCompanyName = testcompanynameparam;

        var HomePhoneNo = $("#HomePhone").val();
        var MobileNo = $("#Mobile").val();

        var MainContact = $('#IsMainContact').is(':checked');
        var CompanyName = $('#hidCompany').val();
        var Address = $("#ddlCaddr option:selected").val();
        var Email = $("#Email").val();
        var Fax_No = $("#Fax_No").val();
        var TitleName = $("#TitleName").val();
        var ContactStatus = $("#PT").val();


        //**************************************************************************
        if ($("#ContactNames").val() == "" || $("#ContactNames").val() == null) {
            alert("Please Enter Contact Name!!!");
            $("#ContactNames").focus()
            return false;
        }
        //else if (ddlCompanyName == 0 || ddlCompanyName == null) {
        //    alert("Please Select Company Name !!!");
        //    $("#ContactCompanyName").focus()
        //    return false;
        //}
        else if (TitleName == "" || TitleName == null) {
            alert("Enter Designation !!!");
            $("#TitleName").focus()
            return false;
        }
        else if (Email == "" || Email == null) {
            alert("Enter Email !!!");
            $("#Email").focus()
            return false;
        }
        else if (MobileNo == "" || MobileNo == null) {
            alert("Enter Mobile !!!");
            $("#Mobile").focus()
            return false;
        }
        else if (ContactStatus == "" || ContactStatus == null) {
            alert("Enter Status !!!");
            $("#PT").focus()
            return false;
        }
        else {
            var ContactDetails =
                {
                    ContactNames: ContactNames,
                    ContactCompanyName: ddlContactCompanyName,
                    CompanyName: testcompanynameparam,
                    HomePhone: HomePhoneNo,
                    Mobile: MobileNo,
                    IsMainContact: MainContact,
                    Address: Address,
                    Email: Email,
                    Fax_No: Fax_No,
                    TitleName: TitleName,
                    ContactStatus: ContactStatus
                }
            $.ajax({
                type: 'POST',
                data: JSON.stringify({ ECM: ContactDetails }),
                url: '@Url.Action("ContactDetails", "EnquiryMaster")',
                dataType: 'json',
                Async: false,
                enctype: "multipart/form-data",
                contentType: "application/json; charset=utf-8",
                success: function (response) {

                    if (response.success == 1) {
                        alert("Contact Saved Successfully!!!")

                        //$('#AddNewContactDetails').modal('hide');
                        //Bind_EmailID();
                        //showMessage();
                        $("#addmodalCloseButton").click();
                        var customer = $('#Company_Name').val();
                        loadVendorDetails(customer);


                    }
                    else if (response.success == 2) {

                        alert("Duplicate Contact detail Or !!Failed!!! Something Went Wrong!!! Please Try Again....")
                        //Bind_EmailID();
                        $('#AddNewContactDetails').modal('hide');
                        //showMessage();

                    }
                    Bind_EmailID();

                }
            });
        }
    });
</script>
<script>



    $('#Company_Name').blur(function () {
        //  alert(this.value);
        //$('#EndCustomer').val($('#CompanyName').val())
        $.ajax({
            url: '@Url.Action("GetCompanyAddress", "subJobMaster")',
            data: "{ 'Prefix': '" + this.value + "'}",
            dataType: "json",
            type: "POST",
            contentType: "application/json; charset=utf-8",
            success: function (response) {
                //  alert(response);
                $("#ddlCaddr").empty();

                var s = '<option value="-1">--Select Vendor Address--</option>';
                for (var i = 0; i < response.length; i++) {
                    s += '<option value="' + response[i].pkID + '">' + response[i].Company_Name + '</option>';
                }
                $("#ddlCaddr").html(s);

            },
            error: function (response) {
                // alert(response.responseText);
            },
            failure: function (response) {
                //   alert(response.responseText);
            }
        });
    })

</script>

<script>
        function loadVendorDetails(CustomerName) {

            $.ajax({
                url: '@Url.Action("Getvendordetails", "subJobMaster")',
                data: JSON.stringify({ 'Pre': CustomerName }),
                dataType: "json",
                type: "POST",
                contentType: "application/json; charset=utf-8",
                success: function (response) {
                    debugger
                    // Clear existing options
                    $('#Contact').empty();

                    var selectedContact = $('#Contact').data('selected-contact') || '';

                    var options = '<option value="">Select Customer Name</option>';
                    for (var i = 0; i < response.length; i++) {
                        var selected = selectedContact === response[i].Vendor_Contact.toString() ? ' selected' : '';
                        options += '<option value="' + response[i].Vendor_Contact + '"' + selected + '>' + response[i].vendor_name + '</option>';
                    }
                    $("#Contact").html(options);
                },
                error: function (response) {
                    console.error(response.responseText);
                },
                failure: function (response) {
                    console.error(response.responseText);
                }
            });
        }

        // Event binding for vendor_name blur event
        $('#Company_Name').blur(function () {
            debugger;
            var CustomerName = this.value;
            loadVendorDetails(CustomerName);
        });

        // Initial load
        var initialVendorName = $('#Company_Name').val();

        // Extract and store the initial selected contact from the model
        var selectedContact = '@Model.CustomerRepresentative';
    $('#Contact').data('selected-contact', selectedContact);



</script>

<script>
   function updateLink() {
        var dropdown = document.getElementById('a');
        var selectedValue = dropdown.value;

        var link = document.getElementById('inspectionLink');

        if (selectedValue) {
            link.href = '@Url.Action("TechnicalCompetencyEvaluation", "TechnicalCompetencyEvaluation", new { Id = "__id__" })'.replace('__id__', selectedValue);
            link.style.display = 'inline';
        } else {
            link.style.display = 'none';
        }
    }

    window.onload = function() {
        updateLink();
    };
</script>