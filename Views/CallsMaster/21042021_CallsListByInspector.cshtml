@model TuvVision.Models.CallsModel
@using NonFactors.Mvc.Grid;
@using System.Web.Mvc;

@{
    ViewBag.Title = "CallsListByInspector";
    Layout = "~/Views/Shared/_TuvVision.cshtml";
    
}

<link href="~/AllJsAndCss/css/MVCGridN.css" rel="stylesheet" />

<script src="https://code.jquery.com/jquery-1.10.2.js"></script>
<script src="https://code.jquery.com/ui/1.11.4/jquery-ui.js"></script>
<link rel="stylesheet" href="https://code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css" />


@using (Html.BeginForm())
{

    <div class="main-content3 xs-max-height">

        <!--Start of header-->
        <div class="container-fluid">
            <div class="row assignfixedwidth rp-15">

                <div class="col-xs-12">
                    <h3 class="dynamic-page-title dynamic-page-title-2  text-left">Call Details</h3>
                    <button type="button" value="CreateRole" class="btn btn-info dynamic-function-btn dynamic-function-btn-2" onclick="location.href='@Url.Action("CallsDashBoard", "Virtual_Call")'">Add-On Calls</button>
                    <button type="button" id="a" value="ExportToExcel" class="btn btn-info dynamic-function-btn dynamic-function-btn-2" onclick="location.href='@Url.Action("ExportIndexInspector","CallsMaster")'">
                        Export To Excel
                    </button>
                </div><!-- /.col -->

                <div class="col-xs-12">
                    <hr class="custom-hr">
                </div>

            </div><!-- /.row -->


            <div class="col-xs-12">
                <table class="display dataTable no-footer" style="overflow-y:auto" id="gridMapping">
                    <tr>
                        <td>
                            @(Html
                            .Grid(Model.lst1)
                            .Build(columns =>
                            {
                                //columns.Add(c => c.PK_Call_ID).Titled("Call No").Encoded(false).RenderedAs(c => Html.ActionLink(c.Call_No, "CallsDetails", new { PK_Call_ID = c.PK_Call_ID }, new { title = "Call No" })).Filterable(true).FilteredAs("custom").Sortable(true);
                                columns.Add(c => c.Call_No).Titled("Call No").Encoded(false).RenderedAs(c => Html.ActionLink(c.Call_No, "CallsDetails", new { PK_Call_ID = c.PK_Call_ID }, new { title = "Call No" })).Filterable(true).FilteredAs("custom").Sortable(true);
                                columns.Add(c => c.Actual_Visit_Date).Titled("Actual Visit Date");
                                columns.Add(c => c.Company_Name).Titled("Customer Name");
                                columns.Add(c => c.SubSubJobNo).Titled("Sub/Sub-Sub Job No");
                                columns.Add(c => c.Vendor_Name).Titled("Vendor Name");
                                columns.Add(c => c.Status).Titled("Call Status").RenderedAs(c => CustomRenderingOfColumn(c)).Sortable(true);                                
                                columns.Add(c => c.PO_Number).Titled("Customer PO No on Vendor");
                                columns.Add(c => c.SubVendorPONo).Titled("Vendor PO No on Sub Vendor");
                                columns.Add(c => c.SubVendorName).Titled("Sub Vendor Name");
                                columns.Add(c => c.Project_Name).Titled("Project Name");
                                columns.Add(c => c.Inspector).Titled("Inspector Name");
                                columns.Add(c => c.Call_Type).Titled("Call Type");
                                //columns.Add(c => c.ExtendCall_Status).Titled("Extend Call Status").RenderedAs(c => CustomRenderingOfColumn1(c)).Sortable(true);
                                columns.Add(c => c.Urgency).Titled("Priority");
                                columns.Add(c => c.Call_Recived_date).Titled("Call Received date");

                            })
                            .Pageable(pager =>
                            {
                                //pager.PageSizes = new DictionaryInt32, String > { { 0, "All" }, { 2, "2" }, { 4, "4" } };
                                pager.ShowPageSizes = true;
                                pager.PagesToDisplay = 3;
                                pager.CurrentPage = 1;
                                pager.RowsPerPage = 2;
                            })
                            .UsingFilterMode(GridFilterMode.Row)
                            .Empty("No Data Found")
                            .Filterable()
                            .Sortable()


                            )


                        </td>
                    </tr>
                </table>

            </div>


        </div><!-- /.container-fluid -->
        <!--End of header-->

    </div>
    <!--End of Ashwini Code-->


}

<script>
    [].forEach.call(document.getElementsByClassName('mvc-grid'), function (element) {
        new MvcGrid(element);
    });
</script>

<script>
    var CustomTextFilter = (function (base) {
        MvcGridExtends(CustomTextFilter, base);

        function CustomTextFilter(column) {
            base.call(this, column);

            this.methods = ['contains'];
            column.grid.lang.custom = { contains: 'Contains' };
        }

        // Other extension points can be found at MvcGridFilter declaration

        return CustomTextFilter;
    })(MvcGridFilter);

    new MvcGrid(document.querySelector('.mvc-grid'), {
        filters: {
            'custom': CustomTextFilter
        }
    });
</script>



@helper CustomRenderingOfColumn(TuvVision.Models.CallsModel callmodel)
{
    if (callmodel.Status == "Open")
    {
            <span style='color: green; '>@callmodel.Status</span>
    }
    else if (callmodel.Status == "Closed")
    {
            <span style='color: red; '> @callmodel.Status</span>
    }
    else if (callmodel.Status == "NoDone")
    {
            <span style="color:orangered;">@callmodel.Status</span>
    }
    else
    {
            <span style="color:blueviolet;"> @callmodel.Status</span>
    }
}

@helper CustomRenderingOfColumn1(TuvVision.Models.CallsModel callmodel)
{
    if (callmodel.ExtendCall_Status != null && callmodel.ExtendCall_Status != "")
    {
            <span style='color: red; '>@callmodel.ExtendCall_Status</span>
    }
    else
    {
            <span> @callmodel.ExtendCall_Status</span>
    }
}

