@model TuvVision.Models.CallsModel
@using NonFactors.Mvc.Grid;
@using System.Web.Mvc;

@{
    ViewBag.Title = "CallAssignment";
    Layout = "~/Views/Shared/_TuvVision.cshtml";
}

<link href="~/AllJsAndCss/css/MVCGridN.css" rel="stylesheet" />

@helper CustomRenderingOfColumn(TuvVision.Models.CallsModel callmodel)
{
if (callmodel.Status == "Open")
{
        <span style='color: #3cb371; font-weight:bold;'>@callmodel.Status</span>
}
else if (callmodel.Status == "Closed")
{
        <span style='color: #ff0000; font-weight:bold;'>@callmodel.Status</span>
}
else if (callmodel.Status == "NoDone")
{
        <span style='color: #ffa500; font-weight:bold;'>@callmodel.Status</span>
}
else
{
        <span style='color: #000000; font-weight:bold;'>@callmodel.Status</span>
}
}

@helper CustomRenderingOfColumn1(TuvVision.Models.CallsModel callmodel)
{
if (callmodel.ExtendCall_Status != null && callmodel.ExtendCall_Status != "")
{
        <span style='color: #ff0000; font-weight:bold;'>@callmodel.ExtendCall_Status</span>
}
else
{
        <span style='color: #000000'>@callmodel.ExtendCall_Status</span>
}
}

@*DATEPICKER*@
<script src="https://code.jquery.com/jquery-1.10.2.js"></script>
<script src="https://code.jquery.com/ui/1.11.4/jquery-ui.js"></script>
<link rel="stylesheet" href="https://code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css" />

@*Ashwini Scripts here for datatable starts here*@
@*<script type="text/javascript" language="javascript" src="~/AllJsAndCss/datatable/js/jquery.dataTables.js"></script>*@

<!--export to excel-->
@*<script type="text/javascript" language="javascript" src="~/AllJsAndCss/js/dataTables.buttons.min.js"></script>
    <script type="text/javascript" language="javascript" src="~/AllJsAndCss/js/jszip.min.js"></script>
    <script type="text/javascript" language="javascript" src="~/AllJsAndCss/js/buttons.html5.min.js"></script>
    <script src="~/AllJsAndCss/js/datatable-custom.js"></script>*@
@*Ashwini Scripts here for datatable ends here*@

<script>
    $(function () {
        $(".Fromdate").datepicker({
           // dateFormat: 'dd/mm/yy',//check change
            dateFormat: 'dd/mm/yy',
            changeMonth: true,
            changeYear: true,
            yearRange: "-100:+50"
        });
    });
</script>
<script>
    $(function () {
        $(".ToDate").datepicker({
            //dateFormat: 'dd/mm/yy',//check change
            dateFormat: 'dd/mm/yy',
            changeMonth: true,
            changeYear: true,
            yearRange: "-100:+50"
        });
    });
</script>

@*@using (Html.BeginForm())
    {*@

<div class="main-content3 xs-max-height">

    <!--Start of header-->
    <div class="container-fluid">
        <div class="row assignfixedwidth rp-15">

            <div class="col-xs-12">
                <h3 class="dynamic-page-title dynamic-page-title-2  text-left">Assigned Calls</h3>
                <button type="button" id="btnhideinter_" value="CreateRole" class="btn btn-info dynamic-function-btn dynamic-function-btn-2" style="background-color:#001ED2;margin-right:2px;" onclick="location.href='@Url.Action("ListCompentencyMetrixView", "CompentencyMetrixView")'">CAIL</button>
                <button type="button" value="CreateRole" class="btn btn-info dynamic-function-btn dynamic-function-btn-2" style="background-color:#001ED2;margin-right:2px;" onclick="location.href='@Url.Action("ListCompentencyMetrixViewN", "CompentencyMetrixView")'">Competency Matrix</button>
                <button type="button" value="CreateRole" class="btn btn-info dynamic-function-btn dynamic-function-btn-2" style="margin-left: 16px;margin-right:2px;" onclick="location.href='@Url.Action("CallsManagment", "CallsMaster")'">Go Call Management</button>
                <button type="button" value="ExportToExcel" class="btn btn-info dynamic-function-btn dynamic-function-btn-2" onclick="location.href='@Url.Action("ExportIndexAssignment","CallsMaster")'">
                    Export To Excel
                </button>
            </div><!-- /.col -->

            <div class="col-xs-12">
                <hr class="custom-hr">
            </div><!-- /.col -->
            <!--Table was here-->
            @using (Html.BeginForm("CallAssignment", "CallsMaster", new { enctype = "multipart/form-data", @id = "form1" }))
            {
                <div class="col-xs-12">
                    <div class="col-xs-12 col-sm-3">
                        <div class="form-group">
                            <label>From Date:</label>
                            @Html.TextBoxFor(model => model.FromDate, "{0:dd MMM yyyy}", htmlAttributes: new { placeholder = "From Date", @class = "form-control Fromdate", autocomplete = "off" })

                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-3">
                        <div class="form-group">
                            <label>To Date:</label>
                            @Html.TextBoxFor(model => model.ToDate, "{0:dd MMM yyyy}", htmlAttributes: new { placeholder = "To Date", @class = "form-control ToDate ", autocomplete = "off" })

                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-3">
                        <div class="form-group">
                            <label> Call No:</label>

                            @Html.TextBoxFor(model => model.Call_No, new { @placeholder = "Call No", @class = "form-control" })

                        </div>
                    </div>
                    <hr class="custom-hr">
                </div>
                    <div class="col-xs-12">
                        @*<div class="col-xs-12 col-sm-3">
                            <div class="form-group">
                                <label> Branch:</label>
                                @if (ViewBag.SubCatlistss != null)
                                {
                                    @Html.DropDownListFor(model => model.Br_Id, ViewBag.SubCatlistss as IEnumerable<SelectListItem>, "--Select Branch--", new { @class = "form-control", @id = "Br_Id", })

                                }

                            </div>
                        </div>*@
                        <div class="col-xs-12 col-sm-3">
                            <div class="form-group">
                                @*<label>Originating Branch:</label>
                                @if (ViewBag.SubCatlistss != null)
                                {
                                    @Html.DropDownListFor(model => model.ExBr_Id, ViewBag.SubCatlistss as IEnumerable<SelectListItem>, "--Select Branch--", new { @class = "form-control", @id = "Br_Id", })

                                }*@
                                <label>Originating Branch:</label>
                                @if (ViewBag.SubCatlistss != null)
                                {
                                    @Html.DropDownListFor(model => model.Originating_Branch, ViewBag.SubCatlistss as IEnumerable<SelectListItem>, "--Select Branch--", new { @class = "form-control", @id = "Br_Id", })

                                }

                            </div>
                        </div>
                        <div class="col-xs-12 col-sm-3">
                            <div class="form-group">
                                <button type="submit" class="btn btn-default insert-form-btn"><i class="fa "></i> Search</button>

                            </div>
                        </div>
                        <div class="col-xs-2">
                            <div class="form-group">
                                

                                @Html.ActionLink("Reset", "CallAssignment", "CallsMaster", new { @class = "btn btn-primary form-control" })
                            </div>

                        </div>




                        <hr class="custom-hr">
                    </div>
            }
        </div><!-- /.row -->
        @*<div class="col-xs-12">
        <table id="example" class="display custom-table" cellspacing="0" width="100%">
            <thead>
                <tr>
                    <th>Call_No</th>
                    <th>Company_Name</th>
                    <th>Contact_Name</th>
                    <th>Status</th>
                    <th>Urgency</th>
                    <th>Call_Recived_date</th>
                    <th>ModifyDate</th>
                    <th>Inspector</th>
                    <th>Project_Name</th>
                    <th>CreatedDate</th>
                    <th>Call No</th>
                    <th>Client Name</th>
                    <th>Vendor Name</th>
                    <th>Status</th>
                    <th>Extend Call Status</th>
                    <th>Project Name</th>
                    <th>SAP Number</th>
                    <th>Sub Job Number</th>
                    <th>Inspection Call Intimation Received On</th>
                    <th>Requested Inspection Date (from to date if calls are continuous)</th>
                    <th>Actual Visit Date</th>
                    <th>Assigned Inspector</th>
                    <th>PO Number on Vendor</th>
                    <th>PO Number on Sub Vendor</th>
                    <th>Originating Branch</th>
                    <th>Stage of Inspection</th>
                    <th>Inspection Location</th>
                    <th>Items to be Inspected</th>
                    <th>Unassigned Inspector</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in ViewData["BranchList"] as IEnumerable<TuvVision.Models.CallsModel>)
                {
                    <tr>
                        <th>@item.Call_No</th>
                        <th>@item.Company_Name</th>
                        <th>@item.Vendor_Name</th>
                        @if (item.Status == "Open")
                        {
                            <th style="color:green;">@item.Status</th>
                        }
                        else if (item.Status == "Closed")
                        {
                            <th style="color:red;">@item.Status</th>
                        }
                        else if (item.Status == "NoDone")
                        {
                            <th style="color:orangered;">@item.Status</th>
                        }
                        else
                        {
                            <th>@item.Status</th>
                        }
                        @if (item.ExtendCall_Status != null && item.ExtendCall_Status != "")
                        {
                            <th style="color:red;background-color:yellow;font-weight:bold;">@item.ExtendCall_Status</th>
                        }
                        else
                        {
                            <th>@item.ExtendCall_Status</th>
                        }
                        <th>@item.Project_Name</th>
                        <th>@item.SAP_Number</th>
                        <th>@item.Sub_Job_Number</th>
                        <th>@item.Inspection_CallIntimationReceivedOn</th>
                        <th>@item.RequstedInspectedDate</th>
                        <th>@item.Actual_Visit_Date</th>
                        <th>@item.Inspector</th>
                        <th>@item.PONumberOnVender</th>
                        <th>@item.PONumberOnSubVender</th>
                        <th>@item.Originating_Branch</th>
                        <th>@item.StageOfInspection</th>
                        <th>@item.InspectionLocation</th>
                        <th>@item.ItemsToBeInpsected</th>
                        <th>
                            <a href="@Url.Action("UpdateCallAssignment", "CallsMaster", new { @PK_Call_ID = item.PK_Call_ID })" title="Edit">UnAssign</a>
                        </th>
                    </tr>
                }
            </tbody>
        </table>
    </div>*@<!-- /.data table col -->
        <div class="col-xs-12">
            <table class="display dataTable no-footer" style="overflow-y:auto" id="gridMapping">
                <tr>
                    <td>
                        @(Html
                            .Grid(Model.CADashboard)
                            .Build(columns =>
                            {
                                //columns.Add(model => Html.TextBox("A",model.PK_Call_ID)).Titled("PK Call ID");


                                columns.Add().RenderedAs((model, row) => row + 1).Titled("Sr. No");
                                columns.Add(c => c.Call_No).Titled("Call No").Encoded(false).RenderedAs(c => Html.ActionLink(c.Call_No, "InsertCalls", new { PK_Call_ID = c.PK_Call_ID })).Filterable(true).FilteredAs("custom").Sortable(true);
                                columns.Add(c => c.Company_Name).Titled("Customer Name");

                                columns.Add(c => c.V1).Titled("Vendor Name");
                                columns.Add(c => c.V2).Titled("Sub Vendor Name");
                                columns.Add(c => c.Project_Name).Titled("Project Name");
                                columns.Add(c => c.SAP_Number).Titled("SAP Number");
                                columns.Add(c => c.Sub_Job).Titled("Sub-Job Number");
                                columns.Add(c => c.Inspection_CallIntimationReceivedOn).Titled("Call Received date");

                                columns.Add(c => c.Call_Request_Date).Titled("Call Requested Date");
                                columns.Add(c => c.Call_Type).Titled("Call Type");

                                columns.Add(c => c.Planned_Date).Titled("Call Planned Date");
                                columns.Add(c => c.Actual_Visit_Date).Titled("Actual Visit Date");
                                columns.Add(c => c.LastInspectorName_DateOfInspection).Titled("Last Inspector's Name and Date of Inspection");

                                columns.Add(c => c.Status).Titled("Call Status").RenderedAs(c => CustomRenderingOfColumn(c)).Sortable(true);

                                columns.Add(c => c.P1).Titled("Customer PO No on Vendor");
                                columns.Add(c => c.P2).Titled("Vendor PO No on Sub Vendor");
                                //columns.Add(c => c.PONumberOnSubVender).Titled("PO Number on Sub Vendor");
                                columns.Add(c => c.Originating_Branch).Titled("Originating Branch");
                                columns.Add(c => c.StageOfInspection).Titled("Stages of Inspection");
                                columns.Add(c => c.InspectionLocation).Titled("Inspection Location");
                                columns.Add(c => c.ItemsToBeInpsected).Titled("Item to be Inspected");
                                //columns.Add(c => c.CallListData[j].VisitDate).Titled("Visit Date");
                                //columns.Add(c => c.CallListData[j].FirstName).Titled("Inspector Name");
                                columns.Add(c => c.AI).Titled("Assigned Inspector Name");
                            })
                            .Pageable(pager =>
                            {
                                //pager.PageSizes = new DictionaryInt32, String > { { 0, "All" }, { 2, "2" }, { 4, "4" } };
                                pager.ShowPageSizes = true;
                                pager.PagesToDisplay = 3;
                                pager.CurrentPage = 1;
                                pager.RowsPerPage = 2;
                            })
                            .UsingFilterMode(GridFilterMode.Row)
                            .Empty("No Data Found")
                            .Filterable()
                            .Sortable()
                        )
                    </td>
                </tr>
            </table>

        </div>
    </div><!-- /.container-fluid -->
    <!--End of header-->
</div>
<!--End of Ashwini Code-->
@*}*@

<script>
    var CustomTextFilter = (function (base) {
        MvcGridExtends(CustomTextFilter, base);

        function CustomTextFilter(column) {
            base.call(this, column);

            this.methods = ['contains'];
            column.grid.lang.custom = { contains: 'Contains' };
        }

        // Other extension points can be found at MvcGridFilter declaration

        return CustomTextFilter;
    })(MvcGridFilter);

    new MvcGrid(document.querySelector('.mvc-grid'), {
        filters: {
            'custom': CustomTextFilter
        }
    });
</script>
<script>
    $(document).ready(function () {
        debugger;
        var RoleName = '@Session["RoleName"].ToString()';
        if (RoleName == "InspectionO" || RoleName == "OperationO") {
            //$("#btnhideinter").hide();
            $("#btnhideinter_").hide();

        }
        else {
            //$("#btnhideinter").show();
            $("#btnhideinter_").show();
        }


    })
</script>
