@model TuvVision.Models.CallsModel
@using NonFactors.Mvc.Grid;
@using System.Web.Mvc;

@{
    ViewBag.Title = "InspectorCallDetails";
    Layout = "~/Views/Shared/_TuvVision.cshtml";
}

@*<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.11.6/css/jquery.dataTables.css">*@

<!-- jQuery -->
@*<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>*@

@*<script src="~/AllJsAndCss/js/shr.js"></script>*@
@*<script src="~/AllJsAndCss/js/jquery.min.js"></script>*@



<link rel="stylesheet" href="//code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css">
<script src="//code.jquery.com/jquery-1.10.2.js"></script>
<script src="//code.jquery.com/ui/1.11.4/jquery-ui.js"></script>
    <!-- DataTables JS -->
    <script src="https://cdn.datatables.net/2.0.7/js/dataTables.js"></script>










    <style>
        .resizable-container {
            overflow-x: auto;
        }

        .resizable-table {
            width: 100%;
            border-collapse: collapse;
            border: 1px solid;
        }

            .resizable-table th {
                cursor: ew-resize;
                white-space: nowrap; /* Prevent text wrapping */
            }

            .resizable-table td {
                white-space: nowrap; /* Prevent text wrapping */
                overflow: hidden; /* Hide overflowing content */
            }

        .fixed-width-column {
            width: 100px; /* Width for fixed-width columns */
        }

        .table-container {
            max-height: 1500px; /* Set a fixed height for the container */
            overflow-y: hidden; /* Add vertical scrollbar when content exceeds container height */
        }

        tfoot input {
            width: 100%;
            padding: 3px;
            box-sizing: border-box;
        }

        div.dataTables_wrapper div.dataTables_filter {
            text-align: left;
        }

        table.dataTable tbody td {
            padding: 0px 10px;
        }

        thead th, table.dataTable thead td {
            padding: 4px 6px;
            border-bottom: #FFFFFF;
        }

        .dataTables_filter {
            text-align: center; /* Center align the search boxes */
        }

        table.dataTable thead th {
            padding: 2px 5px;
        }

        .dataTables_wrapper .dataTables_length {
            float: left;
        }

        .dataTables_wrapper .dataTables_filter {
            float: left;
            margin-left: 10px;
        }

        table.dataTable {
            width: auto !important;
        }

        .contact-info {
            display: none;
        }

        .eye-icon {
            cursor: pointer;
            color: #000;
        }

            .eye-icon:hover {
                color: #E12F24;
            }

        .current {
            font-weight: bold;
            color: Black;
            background-color: gray;
        }
    </style>

    <div class="main-content3 xs-max-height">

        <!--Start of header-->
        <div class="container-fluid">
            <div class="row assignfixedwidth rp-15">



            </div>


            <input type="text" class="hidden" id="statusid" />





            <div class="col-xs-12 resizable-container">
                <div class="table-container" style="margin-top:-6px;">

                    <h3 class="dynamic-page-title dynamic-page-title-2  text-left">Call Details</h3>
                    <br>
                    <div class="col-xs-12 col-sm-12">
                        <span style="color:#FA3746;">
                            <strong style="margin-left: -12px">Notes: </strong>
                        </span>
                        <span>
                            1) <span>An IVR can be created for a maximum of 6 days for each individual sub-job.</span>
                            2) <span>Rows highlighted in red indicate an open issue or NCR or complaint with a particular vendor.</span>
                        </span>
                    </div>

                    <button class="btn btn-default news-btn" style="margin-bottom: 3px;" value="Closed" id="IDClosed">Close & Generate VR</button>

                    <button class="btn btn-default news-btn" style="margin-bottom:3px;" id="IDAbortive">Abort & Generate VR</button>

                    <button class="btn btn-default news-btn" style="margin-bottom:3px;" value="NotDone" id="notDone">Not Done</button>

                    <button class="btn btn-default news-btn" style="margin-bottom:3px;" value="Cancelled" id="IDCancelled">Cancel</button>

                    @*@{
                        var item1 = ViewData["CallCount"] as IList<TuvVision.Models.CallsModel>;
                        var obj1 = item1 != null && item1.Count > 0 ? item1[0] : null;
                    }*@



                <label class="small" style="margin-left: 10px;font-size: 14px">Call Summary-</label>
                <label class="small" style="font-size: 14px">Total: </label>
                <label style="font-size: 14px">@(Model != null ? Model.TotalCalls.ToString() : "N/A")</label>
                <label class="small" style="font-size: 14px">Assigned Calls: </label>
                <label style="font-size: 14px">@(Model != null ? Model.AssignedCalls.ToString() : "N/A")</label>
                <label style="font-size: 14px">Closed Calls: </label>
                <label style="font-size: 14px">@(Model != null ? Model.ClosedCalls.ToString() : "N/A")</label>
                <div class="row">

                    <div class="col-xs-12 col-sm-9" id='INTERNATIONAL' style='display:none;'>
                        <div class="form-group">
                            <label style="color:#FA3746;">Reason for Call cancellation (Further action not needed on call) / Not Done (Further action needed on call) :</label><span style="color:#d9534f;">*</span>



                            @if (ViewBag.ReasonList != null)
                            {
                                @Html.DropDownListFor(m => m.Reasion, ViewBag.ReasonList as IEnumerable<SelectListItem>, "--Select Reason--", new { @class = "form-control", @id = "Reasion" })
                                @Html.HiddenFor(m => m.Reasion)
                            }

                            @Html.ValidationMessageFor(model => model.Reasion, "", new { @class = "text-danger validation-msg" })

                        </div>
                    </div>

                    <div class="col-xs-12 col-sm-3">

                        <button type="submit" class="btn btn-default insert-form-btn hidden" id="btnjc" style="margin-top: 24px;background-color:#00003C;"> Save </button>

                    </div>
                </div>

                <table id="Datatable" class="resizable-table fixed-size-table display">
                    <thead>
                        <tr class="fixed-width-column" style="border:1px solid;background:#001ED2;">

                            <th style="border:1px solid;">

                            </th>

                            <th style="border: 1px solid;" class="fixed-width-column hidden">Pk_call_id</th>
                            <th style="border: 1px solid;" class="fixed-width-column hidden">PK_UserID</th>
                            <th style="border: 1px solid;" class="fixed-width-column hidden">Report Type</th>
                            <th style="border: 1px solid;" class="fixed-width-column">Call No</th>
                            <th style="border: 1px solid;" class="fixed-width-column">Actual Visit Date</th>
                            <th style="border: 1px solid;" class="fixed-width-column">Actual Visit Day</th>
                            <th style="border: 1px solid;" class="fixed-width-column">Call Status</th>
                            <th style="border: 1px solid;" class="fixed-width-column">Sub/Sub-Sub Job No</th>
                            <th style="border: 1px solid;" class="fixed-width-column">Vendor Name</th>
                            <th style="border: 1px solid;" class="fixed-width-column">Customer Name</th>
                            <th style="border: 1px solid;" class="fixed-width-column">PO Number</th>
                            <th style="border: 1px solid;" class="fixed-width-column">Estimated Hours</th>
                            <th style="border: 1px solid;" class="fixed-width-column">Call specific instruction to inspectors</th>
                            <th style="border: 1px solid;" class="fixed-width-column">Inspection Location</th>
                            <th style="border: 1px solid;" class="fixed-width-column">Customer Contact Details</th>


                            <th style="border: 1px solid;" class="fixed-width-column">IVR List</th>
                            <th style="border: 1px solid;" class="fixed-width-column">IRN List</th>
                            <th style="border: 1px solid;" class="fixed-width-column">NCR List</th>
                            <th style="border: 1px solid;" class="fixed-width-column">Complaint List</th>
                            <th style="border: 1px solid;" class="fixed-width-column">List of Issues</th>
                            <th style="border: 1px solid;" class="fixed-width-column">ARC</th>




                            <th style="border: 1px solid;" class="fixed-width-column">Stage of Inspection</th>
                            <th style="border: 1px solid;" class="fixed-width-column">Items to be Inspected</th>


                            <th style="border: 1px solid;" class="fixed-width-column">Project Name</th>
                            <th style="border: 1px solid;" class="fixed-width-column">Inspector</th>
                            <th style="border: 1px solid;" class="fixed-width-column">Call Type</th>
                            <th style="border: 1px solid;" class="fixed-width-column">Priority</th>
                            <th style="border: 1px solid;" class="fixed-width-column">Call Received date</th>





                        </tr>
                        <tr class="fixed-width-column" style="border:1px solid;  background:#001ED2;" id="searchRow">
                            <th><input type="text" style="width:28px;" /></th>
                            <th class="hidden" style="width:7px;"><input type="text" placeholder="Search Name" style="color:black;" /></th>
                            <th class="hidden" style="width:7px;"><input type="text" placeholder="Search Name" style="color:black;" /></th>

                            <th class="hidden" style="width:7px;"><input type="text" placeholder="Search Name" style="color:black;" /></th>
                            <th><input type="text" placeholder="Search Name" style="color:black; width: 96px;" /></th>
                            <th><input type="text" placeholder="Search Name" style="color:black; width: 119px;" /></th>
                            <th><input type="text" placeholder="Search Name" style="color:black; width: 119px;" /></th>
                            <th><input type="text" placeholder="Search Name" style="color:black; width: 119px;" /></th>
                            <th><input type="text" placeholder="Search Name" style="color:black;" /></th>
                            <th><input type="text" placeholder="Search Name" style="color:black;" /></th>
                            <th><input type="text" placeholder="Search Name" style="color:black;" /></th>
                            <th><input type="text" placeholder="Search Name" style="color:black;" /></th>
                            <th><input type="text" placeholder="Search Name" style="color:black;" /></th>
                            <th><input type="text" placeholder="Search Name" style="color:black;" /></th>
                            <th><input type="text" placeholder="Search Name" style="color:black;" /></th>
                            <th><input type="text" placeholder="Search Name" style="color:black;" /></th>
                            <th><input type="text" placeholder="Search Name" style="color:black;" /></th>
                            <th><input type="text" placeholder="Search Name" style="color:black;" /></th>
                            <th><input type="text" placeholder="Search Name" style="color:black;" /></th>
                            <th><input type="text" placeholder="Search Name" style="color:black;" /></th>
                            <th><input type="text" placeholder="Search Name" style="color:black;" /></th>
                            <th><input type="text" placeholder="Search Name" style="color:black;" /></th>
                            <th><input type="text" placeholder="Search Name" style="color:black;" /></th>
                            <th><input type="text" placeholder="Search Name" style="color:black;" /></th>
                            <th><input type="text" placeholder="Search Name" style="color:black;" /></th>
                            <th><input type="text" placeholder="Search Name" style="color:black;" /></th>
                            <th><input type="text" placeholder="Search Name" style="color:black;" /></th>
                            <th><input type="text" placeholder="Search Name" style="color:black;" /></th>
                            <th><input type="text" placeholder="Search Name" style="color:black;" /></th>


                        </tr>

                    </thead>



                    @{



                        <tbody>
                            @if (Model.lst1 != null)
                            {

                                foreach (var obj in Model.lst1)
                                {
                                    var rowStyle = obj.AssignStatus == "1" ? "background-color: #FDAFB5;" : "";

                                <tr style="@rowStyle">
                                    
                                    @if (obj.Status == "Assigned")
                                    {
                                        if (obj.JobBlock != "YES")
                                        {
                                            <td style='text-align: center; border: 1px solid;'>
                                                <input type='checkbox' class="chk" />
                                            </td>
                                        }
                                        else
                                        {
                                            <td style='text-align: center; border: 1px solid;'>Block</td>
                                        }

                                    }
                                    else
                                    {
                                        <td style='text-align: center; border: 1px solid;'></td>
                                    }
                                    <td style='text-align: center; border: 1px solid;' class="hidden">@obj.PK_Call_ID</td>
                                    <td style='text-align: center; border: 1px solid;' class="hidden">@obj.PK_UserID</td>
                                    <td style='text-align: center; border: 1px solid;' class="hidden">@obj.ReportType</td>

                                    <td style="text-align: center; border: 1px solid;">
                                        <a href="@Url.Action("CallsDetails", "Callsmaster", new { pk_call_id = obj.PK_Call_ID })">@obj.Call_No</a>
                                    </td>

                                    <td style='text-align: center; border: 1px solid;'>@obj.Actual_Visit_Date</td>


                                    <td style="text-align: center; border: 1px solid; @(obj.ActualDay == "Sunday" ? "background-color:#FB5F6B;" : "")">
                                        @obj.ActualDay
                                    </td>
                                    <td style='text-align: center; border: 1px solid;'>@obj.Status</td>
                                    <td style='text-align: center; border: 1px solid;'>@obj.SubSubJobNo</td>
                                    <td style='text-align: center; border: 1px solid;'>@obj.VendorName</td>
                                    <td style='text-align: center; border: 1px solid;'>@obj.Company_Name</td>
                                    <td style='text-align: center; border: 1px solid;'>@obj.PO_Number</td>
                                    <td style='text-align: center; border: 1px solid;'>@obj.EstimatedHours</td>
                                    <td style="text-align: center; border: 1px solid;">


                                        @if (!string.IsNullOrEmpty(obj.CustomerRepresentative))
                                        {
                                            <span class="tooltip-container" data-toggle="tooltip" data-placement="top" title="@obj.CustomerRepresentative">
                                                <img src="~/View1.png" />
                                            </span>
                                        }
                                    </td>
                                    <td style='text-align: center; border: 1px solid;'>@obj.InspectionLocation</td>


                                    <td style="text-align: center; border: 1px solid;">
                                        @if (!string.IsNullOrEmpty(obj.Client_Contact))
                                        {
                                            <span class="tooltip-container" data-toggle="tooltip" data-placement="top" title="@obj.Client_Contact">
                                                <img src="~/View1.png" />
                                            </span>
                                        }
                                        @if (!string.IsNullOrEmpty(obj.Vendor_Contact))
                                        {
                                            <span class="tooltip-container" data-toggle="tooltip" data-placement="top" title="@obj.Vendor_Contact">
                                                <img src="~/View1.png" />
                                            </span>
                                        }
                                        @if (!string.IsNullOrEmpty(obj.Sub_Vendor_Contact))
                                        {
                                            <span class="tooltip-container" data-toggle="tooltip" data-placement="top" title="@obj.Sub_Vendor_Contact">
                                                <img src="~/View1.png" />
                                            </span>
                                        }
                                    </td>




                                    <td style="text-align: center; border: 1px solid;">
                                        <a href="@Url.Action("IVRReportsBySubjob", "SubJobMaster", new { SubJob_No = obj.SubSubJobNo })" target="_blank">IVR List</a>
                                    </td>
                                    <td style="text-align: center; border: 1px solid;">
                                        <a href="@Url.Action("IRNReportsBySubjob", "SubJobMaster", new { PK_Call_ID = obj.PK_Call_ID })" target="_blank">IRN List</a>
                                    </td>
                                    <td style="text-align: center; border: 1px solid;">
                                        <a href="@Url.Action("NCRReportsBySubjob", "SubJobMaster", new { SubJob_No = obj.SubSubJobNo })" target="_blank">NCR List</a>
                                    </td>
                                    <td style="text-align: center; border: 1px solid;">
                                        <a href="@Url.Action("ComplaintsDashBoardByCallNo", "Complaint", new { SubVendorName = obj.SubVendorName, PK_Call_ID = obj.PK_Call_ID })" target="_blank">Complaint List</a>
                                    </td>
                                    <td style="text-align: center; border: 1px solid;">
                                        <a href="@Url.Action("AllConcern", "VisitReport", new { PK_CALL_ID = obj.PK_Call_ID, Type = "InspectorCall" })" target="_blank">List of Issues</a>
                                    </td>

                                    <td style='text-align: center; border: 1px solid;'>@obj.chkARC1</td>
                                    <td style='text-align: center; border: 1px solid;'>@obj.StageOfInspection</td>
                                    <td style='text-align: center; border: 1px solid;'>@obj.ItemsToBeInpsected</td>
                                    <td style='text-align: center; border: 1px solid;'>@obj.Project_Name</td>
                                    <td style='text-align: center; border: 1px solid;'>@obj.Inspector</td>
                                    <td style='text-align: center; border: 1px solid;'>@obj.Call_Type</td>
                                    <td style='text-align: center; border: 1px solid;'>@obj.Urgency</td>
                                    <td style='text-align: center; border: 1px solid;'>@obj.Call_Recived_date</td>



                                </tr>
                                }
                            }
                        </tbody>
                    }








                </table>




            </div>
        </div>







    </div>

</div>



<div class="modal" id="myModal">
    <div class="modal-dialog">
        <div class="modal-content">

            <!-- Modal Header -->
            <div class="modal-header">

                <button type="button" class="close NO" data-dismiss="modal">&times;</button>
            </div>

            <!-- Modal body -->
            <div class="modal-body">
                Do you want to Create Visit Report?
            </div>

            <!-- Modal footer -->
            <div class="modal-footer">
                @*<a href="@Url.Action("VisitReportForm", "VisitReport", new {@PK_Call_ID = Model.PK_Call_ID, @status="Closed"})" class="btn btn-danger" style="background-color:green;" title="Edit">Yes</a>*@
                <button type="button" class="btn btn-danger idyes " style="background-color:green;" data-dismiss="modal">Yes</button>

            </div>

        </div>
    </div>
</div>


<div class="modal" id="myModalDeclare">
    <div class="modal-dialog">
        <div class="modal-content">

            <!-- Modal Header -->
            <div class="modal-header">

                <button type="button" class="close NO" data-dismiss="modal">&times;</button>
            </div>

            <!-- Modal body -->
            <div class="modal-body">
                Before start of inspection activity by visiting bottom section of this call page I hereby confirm that,<br />

                I have seen all previous IVR / IRN and all open / closed concerns of particular sub job, if any.<br />

                I Have Seen complaints related to particular vendor / sub-job, if any.<br /> Spoke with previous visiting inspectors, if required.
            </div>

            <!-- Modal footer -->
            <div class="modal-footer">

                <button type="button" class="btn btn-danger BtnYes" style="background-color:green;" data-dismiss="modal">Yes</button>
                @*<button type="button" class="btn btn-danger NO" data-dismiss="modal" onclick="alert(425);this.close();" >No</button>*@

                @*<button type="button" class="btn btn-danger NO" style="background-color:#d9534f;" data-dismiss="modal">No</button>*@

            </div>

        </div>
    </div>
</div>

<div class="modal" id="myModalExpediting">
    <div class="modal-dialog">
        <div class="modal-content">

            <!-- Modal Header -->
            <div class="modal-header">

                <button type="button" class="close NO" data-dismiss="modal">&times;</button>
            </div>

            <!-- Modal body -->
            <div class="modal-body">
                Do you want to Create Expediting Report?
            </div>

            <!-- Modal footer -->
            <div class="modal-footer">
                @*<a href="@Url.Action("ExpeditingReport", "Expediting", new {@PK_Call_ID = Model.PK_Call_ID, @status="Closed"})" class="btn btn-danger" style="background-color:green;" title="Edit">Yes</a>*@
                <button type="button" class="btn btn-danger Ebtnyes" style="background-color:green;" data-dismiss="modal">Yes</button>

            </div>

        </div>
    </div>
</div>

<!-- The Modal -->
<div class="modal" id="myModalAbortive">
    <div class="modal-dialog">
        <div class="modal-content">

            <!-- Modal Header -->
            <div class="modal-header">

                <button type="button" class="close NO" data-dismiss="modal">&times;</button>
            </div>

            <!-- Modal body -->
            <div class="modal-body">
                Do you want to Create Visit Report?
            </div>

            <!-- Modal footer -->
            <div class="modal-footer">
                @*<a href="@Url.Action("VisitReportForm", "VisitReport", new {@PK_Call_ID = Model.PK_Call_ID, @status="Abortive"})" class="btn btn-danger" style="background-color:green;" title="Edit">Yes</a>*@
                <button type="button" class="btn btn-danger idAbortive" style="background-color:green;" data-dismiss="modal">Yes</button>
                @*<button type="button" class="btn btn-danger NO" style="background-color:#d9534f;" data-dismiss="modal">No</button>*@
            </div>

        </div>
    </div>
</div>



<script>
    $('#chkChkAll').click(function (e) {
        var table = $(e.target).closest('table');
        $('td input:checkbox', table).prop('checked', this.checked);
        $('#Datatable tbody input[type="checkbox"]').prop('checked', false);
    });
</script>


<script>

    //$('#chkChkAll').click(function () {
    //    var isChecked = this.checked;
    //    $('tbody input:checkbox').prop('checked', isChecked);
    //});


    //$('tbody input:checkbox').click(function () {
    //    var isChecked = $(this).is(':checked');
    //    var row = $(this).closest('tr');
    //    var rowData = {};
    //    row.find('td').each(function (index, element) {
    //        rowData[$('thead th').eq(index).text()] = $(element).text();
    //    });
    //    console.log('Checkbox checked:', isChecked);
    //    console.log('Row data:', rowData);
    //});

    $('#chkChkAll').click(function () {
        var isChecked = this.checked;
        $('tbody input:checkbox').prop('checked', isChecked);
    });

    $('tbody input:checkbox').click(function () {
        var isChecked = $(this).is(':checked');
        var checkedRows = $('tbody input:checkbox:checked');
        var row = $(this).closest('tr');
        var rowData = {};
        row.find('td').each(function (index, element) {
            rowData[$('thead th').eq(index).text()] = $(element).text();
        });

        var firstRowData = {};
        var areRowsValid = true;
        var minVisitDate = null;
        var maxVisitDate = null;
        var varReportType = '';  // Initialize varReportType

        checkedRows.each(function (rowIndex, rowElement) {
            var rowData = {};
            $(rowElement).closest('tr').find('td').each(function (index, element) {
                if (index > 0) {
                    rowData[$('thead th').eq(index).text().trim()] = $(element).text().trim();
                }
            });

            if (rowIndex === 0) {
                firstRowData = rowData;
                minVisitDate = parseDate(rowData['Actual Visit Date']);
                maxVisitDate = parseDate(rowData['Actual Visit Date']);
                varReportType = rowData['Report Type'];  // Set varReportType from the first row
            } else {
                if (
                    rowData['Sap Number'] !== firstRowData['Sap Number'] ||
                    rowData['Vendor'] !== firstRowData['Vendor'] ||
                    rowData['Job No'] !== firstRowData['Job No'] ||
                    rowData['Sub/Sub-Sub Job No'] !== firstRowData['Sub/Sub-Sub Job No']
                ) {
                    areRowsValid = false;
                    return false;
                }
                var visitDate = parseDate(rowData['Actual Visit Date']);
                if (visitDate < minVisitDate) {
                    minVisitDate = visitDate;
                }
                if (visitDate > maxVisitDate) {
                    maxVisitDate = visitDate;
                }
            }
        });

        var dateDiff = Math.floor((maxVisitDate - minVisitDate) / (1000 * 60 * 60 * 24));
        if (dateDiff > 5) {
            areRowsValid = false;
        }

        if (!areRowsValid) {
            alert("Not Allowed");
            // Uncheck the checkbox that triggered the validation failure
            $(this).prop('checked', false);
        }
    });

    function parseDate(dateString) {
        var parts = dateString.split('/');
        // Note: JavaScript's Date constructor uses zero-based month indexing (0 = January, 1 = February, etc.)
        return new Date(parts[2], parts[1] - 1, parts[0]);
    }

</script>



<script>
    //$(function () {
    //    var pressed = false;
    //    var start = undefined;
    //    var startX, startWidth;

    //    $("table th").mousedown(function (e) {
    //        start = $(this);
    //        pressed = true;
    //        startX = e.pageX;
    //        startWidth = $(this).width();
    //    });

    //    $(document).mousemove(function (e) {
    //        if (pressed) {
    //            var newWidth = startWidth + (e.pageX - startX);
    //            start.width(newWidth);
    //            $("#Datatable td").each(function () {
    //                $(this).css("max-width", newWidth);
    //            });
    //        }
    //    });

    //    $(document).mouseup(function () {
    //        if (pressed) {
    //            pressed = false;
    //        }
    //    });
    //});
</script>




<script>
    //$(document).ready(function () {
    //    // Initialize DataTable
    //    let table = $('#Datatable').DataTable({
    //        paging: true,
    //        pageLength: 15,
    //        dom: 'lrtip', // l - length changing input, r - processing display element, t - table, i - information, p - pagination
    //        initComplete: function () {
    //            let api = this.api();

    //            // Create search inputs
    //            api.columns().every(function () {
    //                let column = this;
    //                let input = $('<input type="text" placeholder="Search" />')
    //                    .appendTo($('#searchRow').find('th').eq(column.index()))
    //                    .on('keyup', function () {
    //                        if (column.search() !== this.value) {
    //                            column.search(this.value).draw();
    //                        }
    //                    });

    //                // Hide search box for column with data-dt-column="4"
    //                if (column.index() === 3) {
    //                    $(input).hide();
    //                }
    //            });
    //        },
    //        columnDefs: [
    //            {
    //                orderable: false,
    //                targets: '_all' // Disable sorting for all columns
    //            }
    //        ]
    //    });
    //});

    $(document).ready(function () {
        // Initialize DataTable
        let table = $('#Datatable').DataTable({
            paging: true,
            pageLength: 50,
            initComplete: function () {
                let api = this.api();

                // For each column, add a search input
                api.columns().every(function () {
                    var that = this;

                    $('input', this.header()).on('keyup change clear', function () {
                        if (that.search() !== this.value) {
                            that
                                .search(this.value)
                                .draw();
                        }
                    });


                });
            },
            columnDefs: [
                {
                    orderable: false,
                    targets: '_all'
                },

            ]
        });



    });

    //$(document).ready(function () {
    //    $('#Datatable').DataTable();
    //});






</script>


<script>
    $(document).ready(function () {
        $("#notDone").click(function () {
            debugger

            var checkedRows = $('#Datatable').find('input:checkbox:checked').closest('tr');
            var DArray = []; // Array to store PK_Call_ID and selected reason pairs


            if (checkedRows.length === 0) {
                alert("Please check a checkbox.");
                return false;
            }
            else {
                // Trigger NotDoneStatus function
                debugger;
                $('#btnjc').removeClass('hidden').show();
                var status = "NotDone";
                NotDoneStatus(status);



            }
        });



        $("#IDCancelled").click(function () {
            debugger

            var checkedRows = $('#Datatable').find('input:checkbox:checked').closest('tr');
            var DArray = []; // Array to store PK_Call_ID and selected reason pairs


            if (checkedRows.length === 0) {
                alert("Please check a checkbox.");
                return false;
            }
            else {
                // Trigger NotDoneStatus function
                $('#btnjc').removeClass('hidden').show();
                var status = "Cancelled";
                NotDoneStatus(status);


            }
        });

        // Function to handle the status
        function NotDoneStatus(Status) {
            debugger;
            var StatusValue = Status;
            var strStatus = "";
            if (StatusValue == 'NotDone') {
                strStatus = "ND";
            } else if (StatusValue == 'Cancelled') {
                strStatus = "CAN";
            }

            // Make AJAX call to retrieve reasons based on status
            $.ajax({
                url: '@Url.Action("GetCallReason", "CallsMaster")',
                data: "{ 'Status': '" + strStatus + "'}",
                dataType: "json",
                type: "POST",
                contentType: "application/json; charset=utf-8",
                success: function (response) {
                    debugger;
                    $('#Reasion').empty();

                    var s = '<option value="-1">--Select Reason--</option>';

                    for (var i = 0; i < response.length; i++) {
                        s += '<option value="' + response[i].CReason_Id + '">' + response[i].Reason + '</option>';
                    }

                    $("#Reasion").html(s);

                    $("#INTERNATIONAL").show();

                },
                error: function (response) {
                    // Handle error
                },
                failure: function (response) {
                    // Handle failure
                }
            });
        }
    })




</script>


<script>
    $(document).ready(function () {
        $("#btnjc").click(function () {
            debugger
            var checkedRows = $('#Datatable').find('input:checkbox:checked').closest('tr');
            var DArray = []; // Array to store PK_Call_ID and selected reason pairs
            var selectedReason = $('#Reasion').val();

            if (checkedRows.length === 0) {
                alert("Please check a checkbox.");
                return false;
            }
            else if (selectedReason == "-1") {
                alert("Please Enter reason !");
                return false;
            }
            else {
                checkedRows.each(function () {
                    var rowData = {};
                    $(this).find('td').each(function (index, element) {
                        // Skip the checkbox column
                        if (index > 0) {
                            rowData[$('#Datatable thead th').eq(index).text().trim()] = $(element).text().trim();
                        }
                    });

                    debugger
                    var Status = "";
                    var pk_call_id = rowData['Pk_call_id'];
                    var PK_UserID = rowData['PK_UserID'];
                    var inspector = rowData['Inspector'];




                    if (selectedReason >= 1 && selectedReason <= 17 || selectedReason == "23") {

                        Status = "Cancelled";

                    }
                    else {
                        Status = "NotDone";
                    }


                    var trD = {
                        'PK_Call_ID': pk_call_id,
                        'Inspector': inspector,
                        'Reasion': selectedReason,
                        'Status': Status,
                        'PK_UserID': PK_UserID

                    };


                    DArray.push(trD);
                });



                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("CallsDetailsARC", "CallsMaster")',
                    dataType: 'json',
                    async: false,
                    data: JSON.stringify({ "DArray": DArray }),
                    enctype: "multipart/form-data",
                    contentType: "application/json; charset=utf-8",
                    success: function (response) {
                        debugger

                        if (response.result == 'Redirect') {
                            alert("Details has been Save successfully!!!")
                            $('#btnjc').hide();
                            location.reload();
                        }

                        if (response.result == 'Update') {
                            alert("Details has been updated successfully!!!")
                            location.reload();
                            //$("#preloader").remove();
                            // window.location = response.url;
                        }
                    }
                })

            }

        });


    });
</script>


<script>
    $(document).ready(function () {
        $('.NO').click('change', function () {

            $('#myModal').hide();
            $('#myModalAbortive').hide();
            $('#myModalDeclare').hide();
        });
    });
</script>

<script>

    //$(document).ready(function () {
    //    $("#IDClosed").click(function () {
    //        debugger
    //        var checkedRows = $('#Datatable').find('input:checkbox:checked').closest('tr');

    //        if (checkedRows.length === 0) {
    //            alert("Please check a checkbox.");
    //            return false;
    //        }

    //        checkedRows.each(function () {
    //            var rowData = {};
    //            $(this).find('td').each(function (index, element) {
    //                // Skip the checkbox column
    //                if (index > 0) {
    //                    rowData[$('#Datatable thead th').eq(index).text().trim()] = $(element).text().trim();
    //                }
    //            });
    //        })

    //        if (varReportType == 'Expediting') {

    //            $('#myModalExpediting').show();
    //            $('#myModalDeclare').hide();
    //            $("#INTERNATIONAL").hide();
    //        }
    //        else {
    //            $('#myModalDeclare').show();
    //            $("#INTERNATIONAL").hide();
    //        }

    //    })
    //})

    $(document).ready(function () {
        $("#IDClosed").click(function () {
            debugger;
            $('#btnjc').hide();
            var checkedRows = $('#Datatable').find('input:checkbox:checked').closest('tr');

            if (checkedRows.length === 0) {
                alert("Please check a checkbox.");
                return false;
            }
            debugger
            var firstRowData = {};
            var areRowsValid = true;
            var minVisitDate = null;
            var maxVisitDate = null;
            var varReportType = '';  // Initialize varReportType

            debugger

            checkedRows.each(function (rowIndex, rowElement) {
                var rowData = {};
                $(rowElement).find('td').each(function (index, element) {
                    if (index > 0) {
                        rowData[$('#Datatable thead th').eq(index).text().trim()] = $(element).text().trim();
                    }
                });

                if (rowIndex === 0) {
                    firstRowData = rowData;
                    minVisitDate = parseDate(rowData['Actual Visit Date']);
                    maxVisitDate = parseDate(rowData['Actual Visit Date']);
                    varReportType = rowData['Report Type'];  // Set varReportType from the first row
                } else {
                    if (
                        rowData['Sap Number'] !== firstRowData['Sap Number'] ||
                        rowData['Vendor'] !== firstRowData['Vendor'] ||
                        rowData['Job No'] !== firstRowData['Job No'] ||
                        rowData['Sub/Sub-Sub Job No'] !== firstRowData['Sub/Sub-Sub Job No']
                    ) {
                        areRowsValid = false;
                        return false;
                    }

                    var visitDate = parseDate(rowData['Actual Visit Date']);
                    if (visitDate < minVisitDate) {
                        minVisitDate = visitDate;
                    }
                    if (visitDate > maxVisitDate) {
                        maxVisitDate = visitDate;
                    }
                }
            });

            var dateDiff = Math.floor((maxVisitDate - minVisitDate) / (1000 * 60 * 60 * 24));
            if (dateDiff > 5) {
                areRowsValid = false;
            }

            if (areRowsValid) {
                if (varReportType == 'Expediting') {
                    $('#myModalExpediting').show();
                    $('#myModalDeclare').hide();
                    $("#INTERNATIONAL").hide();
                } else {
                    $('#myModalDeclare').show();
                    $("#INTERNATIONAL").hide();
                }
            } else {
                alert("Not Allowed");
            }
        });

        function parseDate(dateString) {
            var parts = dateString.split('/');
            // Note: JavaScript's Date constructor uses zero-based month indexing (0 = January, 1 = February, etc.)
            return new Date(parts[2], parts[1] - 1, parts[0]);
        }
    });


</script>



<script>
    $(document).ready(function () {
        $("#IDAbortive").click(function () {
            debugger;

            var numChecked = $('#Datatable tbody tr input[type="checkbox"]:checked').length;
            if (numChecked > 1) {
                alert('Only one checkbox can be selected.');
                return;
            }

            var checkedRows = $('#Datatable').find('input:checkbox:checked').closest('tr');

            if (checkedRows.length === 0) {
                alert("Please check a checkbox.");
                return false;
            }
            debugger
            var firstRowData = {};
            var areRowsValid = true;
            var minVisitDate = null;
            var maxVisitDate = null;
            var varReportType = '';  // Initialize varReportType

            debugger

            checkedRows.each(function (rowIndex, rowElement) {
                var rowData = {};
                $(rowElement).find('td').each(function (index, element) {
                    if (index > 0) {
                        rowData[$('#Datatable thead th').eq(index).text().trim()] = $(element).text().trim();
                    }
                });

                if (rowIndex === 0) {
                    firstRowData = rowData;
                    minVisitDate = new Date(rowData['Actual Visit Date']);
                    maxVisitDate = new Date(rowData['Actual Visit Date']);
                    varReportType = rowData['Report Type'];  // Set varReportType from the first row
                } else {
                    if (
                        rowData['Sap Number'] !== firstRowData['Sap Number'] ||
                        rowData['Vendor'] !== firstRowData['Vendor'] ||
                        rowData['Job No'] !== firstRowData['Job No'] ||
                        rowData['Sub/Sub-Sub Job No'] !== firstRowData['Sub/Sub-Sub Job No']
                    ) {
                        areRowsValid = false;
                        return false;
                    }

                    var visitDate = new Date(rowData['Actual Visit Date']);
                    if (visitDate < minVisitDate) {
                        minVisitDate = visitDate;
                    }
                    if (visitDate > maxVisitDate) {
                        maxVisitDate = visitDate;
                    }
                }
            });

            var dateDiff = Math.floor((maxVisitDate - minVisitDate) / (1000 * 60 * 60 * 24));
            if (dateDiff > 5) {
                areRowsValid = false;
            }

            if (areRowsValid) {
                if (varReportType == 'Expediting') {
                    $('#myModalExpediting').show();
                    $('#myModalDeclare').hide();
                    $("#INTERNATIONAL").hide();
                } else {
                    $("#INTERNATIONAL").hide();
                    $('#myModalAbortive').show();
                }
            } else {
                alert("Not Allowed");
            }
        });
    });
</script>
<script>
    @*$(document).ready(function () {
    $(".BtnYes").click(function () {
        debugger;
        // Define checkedRows by selecting all rows with checked checkboxes
        var checkedRows = $('#Datatable tbody tr').filter(function() {
            return $(this).find('input[type="checkbox"]').is(':checked');
        });

        // Collect PK_Call_ID values and status from checked rows
        var pkCallIdArray = [];
        var status = 'Closed'; // Set the status to 'close'
        var inspectionVisitReportModels = [];
        debugger;

        checkedRows.each(function (rowIndex, rowElement) {
            var rowData = {};
            $(rowElement).find('td').each(function (index, element) {
                if (index > 0) { // Skip the first column if it's a checkbox
                    var columnName = $('#Datatable thead th').eq(index).text().trim();
                    var cellValue = $(element).text().trim();
                    rowData[columnName] = cellValue;
                }
            });
            debugger
            // Extract pk_call_id from rowData and push to pkCallIdArray
            var pk_call_id = rowData['Pk_call_id'];
            if (pk_call_id) {
                pkCallIdArray.push(pk_call_id);
            }

            // Collect the entire rowData as InspectionvisitReportModel
            inspectionVisitReportModels.push(rowData);
        });
        debugger
        var dataToSend = {
            ARCPK_Call_ID: pkCallIdArray.join(','), // Join PK_Call_ID values as a comma-separated string
            //pk_call_idARC: pkCallIdArray.join(','),
            status: status,
            abc: inspectionVisitReportModels
        };



        // Send data using AJAX
        $.ajax({
            type: 'GET',
            url: '@Url.Action("VisitReportFormArcJob", "VisitReport")',
            data: dataToSend, // Sending as an object, not JSON stringified
            traditional: true, // Ensures proper parameter serialization
            success: function(response) {
                // Handle success response
                window.location.href = '@Url.Action("VisitReportFormArcJob", "VisitReport")?Pk_callidAVR=' + pkCallIdArray.join(',') + '&status=' + status;
                console.log('Success:', response);
            },
            error: function(xhr, status, error) {
                // Handle error response
                console.log('Error:', error);
            }
        });
    });
});*@
    @*$(document).ready(function () {
    $(".BtnYes").click(function () {
        debugger;
        // Define checkedRows by selecting all rows with checked checkboxes
        var checkedRows = $('#Datatable tbody tr').filter(function() {
            return $(this).find('input[type="checkbox"]').is(':checked');
        });

        // Collect PK_Call_ID values and status from checked rows
        var pkCallIdArray = [];
        var status = 'Closed'; // Set the status to 'close'
        var inspectionVisitReportModels = [];
        debugger;

        // Function to parse date in dd/mm/yyyy format
        function parseDate(dateStr) {
            if (!dateStr || dateStr.trim() === "") {
                console.log("Date string is empty or null");
                return null;
            }
            var parts = dateStr.split('/');
            if (parts.length !== 3) {
                console.log("Date string format is incorrect: " + dateStr);
                return null;
            }
            var day = parseInt(parts[0], 10);
            var month = parseInt(parts[1], 10) - 1; // Note: months are 0-based
            var year = parseInt(parts[2], 10);
            var date = new Date(year, month, day);
            if (isNaN(date.getTime())) {
                console.log("Parsed date is invalid: " + dateStr);
                return null;
            }
            return date;
        }

        checkedRows.each(function (rowIndex, rowElement) {
            var rowData = {};
            var actualVisitDate = $(rowElement).find('td:eq(1)').text().trim(); // Assuming the actual visit date is in the second column
            if (!actualVisitDate || actualVisitDate.trim() === "") {
                console.log("Skipping row with empty or null ActualVisitDate.");
                return; // Skip processing this row
            }
            rowData['Actual Visit Date'] = actualVisitDate;
            $(rowElement).find('td').each(function (index, element) {
                if (index > 0) { // Skip the first column if it's a checkbox
                    var columnName = $('#Datatable thead th').eq(index).text().trim();
                    var cellValue = $(element).text().trim();
                    rowData[columnName] = cellValue;
                }
            });
            debugger
            // Extract pk_call_id from rowData and push to pkCallIdArray
            var pk_call_id = rowData['Pk_call_id'];
            if (pk_call_id) {
                pkCallIdArray.push(pk_call_id);
            }

            // Collect the entire rowData as InspectionvisitReportModel
            inspectionVisitReportModels.push(rowData);
        });
        debugger

        // Determine if it's a single call or continuous call
        if (pkCallIdArray.length === 1) {
            // Single call handling
            var pk_call_id = pkCallIdArray[0];
            window.location.href = '@Url.Action("VisitReportForm", "VisitReport")?PK_Call_ID=' + pk_call_id + '&status=' + status;
        } else {
            // Continuous call handling
            var dateArray = inspectionVisitReportModels.map(function(model) {
                var parsedDate = parseDate(model['Actual Visit Date']);
                return {
                    date: parsedDate,
                    pk_call_id: model['Pk_call_id']
                };
            });

            // Filter out invalid dates
            dateArray = dateArray.filter(function(item) {
                return item.date !== null;
            });

            if (dateArray.length === 0) {
                alert('No valid dates found.');
                return;
            }

            // Sort dates to find the row with the max date
            dateArray.sort(function(a, b) {
                return b.date - a.date;
            });

            var maxDateRow = dateArray[0];
            var maxDatePkCallId = maxDateRow.pk_call_id;

            // Validate the 6-day range
            var minDate = dateArray[dateArray.length - 1].date;
            var maxDate = dateArray[0].date;
            console.log("Min date: " + minDate);
            console.log("Max date: " + maxDate);
            var dayDiff = (maxDate - minDate) / (1000 * 60 * 60 * 24);
            if (dayDiff > 6) {
                alert('The difference between the earliest and latest visit dates exceeds 6 days.');
                return;
            }

            window.location.href = '@Url.Action("VisitReportForm", "VisitReport")?PK_Call_ID=' + maxDatePkCallId + '&status=' + status;
        }
    });
});*@

    $(document).ready(function () {

        $(".BtnYes").click(function () {
            debugger
            $("#myModalDeclare").hide();
            $('#myModal').show();
        })

        $(".idyes").click(function () {
            debugger
            // Define checkedRows by selecting all rows with checked checkboxes
            var checkedRows = $('#Datatable tbody tr').filter(function () {
                return $(this).find('input[type="checkbox"]').is(':checked');
            });

            // Collect PK_Call_ID values and status from checked rows
            var pkCallIdArray = [];
            var status = 'Closed'; // Set the status to 'closed'
            var inspectionVisitReportModels = [];

            // Function to parse date in dd/mm/yyyy format
            function parseDate(dateStr) {
                if (!dateStr || dateStr.trim() === "") {
                    console.log("Date string is empty or null");
                    return null;
                }
                var parts = dateStr.split('/');
                if (parts.length !== 3) {
                    console.log("Date string format is incorrect: " + dateStr);
                    return null;
                }
                var day = parseInt(parts[0], 10);
                var month = parseInt(parts[1], 10) - 1; // Note: months are 0-based
                var year = parseInt(parts[2], 10);
                var date = new Date(year, month, day);
                if (isNaN(date.getTime())) {
                    console.log("Parsed date is invalid: " + dateStr);
                    return null;
                }
                return date;
            }

            checkedRows.each(function (rowIndex, rowElement) {
                var rowData = {};
                var actualVisitDate = $(rowElement).find('td:eq(1)').text().trim(); // Assuming the actual visit date is in the second column

                if (!actualVisitDate || actualVisitDate.trim() === "") {
                    console.log("Skipping row with empty or null ActualVisitDate.");
                    return; // Skip processing this row
                }
                rowData['Actual Visit Date'] = actualVisitDate;

                $(rowElement).find('td').each(function (index, element) {
                    if (index > 0) { // Skip the first column if it's a checkbox
                        var columnName = $('#Datatable thead th').eq(index).text().trim();
                        var cellValue = $(element).text().trim();
                        rowData[columnName] = cellValue;
                    }
                });
                // Extract pk_call_id from rowData and push to pkCallIdArray
                var pk_call_id = rowData['Pk_call_id'];
                if (pk_call_id) {
                    pkCallIdArray.push(pk_call_id);
                }

                // Collect the entire rowData as InspectionvisitReportModel
                inspectionVisitReportModels.push(rowData);
            });

            // Determine if it's a single call or continuous call
            if (pkCallIdArray.length === 1) {
                // Single call handling
                var pk_call_id = pkCallIdArray[0];
                window.location.href = '@Url.Action("VisitReportForm", "VisitReport")?PK_Call_ID=' + pk_call_id + '&status=' + status;
            } else {
                // Continuous call handling
                var dateArray = inspectionVisitReportModels.map(function (model) {
                    var parsedDate = parseDate(model['Actual Visit Date']);
                    return {
                        date: parsedDate,
                        pk_call_id: model['Pk_call_id']
                    };
                });

                // Filter out invalid dates
                dateArray = dateArray.filter(function (item) {
                    return item.date !== null;
                });

                if (dateArray.length === 0) {
                    alert('No valid dates found.');
                    return;
                }

                // Sort dates to find the row with the max date
                dateArray.sort(function (a, b) {
                    return b.date - a.date;
                });

                var maxDateRow = dateArray[0];
                var maxDatePkCallId = maxDateRow.pk_call_id;

                // Validate the 6-day range
                var minDate = dateArray[dateArray.length - 1].date;
                var maxDate = dateArray[0].date;
                console.log("Min date: " + minDate);
                console.log("Max date: " + maxDate);
                var dayDiff = (maxDate - minDate) / (1000 * 60 * 60 * 24);
                if (dayDiff > 5) {
                    alert('The difference between the earliest and latest visit dates exceeds 6 days.');
                    return;
                }

                // Call the update function for each pk_call_id except for maxDatePkCallId

                checkedRows.each(function () {
                    var rowData = {};
                    $(this).find('td').each(function (index, element) {
                        // Skip the checkbox column
                        if (index > 0) {
                            rowData[$('#Datatable thead th').eq(index).text().trim()] = $(element).text().trim();
                        }
                    });
                    debugger

                    var pk_call_id = rowData['Pk_call_id'];
                    var PK_UserID = rowData['PK_UserID'];
                    if (pk_call_id !== maxDatePkCallId) { // Correct variable name
                        calldetailsupdate(pk_call_id, status, PK_UserID); // Ensure the correct variables are passed
                    }
                });

                // Redirect to VisitReportForm with maxDatePkCallId
                $('#myModal').hide();
                window.location.href = '@Url.Action("VisitReportForm", "VisitReport")?PK_Call_ID=' + maxDatePkCallId + '&status=' + status;
                $(window).on("pageshow", function (event) {
                    if (event.originalEvent.persisted) {
                        // Page was cached and restored, perform a refresh
                        location.reload(true);
                    }
                });

            }
        });
    })



</script>


<script>




    // Define the calldetailsupdate function
    function calldetailsupdate(pk_call_id, status, PK_UserID) {
        $.ajax({
            url: '@Url.Action("CallsDetailsUpdatesdetails", "CallsMaster")',
            type: 'POST',
            async: false,
            data: {
                pk_call_id: pk_call_id,
                status: status,
                FirstName: PK_UserID
            },
            success: function (response) {
                console.log("Update successful for PK_Call_ID: " + pk_call_id);
            },
            error: function (xhr, status, error) {
                console.error("Error updating PK_Call_ID: " + pk_call_id + " - " + xhr.responseText);
            }
        });
    }




</script>

<script>
    $(document).ready(function () {
        $(".Ebtnyes").click(function () {
            // Define checkedRows by selecting all rows with checked checkboxes
            var checkedRows = $('#Datatable tbody tr').filter(function () {
                return $(this).find('input[type="checkbox"]').is(':checked');
            });

            // Collect PK_Call_ID values and status from checked rows
            var pkCallIdArray = [];
            var status = 'Closed'; // Set the status to 'closed'
            var inspectionVisitReportModels = [];

            // Function to parse date in dd/mm/yyyy format
            function parseDate(dateStr) {
                if (!dateStr || dateStr.trim() === "") {
                    console.log("Date string is empty or null");
                    return null;
                }
                var parts = dateStr.split('/');
                if (parts.length !== 3) {
                    console.log("Date string format is incorrect: " + dateStr);
                    return null;
                }
                var day = parseInt(parts[0], 10);
                var month = parseInt(parts[1], 10) - 1; // Note: months are 0-based
                var year = parseInt(parts[2], 10);
                var date = new Date(year, month, day);
                if (isNaN(date.getTime())) {
                    console.log("Parsed date is invalid: " + dateStr);
                    return null;
                }
                return date;
            }

            checkedRows.each(function (rowIndex, rowElement) {
                var rowData = {};
                var actualVisitDate = $(rowElement).find('td:eq(1)').text().trim(); // Assuming the actual visit date is in the second column

                if (!actualVisitDate || actualVisitDate.trim() === "") {
                    console.log("Skipping row with empty or null ActualVisitDate.");
                    return; // Skip processing this row
                }
                rowData['Actual Visit Date'] = actualVisitDate;

                $(rowElement).find('td').each(function (index, element) {
                    if (index > 0) { // Skip the first column if it's a checkbox
                        var columnName = $('#Datatable thead th').eq(index).text().trim();
                        var cellValue = $(element).text().trim();
                        rowData[columnName] = cellValue;
                    }
                });
                // Extract pk_call_id from rowData and push to pkCallIdArray
                var pk_call_id = rowData['Pk_call_id'];
                if (pk_call_id) {
                    pkCallIdArray.push(pk_call_id);
                }

                // Collect the entire rowData as InspectionvisitReportModel
                inspectionVisitReportModels.push(rowData);
            });

            // Determine if it's a single call or continuous call
            if (pkCallIdArray.length === 1) {
                // Single call handling
                var pk_call_id = pkCallIdArray[0];
                window.location.href = '@Url.Action("ExpeditingReport", "Expediting")?PK_Call_ID=' + pk_call_id + '&status=' + status;
            } else {
                // Continuous call handling
                var dateArray = inspectionVisitReportModels.map(function (model) {
                    var parsedDate = parseDate(model['Actual Visit Date']);
                    return {
                        date: parsedDate,
                        pk_call_id: model['Pk_call_id']
                    };
                });

                // Filter out invalid dates
                dateArray = dateArray.filter(function (item) {
                    return item.date !== null;
                });

                if (dateArray.length === 0) {
                    alert('No valid dates found.');
                    return;
                }

                // Sort dates to find the row with the max date
                dateArray.sort(function (a, b) {
                    return b.date - a.date;
                });

                var maxDateRow = dateArray[0];
                var maxDatePkCallId = maxDateRow.pk_call_id;

                // Validate the 6-day range
                var minDate = dateArray[dateArray.length - 1].date;
                var maxDate = dateArray[0].date;
                console.log("Min date: " + minDate);
                console.log("Max date: " + maxDate);
                var dayDiff = (maxDate - minDate) / (1000 * 60 * 60 * 24);
                if (dayDiff > 5) {
                    alert('The difference between the earliest and latest visit dates exceeds 6 days.');
                    return;
                }

                // Call the update function for each pk_call_id except for maxDatePkCallId

                checkedRows.each(function () {
                    var rowData = {};
                    $(this).find('td').each(function (index, element) {
                        // Skip the checkbox column
                        if (index > 0) {
                            rowData[$('#Datatable thead th').eq(index).text().trim()] = $(element).text().trim();
                        }
                    });
                    debugger

                    var pk_call_id = rowData['Pk_call_id'];
                    var PK_UserID = rowData['PK_UserID'];
                    if (pk_call_id !== maxDatePkCallId) { // Correct variable name
                        calldetailsupdate(pk_call_id, status, PK_UserID); // Ensure the correct variables are passed
                    }
                });

                // Redirect to VisitReportForm with maxDatePkCallId

                $('#myModal').hide();
                window.location.href = '@Url.Action("ExpeditingReport", "Expediting")?PK_Call_ID=' + maxDatePkCallId + '&status=' + status;

            }
        });
    })



</script>


<script>
    $(document).ready(function () {
        $(".idAbortive").click(function () {
            // Define checkedRows by selecting all rows with checked checkboxes


            var checkedRows = $('#Datatable tbody tr').filter(function () {
                return $(this).find('input[type="checkbox"]').is(':checked');
            });

            // Collect PK_Call_ID values and status from checked rows
            var pkCallIdArray = [];
            var status = 'Abortive'; // Set the status to 'closed'
            var inspectionVisitReportModels = [];

            // Function to parse date in dd/mm/yyyy format
            function parseDate(dateStr) {
                if (!dateStr || dateStr.trim() === "") {
                    console.log("Date string is empty or null");
                    return null;
                }
                var parts = dateStr.split('/');
                if (parts.length !== 3) {
                    console.log("Date string format is incorrect: " + dateStr);
                    return null;
                }
                var day = parseInt(parts[0], 10);
                var month = parseInt(parts[1], 10) - 1; // Note: months are 0-based
                var year = parseInt(parts[2], 10);
                var date = new Date(year, month, day);
                if (isNaN(date.getTime())) {
                    console.log("Parsed date is invalid: " + dateStr);
                    return null;
                }
                return date;
            }

            checkedRows.each(function (rowIndex, rowElement) {
                var rowData = {};
                var actualVisitDate = $(rowElement).find('td:eq(1)').text().trim(); // Assuming the actual visit date is in the second column

                if (!actualVisitDate || actualVisitDate.trim() === "") {
                    console.log("Skipping row with empty or null ActualVisitDate.");
                    return; // Skip processing this row
                }
                rowData['Actual Visit Date'] = actualVisitDate;

                $(rowElement).find('td').each(function (index, element) {
                    if (index > 0) { // Skip the first column if it's a checkbox
                        var columnName = $('#Datatable thead th').eq(index).text().trim();
                        var cellValue = $(element).text().trim();
                        rowData[columnName] = cellValue;
                    }
                });
                // Extract pk_call_id from rowData and push to pkCallIdArray
                var pk_call_id = rowData['Pk_call_id'];
                if (pk_call_id) {
                    pkCallIdArray.push(pk_call_id);
                }

                // Collect the entire rowData as InspectionvisitReportModel
                inspectionVisitReportModels.push(rowData);
            });

            // Determine if it's a single call or continuous call
            if (pkCallIdArray.length === 1) {
                // Single call handling
                var pk_call_id = pkCallIdArray[0];
                alert(pk_call_id);
                window.location.href = '@Url.Action("VisitReportForm", "VisitReport")?PK_Call_ID=' + pk_call_id + '&status=' + status;
            } else {
                // Continuous call handling
                var dateArray = inspectionVisitReportModels.map(function (model) {
                    var parsedDate = parseDate(model['Actual Visit Date']);
                    return {
                        date: parsedDate,
                        pk_call_id: model['Pk_call_id']
                    };
                });

                // Filter out invalid dates
                dateArray = dateArray.filter(function (item) {
                    return item.date !== null;
                });

                if (dateArray.length === 0) {
                    alert('No valid dates found.');
                    return;
                }

                // Sort dates to find the row with the max date
                dateArray.sort(function (a, b) {
                    return b.date - a.date;
                });

                var maxDateRow = dateArray[0];
                var maxDatePkCallId = maxDateRow.pk_call_id;

                // Validate the 6-day range
                var minDate = dateArray[dateArray.length - 1].date;
                var maxDate = dateArray[0].date;
                console.log("Min date: " + minDate);
                console.log("Max date: " + maxDate);
                var dayDiff = (maxDate - minDate) / (1000 * 60 * 60 * 24);
                if (dayDiff > 5) {
                    alert('The difference between the earliest and latest visit dates exceeds 6 days.');
                    return;
                }

                // Call the update function for each pk_call_id except for maxDatePkCallId

                checkedRows.each(function () {
                    var rowData = {};
                    $(this).find('td').each(function (index, element) {
                        // Skip the checkbox column
                        if (index > 0) {
                            rowData[$('#Datatable thead th').eq(index).text().trim()] = $(element).text().trim();
                        }
                    });
                    debugger

                    var pk_call_id = rowData['Pk_call_id'];
                    var PK_UserID = rowData['PK_UserID'];
                    if (pk_call_id !== maxDatePkCallId) { // Correct variable name
                        calldetailsupdate(pk_call_id, status, PK_UserID); // Ensure the correct variables are passed
                    }
                });

                // Redirect to VisitReportForm with maxDatePkCallId
                $('#myModalAbortive').hide();
                alert(maxDatePkCallId);
                window.location.href = '@Url.Action("VisitReportForm", "VisitReport")?PK_Call_ID=' + maxDatePkCallId + '&status=' + status;

            }
        });
    })


</script>


<script type="text/javascript">

    if (performance.navigation.type == 2) {
        location.reload(true);
    }
</script>