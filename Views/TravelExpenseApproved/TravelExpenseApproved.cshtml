@model TuvVision.Models.TravelExpense
@using NonFactors.Mvc.Grid;
@using System.Web.Mvc;


@*page made by nikita on 06102023*@

@{
    ViewBag.Title = "TravelExpenseApproved";
    Layout = "~/Views/Shared/_TuvVision.cshtml";
}

<link href="~/AllJsAndCss/css/MVCGridN.css" rel="stylesheet" />

@*Ashwini Scripts here for datatable starts here
        <script type="text/javascript" language="javascript" src="~/AllJsAndCss/datatable/js/jquery.dataTables.js"></script>

        <!--export to excel-->
        <script type="text/javascript" language="javascript" src="~/AllJsAndCss/js/dataTables.buttons.min.js"></script>
    <script type="text/javascript" language="javascript" src="~/AllJsAndCss/js/jszip.min.js"></script>
    <script type="text/javascript" language="javascript" src="~/AllJsAndCss/js/buttons.html5.min.js"></script>
    <script src="~/AllJsAndCss/js/datatable-custom2.js"></script>*@
@*Ashwini Scripts here for datatable ends here*@
@*<script>
        $(document).ready(function () {
            $("#UserDetails").DataTable();
        });
    </script>*@<link href="~/AllJsAndCss/css/MVCGridN.css" rel="stylesheet" />

<link rel="stylesheet" href="//code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css">
<script src="//code.jquery.com/jquery-1.10.2.js"></script>
<script src="//code.jquery.com/ui/1.11.4/jquery-ui.js"></script>
<script src="~/Scripts/MvcGrid/jquery.quicksearch.js"></script>
<script src="~/Scripts/MvcGrid/dataTables.fixedColumns.min.js"></script>
<script>
    $(function () {
        $(".FromD").datepicker({
            dateFormat: 'dd/mm/yy',//check change
            changeMonth: true,
            changeYear: true,
            yearRange: "-100:+50"
        });
    });
</script>
<script>
    $(function () {
        $(".ToD").datepicker({
            dateFormat: 'dd/mm/yy',//check change
            changeMonth: true,
            changeYear: true,
            yearRange: "-100:+50"
        });
    });
</script>
@using (Html.BeginForm("TravelExpenseApproved", "TravelExpenseApproved", FormMethod.Post, new { enctype = "multipart/form-data", @id = "form1" }))

{

    <!--Start of header-->
    <!--Start of main content 3-->
    <div class="main-content3 xs-max-height">

        <!--Start of header-->
        <div class="container-fluid">
            <div class="row assignfixedwidth rp-15">

                <div class="col-xs-12">
                    <h3 class="dynamic-page-title dynamic-page-title-2  text-left">Travel Expense</h3>


                </div><!-- /.col -->

                <div class="col-xs-12">
                    <hr class="custom-hr">
                </div><!-- /.col -->
                <!--Table was here-->
                <div class="col-xs-12">
                    <div class="row">

                        <div class="col-xs-3">
                            <div class="form-group" style="width:280px;padding-left:25px;">
                                <label>From Date:</label>
                                @Html.TextBoxFor(model => model.Fromdate, "{0:dd/MM/yyyy}", htmlAttributes: new { placeholder = "dd/mm/yyyy", @class = "form-control form-control-custom FromD", autocomplete = "off" })
                            </div>
                        </div>


                        <div class="col-xs-3">
                            <div class="form-group" style="width:280px;padding-right:25px;">
                                <label>To Date:</label>
                                @Html.TextBoxFor(model => model.Todate, "{0:dd/MM/yyyy}", htmlAttributes: new { placeholder = "dd/mm/yyyy", @class = "form-control form-control-custom ToD", autocomplete = "off" })
                            </div>

                        </div>


                        <div class="col-xs-2">
                            <div class="form-group">
                                <label>Sap No:</label>
                                @Html.TextBoxFor(model => model.SAP_No, htmlAttributes: new { placeholder = "Enter Sap No", @class = "form-control SAP_No", autocomplete = "off" })
                            </div>

                        </div>

                        <div class="col-xs-2">
                            <label></label>
                            <div class="form-group">
                                <button type="button" class="btn btn-info dynamic-function-btn dynamic-function-btn-2" id="btnSearch">Search</button>
                            </div>
                        </div>
                        <div class="col-xs-2">
                            <div class="form-group">
                                <label></label><br />
                                <button type="button" id="a" value="ExportToExcel" class="btn btn-info dynamic-function-btn dynamic-function-btn-2" onclick="location.href='@Url.Action("ExportIndexTravelExpense","TravelExpenseApproved")'">
                                    Export To Excel
                                </button>
                            </div>
                        </div>




                    </div>
                </div>  



                </div><!-- /.row -->

            <div class="col-xs-12">

            </div>



            <div class="col-lg-12">
                <table class="display dataTable no-footer" style="overflow-y:auto" id="gridMapping">
                    <tr>
                        <td>
                            @(Html
                            .Grid(Model.lstTravelExpense)
                            .Build(columns =>
                            {
                                columns.Add(c => c.EmployeeName).Titled("Employee Name");
                                columns.Add(c => c.RoleName).Titled("RoleName");
                                columns.Add(c => c.Tuv_Email_Id).Titled("Tuv Email Id");
                                columns.Add(c => c.MobileNo).Titled("Mobile No");
                                columns.Add(c => c.Designation).Titled("Designation");
                                columns.Add(c => c.BranchName).Titled("Branch Name");
                                columns.Add(c => c.EmpCategoray).Titled("Emp Categoray");
                                columns.Add(c => c.EmployeeCode).Titled("Employee Code");
                                columns.Add(c => c.SAPEmpCode).Titled("SAP Employee Code");
                                columns.Add(c => c.SubJobNo).Titled("Sub JobNo");
                                columns.Add(c => c.SAP_No).Titled("SAP No");
                                columns.Add(c => c.CountryName).Titled("Country Name");
                                columns.Add(c => c.Cost_Center).Titled("User Cost Center");
                                columns.Add(c => c.Date).Titled("Date");
                                columns.Add(c => c.City).Titled("City");
                                columns.Add(c => c.ExpenseType).Titled("Expense Type");
                                columns.Add(c => c.Amount).Titled("Amount");
                                columns.Add(c => c.Kilometer).Titled("Kilometer");
                                columns.Add(c => c.Currency).Titled("Currency");
                                columns.Add(c => c.ExchRate).Titled("ExchRate");
                                columns.Add(c => c.TotalAmount).Titled("Total Amount");
                                columns.Add(c => c.Description).Titled("Description");
                                columns.Add(c => c.VoucherGenerated).Titled("Voucher Generated");
                                columns.Add(c => c.VoucherNo).Titled("Voucher No");

                                columns.Add(c => c.IsSendForApproval).Titled("IsSend For Approval");
                                columns.Add(c => c.IsSendForApprovalAmount).Titled("Is Send For Approval Amount");
                                columns.Add(c => c.Type).Titled("Main Category");
                                columns.Add(c => c.subCategory).Titled("Sub Category");
                                columns.Add(c => c.ExpenseagainstGenertaed).Titled("Expense Against Generated SAP NO/User Costcenter");
                                columns.Add(c => c.ExpenseagainstGenertaed_No).Titled("Expense Against Generated SAP NO/User Costcenter No");
                                columns.Add(c => c.CreatedDate).Titled("Created Date");
                                columns.Add(c => c.ApprovedAmount).Titled("Approved Amount");
                                columns.Add(c => c.UIN).Titled("UIN");
                                columns.Add(c => c.Call_No).Titled("Call No");
                                columns.Add(c => c.IsActive).Titled("IsActive");

                            })
                            .Pageable(pager =>
                            {
                                //pager.PageSizes = new DictionaryInt32, String > { { 0, "All" }, { 2, "2" }, { 4, "4" } };
                                pager.ShowPageSizes = true;
                                pager.PagesToDisplay = 3;
                                pager.CurrentPage = 1;
                                pager.RowsPerPage = 2;
                            })
                            .UsingFilterMode(GridFilterMode.Row)
                            .Empty("No Data Found")
                            .Filterable()
                            .Sortable()
                            )
                        </td>
                    </tr>
                </table>
            </div>
        </div><!-- /.container-fluid -->
        <!--End of header-->
    </div>
  <!--End of main content 3-->
}




<script type="text/javascript">
    $(document).ready(function () {
        $("#btnSearch").click(function myfunction() {
            debugger;
            if (ValidateForm() == false) {
                return false;
            }
            else {
                $("#form1").submit()
            }
        });
    });

    function ValidateForm() {

        if ($("#FromD").val() == "") {
            alert('Select From Date!');
            return false;
        }
        if ($("#ToD").val() == "") {
            alert('Select To Date!');
            return false;
        }
        debugger;
        if ($("#FromD").val() > $("#ToD").val()) {
            alert("To Date selected is Greater than From Date  !!!");
            return false;
        }

        else {
            return true;

        }
    }
</script>

<script>
    var CustomTextFilter = (function (base) {
        MvcGridExtends(CustomTextFilter, base);

        function CustomTextFilter(column) {
            base.call(this, column);

            this.methods = ['contains'];
            column.grid.lang.custom = { contains: 'Contains' };
        }

        // Other extension points can be found at MvcGridFilter declaration

        return CustomTextFilter;
    })(MvcGridFilter);

    new MvcGrid(document.querySelector('.mvc-grid'), {
        filters: {
            'custom': CustomTextFilter
        }
    });
</script>

<script>
    [].forEach.call(document.getElementsByClassName('mvc-grid'), function (element) {
        new MvcGrid(element);
    });
</script>
