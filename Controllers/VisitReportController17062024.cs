using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;

using System.Data;
using System.Data.SqlClient;
using System.Configuration;
using TuvVision.Models;
using TuvVision.DataAccessLayer;
using System.IO;
using System.Text;
using OfficeOpenXml;
using SelectPdf;
using NonFactors.Mvc.Grid;
using PdfSharp.Drawing;
using PdfSharp.Pdf;
using PdfSharp.Pdf.IO;
using System.Net;

using System.Data;
using System.Data.SqlClient;
using System.Configuration;
using TuvVision.Models;
using TuvVision.DataAccessLayer;
using System.IO;
using System.Text;
using OfficeOpenXml;
using SelectPdf;
using NonFactors.Mvc.Grid;
using PdfSharp.Drawing;
using PdfSharp.Pdf;
using PdfSharp.Pdf.IO;
using System.Net;
using System.Globalization;
using Newtonsoft.Json;

namespace TuvVision.Controllers
{
    public class VisitReportController : Controller
    {

        //       DALInspectionVisitReport objDalVisitReport = new DALInspectionVisitReport();
        //       DALActivity ObjActivity = new DALActivity();
        //       InspectionvisitReportModel ObjModelVisitReport = new InspectionvisitReportModel();
        //       NonInspectionActivity ObjModel = new NonInspectionActivity();
        //       ReportModel RMData = new ReportModel();
        //       DALCallMaster ObjCalls = new DALCallMaster();
        //       List<NonInspectionActivity> lmd = new List<NonInspectionActivity>();
        //       DataSet ds = new DataSet();
        //List<InspectionvisitReportModel> lstAreasOfConcern = new List<InspectionvisitReportModel>();
        //       List<InspectionvisitReportModel> lstPA = new List<InspectionvisitReportModel>();
        DALInspectionVisitReport objDalVisitReport = new DALInspectionVisitReport();
        DALActivity ObjActivity = new DALActivity();
        InspectionvisitReportModel ObjModelVisitReport = new InspectionvisitReportModel();
        NonInspectionActivity ObjModel = new NonInspectionActivity();
        ReportModel RMData = new ReportModel();
        DALCallMaster ObjCalls = new DALCallMaster();
        List<InspectionvisitReportModel> lstAreasOfConcern = new List<InspectionvisitReportModel>();
        List<InspectionvisitReportModel> lstPA = new List<InspectionvisitReportModel>();
        DALSubJob ObjSubJob = new DALSubJob();
        List<InspectionvisitReportModel> lstAreasOfConcernOnPDF = new List<InspectionvisitReportModel>();

        #region  VisitReportForm

        // GET: VisitReport
        [HttpGet]
        public ActionResult VisitReportForm(int? PK_Call_ID,int? PK_RM_ID, string status, InspectionvisitReportModel abc)
        {

            //Session["PK_Call_ID"] = null;
            //PK_SubJob_Id = 1;
            // List<EnquiryMaster> lstEnquiryMast = new List<EnquiryMaster>();
            //var Data = objDalVisitReport.GetBranchList();
            //ViewBag.SubCatlist = new SelectList(Data, "Br_Id", "Branch_Name");

            Session["VisitReportNo"] = null;

            int? ids = PK_Call_ID;
            if (Session["PK_Call_ID"] != null)
            {
                #region

                PK_Call_ID = Convert.ToInt32(Session["PK_Call_ID"]);

                //                objDalVisitReport.UpdateStatus(PK_Call_ID, status);


                //ViewBag.SubCatlist = 0;

                if (PK_Call_ID != 0 && PK_Call_ID != null)
                {
                    DataSet DSJobMasterByQtId = new DataSet();
                    DataSet DSEditQutationTabledata = new DataSet();

                    DSJobMasterByQtId = objDalVisitReport.EditInspectionVisitReportByPKCallID(PK_Call_ID);
                    //DSJobMasterByQtId = objDalVisitReport.EditInspectionVisitReportByPKCallID1(PK_Call_ID,PK_RM_ID);

                    if (DSJobMasterByQtId.Tables[0].Rows.Count > 0)
                    {

                        ObjModelVisitReport.Branch = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Branch"]);
                        ObjModelVisitReport.Sap_And_Controle_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Sap_And_Controle_No"]);
                        ObjModelVisitReport.PK_IVR_ID = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["PK_IVR_ID"]);
                        ObjModelVisitReport.Project_Name_Location = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Project_Name_Location"]);
                        ObjModelVisitReport.Address_Of_Inspection = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Address_Of_Inspection"]);
                        ObjModelVisitReport.End_user_Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["End_user_Name"]);
                        ObjModelVisitReport.Vendor_Name_Location = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Vendor_Name_Location"]);
                        ObjModelVisitReport.PK_Call_ID = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["PK_Call_ID"]);
                        ObjModelVisitReport.Notification_Name_No_Date = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Notification_Name_No_Date"]);

                        ObjModelVisitReport.Date_Of_Inspection = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Date_Of_Inspection"]);
                        ObjModelVisitReport.Client_Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Client_Name"]);
                        ObjModelVisitReport.DEC_PMC_EPC_Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["DEC_PMC_EPC_Name"]);
                        ObjModelVisitReport.DEC_PMC_EPC_Assignment_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["DEC_PMC_EPC_Assignment_No"]);
                        ObjModelVisitReport.Po_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Po_No"]);
                        ObjModelVisitReport.Sub_Vendor_Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Sub_Vendor_Name"]);
                        ObjModelVisitReport.Po_No_SubVendor = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Po_No_SubVendor"]);

                        int kick = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Kick_Off_Pre_Inspection"]);
                        ObjModelVisitReport.Kick_Off_Pre_Inspection = Convert.ToBoolean(kick);

                        int Mi = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Material_identification"]);
                        ObjModelVisitReport.Material_identification = Convert.ToBoolean(Mi);

                        int Interim_Stages = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Interim_Stages"]);
                        ObjModelVisitReport.Interim_Stages = Convert.ToBoolean(Interim_Stages);

                        int Document_review = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Document_review"]);
                        ObjModelVisitReport.Document_review = Convert.ToBoolean(Document_review);

                        int Final_Inspection = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Final_Inspection"]);
                        ObjModelVisitReport.Final_Inspection = Convert.ToBoolean(Final_Inspection);

                        int Re_inspection = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Re_inspection"]);
                        ObjModelVisitReport.Re_inspection = Convert.ToBoolean(Re_inspection);

                        ObjModelVisitReport.Conclusion = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Conclusion"]);
                        ObjModelVisitReport.Pending_Activites = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Pending_Activites"]);
                        ObjModelVisitReport.Identification_Of_Inspected = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Identification_Of_Inspected"]);
                        ObjModelVisitReport.Identification_Of_Inspected_AfterSave = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Identification_Of_Inspected"]);

                        ObjModelVisitReport.Areas_Of_Concerns = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Areas_Of_Concerns"]);
                        ObjModelVisitReport.Non_Conformities_raised = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Non_Conformities_raised"]);
                        ObjModelVisitReport.Signatures = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Signatures"]);
                        ObjModelVisitReport.Type = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Type"]);
                        ObjModelVisitReport.Report_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Report_No"]);
                        ObjModelVisitReport.Call_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Call_No"]);

                        int Inspection_records = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Inspection_records"]);
                        ObjModelVisitReport.Inspection_records = Convert.ToBoolean(Inspection_records);

                        int Inspection_Photo = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Inspection_Photo"]);
                        ObjModelVisitReport.Inspection_Photo = Convert.ToBoolean(Inspection_Photo);

                        int Other_Specify = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Other_Specify"]);
                        ObjModelVisitReport.Other_Specify = Convert.ToBoolean(Other_Specify);

                        ObjModelVisitReport.SubJob_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["SubJob_No"]);
                        ObjModelVisitReport.PK_SubJob_Id = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["PK_SubJob_Id"]);


                        ObjModelVisitReport.Type = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Type"]);
                        ObjModelVisitReport.Br_Id = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Br_Id"]);
                        ObjModelVisitReport.SubType = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["JobType"]);
                        //ObjModelVisitReport.SubVendorPODate = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["SubVendorPODate"]);
                        ObjModelVisitReport.SubSubVendorDate_of_PO = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["SubvendorPODate1"]);
                        ObjModelVisitReport.CreatedDate = Convert.ToDateTime(DSJobMasterByQtId.Tables[0].Rows[0]["CreatedDate"]);
                        ObjModelVisitReport.chkARC = Convert.ToBoolean(DSJobMasterByQtId.Tables[0].Rows[0]["chkARC"]);
                        ObjModelVisitReport.ARCFirstPrint = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["ARCFirstPrint"]);
                        ObjModelVisitReport.IsCustomerSpecificReportNumber = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["IsCustomerSpecificReportNumber"]);
                        ObjModelVisitReport.CustomerSpecificReportNumber = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["CustomerSpecificReportNumber"]);
                        if (DSJobMasterByQtId.Tables[1].Rows.Count > 0)
                        {
                            ObjModelVisitReport.IVRCount = Convert.ToInt32(DSJobMasterByQtId.Tables[1].Rows[0]["IVRCount"]);
                        }

                        #region Bind Activity 23 july 

                        DataSet dtGateDate = new DataSet();
                        //string Date = "";
                        //string Dates;
                        dtGateDate = ObjActivity.GetDate(PK_Call_ID);  //if data is null Get dates from visit report
                        //if (dtGateDate.Tables[0].Rows.Count > 0)
                        //{
                        //    Date = dtGateDate.Tables[0].Rows[0]["Date_Of_Inspection"].ToString();

                        //}

                        string Date = "";
                        string Dates;
                        Date = ObjModelVisitReport.Date_Of_Inspection;
                        Dates = Date.Trim().TrimStart(','); // to remove first comma

                        string[] ArrDates = Dates.Split(',');

                        foreach (var dr in ArrDates) // loop for adding add from dataset to list<modeldata>  
                        {
                            lmd.Add(new NonInspectionActivity
                            {
                                // DateSE = dr,
                                DateSE = dr.Replace(" ", ""),
                                //Vendor_Name = dtGateDate.Tables[0].Rows[0]["Vendor_Name_Location"].ToString(),
                                //EstimatedTime = dtGateDate.Tables[0].Rows[0]["EstimatedHours"].ToString(),
                                Description = dtGateDate.Tables[0].Rows[0]["Vendor_Name_Location"].ToString(),
                                StartTime = Convert.ToDouble(dtGateDate.Tables[0].Rows[0]["EstimatedHours"]),
                            });
                        }

                        ViewData["Dates"] = ArrDates;
                        // ViewBag.Dates = ArrDates;
                        ViewBag.Dates = lmd;
                        ViewBag.DataEntryView = "Yes";


                        #endregion
                    }
                    else
                    {

                       


                        DSEditQutationTabledata = objDalVisitReport.GetCallDetails(PK_Call_ID);

                        ObjModelVisitReport.Vendor_Name_Location = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Vendor_Name"]);
                        ObjModelVisitReport.Po_No = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["PO_Number"]);
                        ObjModelVisitReport.Sub_Vendor_Name = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["SubVendorName"]);
                        ObjModelVisitReport.Po_No_SubVendor = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["SubVendorPoNo"]);
                        //ObjModelVisitReport.SubVendorPODate = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["SubVendorPODate"]);
                        //ObjModelVisitReport.SubSubVendorDate_of_PO = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["SubVendorPODate"]);
                        ObjModelVisitReport.Date_of_PO = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Date_of_Po"]);

                        //ObjModelVisitReport.Vendor_Name_Location = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Vendor_Name"]);
                        //ObjModelVisitReport.Po_No = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["SubVendorPONo"]);
                        //ObjModelVisitReport.Sub_Vendor_Name = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["SubVendorName"]);
                        //ObjModelVisitReport.Po_No_SubVendor = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Po_No_SSJob"]);


                        ObjModelVisitReport.Sap_And_Controle_No = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Job"]);
                        ObjModelVisitReport.Branch = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Executing_Branch"]);
                        ObjModelVisitReport.Date_Of_Inspection = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Actual_Visit_Date"]);
                        ObjModelVisitReport.Project_Name_Location = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Project_Name"]);
                        ObjModelVisitReport.Address_Of_Inspection = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Job_Location"]);
                        ObjModelVisitReport.End_user_Name = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["End_Customer"]);
                        ObjModelVisitReport.SubJob_No = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Sub_Job"]);
                        ObjModelVisitReport.PK_SubJob_Id = Convert.ToInt32(DSEditQutationTabledata.Tables[0].Rows[0]["PK_SubJob_Id"]);
                        ObjModelVisitReport.Client_Name = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Company_Name"]);
                        ObjModelVisitReport.PK_Call_ID = Convert.ToInt32(DSEditQutationTabledata.Tables[0].Rows[0]["PK_Call_ID"]);
                        ObjModelVisitReport.Br_Id = Convert.ToInt32(DSEditQutationTabledata.Tables[0].Rows[0]["Br_Id"]);
                        ObjModelVisitReport.DEC_PMC_EPC_Name = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["DECName"]);
                        ObjModelVisitReport.DEC_PMC_EPC_Assignment_No = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["DECNumber"]);
                        ObjModelVisitReport.Notification_Name_No_Date = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["source"]);
                        ObjModelVisitReport.SubType = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["JobType"]);
                        ObjModelVisitReport.chkARC = Convert.ToBoolean(DSEditQutationTabledata.Tables[0].Rows[0]["chkARC"]);
                        if (DSEditQutationTabledata.Tables[2].Rows.Count > 0)
                        {
                            ObjModelVisitReport.IVRCount = Convert.ToInt32(DSEditQutationTabledata.Tables[2].Rows[0]["IVRCount"]);
                        }
                        ObjModelVisitReport.CallIDs = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["CallIDs"]);
                        #region Bind Activity 23 july 

                        DataSet dtGateDate = new DataSet();
                        //string Date = "";
                        //string Dates;
                        dtGateDate = ObjActivity.GetDate(PK_Call_ID);  //if data is null Get dates from visit report
                        //if (dtGateDate.Tables[0].Rows.Count > 0)
                        //{
                        //    Date = dtGateDate.Tables[0].Rows[0]["Date_Of_Inspection"].ToString();

                        //}

                        string Date = "";
                        string Dates;
                        Date = ObjModelVisitReport.Date_Of_Inspection;
                        Dates = Date.Trim().TrimStart(','); // to remove first comma
                        string strCallID = "";
                        string strCallIDs;
                        strCallID = ObjModelVisitReport.Date_Of_Inspection;
                        strCallIDs = strCallID.Trim().TrimStart(','); // to remove first comma

                        string[] ArrDates = Dates.Split(',');
                        string[] ArrCallIDs = strCallIDs.Split(',');

                        //foreach (var dr in ArrDates) // loop for adding add from dataset to list<modeldata>  
                        //{
                        //    lmd.Add(new NonInspectionActivity
                        //    {
                        //        DateSE = dr,
                        //        //Vendor_Name = dtGateDate.Tables[0].Rows[0]["Vendor_Name_Location"].ToString(),
                        //        //EstimatedTime = dtGateDate.Tables[0].Rows[0]["EstimatedHours"].ToString(),
                        //        CallId = ArrCallIDs[cnt].ToString(),
                        //        Description = dtGateDate.Tables[0].Rows[0]["Vendor_Name_Location"].ToString(),
                        //      //  StartTime = Convert.ToDouble(dtGateDate.Tables[0].Rows[0]["EstimatedHours"]),
                        //    });
                        //}

                        for (int cnt = 0; cnt < ArrDates.Count(); cnt++)
                        {
                            lmd.Add(new NonInspectionActivity
                            {
                                //DateSE = ArrDates[cnt].ToString(),
                                DateSE =ArrDates[cnt].ToString().Trim(),
                                CallId = ArrCallIDs[cnt].ToString(),
                                Description = dtGateDate.Tables[0].Rows[0]["Vendor_Name_Location"].ToString(),

                            });
                        }

                        ViewData["Dates"] = ArrDates;
                        // ViewBag.Dates = ArrDates;
                        ViewBag.Dates = lmd;
                        ViewBag.DataEntryView = "Yes";


                        #endregion


                        Session["PK_Call_ID"] = PK_Call_ID;
                        if (ids != 0 || ids != null)
                        {
                            var Data = objDalVisitReport.GetReportList(Convert.ToInt32(ids));
                            ViewBag.SubCatlist = new SelectList(Data, "ReportName", "ReportName");
                        }
                        else
                        {
                            var Data = objDalVisitReport.GetAllReportList();
                            ViewBag.SubCatlist = new SelectList(Data, "ReportName", "ReportName");
                        }

                    }
                    return View(ObjModelVisitReport);
                }
                else
                {
                    return RedirectToAction("CallsListByInspector", "CallsMaster");
                }
                #endregion
            }
            else
            {
                #region



                if (PK_Call_ID == null)
                {
                    PK_Call_ID = abc.PK_Call_ID;
                }

                if (status != null)
                {
                    //   objDalVisitReport.UpdateStatus(PK_Call_ID, status);
                }


                var Data = objDalVisitReport.GetAllReportList();
                ViewBag.SubCatlist = new SelectList(Data, "PK_CALL_ID", "ReportName");
                //ViewBag.SubCatlist = 0;

                if (PK_Call_ID != 0 && PK_Call_ID != null)
                {
                    DataSet DSJobMasterByQtId = new DataSet();
                    DataSet DSEditQutationTabledata = new DataSet();


                    DSJobMasterByQtId = objDalVisitReport.EditInspectionVisitReportByPKCallID(PK_Call_ID);
                    //DSJobMasterByQtId = objDalVisitReport.EditInspectionVisitReportByPKCallID1(PK_Call_ID,PK_RM_ID);

                    if (DSJobMasterByQtId.Tables[0].Rows.Count > 0)
                    {
                        //10 Aug
                        #region Get Activity Data  
                        ds = ObjActivity.GetData(Convert.ToInt32(PK_Call_ID)); // Get data from callid (tblnoninspectionActivity)

                        if (ds.Tables[0].Rows.Count != 0)
                        {
                            foreach (DataRow dr in ds.Tables[0].Rows) // loop for adding add from dataset to list<modeldata>  
                            {
                                lmd.Add(new NonInspectionActivity
                                {
                                    Id = Convert.ToInt32(dr["Id"]),
                                    ActivityType = Convert.ToString(dr["ActivityType"]),
                                    Location = Convert.ToString(dr["Location"]),
                                    DateSE = Convert.ToString(dr["DateSE"]),
                                    //EndDate = Convert.ToString(dr["enddate"]),
                                    //StartDate = Convert.ToString(dr["StartDate"]),
                                    //EndDate = Convert.ToString(dr["EndDate"]),
                                    ServiceCode = Convert.ToString(dr["ServiceCode"]),
                                    Description = Convert.ToString(dr["Description"]),
                                    StartTime = Convert.ToDouble(dr["StartTime"]),
                                    EndTime = Convert.ToDouble(dr["EndTime"]),
                                    Attachment = Convert.ToString(dr["Attachment"]),
                                    TravelTime = Convert.ToDouble(dr["TravelTime"])

                                });
                            }

                            ViewBag.Dates = lmd;
                        }
                        #endregion

                        //First Level
                        ObjModelVisitReport.Vendor_Name_Location = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Vendor_Name"]);
                        ObjModelVisitReport.Po_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["PO_Number"]);
                        ObjModelVisitReport.Date_of_PO = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Date_of_Po"]);
                        //Second Level
                        ObjModelVisitReport.Sub_Vendor_Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["SubVendorName"]);
                        ObjModelVisitReport.Po_No_SubVendor = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["SubVendorPoNo"]);
                        ObjModelVisitReport.SubSubVendorDate_of_PO = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["SubSubSubVendorPODate"]);
                        //Third Level
                        ObjModelVisitReport.SubSubSubVendorName = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["SubSubVendorName"]);
                        ObjModelVisitReport.SubSubSubPoNo = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["SubSubVendorPoNo"]);
                        ObjModelVisitReport.SubSubSubPoDate = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["SubSubVendorPoDate"]);




                        ObjModelVisitReport.ReportNoName = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["ReportNo"]);
                        Session["VisitReportNo"] = Convert.ToString(ObjModelVisitReport.ReportNoName);
                        ObjModelVisitReport.Branch = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Branch"]);
                        ObjModelVisitReport.Sap_And_Controle_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Sap_And_Controle_No"]);
                        ObjModelVisitReport.PK_IVR_ID = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["PK_IVR_ID"]);
                        ObjModelVisitReport.Project_Name_Location = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Project_Name_Location"]);
                        ObjModelVisitReport.Address_Of_Inspection = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Address_Of_Inspection"]);
                        ObjModelVisitReport.End_user_Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["End_user_Name"]);
                       // ObjModelVisitReport.Vendor_Name_Location = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Vendor_Name_Location"]);
                        ObjModelVisitReport.PK_Call_ID = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["PK_Call_ID"]);
                        ObjModelVisitReport.Notification_Name_No_Date = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Notification_Name_No_Date"]);

                        ObjModelVisitReport.Date_Of_Inspection = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Date_Of_Inspection"]);
                        ObjModelVisitReport.Client_Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Client_Name"]);
                        ObjModelVisitReport.DEC_PMC_EPC_Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["DEC_PMC_EPC_Name"]);
                        ObjModelVisitReport.DEC_PMC_EPC_Assignment_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["DEC_PMC_EPC_Assignment_No"]);
                        //ObjModelVisitReport.Po_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Po_No"]);
                        //ObjModelVisitReport.Sub_Vendor_Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Sub_Vendor_Name"]);
                        //ObjModelVisitReport.Po_No_SubVendor = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Po_No_SubVendor"]);

                        int kick = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Kick_Off_Pre_Inspection"]);
                        ObjModelVisitReport.Kick_Off_Pre_Inspection = Convert.ToBoolean(kick);

                        int Mi = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Material_identification"]);
                        ObjModelVisitReport.Material_identification = Convert.ToBoolean(Mi);

                        int Interim_Stages = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Interim_Stages"]);
                        ObjModelVisitReport.Interim_Stages = Convert.ToBoolean(Interim_Stages);

                        int Document_review = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Document_review"]);
                        ObjModelVisitReport.Document_review = Convert.ToBoolean(Document_review);

                        int Final_Inspection = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Final_Inspection"]);
                        ObjModelVisitReport.Final_Inspection = Convert.ToBoolean(Final_Inspection);

                        int Re_inspection = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Re_inspection"]);
                        ObjModelVisitReport.Re_inspection = Convert.ToBoolean(Re_inspection);

                        ObjModelVisitReport.Conclusion = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Conclusion"]);
                        ObjModelVisitReport.Pending_Activites = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Pending_Activites"]);
                        ObjModelVisitReport.Identification_Of_Inspected = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Identification_Of_Inspected"]);
                        ObjModelVisitReport.Identification_Of_Inspected_AfterSave = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Identification_Of_Inspected"]);
                        ObjModelVisitReport.Areas_Of_Concerns = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Areas_Of_Concerns"]);
                        ObjModelVisitReport.Non_Conformities_raised = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Non_Conformities_raised"]);
                        ObjModelVisitReport.Signatures = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Signatures"]);
                        ObjModelVisitReport.Type = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Type"]);
                        ObjModelVisitReport.Report_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Report_No"]);
                        ObjModelVisitReport.Call_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Call_No"]);

                        int Inspection_records = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Inspection_records"]);
                        ObjModelVisitReport.Inspection_records = Convert.ToBoolean(Inspection_records);

                        int Inspection_Photo = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Inspection_Photo"]);
                        ObjModelVisitReport.Inspection_Photo = Convert.ToBoolean(Inspection_Photo);

                        int Other_Specify = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Other_Specify"]);
                        ObjModelVisitReport.Other_Specify = Convert.ToBoolean(Other_Specify);

                        ObjModelVisitReport.SubJob_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["SubJob_No"]);
                        ObjModelVisitReport.PK_SubJob_Id = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["PK_SubJob_Id"]);


                        ObjModelVisitReport.Type = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Type"]);
                        ObjModelVisitReport.Br_Id = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Br_Id"]);
                        ObjModelVisitReport.ReviseReason = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["ReviseReason"]);
                        //ObjModelVisitReport.Date_of_PO = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Date_of_Po"]);
                        //ObjModelVisitReport.SubSubVendorDate_of_PO = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["SubvendorPODate1"]);
                        ObjModelVisitReport.SubType = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["JobType"]);
                        ObjModelVisitReport.CreatedDate = Convert.ToDateTime(DSJobMasterByQtId.Tables[0].Rows[0]["CreatedDate"]);

                        ObjModelVisitReport.chkARC = Convert.ToBoolean(DSJobMasterByQtId.Tables[0].Rows[0]["chkARC"]);
                        ObjModelVisitReport.ARCFirstPrint = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["ARCFirstPrint"]);

                        if (DSJobMasterByQtId.Tables[1].Rows.Count > 0)
                        {
                            ObjModelVisitReport.IVRCount = Convert.ToInt32(DSJobMasterByQtId.Tables[1].Rows[0]["IVRCount"]);
                        }
                        ObjModelVisitReport.ReportNoForPDF = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Report"]);
                        ObjModelVisitReport.ReviseReportNoForPDF = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["ReviseReportNoForPDF"]);
                        ObjModelVisitReport.CallIDs = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["CallIDs"]);
                        ObjModelVisitReport.ddlReviseReason = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["ddlReviseReason"]);
                        ObjModelVisitReport.IsCustomerSpecificReportNumber = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["IsCustomerSpecificReportNumber"]);
                        ObjModelVisitReport.CustomerSpecificReportNumber = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["CustomerSpecificReportNumber"]);

                    }
                    else
                    {
                        DSEditQutationTabledata = objDalVisitReport.GetCallDetails(PK_Call_ID);
                        if (DSEditQutationTabledata.Tables[0].Rows.Count > 0)
                        {

                            //First Level
                            ObjModelVisitReport.Vendor_Name_Location = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Vendor_Name"]);
                            ObjModelVisitReport.Po_No = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["PO_Number"]);
                            ObjModelVisitReport.Date_of_PO = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Date_of_Po"]);
                            //Second Level
                            ObjModelVisitReport.Sub_Vendor_Name = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["SubVendorName"]);
                            ObjModelVisitReport.Po_No_SubVendor = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["SubVendorPoNo"]);
                            ObjModelVisitReport.SubSubVendorDate_of_PO = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["SubSubSubVendorPODate"]);
                            //Third Level
                            ObjModelVisitReport.SubSubSubVendorName = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["SubSubVendorName"]);
                            ObjModelVisitReport.SubSubSubPoNo = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["SubSubVendorPoNo"]);
                            ObjModelVisitReport.SubSubSubPoDate = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["SubSubVendorPoDate"]);


                            //ObjModelVisitReport.Vendor_Name_Location = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Vendor_Name"]);
                            //ObjModelVisitReport.Po_No = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["PO_Number"]);
                            //ObjModelVisitReport.Sub_Vendor_Name = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["SubVendorName"]);
                            //ObjModelVisitReport.Po_No_SubVendor = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["SubVendorPoNo"]);
                            //ObjModelVisitReport.SubSubVendorDate_of_PO = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["SubVendorPODate"]);

                            ObjModelVisitReport.Sap_And_Controle_No = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Job"]);
                            ObjModelVisitReport.Branch = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Executing_Branch"]);
                            ObjModelVisitReport.Date_Of_Inspection = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Actual_Visit_Date"]);
                            ObjModelVisitReport.Project_Name_Location = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Project_Name"]);
                            ObjModelVisitReport.Address_Of_Inspection = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Job_Location"]);
                            ObjModelVisitReport.End_user_Name = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["End_Customer"]);
                            ObjModelVisitReport.SubJob_No = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Sub_Job"]);
                            ObjModelVisitReport.PK_SubJob_Id = Convert.ToInt32(DSEditQutationTabledata.Tables[0].Rows[0]["PK_SubJob_Id"]);
                            ObjModelVisitReport.Client_Name = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Company_Name"]);
                            ObjModelVisitReport.PK_Call_ID = Convert.ToInt32(DSEditQutationTabledata.Tables[0].Rows[0]["PK_Call_ID"]);
                            ObjModelVisitReport.Br_Id = Convert.ToInt32(DSEditQutationTabledata.Tables[0].Rows[0]["Br_Id"]);

                            ObjModelVisitReport.DEC_PMC_EPC_Name = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["DECName"]);
                            ObjModelVisitReport.DEC_PMC_EPC_Assignment_No = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["DECNumber"]);
                            ObjModelVisitReport.Notification_Name_No_Date = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["source"]);
                           // ObjModelVisitReport.Date_of_PO = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Date_of_Po"]);
                            ObjModelVisitReport.SubType = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["JobType"]);
							ObjModelVisitReport.chkARC = Convert.ToBoolean(DSEditQutationTabledata.Tables[0].Rows[0]["chkARC"]);
                            ObjModelVisitReport.CallIDs = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["CallIDs"]);

                        }

						if (DSEditQutationTabledata.Tables[2].Rows.Count > 0)
                        {
                            ObjModelVisitReport.IVRCount = Convert.ToInt32(DSEditQutationTabledata.Tables[2].Rows[0]["IVRCount"]);
                        }													 
                        #region Bind Activity 23 july 

                        DataSet dtGateDate = new DataSet();
                        //string Date = "";
                        //string Dates;
                        dtGateDate = ObjActivity.GetDate(PK_Call_ID);  //if data is null Get dates from visit report
                        //if (dtGateDate.Tables[0].Rows.Count > 0)
                        //{
                        //    Date = dtGateDate.Tables[0].Rows[0]["Date_Of_Inspection"].ToString();

                        //}

                        string Date = "";
                        string Dates;
                        Date = ObjModelVisitReport.Date_Of_Inspection;
                        Dates = Date.Trim().TrimStart(','); // to remove first comma

                        string strCallID = "";
                        string strCallIDs;
                        Date = ObjModelVisitReport.Date_Of_Inspection;
                        Dates = Date.Trim().TrimStart(','); // to remove first comma

                        strCallID = ObjModelVisitReport.CallIDs;
                        strCallIDs = strCallID.Trim().TrimStart(','); // to remove first comma

                        string[] ArrDates = Dates.Split(',');
                        string[] ArrCallIDs = strCallIDs.Split(',');

                        //foreach (var dr in ArrDates) // loop for adding add from dataset to list<modeldata>  
                        //{
                        //    lmd.Add(new NonInspectionActivity
                        //    {
                        //        DateSE = dr,
                        //        //Vendor_Name = dtGateDate.Tables[0].Rows[0]["Vendor_Name_Location"].ToString(),
                        //        //EstimatedTime = dtGateDate.Tables[0].Rows[0]["EstimatedHours"].ToString(),
                               
                        //        Description = dtGateDate.Tables[0].Rows[0]["Vendor_Name_Location"].ToString(),
                        //     //   StartTime = Convert.ToDouble(0),//Convert.ToDouble(dtGateDate.Tables[0].Rows[0]["EstimatedHours"]),
                        //    });
                        //}

                        for (int cnt = 0; cnt < ArrDates.Count(); cnt++)
                        {
                            lmd.Add(new NonInspectionActivity
                            {
                                DateSE = ArrDates[cnt].ToString(),
                                CallId = ArrCallIDs[cnt].ToString(),
                                Description = dtGateDate.Tables[0].Rows[0]["Vendor_Name_Location"].ToString(),

                            });
                        }

                        ViewData["Dates"] = ArrDates;
                        // ViewBag.Dates = ArrDates;
                        ViewBag.Dates = lmd;
                        ViewBag.DataEntryView = "Yes";


                        #endregion


                        //Session["PK_Call_ID"] = PK_Call_ID;
                        ObjModelVisitReport.PK_Call_ID = PK_Call_ID;
                    }
                    return View(ObjModelVisitReport);
                }
                else
                {
                    return RedirectToAction("CallsListByInspector", "CallsMaster");
                }
                #endregion
            }
        }

        //[HttpPost]
        [HttpPost, ValidateInput(false)]
        public ActionResult VisitReportForm(InspectionvisitReportModel IVR, HttpPostedFileBase File, HttpPostedFileBase FileUpload, ItemDescriptionModel IDM, HttpPostedFileBase FileUpload1, HttpPostedFileBase postedFile1, ReferenceDocumentsModel RD, InspectionActivitiesModel StW, DocumentRevieweModel DR, EquipmentDetailsModel ED, NonInspectionActivity R)
        {
            DataSet DSJobMasterByQtId = new DataSet();
            List<ItemDescriptionModel> itemDescriptionDashBoard = new List<ItemDescriptionModel>();
            int CallId = 0;

            string Result = string.Empty;
            try
            {
                if (IVR.ReportName != null)
                {
                    //IVR.ReportNoName = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["ReportNo"]);
                    DSJobMasterByQtId = objDalVisitReport.IVRByCallID(IVR.ReportName);
                    if (DSJobMasterByQtId.Tables[0].Rows.Count > 0)
                    {
                        CallId = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["PK_Call_ID"]);
                        IVR.ReportNoName = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["ReportNo"]);

                        #region General
                        int _min = 10000;
                        int _max = 99999;
                        Random _rdm = new Random();
                        int Rjno = _rdm.Next(_min, _max);
                        string ConfirmCode = Convert.ToString(Rjno);

                        int _mins = 100000;
                        int _maxs = 999999;
                        Random _rdms = new Random();
                        int Rjnos = _rdm.Next(_mins, _maxs);
                        string ConfirmSecondCode = Convert.ToString(Rjnos);

                        IVR.Report_No = Convert.ToString(ConfirmCode) + ConfirmSecondCode + "-IVR";

                        IVR.PK_Call_ID = Convert.ToInt32(Session["PK_Call_ID"]); //==============Code Added By Rahul
                        IVR.Status = "1";
                        IVR.Type = "IVR";
                        Result = objDalVisitReport.InsertUpdateConclousion(IVR);


                        #endregion


                        #region  item Description
                        DataTable ItemDescriptionDashBoard = new DataTable();

                        //List<ItemDescriptionModel> itemDescriptionDashBoard = new List<ItemDescriptionModel>();
                        ItemDescriptionDashBoard = objDalVisitReport.GetitemDescription(CallId);
                        if (ItemDescriptionDashBoard.Rows.Count > 0)
                        {

                            foreach (DataRow dr in ItemDescriptionDashBoard.Rows)
                            {

                                var ItemDescription = new ItemDescriptionModel
                                {
                                    PK_ItemD_Id = Convert.ToInt32(dr["PK_ItemD_Id"]),
                                    Po_Item_No = Convert.ToString(dr["Po_Item_No"]),
                                    ItemCode_Description = Convert.ToString(dr["ItemCode_Description"]),
                                    Po_Quantity = Convert.ToString(dr["Po_Quantity"]),
                                    Offered_Quantity = Convert.ToString(dr["Offered_Quantity"]),
                                    //PK_CALL_ID = Convert.ToInt32(dr["PK_Call_ID"]), //==============Code Added By Rahul
                                    PK_CALL_ID = Convert.ToInt32(Session["PK_Call_ID"]), //==============Code Added By Rahul
                                    Item_Code = Convert.ToString(dr["Item_Code"]),
                                    Accepted_Quantity = Convert.ToString(dr["Accepted_Quantity"]),
                                    Cumulative_Accepted_Qty = Convert.ToString(dr["Cumulative_Accepted_Qty"]),
                                    Unit = Convert.ToString(dr["Unit"]),

                                    Status = "1",
                                    Type = "IVR",
                                };
                                string r = objDalVisitReport.InsertItemDescription(ItemDescription);
                            }
                        }
                        #endregion


                        #region Reference Documents
                        DataTable RefranceDocumentsDashBoard = new DataTable();
                        RefranceDocumentsDashBoard = objDalVisitReport.GetReferenceDocuments(CallId);
                        if (RefranceDocumentsDashBoard.Rows.Count > 0)
                        {
                            foreach (DataRow dr in RefranceDocumentsDashBoard.Rows)
                            {
                                var ItemDescription = new ReferenceDocumentsModel
                                {
                                    Document_No = Convert.ToString(dr["Document_No"]),
                                    Document_Name = Convert.ToString(dr["Document_Name"]),
                                    Approval_Status = Convert.ToString(dr["Approval_Status"]),
                                    PK_RD_ID = Convert.ToInt32(dr["PK_RD_ID"]),
                                    VendorDocumentNumber = Convert.ToString(dr["VendorDocumentNumber"]),
                                    PK_CALL_ID = Convert.ToInt32(Session["PK_Call_ID"]), //==============Code Added By Rahul
                                    Type = "IVR",
                                    Status = "1"
                                };
                                Result = objDalVisitReport.InsertReferenceDocuments(ItemDescription);
                            }
                        }
                        #endregion


                        #region Inspection Activities
                        DataTable InspectionActivitesDashBoard = new DataTable();
                        InspectionActivitesDashBoard = objDalVisitReport.GetInspectionActivities(CallId);
                        if (InspectionActivitesDashBoard.Rows.Count > 0)
                        {
                            foreach (DataRow dr in InspectionActivitesDashBoard.Rows)
                            {
                                var InspectionActivities = new InspectionActivitiesModel
                                {

                                    Stages_Witnessed = Convert.ToString(dr["Stages_Witnessed"]),
                                    PK_IA_ID = Convert.ToInt32(dr["PK_IA_ID"]),
                                    PK_CALL_ID = Convert.ToInt32(Session["PK_Call_ID"]), //==============Code Added By Rahul
                                    Type = "IVR",
                                    Status = "1"
                                };
                                Result = objDalVisitReport.InsertInspectionActivities(InspectionActivities);

                            }
                        }
                        #endregion

                        #region Documents Review
                        DataTable DocumentsReviewBoard = new DataTable();
                        DocumentsReviewBoard = objDalVisitReport.GetDocumentRevieweModelByCall_Id(CallId);
                        if (DocumentsReviewBoard.Rows.Count > 0)
                        {
                            foreach (DataRow dr in DocumentsReviewBoard.Rows)
                            {
                                var InspectionActivities = new DocumentRevieweModel
                                {
                                    Description = Convert.ToString(dr["Description"]),
                                    PK_DR_ID = Convert.ToInt32(dr["PK_DR_ID"]),
                                    PK_CALL_ID = Convert.ToInt32(Session["PK_Call_ID"]), //==============Code Added By Rahul
                                    Type = "IVR",
                                    Status = "1",

                                };
                                Result = objDalVisitReport.InsertDocumentReviewe(InspectionActivities);

                            }
                        }
                        #endregion

                        #region Equipments Details
                        DataTable EquipmentDetailsBoard = new DataTable();
                        EquipmentDetailsBoard = objDalVisitReport.GetEquipmentDetailsModelByCall_Id(CallId);
                        if (EquipmentDetailsBoard.Rows.Count > 0)
                        {
                            foreach (DataRow dr in EquipmentDetailsBoard.Rows)
                            {
                                var InspectionActivities = new EquipmentDetailsModel
                                {

                                    Name_Of_Equipments = Convert.ToString(dr["Name_Of_Equipments"]),
                                    Range = Convert.ToString(dr["Range"]),
                                    Id = Convert.ToString(dr["Id"]),
                                    CalibrationValid_Till_date = Convert.ToString(dr["CalibrationValid_Till_date"]),
                                    Certification_No_Date = Convert.ToString(dr["Certification_No_Date"]),
                                    PK_DOE_Id = Convert.ToInt32(dr["PK_DOE_Id"]),
                                    PK_CALL_ID = Convert.ToInt32(Session["PK_Call_ID"]), //==============Code Added By Rahul
                                    Type = "IVR",
                                    Status = "1",


                                };
                                Result = objDalVisitReport.InsertEquipmentDetails(InspectionActivities);

                            }
                        }
                        #endregion


                    }
                }
                else
                {
                    #region Old Code
                    if (IVR.PK_IVR_ID == 0)
                    {
                        #region Check valid Activity
                        if (R.Activity != null)
                        {
                            foreach (var item in R.Activity)
                            {
                                // int CurrentTotal = 
                                DateTime StDt = Convert.ToDateTime(item.StartDate);
                                R.DateSE = StDt.ToString("dd/MM/yyyy");
                                R.StartTime = item.StartTime;
                                R.EndTime = item.EndTime;
                                R.TravelTime = item.TravelTime;
								R.PK_Call_ID = R.PK_Call_ID;
                                R.CallId = Convert.ToString(item.CallId);
                                //10 Aug
                                Double CurrentTotal = Convert.ToDouble(R.StartTime) + Convert.ToDouble(R.EndTime) + Convert.ToDouble(R.TravelTime);
                                #region Chk Previous Entry
                                DataTable DTValidateTT = new DataTable();
                                {
                                    DTValidateTT = objDalVisitReport.CheckPreviousActivityWithCallId(R.DateSE, R.PK_Call_ID);
                                }
                                if (R.PK_Call_ID >= 0)
                                {
                                    DTValidateTT = objDalVisitReport.CheckPreviousActivityWithCallId(R.DateSE, R.PK_Call_ID);
                                }
                                else
                                {
                                    DTValidateTT = objDalVisitReport.CheckPreviousActivity(R.DateSE);
                                }				
                                DTValidateTT = objDalVisitReport.CheckPreviousActivity(R.DateSE);

                                DataTable DTChkLeave = new DataTable();
                                DTChkLeave = objDalVisitReport.CheckIfLeavePresent(R.DateSE);

                                if (DTChkLeave.Rows.Count > 0)
                                {
                                    TempData["ErrLeave"] = "Leave has been added for " + StDt.ToString("dd/MM/yyyy");
                                    return RedirectToAction("VisitReportForm", "VisitReport", IVR.PK_Call_ID);
                                }
                                else
                                {
                                    if (DTValidateTT.Rows.Count > 0)
                                    {
                                        Double PriviousTotal = Convert.ToDouble(DTValidateTT.Rows[0]["StartTime"]) + Convert.ToDouble(DTValidateTT.Rows[0]["EndTime"]) + Convert.ToDouble(DTValidateTT.Rows[0]["TravelTime"]);

                                        Double GrandTotal = PriviousTotal + CurrentTotal;

                                      
                                        if (GrandTotal > 24)
                                        {
                                            TempData["ErrAll24"] = "Exceeded limit of 24 hours for the day " + StDt.ToString("dd/MM/yyyy");
                                            return RedirectToAction("VisitReportForm", "VisitReport", IVR.PK_Call_ID);
                                        }
                                    }
                                    else if (CurrentTotal > 24)
                                    {
                                        TempData["ErrCurrent24"] = "Exceeded limit of 24 hours for the day " + StDt.ToString("dd/MM/yyyy");
                                        return RedirectToAction("VisitReportForm", "VisitReport", IVR.PK_Call_ID);
                                    }
                                    else
                                    {

                                    }
                                }
                                
                                #endregion
                            }
                        }


                        #endregion



                        #region Save Activity 
                        if (R.Activity != null)
                        {
                            foreach (var item in R.Activity)
                            {
                                int total = Convert.ToInt32(item.StartTime);
                                R.TotalTime = total;
                                DateTime StDt = Convert.ToDateTime(item.StartDate);
                                R.DateSE = StDt.ToString("dd/MM/yyyy");
                                R.StartTime = item.StartTime;
                                R.EndTime = item.EndTime;
                                R.TravelTime = item.TravelTime;
                                R.Description = item.Description;
                                R.PK_Call_ID = R.PK_Call_ID;
                                R.CallId = Convert.ToString(item.CallId);
                                R.PK_SubJob_Id = Convert.ToString(IVR.PK_SubJob_Id);
                                R.Sub_Job = IVR.SubJob_No;

                                Result = ObjActivity.InsertUpdateActivity(R);

                                if (Convert.ToInt16(Result) > 0)
                                {
                                    //ModelState.Clear();
                                    TempData["message"] = "Record Added Successfully...";
                                }
                                else
                                {
                                    TempData["message"] = "Something went Wrong! Please try Again";
                                }
                            }
                        }



                        #endregion

                        #region File Upload Code 


                        HttpPostedFileBase Imagesection;
                        if (!string.IsNullOrEmpty(Convert.ToString(Request.Files["img_Banner"])))
                        {
                            Imagesection = Request.Files["img_Banner"];
                            if (Imagesection != null && Imagesection.FileName != "")
                            {
                                IVR.Signatures = CommonControl.FileUpload("Content/JobDocument/", Imagesection);
                            }
                            else
                            {
                                if (Imagesection.FileName != "")
                                {
                                    IVR.Signatures = "NoImage.gif";
                                }
                            }
                        }


                        #endregion
                        int _min = 10000;
                        int _max = 99999;
                        Random _rdm = new Random();
                        int Rjno = _rdm.Next(_min, _max);
                        string ConfirmCode = Convert.ToString(Rjno);

                        int _mins = 100000;
                        int _maxs = 999999;
                        Random _rdms = new Random();
                        int Rjnos = _rdm.Next(_mins, _maxs);
                        string ConfirmSecondCode = Convert.ToString(Rjnos);
                        if (Session["PK_Call_ID"] != null)
                        {
                            IVR.PK_Call_ID = Convert.ToInt32(Session["PK_Call_ID"]); //==============Code Added By Rahul

                            DSJobMasterByQtId = objDalVisitReport.EditInspectionVisitReportByPKCallID(IVR.PK_Call_ID);
                            if (DSJobMasterByQtId.Tables[0].Rows.Count > 0)
                            {
                                ObjModelVisitReport.ReportNoName = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["ReportNo"]);
                                ObjModelVisitReport.SubType = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["JobType"]);
                            }

                        }
                        //IVR.PK_Call_ID = Convert.ToInt32(Session["PK_Call_ID"]); //==============Code Added By Rahul
                        IVR.Report_No = Convert.ToString(ConfirmCode) + ConfirmSecondCode + "-IVR";
                        IVR.Status = "1";
                        IVR.Type = "IVR";



                        Result = objDalVisitReport.InsertUpdateInspectionvisit(IVR);
                        Session["PK_Call_ID"] = null;

                        if (Result != "" && Result != null)
                        {

                            DataTable ReportDashBoard = new DataTable();
                            DataSet UpdateReport = new DataSet();
                            DataSet dtSrNo = new DataSet();
                            string SrNo = "";
                            int intSrNo = 0;
                            ReportModel RM = new ReportModel();
                            int count = 0;
                            //TempData["InsertCompany"] = Result;
                            //objDalVisitReport.UpdateStatus(IVR.PK_Call_ID, "Closed");
                            //return RedirectToAction("UpdateReportsRedirectGeneralTab", new { PK_Call_ID = IVR.PK_Call_ID });

                            #region Insert into Report Master
                            int PK_CALL_ID = Convert.ToInt32(IVR.PK_Call_ID);
                            #region report Count
                            UpdateReport = objDalVisitReport.GetReportByLastId(PK_CALL_ID);
                            if (UpdateReport.Tables[0].Rows.Count > 0)
                            {
                                RM.PK_RM_ID = Convert.ToInt32(UpdateReport.Tables[0].Rows[0]["PK_RM_ID"]);
                                RM.Report = Convert.ToString(UpdateReport.Tables[0].Rows[0]["Report"]);
                                //RM.ImageReport = Convert.ToString(UpdateReport.Tables[0].Rows[0]["ImageReport"]);
                            }

                            #region report Count
                            ReportDashBoard = objDalVisitReport.GetReportByCall_Id(PK_CALL_ID);
                            if (ReportDashBoard.Rows.Count > 0)
                            {
                                int counts = ReportDashBoard.Rows.Count;
                                count = counts - 1;
                            }
                            string countNo = Convert.ToString(count);
                            #endregion
                            #endregion





                            #region Generate no
                            if (RM.Report == null)
                            {

                                dtSrNo = objDalVisitReport.GetSrNo(IVR.SubJob_No);
                                if (dtSrNo.Tables[0].Rows.Count > 0)
                                {
                                    SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["SrNo"]);
                                    intSrNo = Convert.ToInt32(SrNo) + 1;
                                }
                                else
                                {
                                    intSrNo = 1;
                                }
                                //RM.ReportNo = "IVR-" + ObjModelVisitReport.SubJob_No + "-" + SrNo + "-Rev." + countNo;
                                RM.ReportNo = "IVR-" + IVR.SubJob_No + "-" + intSrNo + "-Rev." + countNo;


                            }
                            else
                            {
                                //dtSrNo = objDalVisitReport.GetReportNo(RM.Report);
                                dtSrNo = objDalVisitReport.GetReportNo(Convert.ToString(RM.PK_RM_ID));
                                if (dtSrNo.Tables[0].Rows.Count > 0)
                                {
                                    SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["ReportNo"]);
                                    RM.ReportNo = SrNo;
                                }


                            }
                            #endregion



                            string[] datafile = Directory.GetFiles(Server.MapPath("~/Content/" + IVR.Call_No));
                            dtSrNo = objDalVisitReport.GetSrNo(IVR.SubJob_No);
                            if (dtSrNo.Tables[0].Rows.Count > 0)
                            {
                                SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["SrNo"]);

                            }

                            // string finalReportName = "IVR-" + ObjModelVisitReport.SubJob_No.Replace('/', '_') + "-" + SrNo + "-Rev." + countNo.ToString() + ".pdf";
                            //string finalReportName = RM.ReportNo + ".pdf";
                            string finalReportName = RM.ReportNo.Replace('/', '_') + ".pdf"; //23 Feb 2022


                            string ReportName = RM.Report;
                            string ReportNames = "";
                            if (RM.PK_RM_ID != 0)
                            {

                                RM.Type = "IVR";
                                RM.Status = "1";
                                RM.ImageReport = ReportNames;
                                RM.Report = finalReportName;
                                RM.ReportName = ReportName;
                                RM.PK_CALL_ID = PK_CALL_ID;
                                RM.SubJob_No = IVR.SubJob_No;
                                RM.PK_SubJob_Id = IVR.PK_SubJob_Id;
                                RM.ProjectName = IVR.End_user_Name;
                                RM.Po_No = IVR.Po_No;
                                RM.Report_No = IVR.Report_No;
                                Result = objDalVisitReport.InsertUpdateReport(RM);
                                if (Result != "" && Result != null)
                                {
                                    TempData["InsertCompany"] = Result;
                                }
                            }
                            else
                            {
                                RM.Type = "IVR";
                                RM.Status = "1";
                                RM.ImageReport = ReportNames;
                                RM.Report = finalReportName;
                                RM.ReportName = ReportName;
                                RM.PK_CALL_ID = PK_CALL_ID;
                                RM.SubJob_No = IVR.SubJob_No;
                                RM.PK_SubJob_Id = IVR.PK_SubJob_Id;
                                RM.ProjectName = IVR.End_user_Name;
                                RM.Po_No = IVR.Po_No;
                                RM.Report_No = IVR.Report_No;

                                Result = objDalVisitReport.InsertUpdateReport(RM);

                                if (Result != "" && Result != null)
                                {
                                    TempData["InsertCompany"] = Result;
                                }
                            }
                            RMData.PK_CALL_ID = IVR.PK_Call_ID;
                            return RedirectToAction("VisitReportForm", RMData);
                          //  return RedirectToAction("UpdateReportsRedirectGeneralTab", new { PK_Call_ID = IVR.PK_Call_ID });
                            #endregion



                            //return RedirectToAction("UpdateReports", new { PK_Call_ID = IVR.PK_Call_ID });

                            // return RedirectToAction("VisitReportForm", new { PK_Call_ID = IVR.PK_Call_ID });    //24-Feb-2020
                        }

                    }
                    else
                    {
                        #region File Upload Code 


                        HttpPostedFileBase Imagesection;
                        if (!string.IsNullOrEmpty(Convert.ToString(Request.Files["img_Banner"])))
                        {
                            Imagesection = Request.Files["img_Banner"];
                            if (Imagesection != null && Imagesection.FileName != "")
                            {
                                IVR.Signatures = CommonControl.FileUpload("Content/JobDocument/", Imagesection);
                            }
                            else
                            {
                                if (Imagesection.FileName != "")
                                {
                                    IVR.Signatures = "NoImage.gif";
                                }
                            }
                        }


                        #endregion


                        
                         #region Check valid Activity
                        if (R.Activity != null)
                        {
                           foreach (var item in R.Activity)
                           {
                               DateTime StDt = Convert.ToDateTime(item.StartDate);
                               R.DateSE = StDt.ToString("dd/MM/yyyy");
                               R.StartTime = item.StartTime;
                               R.EndTime = item.EndTime;
                               R.TravelTime = item.TravelTime;
                               R.Id = item.Id;

                               Double CurrentTotal = Convert.ToDouble(R.StartTime) + Convert.ToDouble(R.EndTime) + Convert.ToDouble(R.TravelTime);
                               #region Chk Previous Entry
                               DataTable DTValidateTT = new DataTable();
                               DTValidateTT = objDalVisitReport.CheckPreviousActivity(R.DateSE);

                               DataTable DTChkLeave = new DataTable();
                               DTChkLeave = objDalVisitReport.CheckIfLeavePresent(R.DateSE);

                               if (DTChkLeave.Rows.Count > 0)
                               {
                                   TempData["ErrLeave"] = "Leave is added for the day" + StDt.ToString("dd/MM/yyyy");
                                   return RedirectToAction("VisitReportForm", "VisitReport", new { PK_Call_ID = IVR.PK_Call_ID });
                               }
                        ////else
                        ////{
                        ////    if (R.Id > 0)
                        ////    {
                        ////       if (CurrentTotal > 24)
                        ////       {
                        ////           TempData["ErrCurrent24"] = "You have excided 24 hrs for the day of " + StDt.ToString("dd/MM/yyyy");
                        ////           return RedirectToAction("VisitReportForm", "VisitReport", new { PK_Call_ID = IVR.PK_Call_ID });
                        ////       }
                        ////       else
                        ////       {

                        ////       }

                        ////    }
                        ////    else
                        ////    {
                        ////        if (DTValidateTT.Rows.Count > 0)
                        ////        {
                        ////            Double PriviousTotal = Convert.ToDouble(DTValidateTT.Rows[0]["StartTime"]) + Convert.ToDouble(DTValidateTT.Rows[0]["EndTime"]) + Convert.ToDouble(DTValidateTT.Rows[0]["TravelTime"]);
                        ////            Double GrandTotal = PriviousTotal + CurrentTotal;
                        ////            if (GrandTotal > 24)
                        ////            {
                        ////                TempData["ErrAll24"] = "You have excided 24 hrs for the day of " + StDt.ToString("dd/MM/yyyy");
                        ////                return RedirectToAction("VisitReportForm", "VisitReport", new { PK_Call_ID = IVR.PK_Call_ID });
                        ////            }
                        ////        }
                        ////        else if (CurrentTotal > 24)
                        ////        {
                        ////            TempData["ErrCurrent24"] = "You have excided 24 hrs for the day of " + StDt.ToString("dd/MM/yyyy");
                        ////            return RedirectToAction("VisitReportForm", "VisitReport", new { PK_Call_ID = IVR.PK_Call_ID });
                        ////        }
                        ////        else
                        ////        {

                        ////        }
                        ////    }
                        ////}
                       #endregion
                           }
                       }


                        #endregion

                        #region Update Activity 
                        if (R.Activity != null)
                        {
                            foreach (var item in R.Activity)
                            {
                                int total = Convert.ToInt32(item.StartTime);
                                R.TotalTime = total;
                                DateTime StDt = Convert.ToDateTime(item.StartDate);
                                R.DateSE = StDt.ToString("dd/MM/yyyy");
                                R.StartTime = item.StartTime;
                                R.EndTime = item.EndTime;
                                R.TravelTime = item.TravelTime;
                                R.Description = item.Description;
                                R.PK_Call_ID = R.PK_Call_ID;
                                R.Id = item.Id;
                                Result = ObjActivity.InsertUpdateActivity(R);

                                if (Convert.ToInt16(Result) > 0)
                                {
                                    //ModelState.Clear();
                                    TempData["message"] = "Record Added Successfully...";
                                }
                                else
                                {
                                    TempData["message"] = "Something went Wrong! Please try Again";
                                }
                            }
                        }



                        #endregion

                        int _min = 10000;
                        int _max = 99999;
                        Random _rdm = new Random();
                        int Rjno = _rdm.Next(_min, _max);
                        string ConfirmCode = Convert.ToString(Rjno);

                        int _mins = 100000;
                        int _maxs = 999999;
                        Random _rdms = new Random();
                        int Rjnos = _rdm.Next(_mins, _maxs);
                        string ConfirmSecondCode = Convert.ToString(Rjnos);
                        if (Session["PK_Call_ID"] != null)
                        {
                            IVR.PK_Call_ID = Convert.ToInt32(Session["PK_Call_ID"]); //==============Code Added By Rahul


                        }

                        DSJobMasterByQtId = objDalVisitReport.EditInspectionVisitReportByPKCallID(IVR.PK_Call_ID);
                        IVR.ReportNoName = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["ReportNo"]);
                        IVR.Report_No = Convert.ToString(ConfirmCode) + ConfirmSecondCode + "-IVR";
                        IVR.Status = "1";
                        IVR.Type = "IVR";
                        IVR.SubType = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["JobType"]);
                        IVR.IsCustomerSpecificReportNumber = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["IsCustomerSpecificReportNumber"]);
                        //IVR.CustomerSpecificReportNumber = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["CustomerSpecificReportNumber"]);
                        IVR.CustomerSpecificReportNumber = IVR.CustomerSpecificReportNumber;//Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["CustomerSpecificReportNumber"]);
                        #region  Excel Upload code
                        Random rnd = new Random();
                        int myRandomNo = rnd.Next(10000000, 99999999);
                        string strmyRandomNo = Convert.ToString(myRandomNo);


                        HttpPostedFileBase files = FileUpload1;

                        if(FileUpload1!=null)
                        {

                        
                        if (/*files.ContentLength > 0*/  files != null && !string.IsNullOrEmpty(files.FileName) || files.FileName.Contains(".xlsx") && files.FileName.Contains(".xlsm"))
                        {
                            GC.Collect();
                            GC.WaitForPendingFinalizers();
                            //string Result = string.Empty;
                            string filePath = string.Empty;
                            // HttpPostedFileBase files = FileUpload;
                            string fileName = files.FileName;
                            string fileContentType = files.ContentType;
                            byte[] fileBytes = new byte[files.ContentLength];
                            var data1 = files.InputStream.Read(fileBytes, 0, Convert.ToInt32(files.ContentLength));
                            var package = new ExcelPackage(files.InputStream);  //===========Go to Manage Nuget in Install ExcellPackge 

                            #region save file to dir
                            //string path = Server.MapPath("~/Content/JobDocument/");
                            string path = Server.MapPath("~/IVRIRNExcel/");
                            if (!Directory.Exists(path))
                            {
                                Directory.CreateDirectory(path);
                            }


                            filePath = path + Path.GetFileName(strmyRandomNo + FileUpload1.FileName);



                            if (System.IO.File.Exists(filePath))
                            {
                                System.IO.File.Delete(filePath);


                            }

                            string extension = Path.GetExtension(strmyRandomNo + FileUpload1.FileName);
                            FileUpload1.SaveAs(filePath);


                            filePath = path + Path.GetFileName(strmyRandomNo + FileUpload1.FileName);
                            #endregion





                            Microsoft.Office.Interop.Excel.Application xlApp = new Microsoft.Office.Interop.Excel.Application();
                            Microsoft.Office.Interop.Excel.Workbook excelBook = xlApp.Workbooks.Open(filePath);;//xlApp.Workbooks.Open(filePath);
                            String[] excelSheets = new String[excelBook.Worksheets.Count];
                           // var Reader = new StreamReader(File.Pa)
                             
                            int i = 0;
                            foreach (Microsoft.Office.Interop.Excel.Worksheet wSheet in excelBook.Worksheets)
                            {
                                excelSheets[i] = wSheet.Name;
                                int RowsCount = wSheet.UsedRange.Rows.Count;// - 1;
                                if (excelSheets[i] == "General ")
                                {

                                }
                                else if (excelSheets[i] == "Item Description")
                                {
                                    for (int j = 2; j <= RowsCount; j++)
                                    {
                                        //Convert.ToString(workSheet.Cells[rowIterator, 1].Value);
                                        IDM.Po_Item_No = Convert.ToString(((Microsoft.Office.Interop.Excel.Range)wSheet.Cells[j, 1]).Value);
                                        if (IDM.Po_Item_No != null)
                                        {
                                            IDM.Item_Code = Convert.ToString(((Microsoft.Office.Interop.Excel.Range)wSheet.Cells[j, 2]).Value);
                                            IDM.ItemCode_Description = Convert.ToString(((Microsoft.Office.Interop.Excel.Range)wSheet.Cells[j, 3]).Value);
                                            String Unit = Convert.ToString(((Microsoft.Office.Interop.Excel.Range)wSheet.Cells[j, 4]).Value);
                                            if (Unit == "number") { IDM.Unit = "1"; }
                                            else if (Unit == "meter") { IDM.Unit = "2"; }
                                            else if (Unit == "km") { IDM.Unit = "3"; }
                                            else if (Unit == "meter (number)") { IDM.Unit = "4"; }
                                            else if (Unit == "km (number)") { IDM.Unit = "5"; }
                                            else if (Unit == "each") { IDM.Unit = "6"; }
                                            else if (Unit == "Piece") { IDM.Unit = "7"; }
                                            else if (Unit == "Test sample") { IDM.Unit = "8"; }
                                            else if (Unit == "AU - All Unit") { IDM.Unit = "9"; }
                                            else if (Unit == "lot") { IDM.Unit = "10"; }
                                            else if (Unit == "Set") { IDM.Unit = "11"; }
                                            else if (Unit == "Running Meter") { IDM.Unit = "12"; }
                                            else if (Unit == "kg") { IDM.Unit = "13"; }
                                            else if (Unit == "metric ton (tonne)") { IDM.Unit = "14"; }
                                            else if (Unit == "ton") { IDM.Unit = "15"; }
                                            else if (Unit == "cubic millimetre") { IDM.Unit = "16"; }
                                            else if (Unit == "cubic centimeter") { IDM.Unit = "17"; }
                                            else if (Unit == "cubic meter") { IDM.Unit = "18"; }
                                            else if (Unit == "cubic inch") { IDM.Unit = "19"; }
                                            else if (Unit == "cubic foot") { IDM.Unit = "20"; }
                                            else if (Unit == "mm") { IDM.Unit = "21"; }
                                            else if (Unit == "cm") { IDM.Unit = "22"; }
                                            else if (Unit == "in") { IDM.Unit = "23"; }
                                            else if (Unit == "foot") { IDM.Unit = "24"; }
                                            else if (Unit == "mile") { IDM.Unit = "25"; }
                                            else if (Unit == "yard") { IDM.Unit = "26"; }
                                            else if (Unit == "liter") { IDM.Unit = "27"; }
                                            else if (Unit == "kl") { IDM.Unit = "28"; }
                                            else if (Unit == "cl") { IDM.Unit = "29"; }
                                            else if (Unit == "ml") { IDM.Unit = "30"; }
                                            else if (Unit == "g") { IDM.Unit = "31"; }
                                            else if (Unit == "lb") { IDM.Unit = "32"; }
                                            else if (Unit == "oz") { IDM.Unit = "33"; }
                                            else if (Unit == "Sq. mm") { IDM.Unit = "34"; }
                                            else if (Unit == "Sq. cm") { IDM.Unit = "35"; }
                                            else if (Unit == "Sq. meter") { IDM.Unit = "36"; }
                                            else if (Unit == "Sq. in") { IDM.Unit = "37"; }
                                            else if (Unit == "Sq. foot") { IDM.Unit = "38"; }
                                            else
                                            {
                                                IDM.Unit = "";

                                            }

                                            IDM.Po_Quantity = Convert.ToString(((Microsoft.Office.Interop.Excel.Range)wSheet.Cells[j, 5]).Value);
                                            IDM.Offered_Quantity = Convert.ToString(((Microsoft.Office.Interop.Excel.Range)wSheet.Cells[j, 6]).Value);
                                            IDM.Accepted_Quantity = Convert.ToString(((Microsoft.Office.Interop.Excel.Range)wSheet.Cells[j, 7]).Value);
                                            IDM.Status = "1";
                                            IDM.Type = "IVR";
                                            IDM.PK_CALL_ID = IVR.PK_Call_ID;
                                            Result = objDalVisitReport.InsertUpdateItemDescription(IDM);
                                        }

                                    }
                                }
                                else if (excelSheets[i] == "Reference Documents")
                                {
                                    for (int j = 2; j <= RowsCount; j++)
                                    {
                                        string SrNo = Convert.ToString(((Microsoft.Office.Interop.Excel.Range)wSheet.Cells[j, 1]).Value);
                                        if (SrNo != null)
                                        {
                                            string DocName = Convert.ToString(((Microsoft.Office.Interop.Excel.Range)wSheet.Cells[j, 2]).Value);
                                            if (DocName == "Others (Specify)")
                                            {
                                                RD.Document_Name = "Others(Specify)";
                                            }
                                            else
                                            {
                                                RD.Document_Name = DocName;
                                            }
                                            RD.Document_No = Convert.ToString(((Microsoft.Office.Interop.Excel.Range)wSheet.Cells[j, 3]).Value);
                                            RD.VendorDocumentNumber = Convert.ToString(((Microsoft.Office.Interop.Excel.Range)wSheet.Cells[j, 4]).Value);
                                            RD.Approval_Status = Convert.ToString(((Microsoft.Office.Interop.Excel.Range)wSheet.Cells[j, 5]).Value);
                                            RD.PK_CALL_ID = IVR.PK_Call_ID;
                                            Result = objDalVisitReport.InsertUpdateReferenceDocuments(RD);
                                        }


                                    }
                                }
                                else if (excelSheets[i] == "Stages Witnessed")
                                {
                                    for (int j = 2; j <= RowsCount; j++)
                                    {
                                        string StagesWitness = Convert.ToString(((Microsoft.Office.Interop.Excel.Range)wSheet.Cells[j, 1]).Value);
                                        if (StagesWitness != null)
                                        {
                                            StW.Type = "IVR";
                                            StW.Status = "1";
                                            StW.Stages_Witnessed = Convert.ToString(((Microsoft.Office.Interop.Excel.Range)wSheet.Cells[j, 1]).Value);
                                            StW.PK_CALL_ID = IVR.PK_Call_ID;
                                            Result = objDalVisitReport.InsertUpdateInspectionActivities(StW);
                                        }


                                    }
                                }
                                else if (excelSheets[i] == "Document reviewed")
                                {
                                    for (int j = 2; j <= RowsCount; j++)
                                    {
                                        string DocumentRe = Convert.ToString(((Microsoft.Office.Interop.Excel.Range)wSheet.Cells[j, 1]).Value);
                                        if (DocumentRe != null)
                                        {
                                            DR.Type = "IVR";
                                            DR.Status = "1";
                                            DR.PK_CALL_ID = IVR.PK_Call_ID;
                                            DR.Description = Convert.ToString(((Microsoft.Office.Interop.Excel.Range)wSheet.Cells[j, 1]).Value);
                                            Result = objDalVisitReport.InsertUpdateDocumentReviewe(DR);
                                        }
                                    }
                                }
                                else if (excelSheets[i] == "Details of measuring instrument")
                                {

                                    for (int j = 2; j <= RowsCount; j++)
                                    {

                                        string SrNo = Convert.ToString(((Microsoft.Office.Interop.Excel.Range)wSheet.Cells[j, 1]).Value);
                                        if (SrNo != null)
                                        {
                                            ED.Type = "IVR";
                                            ED.Status = "1";
                                            ED.PK_CALL_ID = IVR.PK_Call_ID;
                                            ED.Name_Of_Equipments = Convert.ToString(((Microsoft.Office.Interop.Excel.Range)wSheet.Cells[j, 2]).Value);
                                            ED.Range = Convert.ToString(((Microsoft.Office.Interop.Excel.Range)wSheet.Cells[j, 3]).Value);
                                            ED.Id = Convert.ToString(((Microsoft.Office.Interop.Excel.Range)wSheet.Cells[j, 4]).Value);
                                            ED.CalibrationValid_Till_date = Convert.ToString(((Microsoft.Office.Interop.Excel.Range)wSheet.Cells[j, 5]).Value);
                                            ED.Certification_No_Date = Convert.ToString(((Microsoft.Office.Interop.Excel.Range)wSheet.Cells[j, 6]).Value);

                                            string strNABLseenote1 = Convert.ToString(((Microsoft.Office.Interop.Excel.Range)wSheet.Cells[j, 7]).Value);
                                            if (strNABLseenote1 == "Yes")
                                            {
                                                ED.NABLseenote1 = Convert.ToBoolean(true);

                                            }
                                            else if (strNABLseenote1 == "No")
                                            {
                                                ED.NABLseenote1 = Convert.ToBoolean(false);

                                            }
                                            else
                                            {
                                                ED.NABLseenote1 = Convert.ToBoolean(false);
                                            }

                                            string StrNonNABLseenote2 = Convert.ToString(((Microsoft.Office.Interop.Excel.Range)wSheet.Cells[j, 8]).Value);
                                            if (StrNonNABLseenote2 == "Yes")
                                            {
                                                ED.NonNABLseenote2 = Convert.ToBoolean(true);

                                            }
                                            else if (StrNonNABLseenote2 == "No")
                                            {
                                                ED.NonNABLseenote2 = Convert.ToBoolean(false);

                                            }
                                            else
                                            {
                                                ED.NonNABLseenote2 = Convert.ToBoolean(false);
                                            }


                                            //ED.NonNABLseenote2 = Convert.ToBoolean(((Microsoft.Office.Interop.Excel.Range)wSheet.Cells[j, 8]).Value);


                                            //string strNABLseenote1 = Convert.ToString(((Microsoft.Office.Interop.Excel.Range)wSheet.Cells[j, 7]).Value);
                                            //if(strNABLseenote1=="Yes")
                                            //{
                                            //    ED.NABLseenote1 = "Yes";
                                            //}
                                            //string strNonNABLseenote2 = Convert.ToString(((Microsoft.Office.Interop.Excel.Range)wSheet.Cells[j, 8]).Value);
                                            //if (strNonNABLseenote2 == "Yes")
                                            //{
                                            //    ED.NonNABLseenote2 = Convert.ToString(((Microsoft.Office.Interop.Excel.Range)wSheet.Cells[j, 7]).Value);
                                            //}



                                            Result = objDalVisitReport.InsertUpdateEquipmentDetails(ED);
                                        }

                                    }
                                }
                                else if (excelSheets[i] == "Areas of concerns")
                                {
                                    for (int j = 2; j <= RowsCount; j++)
                                    {
                                        string AreasOfConcerns = Convert.ToString(((Microsoft.Office.Interop.Excel.Range)wSheet.Cells[j, 1]).Value);
                                        if (AreasOfConcerns != null && AreasOfConcerns != "")
                                        {
                                            IVR.PK_Call_ID = IVR.PK_Call_ID;
                                            IVR.Areas_Of_Concerns = AreasOfConcerns;
                                            Result = objDalVisitReport.InsertAreasOfConcern(IVR);
                                        }
                                    }

                                }
                                else if (excelSheets[i] == "Pending Activities")
                                {
                                    for (int j = 2; j <= RowsCount; j++)
                                    {
                                        string PendingActivity = Convert.ToString(((Microsoft.Office.Interop.Excel.Range)wSheet.Cells[j, 1]).Value);
                                        if (PendingActivity != null && PendingActivity != "")
                                        {
                                            IVR.PK_Call_ID = IVR.PK_Call_ID;
                                            IVR.Areas_Of_Concerns = PendingActivity;
                                            Result = objDalVisitReport.InsertPendingActivities(IVR);
                                        }
                                    }
                                }
                                else if (excelSheets[i] == "Conclusion ")
                                {

                                }


                                i++;
                            }
                            excelBook.Close();


                        }
                        else
                        {
                            Result = objDalVisitReport.InsertUpdateInspectionvisit(IVR);
                        }
                        }

                        #endregion
                        Result = objDalVisitReport.InsertUpdateInspectionvisit(IVR);
                        if (Result != null && Result != "")
                        {
                            objDalVisitReport.UpdateStatus(IVR.PK_Call_ID, "Closed");

                            #region Get Activity Data  
                            ds = ObjActivity.GetData(Convert.ToInt32(IVR.PK_Call_ID)); // Get data from callid (tblnoninspectionActivity)

                            if (ds.Tables[0].Rows.Count != 0)
                            {
                                foreach (DataRow dr in ds.Tables[0].Rows) // loop for adding add from dataset to list<modeldata>  
                                {
                                    lmd.Add(new NonInspectionActivity
                                    {
                                        Id = Convert.ToInt32(dr["Id"]),
                                        ActivityType = Convert.ToString(dr["ActivityType"]),
                                        Location = Convert.ToString(dr["Location"]),
                                        DateSE = Convert.ToString(dr["DateSE"]),
                                        //EndDate = Convert.ToString(dr["enddate"]),
                                        //StartDate = Convert.ToString(dr["StartDate"]),
                                        //EndDate = Convert.ToString(dr["EndDate"]),
                                        ServiceCode = Convert.ToString(dr["ServiceCode"]),
                                        Description = Convert.ToString(dr["Description"]),
                                        StartTime = Convert.ToDouble(dr["StartTime"]),
                                        EndTime = Convert.ToDouble(dr["EndTime"]),
                                        Attachment = Convert.ToString(dr["Attachment"]),
                                        TravelTime = Convert.ToDouble(dr["TravelTime"])

                                    });
                                }

                                ViewBag.Dates = lmd;
                            }
                            #endregion 


                            TempData["UpdateCompany"] = Result;
                            return View(IVR);
                        }

                    }
                    #endregion
                }

            }
            catch (Exception ex)
            {
				TempData["Message"] = ex.Message.ToString();											
                string Error = ex.Message.ToString();
                return RedirectToAction("ErrorPage", "InspectionReleaseNote", new { @Error = Error });
            }

            if (Session["PK_Call_ID"] != null)
            {
                InspectionvisitReportModel IVRNew = new InspectionvisitReportModel();
                IVRNew.PK_Call_ID = Convert.ToInt32(Session["PK_Call_ID"]);
                Session["PK_Call_ID"] = null;
                return RedirectToAction("VisitReportForm", IVRNew);
            }
            else
            {
                Session["PK_Call_ID"] = null;
                return View(IVR);
            }

        }
        #endregion


        #region  Conclusion

        // GET: VisitReport
        [HttpGet]
        public ActionResult Conclusion(int? PK_Call_ID)
        {
            string[] splitedProduct_Name;
            DataTable DTGetProductLst = new DataTable();
            List<NameCodeProduct> lstEditInspector = new List<NameCodeProduct>();
            DTGetProductLst = objDalVisitReport.getReasonlistforEdit();

            if (DTGetProductLst.Rows.Count > 0)
            {
                lstEditInspector = (from n in DTGetProductLst.AsEnumerable()
                                    select new NameCodeProduct()
                                    {
                                        Name = n.Field<string>(DTGetProductLst.Columns["ReasonName"].ToString()),

                                        Code = n.Field<Int32>(DTGetProductLst.Columns["Code"].ToString())

                                    }).ToList();
            }

            IEnumerable<SelectListItem> ProductcheckItems;
            ProductcheckItems = new SelectList(lstEditInspector, "Code", "Name");

            ViewBag.ProjectTypeItems = ProductcheckItems;
            ViewData["ProjectTypeItems"] = ProductcheckItems;
            ViewData["Drpproduct"] = objDalVisitReport.GetDrpList();

            var Data2 = objDalVisitReport.GetConclusionList();

            ViewBag.SubCatlist = new SelectList(Data2, "Id", "Conclusion");

            if (PK_Call_ID != 0 && PK_Call_ID != null)
            {
                ViewBag.check = "productcheck";
              

                ObjModelVisitReport.Non_Conformities_raised = "None";
                //ObjModelVisitReport.Areas_Of_Concerns = "For Po Item No   ; ";
                //ObjModelVisitReport.Pending_Activites = "For Po Item No   ; ";


                #region Bind Dates
                DataTable DSGetDates = new DataTable();
                DSGetDates = objDalVisitReport.GetDates(PK_Call_ID);
                List<InspectionvisitReportModel> lstVisitDateINOUTTime = new List<InspectionvisitReportModel>();
                try
                {
                    if (DSGetDates.Rows.Count > 0)
                    {
                        // int abc = subJobDashBoard.Rows.Count;
                        // int data = 1 + abc;
                        foreach (DataRow dr in DSGetDates.Rows)
                        {
                            lstVisitDateINOUTTime.Add(
                                new InspectionvisitReportModel
                                {
                                    #region
                                    //PK_Call_ID = Convert.ToInt32(dr["PK_Call_ID"]),
                                    DateSe = Convert.ToString(dr["DateSe"]),
                                    Intime = Convert.ToString(dr["Intime"]),
                                    Outtime = Convert.ToString(dr["Outtime"]),
                                    Call_No = Convert.ToString(dr["CallId"]),
                                    #endregion


                                }
                                );
                        }
                        ViewData["VisitDateINOUTTime"] = lstVisitDateINOUTTime;
                        ViewBag.VisitDateINOUTTime = lstVisitDateINOUTTime;
                    }
                    else
                    {
                        ViewData["VisitDateINOUTTime"] = null;
                        ViewBag.VisitDateINOUTTime = null;
                    }
                }
                catch (Exception ex)
                {
                    string Error = ex.Message.ToString();
                    return RedirectToAction("ErrorPage", "InspectionReleaseNote", new { @Error = Error });
                }


                #endregion


                #region AC
                InspectionvisitReportModel Conclusion = new InspectionvisitReportModel();
                Conclusion.PK_Call_ID = PK_Call_ID;
                DataTable GetAreasOfConcern = new DataTable();

                GetAreasOfConcern = objDalVisitReport.GetAreasOfConcern(Conclusion);
                try
                {
                    if (GetAreasOfConcern.Rows.Count > 0)
                    {
                        // int abc = subJobDashBoard.Rows.Count;
                        // int data = 1 + abc;
                        foreach (DataRow dr in GetAreasOfConcern.Rows)
                        {
                            lstAreasOfConcern.Add(
                                new InspectionvisitReportModel
                                {
                                    #region
                                    PK_Call_ID = Convert.ToInt32(dr["PK_Call_ID"]),

                                    Type = Convert.ToString(dr["Type"]),
                                    PkId = Convert.ToString(dr["PkId"]),
                                    Areas_Of_Concerns = Convert.ToString(dr["AreasOfConcern"]),
                                    #endregion


                                }
                                );
                        }
                        ViewData["AreasOfConcern"] = lstAreasOfConcern;
                    }
                    else
                    {
                        ViewData["AreasOfConcern"] = null;
                    }
                }
                catch (Exception ex)
                {
                    string Error = ex.Message.ToString();
                    return RedirectToAction("ErrorPage", "InspectionReleaseNote", new { @Error = Error });
                }
                //ViewData["AreasOfConcern"] = lstAreasOfConcern;
                #endregion
                
                #region PA
                InspectionvisitReportModel objPA = new InspectionvisitReportModel();
                Conclusion.PK_Call_ID = PK_Call_ID;
                DataTable GetAllPAByCallId = new DataTable();

                GetAllPAByCallId = objDalVisitReport.GetPendingActivity(Conclusion);
                try
                {
                    if (GetAllPAByCallId.Rows.Count > 0)
                    {
                        // int abc = subJobDashBoard.Rows.Count;
                        // int data = 1 + abc;
                        foreach (DataRow dr in GetAllPAByCallId.Rows)
                        {
                            lstPA.Add(
                                new InspectionvisitReportModel
                                {
                                    #region
                                    PK_Call_ID = Convert.ToInt32(dr["PK_Call_ID"]),

                                    Type = Convert.ToString(dr["Type"]),
                                    PkId = Convert.ToString(dr["PkId"]),
                                    Pending_Activites = Convert.ToString(dr["AreasOfConcern"]),
                                    #endregion


                                }
                                );
                        }
                        ViewData["PA"] = lstPA;
                    }
                    else
                    {
                        ViewData["PA"] = null;
                    }
                }
                catch (Exception ex)
                {
                    string Error = ex.Message.ToString();
                    return RedirectToAction("ErrorPage", "InspectionReleaseNote", new { @Error = Error });
                }
                //ViewData["PA"] = lstPA;
                #endregion
                DataSet DSJobMasterByQtId = new DataSet();

                DSJobMasterByQtId = objDalVisitReport.EditInspectionVisitReportByPKCallID(PK_Call_ID);

                if (DSJobMasterByQtId.Tables[0].Rows.Count > 0)
                {
                    ObjModelVisitReport.PDF = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["PDF"]);
                    ObjModelVisitReport.PK_SubJob_Id = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["PK_SubJob_Id"]);
                    ObjModelVisitReport.NCRNo = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["NCRNo"]);
                    ObjModelVisitReport.Branch = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Branch"]);
                    ObjModelVisitReport.Sap_And_Controle_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Sap_And_Controle_No"]);
                    ObjModelVisitReport.PK_IVR_ID = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["PK_IVR_ID"]);
                    ObjModelVisitReport.Project_Name_Location = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Project_Name_Location"]);
                    ObjModelVisitReport.Address_Of_Inspection = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Address_Of_Inspection"]);
                    ObjModelVisitReport.End_user_Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["End_user_Name"]);
                    ObjModelVisitReport.Vendor_Name_Location = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Vendor_Name_Location"]);
                    ObjModelVisitReport.PK_Call_ID = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["PK_Call_ID"]);
                    ObjModelVisitReport.Notification_Name_No_Date = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Notification_Name_No_Date"]);
                    ObjModelVisitReport.Date_Of_Inspection = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Date_Of_Inspection"]);
                    ObjModelVisitReport.Client_Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Client_Name"]);
                    ObjModelVisitReport.DEC_PMC_EPC_Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["DEC_PMC_EPC_Name"]);
                    ObjModelVisitReport.DEC_PMC_EPC_Assignment_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["DEC_PMC_EPC_Assignment_No"]);
                    //ObjModelVisitReport.Po_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Po_No"]);
                    //ObjModelVisitReport.Sub_Vendor_Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Sub_Vendor_Name"]);
                    //ObjModelVisitReport.Po_No_SubVendor = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Po_No_SubVendor"]);

                    int kick = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Kick_Off_Pre_Inspection"]);
                    ObjModelVisitReport.Kick_Off_Pre_Inspection = Convert.ToBoolean(kick);

                    int Mi = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Material_identification"]);
                    ObjModelVisitReport.Material_identification = Convert.ToBoolean(Mi);

                    int Interim_Stages = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Interim_Stages"]);
                    ObjModelVisitReport.Interim_Stages = Convert.ToBoolean(Interim_Stages);

                    int Document_review = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Document_review"]);
                    ObjModelVisitReport.Document_review = Convert.ToBoolean(Document_review);

                    int Final_Inspection = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Final_Inspection"]);
                    ObjModelVisitReport.Final_Inspection = Convert.ToBoolean(Final_Inspection);

                    int MasterListOfcalibratedInstruments = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["MasterListOfcalibratedInstruments"]);
                    ObjModelVisitReport.MasterListOfcalibratedInstruments = Convert.ToBoolean(MasterListOfcalibratedInstruments);

                    int Re_inspection = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Re_inspection"]);
                    ObjModelVisitReport.Re_inspection = Convert.ToBoolean(Re_inspection);

                   // ObjModelVisitReport.Conclusion = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Conclusion"]);
                    ObjModelVisitReport.Conclusion = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Conclusion1"]);
                    //ObjModelVisitReport.Pending_Activites = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Pending_Activites"]);
                    ObjModelVisitReport.Identification_Of_Inspected = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Identification_Of_Inspected"]);
                    ObjModelVisitReport.Identification_Of_Inspected_AfterSave = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Identification_Of_Inspected"]);
                    //ObjModelVisitReport.Areas_Of_Concerns = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Areas_Of_Concerns"]);

                    ObjModelVisitReport.Non_Conformities_raised = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Non_Conformities_raised"]);
                    ObjModelVisitReport.Signatures = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Signatures"]);
                    ObjModelVisitReport.Type = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Type"]);
                    ObjModelVisitReport.Report_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Report_No"]);
                    ObjModelVisitReport.Call_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Call_No"]);

                    int Inspection_records = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Inspection_records"]);
                    ObjModelVisitReport.Inspection_records = Convert.ToBoolean(Inspection_records);

                    int Inspection_Photo = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Inspection_Photo"]);
                    ObjModelVisitReport.Inspection_Photo = Convert.ToBoolean(Inspection_Photo);

                    int Other_Specify = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Other_Specify"]);
                    ObjModelVisitReport.Other_Specify = Convert.ToBoolean(Other_Specify);

                    ObjModelVisitReport.SubJob_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["SubJob_No"]);
                    ObjModelVisitReport.Type = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Type"]);

                    ObjModelVisitReport.InspectiobRecord_Remark = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["InspectiobRecord_Remark"]);
                    ObjModelVisitReport.OtherSpecifyRecords = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["OtherSpecifyRecords"]);
                    ObjModelVisitReport.Attachment = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Attachment"]);
                    ObjModelVisitReport.IVRIRNAttachment = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["IVRIRNAttachment"]);

                    ObjModelVisitReport.CanIRNbeissued = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["CanIRNbeissued"]);

                    ObjModelVisitReport.IssuedPOItemNumbers = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["IssuedPOItemNumbers"]);
                    ObjModelVisitReport.Intime = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Intime"]);
                    ObjModelVisitReport.Outtime = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Outtime"]);

                    ObjModelVisitReport.TempInspectionPhotosNo = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["TempInspectionPhotosNo"]);
                    ObjModelVisitReport.TempMaster_List_Of_calibrated_Instruments = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["TempMaster_List_Of_calibrated_Instruments"]);

                    

                    int DTUVIndiaClientEndUser = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["DTUVIndiaClientEndUser"]);
                    ObjModelVisitReport.DTUVIndiaClientEndUser = Convert.ToBoolean(DTUVIndiaClientEndUser);
                    int DTUVIndiaExecuting_Originating_Branch = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["DTUVIndiaExecuting_Originating_Branch"]);
                    ObjModelVisitReport.DTUVIndiaExecuting_Originating_Branch = Convert.ToBoolean(DTUVIndiaExecuting_Originating_Branch);
                    int DVendor_Sub_Vendor = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["DVendor_Sub_Vendor"]);
                    ObjModelVisitReport.DVendor_Sub_Vendor = Convert.ToBoolean(DVendor_Sub_Vendor);

						 ObjModelVisitReport.Expenses = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Expenses"]);
                    int ExpenseCheckBox = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["ExpenseCheckBox"]);
                    ObjModelVisitReport.ExpenseCheckBox = Convert.ToBoolean(ExpenseCheckBox);

                    int TimeCheckBox = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["TiimeCheckBox"]);
                    ObjModelVisitReport.TiimeCheckBox = Convert.ToBoolean(TimeCheckBox);

                    int intPOTotalCheckBox = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["POTotalCheckBox"]);
                    ObjModelVisitReport.POTotalCheckBox = Convert.ToBoolean(intPOTotalCheckBox);

                    ObjModelVisitReport.acceptedItems = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["acceptedItems"]);
                    ObjModelVisitReport.acceptedStages = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["acceptedStages"]);
                    ObjModelVisitReport.NonacceptedItems = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["NonacceptedItems"]);
                    ObjModelVisitReport.NonacceptedStages = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["NonacceptedStages"]);

                    List<string> Selected = new List<string>();
                    var Existingins = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["ReasonID"]);
                    splitedProduct_Name = Existingins.Split(',');
                    foreach (var single in splitedProduct_Name)
                    {
                        Selected.Add(single);
                    }
                    ViewBag.EditproductName = Selected;

                    DataTable DTGetUploadedFile = new DataTable();
                    List<FileDetails> lstEditFileDetails = new List<FileDetails>();
                    DTGetUploadedFile = objDalVisitReport.EditConUploadedFile(Convert.ToInt32(ObjModelVisitReport.PK_IVR_ID));
                    if (DTGetUploadedFile.Rows.Count > 0)
                    {
                        foreach (DataRow dr in DTGetUploadedFile.Rows)
                        {
                            lstEditFileDetails.Add(
                               new FileDetails
                               {
                                   PK_ID = Convert.ToInt32(dr["PK_ID"]),
                                   FileName = Convert.ToString(dr["FileName"]),
                                   Extension = Convert.ToString(dr["Extenstion"]),
                                   IDS = Convert.ToString(dr["FileID"]),
                               }
                             );
                        }
                        ViewData["lstEditFileDetails"] = lstEditFileDetails;
                        ObjModelVisitReport.FileDetails = lstEditFileDetails;
                    }
                    else
                    {
                        DSJobMasterByQtId = objDalVisitReport.GetCallDetails(PK_Call_ID);
                        
                    }

                    DataTable DTRefGetUploadedFile = new DataTable();
                    List<FileDetails> lstRefEditFileDetails = new List<FileDetails>();

                   
                    DTRefGetUploadedFile = objDalVisitReport.EditConSubUploadedFile1(Convert.ToInt32(ObjModelVisitReport.PK_SubJob_Id), PK_Call_ID);

                    if (DTRefGetUploadedFile.Rows.Count > 0)
                    {
                        foreach (DataRow dr in DTRefGetUploadedFile.Rows)
                        {
                            lstRefEditFileDetails.Add(
                                new FileDetails
                                {
                                    PK_ID = Convert.ToInt32(dr["PK_ID"]),
                                    FileName = Convert.ToString(dr["FileName"]),
                                    Extension = Convert.ToString(dr["Extenstion"]),
                                    IDS = Convert.ToString(dr["FileID"]),
                                }
                                );
                        }
                        ViewData["lstRefEditFileDetails"] = lstRefEditFileDetails;
                        ObjModelVisitReport.RefFileDetails = lstRefEditFileDetails;
                    }
                    else
                    {
                        DSJobMasterByQtId = objDalVisitReport.GetCallDetails(PK_Call_ID);
                    }


                    //added by shrutika salve 01092023


                    DataTable DetailsGetUploadedFile = new DataTable();
                    List<FileDetails> detailsRefEditFileDetails = new List<FileDetails>();


                    DetailsGetUploadedFile = objDalVisitReport.EditConSubUploadedFile2(Convert.ToInt32(ObjModelVisitReport.PK_SubJob_Id), PK_Call_ID);

                    if (DetailsGetUploadedFile.Rows.Count > 0)
                    {
                        foreach (DataRow dr in DetailsGetUploadedFile.Rows)
                        {
                            detailsRefEditFileDetails.Add(
                                new FileDetails
                                {
                                    PK_ID = Convert.ToInt32(dr["PK_ID"]),
                                    FileName = Convert.ToString(dr["FileName"]),
                                    Extension = Convert.ToString(dr["Extenstion"]),
                                    IDS = Convert.ToString(dr["FileID"]),
                                }
                                );
                        }
                        ViewData["lstRefEditFileDetails"] = detailsRefEditFileDetails;
                        ObjModelVisitReport.DetailsFileDetails = detailsRefEditFileDetails;
                    }
                    else
                    {
                        DSJobMasterByQtId = objDalVisitReport.GetCallDetails(PK_Call_ID);
                    }



                }
                if (ObjModelVisitReport.PK_Call_ID == null)
                {

                    ObjModelVisitReport.PK_Call_ID = PK_Call_ID;


                }


                return View(ObjModelVisitReport);
            }
            else
            {
                return RedirectToAction("CallsListByInspector", "CallsMaster");
            }

        }

        [HttpPost]
        public JsonResult DeleteConFile(string id)
        {
            string Results = string.Empty;
            FileDetails fileDetails = new FileDetails();
            DataTable DTGetDeleteFile = new DataTable();
            if (String.IsNullOrEmpty(id))
            {
                Response.StatusCode = (int)HttpStatusCode.BadRequest;
                return Json(new { Result = "Error" });
            }
            try
            {
                //  Guid guid = new Guid(id);
                DTGetDeleteFile = objDalVisitReport.GetConFileExt(id);
                if (DTGetDeleteFile.Rows.Count > 0)
                {
                    fileDetails.Extension = Convert.ToString(DTGetDeleteFile.Rows[0]["Extenstion"]);
                    fileDetails.FileName = Convert.ToString(DTGetDeleteFile.Rows[0]["FileName"]);
                }
                if (id != null && id != "")
                {
                    Results = objDalVisitReport.DeleteConUploadedFile(id);
                    var path = Path.Combine(Server.MapPath("~/Content/"),  fileDetails.FileName);
                    if (System.IO.File.Exists(path))
                    {
                        System.IO.File.Delete(path);
                    }
                    return Json(new { Result = "OK" });
                }
            }
            catch (Exception ex)
            {
                return Json(new { Result = "ERROR", Message = ex.Message });
            }
            return Json(new { Result = "ERROR" });
        }

        [HttpPost]
        public JsonResult DeleteConFile1(string id)
        {
            string Results = string.Empty;
            FileDetails fileDetails = new FileDetails();
            DataTable DTGetDeleteFile = new DataTable();
            if (String.IsNullOrEmpty(id))
            {
                Response.StatusCode = (int)HttpStatusCode.BadRequest;
                return Json(new { Result = "Error" });
            }
            try
            {
                //  Guid guid = new Guid(id);
                DTGetDeleteFile = objDalVisitReport.GetConFileExt1(id);
                if (DTGetDeleteFile.Rows.Count > 0)
                {
                    fileDetails.Extension = Convert.ToString(DTGetDeleteFile.Rows[0]["Extenstion"]);
                    fileDetails.FileName = Convert.ToString(DTGetDeleteFile.Rows[0]["FileName"]);
                }
                if (id != null && id != "")
                {
                    Results = objDalVisitReport.DeleteConUploadedFile(id);
                    var path = Path.Combine(Server.MapPath("~/Content/"), fileDetails.FileName);
                    if (System.IO.File.Exists(path))
                    {
                        System.IO.File.Delete(path);
                    }
                    return Json(new { Result = "OK" });
                }
            }
            catch (Exception ex)
            {
                return Json(new { Result = "ERROR", Message = ex.Message });
            }
            return Json(new { Result = "ERROR" });
        }


        [HttpPost]
        public JsonResult DeleteRefFile(string id)
        {
            string Results = string.Empty;
            FileDetails fileDetails = new FileDetails();
            DataTable DTGetDeleteFile = new DataTable();
            if (String.IsNullOrEmpty(id))
            {
                Response.StatusCode = (int)HttpStatusCode.BadRequest;
                return Json(new { Result = "Error" });
            }
            try
            {
                //  Guid guid = new Guid(id);
                DTGetDeleteFile = objDalVisitReport.GetConFileExt(id);
                if (DTGetDeleteFile.Rows.Count > 0)
                {
                    fileDetails.Extension = Convert.ToString(DTGetDeleteFile.Rows[0]["Extenstion"]);
                    fileDetails.FileName = Convert.ToString(DTGetDeleteFile.Rows[0]["FileName"]);
                }
                if (id != null && id != "")
                {
                    Results = objDalVisitReport.DeleteConUploadedFile1(id);
                    var path = Path.Combine(Server.MapPath("~/IVRIRNSupportDocs/"), id + fileDetails.Extension);
                    if (System.IO.File.Exists(path))
                    {
                        System.IO.File.Delete(path);
                    }
                    return Json(new { Result = "OK" });
                }
            }
            catch (Exception ex)
            {
                return Json(new { Result = "ERROR", Message = ex.Message });
            }
            return Json(new { Result = "ERROR" });
        }
        

        //public FileResult Download(String p, String d)
        //{
        //    return File(Path.Combine(Server.MapPath("~/Content/JobDocument/"), p), System.Net.Mime.MediaTypeNames.Application.Octet, d);
        //}

        public void Download(String p, String d)
        {
            /// return File(Path.Combine(Server.MapPath("~/Files/Documents/"), p), System.Net.Mime.MediaTypeNames.Application.Octet, d);


            DataTable DTDownloadFile = new DataTable();
            List<FileDetails> lstEditFileDetails = new List<FileDetails>();
            DTDownloadFile = objDalVisitReport.GetFileContent(Convert.ToInt32(d));
            
            string fileName = string.Empty;
            string contentType = string.Empty;
            byte[] bytes = null;

            if (DTDownloadFile.Rows.Count > 0)
            {
                //bytes = ((byte[])DTDownloadFile.Rows[0]["FileContent"]);
                fileName = DTDownloadFile.Rows[0]["FileName"].ToString();
            }


            //Response.Clear();
            //Response.Buffer = true;
            //Response.Charset = "";
            //Response.Cache.SetCacheability(HttpCacheability.NoCache);
            //Response.ContentType = contentType;
            //Response.AppendHeader("Content-Disposition", "attachment; filename=" + fileName);
            //Response.BinaryWrite(bytes);
            //Response.Flush();
            //Response.End();

        }

     

        public FileResult Download1(string d)
        {

            string FileName = "";
            string Date = "";
            string ID = string.Empty;
            DataTable DTDownloadFile = new DataTable();
            List<FileDetails> lstEditFileDetails = new List<FileDetails>();
            DTDownloadFile = objDalVisitReport.GetFileContent(Convert.ToInt32(d));
            
            if (DTDownloadFile.Rows.Count > 0)
            {
                ID = DTDownloadFile.Rows[0]["ID"].ToString();
                 FileName = DTDownloadFile.Rows[0]["FileName"].ToString();
                 Date = DTDownloadFile.Rows[0]["CreatedDate"].ToString();
            }

            //string myDate = "05/11/2010";
            DateTime date = Convert.ToDateTime(Date);
            int year = date.Year;
            int Month = date.Month;
            string path = string.Empty;

            int intC = Convert.ToInt32(Month);
            string CurrentMonth = CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedMonthName(intC);


            //Build the File Path.
            //string path = Server.MapPath("~/Content/JobDocument/") + d;
            //var savePath = Path.Combine(Server.MapPath("~/IVRIRNSupportDocs/"), a + item.FileName);

            path = Server.MapPath("~/Content/"+year+"/"+CurrentMonth + "/") + FileName;
            // string path = Server.MapPath("~/Content/") + d;
            if(!System.IO.File.Exists(path))
            {
                path = Server.MapPath("~/Content/" + year + "/" + CurrentMonth + "/") + ID + "_" + FileName;
            }
            //Read the File data into Byte Array.
            byte[] bytes = System.IO.File.ReadAllBytes(path);

            //Send the File to Download.
            return File(bytes, "application/octet-stream", FileName);
        }
        public FileResult Download2(string d)
        {

            string FileName = "";
            string Date = "";

            DataTable DTDownloadFile = new DataTable();
            List<FileDetails> lstEditFileDetails = new List<FileDetails>();
            DTDownloadFile = objDalVisitReport.GetFileContentRefDoc(Convert.ToInt32(d));

            if (DTDownloadFile.Rows.Count > 0)
            {
                //fileName = DTDownloadFile.Rows[0]["FileName"].ToString();
                FileName = DTDownloadFile.Rows[0]["FileName"].ToString();
                Date = DTDownloadFile.Rows[0]["CreatedDate"].ToString();
            }

            //string myDate = "05/11/2010";
            DateTime date = Convert.ToDateTime(Date);
            int year = date.Year;
            int Month = date.Month;

            int intC = Convert.ToInt32(Month);
            string CurrentMonth = CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedMonthName(intC);


            //Build the File Path.
            //string path = Server.MapPath("~/Content/JobDocument/") + d;
            //var savePath = Path.Combine(Server.MapPath("~/IVRIRNSupportDocs/"), a + item.FileName);

            string path = Server.MapPath("~/Content/" + year + "/" + CurrentMonth + "/") + FileName;
            // string path = Server.MapPath("~/Content/") + d;

            //Read the File data into Byte Array.
            byte[] bytes = System.IO.File.ReadAllBytes(path);

            //Send the File to Download.
            return File(bytes, "application/octet-stream", FileName);
        }

        public void DownloadRefDoc(String p, String d)
        {
            /// return File(Path.Combine(Server.MapPath("~/Files/Documents/"), p), System.Net.Mime.MediaTypeNames.Application.Octet, d);


            DataTable DTDownloadFile = new DataTable();
            List<FileDetails> lstEditFileDetails = new List<FileDetails>();
            DTDownloadFile = objDalVisitReport.GetFileContentRefDoc(Convert.ToInt32(d));

            string fileName = string.Empty;
            string contentType = string.Empty;
            byte[] bytes = null;

            if (DTDownloadFile.Rows.Count > 0)
            {
                bytes = ((byte[])DTDownloadFile.Rows[0]["FileContent"]);
                fileName = DTDownloadFile.Rows[0]["FileName"].ToString();
            }

            Response.Clear();
            Response.Buffer = true;
            Response.Charset = "";
            Response.Cache.SetCacheability(HttpCacheability.NoCache);
            Response.ContentType = contentType;
            Response.AppendHeader("Content-Disposition", "attachment; filename=" + fileName);
            Response.BinaryWrite(bytes);
            Response.Flush();
            Response.End();

        }

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult Conclusion(InspectionvisitReportModel IVR, HttpPostedFileBase File, FormCollection fc, HttpPostedFileBase[] Image, List<HttpPostedFileBase> img_Banner)
        {
            string Result = string.Empty;
            int JobIDs = 0;
            try
            {
                #region
                string ProList = string.Join(",", fc["ProductList"]);
                IVR.ReasonIDs = ProList;

                string IPath = string.Empty;
                var list = Session["list"] as List<string>;
                if (list != null && list.Count != 0)
                {
                    IPath = string.Join(",", list.ToList());
                    IPath = IPath.TrimEnd(',');
                }

                List<FileDetails> lstFileDtls = new List<FileDetails>();
                List<FileDetails> lstSubJobFileDtls = new List<FileDetails>();
                List<FileDetails> DetailsSubJobFileDtls = new List<FileDetails>();

                lstFileDtls = Session["listJobMasterUploadedFile"] as List<FileDetails>;

             
                    lstSubJobFileDtls = Session["listSubUploadedFile"] as List<FileDetails>;
                DetailsSubJobFileDtls = Session["listEquiDetails"] as List<FileDetails>;


                try
                {

                    List<string> lstAttachment = new List<string>();
                    if (!string.IsNullOrEmpty(Convert.ToString(Request.Files["img_Banner"])))
                    {
                        foreach (HttpPostedFileBase single in img_Banner) // Added by Sagar Panigrahi
                        {
                            if (single != null && single.FileName != "")
                            {
                                var filename = CommonControl.FileUpload("~/IVRIRNSupportDocs/", single);
                                lstAttachment.Add(filename);
                            }
                        }
                        IVR.IVRIRNAttachment = string.Join(",", lstAttachment);
                        if (string.IsNullOrEmpty(IVR.IVRIRNAttachment))
                        {
                            IVR.IVRIRNAttachment = "NoImage.gif";
                        }
                    }
                    else
                    {
                        IVR.IVRIRNAttachment = "NoImage.gif";
                    }
                }
                catch (Exception ex)
                {
                    string Error = ex.Message.ToString();
                    return RedirectToAction("ErrorPage", "InspectionReleaseNote", new { @Error = Error });
                }
                #endregion
                if (IVR.PK_IVR_ID == 0)
                {
                    IVR.Identification_Of_Inspected = Convert.ToString(fc["hdnContent"]);

                    #region File Upload Code 


                    HttpPostedFileBase Imagesection;
                    if (!string.IsNullOrEmpty(Convert.ToString(Request.Files["img_Banner"])))
                    {
                        Imagesection = Request.Files["img_Banner"];
                        if (Imagesection != null && Imagesection.FileName != "")
                        {
                            IVR.Signatures = CommonControl.FileUpload("Content/JobDocument/", Imagesection);
                        }
                        else
                        {
                            if (Imagesection.FileName != "")
                            {
                                IVR.Signatures = "NoImage.gif";
                            }
                        }
                    }


                    #endregion

                    IVR.Status = "1";
                    IVR.Type = "IVR";
                    IVR.IVRIRNAttachment = IPath;


                    #region
                    DataSet DSEditQutationTabledata = new DataSet();
                    DSEditQutationTabledata = objDalVisitReport.GetCallDetails(IVR.PK_Call_ID);
                    IVR.Sap_And_Controle_No = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Job"]);
                    IVR.Branch = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Executing_Branch"]);
                    IVR.Date_Of_Inspection = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Actual_Visit_Date"]);
                    IVR.Project_Name_Location = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Project_Name"]);
                    IVR.Address_Of_Inspection = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Job_Location"]);
                    IVR.End_user_Name = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["End_Customer"]);
                    IVR.Vendor_Name_Location = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Vendor_Name"]);
                    IVR.SubJob_No = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Sub_Job"]);
                    IVR.PK_SubJob_Id = Convert.ToInt32(DSEditQutationTabledata.Tables[0].Rows[0]["PK_SubJob_Id"]);
                    IVR.Client_Name = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Company_Name"]);
                    IVR.Br_Id = Convert.ToInt32(DSEditQutationTabledata.Tables[0].Rows[0]["Br_Id"]);

                    int _min = 10000;
                    int _max = 99999;
                    Random _rdm = new Random();
                    int Rjno = _rdm.Next(_min, _max);
                    string ConfirmCode = Convert.ToString(Rjno);

                    int _mins = 100000;
                    int _maxs = 999999;
                    Random _rdms = new Random();
                    int Rjnos = _rdm.Next(_mins, _maxs);
                    string ConfirmSecondCode = Convert.ToString(Rjnos);

                    IVR.Report_No = Convert.ToString(ConfirmCode) + ConfirmSecondCode + "-IVR";
                    #endregion
                    CommonControl objCommonControl = new CommonControl();
                    Result = objDalVisitReport.InsertUpdateConclousion(IVR);
                    JobIDs = Convert.ToInt32(Result);

                    if (JobIDs != null && JobIDs != 0 && JobIDs != -1)
                    {
                        if (lstFileDtls != null && lstFileDtls.Count > 0)
                        {
                            //foreach (var item in lstFileDtls)
                            //{
                            //    string a = Convert.ToString(IVR.PK_IVR_ID);
                            //    //string savePath = (@"D:\Content\JobDocument\" + item.FileName);
                            //    var savePath = Path.Combine(Server.MapPath("~/Content/"),   a+item.FileName);
                            //    //var serverPath = "C:\YourFolder\Data\") + id);
                            //    System.IO.File.WriteAllBytes(savePath, item.FileContent);
                            //}

                            

                            Result = ObjCalls.InsertFileAttachment(lstFileDtls, JobIDs,IVR);
                            Session["listJobMasterUploadedFile"] = null;
                            objCommonControl.SaveFileToPhysicalLocation(lstFileDtls, JobIDs);
                        }
                        
                        

                        //if (IVR.PK_SubJob_Id != null && IVR.PK_SubJob_Id != 0)
                        //{
                        if (lstSubJobFileDtls != null && lstSubJobFileDtls.Count > 0)
                            {
                            objCommonControl.SaveFileToPhysicalLocation(lstSubJobFileDtls, Convert.ToInt32(IVR.PK_Call_ID));

                            Result = ObjSubJob.InsertFileAttachment(lstSubJobFileDtls, Convert.ToInt32(IVR.PK_SubJob_Id), IVR.PK_Call_ID);
                                Session["listSubUploadedFile"] = null;
                            }

                        //added by shrutika salve 01092023
                        if (DetailsSubJobFileDtls != null && DetailsSubJobFileDtls.Count > 0)
                        {
                            objCommonControl.SaveFileToPhysicalLocation(DetailsSubJobFileDtls, Convert.ToInt32(IVR.PK_Call_ID));

                            Result = ObjSubJob.DetailsInsertFileAttachment(DetailsSubJobFileDtls, Convert.ToInt32(IVR.PK_SubJob_Id), IVR.PK_Call_ID);
                            Session["listEquiDetails"] = null;
                        }


                        //}
                    }

                    DataTable DTGetUploadedFile = new DataTable();
                    List<FileDetails> lstEditFileDetails = new List<FileDetails>();
                    DTGetUploadedFile = objDalVisitReport.EditConUploadedFile(Convert.ToInt32(ObjModelVisitReport.PK_IVR_ID));
                    if (DTGetUploadedFile.Rows.Count > 0)
                    {
                        foreach (DataRow dr in DTGetUploadedFile.Rows)
                        {
                            lstEditFileDetails.Add(
                               new FileDetails
                               {
                                   PK_ID = Convert.ToInt32(dr["PK_ID"]),
                                   FileName = Convert.ToString(dr["FileName"]),
                                   Extension = Convert.ToString(dr["Extenstion"]),
                                   IDS = Convert.ToString(dr["FileID"]),
                               }
                             );
                        }
                        ViewData["lstEditFileDetails"] = lstEditFileDetails;
                        ObjModelVisitReport.FileDetails = lstEditFileDetails;
                    }

                    if (Result != "" && Result != null)
                    {
                        TempData["InsertCompany"] = Result;
                        // return View(IVR);
                        return RedirectToAction("Conclusion", new { PK_Call_ID = IVR.PK_Call_ID });
                    }

                }
                else
                {
                    #region File Upload Code 


                    HttpPostedFileBase Imagesection;
                    if (!string.IsNullOrEmpty(Convert.ToString(Request.Files["img_Banner"])))
                    {
                        Imagesection = Request.Files["img_Banner"];
                        if (Imagesection != null && Imagesection.FileName != "")
                        {
                            IVR.Signatures = CommonControl.FileUpload("Content/JobDocument/", Imagesection);
                        }
                        else
                        {
                            if (Imagesection.FileName != "")
                            {
                                IVR.Signatures = "NoImage.gif";
                            }
                        }
                    }


                    #endregion
                    CommonControl objCommonControl = new CommonControl();
                    IVR.Identification_Of_Inspected = Convert.ToString(fc["hdnContent"]);


                    IVR.IVRIRNAttachment = IPath;
                    #region Update Areas of Concern
                    //foreach (var item in IVR.lstConclusion)
                    //{
                    //    Result = objDalVisitReport.UpdateAreasOfConcern(item);
                    //}

                    #endregion


                    #region  Insert Update Time
                    if (IVR.lstVisitDateINOUTTime != null)
                    {
                        foreach (var item in IVR.lstVisitDateINOUTTime)
                        {
                            IVR.DateSe = item.DateSe;
                            IVR.Intime = item.Intime;
                            IVR.Outtime = item.Outtime;
                            IVR.Call_No = item.Call_No;

                            Result = objDalVisitReport.InsertUpdateInspectionvisitTime(IVR);

                            if (Convert.ToInt16(Result) > 0)
                            {
                                //ModelState.Clear();
                                TempData["message"] = "Record Added Successfully...";
                            }
                            else
                            {
                                TempData["message"] = "Something went Wrong! Please try Again";
                            }
                        }
                    }
                    #endregion



                    Result = objDalVisitReport.InsertUpdateConclousion(IVR);
   

                    JobIDs = Convert.ToInt32(IVR.PK_IVR_ID);

                    if (JobIDs != null && JobIDs != 0 && JobIDs != -1)
                    {
                        if (lstFileDtls != null && lstFileDtls.Count > 0)
                        {

                            //foreach (var item in lstFileDtls)
                            //{
                            //    string a = Convert.ToString(IVR.PK_IVR_ID);
                            //    //string savePath = (@"D:\Content\JobDocument\" + item.FileName);
                            //    var savePath = Path.Combine(Server.MapPath("~/Content/"), a+item.FileName);
                            //    //var serverPath = "C:\YourFolder\Data\") + id);
                            //    System.IO.File.WriteAllBytes(savePath, item.FileContent);
                            //}
                            objCommonControl.SaveFileToPhysicalLocation(lstFileDtls, JobIDs);
                            Result = ObjCalls.InsertFileAttachment(lstFileDtls, JobIDs,IVR);
                            Session["listJobMasterUploadedFile"] = null;
                            
                        }
                        
                        
                        if (IVR.PK_SubJob_Id != null && IVR.PK_SubJob_Id != 0)
                        {
                            if (lstSubJobFileDtls != null && lstSubJobFileDtls.Count > 0)
                            {

                                //foreach (var item in lstSubJobFileDtls)
                                //{

                                //    //string savePath = (@"D:\Content\JobDocument\" + item.FileName);
                                //    var savePath = Path.Combine(Server.MapPath("~/IVRIRNSupportDocs/"), item.FileName);
                                //    //var serverPath = "C:\YourFolder\Data\") + id);
                                //    System.IO.File.WriteAllBytes(savePath, item.FileContent);
                                //}
                                objCommonControl.SaveFileToPhysicalLocation(lstSubJobFileDtls, Convert.ToInt32(IVR.PK_Call_ID));
                                Result = ObjSubJob.InsertFileAttachment(lstSubJobFileDtls, Convert.ToInt32(IVR.PK_SubJob_Id), IVR.PK_Call_ID);
                                Session["listSubUploadedFile"] = null;
                                
                            }

                            //aaded by shrutika salve 01092023

                            if (DetailsSubJobFileDtls != null && DetailsSubJobFileDtls.Count > 0)
                            {


                                objCommonControl.SaveFileToPhysicalLocation(DetailsSubJobFileDtls, Convert.ToInt32(IVR.PK_Call_ID));
                                Result = ObjSubJob.DetailsInsertFileAttachment(DetailsSubJobFileDtls, Convert.ToInt32(IVR.PK_SubJob_Id), IVR.PK_Call_ID);
                                Session["listEquiDetails"] = null;

                            }


                        }


                    }

                    DataTable DTGetUploadedFile = new DataTable();
                    List<FileDetails> lstEditFileDetails = new List<FileDetails>();
                    DTGetUploadedFile = objDalVisitReport.EditConUploadedFile(Convert.ToInt32(JobIDs));
                    if (DTGetUploadedFile.Rows.Count > 0)
                    {
                        foreach (DataRow dr in DTGetUploadedFile.Rows)
                        {
                            lstEditFileDetails.Add(
                               new FileDetails
                               {
                                   PK_ID = Convert.ToInt32(dr["PK_ID"]),
                                   FileName = Convert.ToString(dr["FileName"]),
                                   Extension = Convert.ToString(dr["Extenstion"]),
                                   IDS = Convert.ToString(dr["FileID"]),
                               }
                             );
                        }
                        ViewData["lstEditFileDetails"] = lstEditFileDetails;
                        ObjModelVisitReport.FileDetails = lstEditFileDetails;
                        IVR.FileDetails = lstEditFileDetails;
                    }

                    if (Result != null && Result != "")
                    {

                        TempData["UpdateCompany"] = Result;
                        // return View(IVR);
							return RedirectToAction("Conclusion", new { PK_Call_ID = IVR.PK_Call_ID });																	   
                    }

                }
            }
            catch (Exception ex)
            {
                string Error = ex.Message.ToString();
                return RedirectToAction("ErrorPage", "InspectionReleaseNote", new { @Error = Error });
            }
            return View();
        }


        #region image

        ////public JsonResult TemporaryFilePathDocumentAttachment()//Photo Uploading Functionality For Adding TemporaryFilePathDocumentAttachment
        ////{
        ////    var IPath = string.Empty;
        ////    string[] splitedGrp;
        ////    List<string> Selected = new List<string>();
        ////    List<FileDetails> fileDetails = new List<FileDetails>();

        ////    try
        ////    {

        ////        FormCollection fc = new FormCollection();
        ////        string filePath = string.Empty;
        ////        if (Session["listJobMasterUploadedFile"] != null)
        ////        {
        ////            fileDetails = Session["listJobMasterUploadedFile"] as List<FileDetails>;
        ////        }

        ////        for (int i = 0; i < Request.Files.Count; i++)
        ////        {
        ////            HttpPostedFileBase files = Request.Files[i]; //Uploaded file
        ////            int fileSize = files.ContentLength;
        ////            if (files != null && files.ContentLength > 0)
        ////            {
        ////                // if (files.FileName.EndsWith(".xlsx") || files.FileName.EndsWith(".xls") || files.FileName.EndsWith(".pdf") || files.FileName.EndsWith(".JPEG") || files.FileName.EndsWith(".jpg") || files.FileName.EndsWith(".png") || files.FileName.EndsWith(".gif") || files.FileName.EndsWith(".doc"))
        ////                if (files.FileName.EndsWith(".xlsx") || files.FileName.EndsWith(".xls") || files.FileName.EndsWith(".pdf") || files.FileName.EndsWith(".JPEG") || files.FileName.EndsWith(".jpg") || files.FileName.EndsWith(".JPG") || files.FileName.EndsWith(".png") || files.FileName.EndsWith(".gif") || files.FileName.EndsWith(".doc") || files.FileName.EndsWith(".DOC") || files.FileName.EndsWith(".docx") || files.FileName.EndsWith(".DOCX"))

        ////                {
        ////                    string fileName = files.FileName;
        ////                    // filePath = Path.Combine(Server.MapPath("~/IVRIRNSupportDocs/"), filePath);
        ////                    //var K = "/IVRIRNSupportDocs/" + fileName;
        ////                    //IPath = K.TrimStart('~');
        ////                    //files.SaveAs(Server.MapPath(IPath));






        ////                    FileDetails fileDetail = new FileDetails();
        ////                    fileDetail.FileName = fileName;
        ////                    fileDetail.Extension = Path.GetExtension(fileName);
        ////                    fileDetail.Id = Guid.NewGuid();
        ////                    BinaryReader br = new BinaryReader(files.InputStream);
        ////                    byte[] bytes = br.ReadBytes((Int32)files.ContentLength);
        ////                    fileDetail.FileContent = bytes;

        ////                    fileDetails.Add(fileDetail);
        ////                    //-----------------------------------------------------
        ////                    filePath = Path.Combine(Server.MapPath("~/Content/JobDocument/"), fileDetail.Id + fileDetail.Extension);
        ////                    var K = "~/IVRIRNSupportDocs/" + fileName;
        ////                    IPath = K;

        ////                    // files.SaveAs(filePath);


        ////                    var ExistingUploadFile = IPath;
        ////                    splitedGrp = ExistingUploadFile.Split(',');
        ////                    foreach (var single in splitedGrp)
        ////                    {
        ////                        Selected.Add(single);
        ////                    }
        ////                    Session["list"] = Selected;

        ////                }
        ////                else
        ////                {
        ////                    ViewBag.Error = "Please Select XLSX or PDF File";
        ////                }
        ////            }
        ////        }

        ////        Session["listJobMasterUploadedFile"] = fileDetails;

        ////    }
        ////    catch (Exception ex)
        ////    {
        ////        string Error = ex.Message.ToString();
        ////    }
        ////    return Json(IPath, JsonRequestBehavior.AllowGet);
        ////}


        public JsonResult TemporaryFilePathDocumentAttachment()//Photo Uploading Functionality For Adding TemporaryFilePathDocumentAttachment
        {
            var IPath = string.Empty;
            string[] splitedGrp;
            List<string> Selected = new List<string>();

            List<FileDetails> fileDetails = new List<FileDetails>();
            List<FileDetails> fileJobDetails = new List<FileDetails>();
            List<FileDetails> fileSubjobDetails = new List<FileDetails>();
            List<FileDetails> fileEquiDetails = new List<FileDetails>();

            if (Session["listJobMasterUploadedFile"] != null)
            {
                fileJobDetails = Session["listJobMasterUploadedFile"] as List<FileDetails>;
            }

            if (Session["listSubUploadedFile"] != null)
            {
                fileSubjobDetails = Session["listSubUploadedFile"] as List<FileDetails>;
            }

            if (Session["listEquiDetails"] != null)
            {
                fileEquiDetails = Session["listEquiDetails"] as List<FileDetails>;
            }

            //---Adding end Code
            try
            {

                FormCollection fc = new FormCollection();
                string filePath = string.Empty;
                for (int i = 0; i < Request.Files.Count; i++)
                {
                    HttpPostedFileBase files = Request.Files[i]; //Uploaded file
                    int fileSize = files.ContentLength;
                    if (files != null && files.ContentLength > 0)
                    {
                        if (files.FileName.ToUpper().EndsWith(".MSG") || files.FileName.EndsWith(".xlsx") || files.FileName.EndsWith(".xls") || files.FileName.EndsWith(".pdf") || files.FileName.EndsWith(".PDF") || files.FileName.EndsWith(".JPEG") || files.FileName.EndsWith(".jpeg") || files.FileName.EndsWith(".jpg") || files.FileName.EndsWith(".JPG") || files.FileName.EndsWith(".png") || files.FileName.EndsWith(".PNG") || files.FileName.EndsWith(".gif") || files.FileName.EndsWith(".doc") || files.FileName.EndsWith(".DOC") || files.FileName.EndsWith(".docx") || files.FileName.EndsWith(".DOCX"))

                        {
                            #region Generate random no
                            ////int _min = 100000000;
                            ////int _max = 999999999;
                            ////Random _rdm = new Random();
                            ////int Rjno = _rdm.Next(_min, _max);
                            ////string ConfirmCode = Convert.ToString(Rjno);
                            #endregion

                            string fileName = files.FileName;//ConfirmCode + files.FileName;
                            //Adding New Code as per new requirement 12 March 2020, Manoj Sharma
                            FileDetails fileDetail = new FileDetails();
                            fileDetail.FileName = fileName;
                            fileDetail.Extension = Path.GetExtension(fileName);
                            fileDetail.Id = Guid.NewGuid();

                            BinaryReader br = new BinaryReader(files.InputStream);
                            byte[] bytes = br.ReadBytes((Int32)files.ContentLength);
                            fileDetail.FileContent = bytes;

                            if (Request.Files.Keys[0].ToString().ToUpper() == "FILEUPLOAD")
                            {
                                fileJobDetails.Add(fileDetail);
                            }
                            else if (Request.Files.Keys[0].ToString().ToUpper() == "FILEUPLOAD1")
                            {
                                fileSubjobDetails.Add(fileDetail);
                            }
                            else if (Request.Files.Keys[0].ToString().ToUpper() == "FILEUPLOAD2")
                            {
                                fileEquiDetails.Add(fileDetail);
                            }

                            //-----------------------------------------------------


                            var ExistingUploadFile = IPath;
                            splitedGrp = ExistingUploadFile.Split(',');
                            foreach (var single in splitedGrp)
                            {
                                Selected.Add(single);
                            }
                            Session["list"] = Selected;
                        }
                        else
                        {
                            ViewBag.Error = "Please Select XLSX or PDF File";
                        }
                    }
                }

                if (Request.Files.Keys[0].ToString().ToUpper() == "FILEUPLOAD")
                {
                    Session["listJobMasterUploadedFile"] = fileJobDetails;
                }
                else if (Request.Files.Keys[0].ToString().ToUpper() == "FILEUPLOAD1")
                {
                    Session["listSubUploadedFile"] = fileSubjobDetails;
                }
                else if (Request.Files.Keys[0].ToString().ToUpper() == "FILEUPLOAD2")
                {
                    Session["listEquiDetails"] = fileEquiDetails;
                }

            }
            catch (Exception ex)
            {
                string Error = ex.Message.ToString();
                
            }
            return Json(IPath, JsonRequestBehavior.AllowGet);
        }

        public JsonResult TemporaryFilePathDocumentAttachment1()//Photo Uploading Functionality For Adding TemporaryFilePathDocumentAttachment
        {
            var IPath1 = string.Empty;
            string[] splitedGrp;
            List<string> Selected = new List<string>();
            //Adding New Code 13 March 2020
            List<FileDetails> fileDetails = new List<FileDetails>();
            //---Adding end Code
            try
            {

                FormCollection fc = new FormCollection();
                string filePath = string.Empty;

                if (Session["listJobMastUploadedFile"] != null)
                {
                    fileDetails = Session["listJobMastUploadedFile"] as List<FileDetails>;
                }

                for (int i = 0; i < Request.Files.Count; i++)
                {
                    HttpPostedFileBase files = Request.Files[i]; //Uploaded file
                    int fileSize = files.ContentLength;
                    if (files != null && files.ContentLength > 0)
                    {
                        if (files.FileName.ToUpper().EndsWith(".MSG") || files.FileName.EndsWith(".xlsx") || files.FileName.EndsWith(".xls") || files.FileName.EndsWith(".pdf") || files.FileName.EndsWith(".PDF") || files.FileName.EndsWith(".JPEG") || files.FileName.EndsWith(".jpeg") || files.FileName.EndsWith(".jpg") || files.FileName.EndsWith(".JPG") || files.FileName.EndsWith(".png") || files.FileName.EndsWith(".PNG") || files.FileName.EndsWith(".gif") || files.FileName.EndsWith(".doc") || files.FileName.EndsWith(".DOC") || files.FileName.EndsWith(".docx") || files.FileName.EndsWith(".DOCX"))
                        {
                            string fileName = files.FileName;
                            //Adding New Code as per new requirement 12 March 2020, Manoj Sharma
                            FileDetails fileDetail = new FileDetails();
                            fileDetail.FileName = fileName;
                            fileDetail.Extension = Path.GetExtension(fileName);
                            fileDetail.Id = Guid.NewGuid();
                            fileDetails.Add(fileDetail);
                            //-----------------------------------------------------
                            filePath = Path.Combine(Server.MapPath("~/IVRIRNSupportDocs/"), filePath);
                            var K = "/IVRIRNSupportDocs/" + fileName;
                            IPath1 = K;
                            files.SaveAs(filePath);

                            var ExistingUploadFile = IPath1;
                            splitedGrp = ExistingUploadFile.Split(',');
                            foreach (var single in splitedGrp)
                            {
                                Selected.Add(single);
                            }
                            Session["list1"] = Selected;
                        }
                        else
                        {
                            ViewBag.Error = "Please Select XLSX or PDF File";
                        }
                    }
                }
                Session["listJobMastUploadedFile"] = fileDetails;
            }
            catch (Exception ex)
            {
                string Error = ex.Message.ToString();
                
            }
            return Json(IPath1, JsonRequestBehavior.AllowGet);
        }
        #endregion
        #endregion


        #region  ITEM dESCRIPTION

        [HttpGet]
        public ActionResult ItemDescription(ItemDescriptionModel IVR)
        {

            DataTable CostSheetDashBoard = new DataTable();
            DataSet ItemDescriptionData = new DataSet();
            List<ItemDescriptionModel> lstCompanyDashBoard = new List<ItemDescriptionModel>();

			 #region Bind UOM
            List<NameCode> lstProjectType = new List<NameCode>();
            DataSet dsUnit = new DataSet();
            dsUnit = objDalVisitReport.Measurement();

            if (dsUnit.Tables[0].Rows.Count > 0)
            {
                lstProjectType = (from n in dsUnit.Tables[0].AsEnumerable()
                                  select new NameCode()
                                  {
                                      Name = n.Field<string>(dsUnit.Tables[0].Columns["Name"].ToString()),
                                      Code = n.Field<Int32>(dsUnit.Tables[0].Columns["Id"].ToString())

                                  }).ToList();
            }
            ViewBag.UOM = lstProjectType;

            #endregion  
            if (IVR.PK_ItemD_Id != 0)
            {
                ItemDescriptionData = objDalVisitReport.GetitemDescriptionById(IVR.PK_ItemD_Id);
                if (ItemDescriptionData.Tables[0].Rows.Count > 0)
                {
                    IVR.HeatNoShow = Convert.ToString(ItemDescriptionData.Tables[0].Rows[0]["HeatNoShow"]);
                    IVR.PK_ItemD_Id = Convert.ToInt32(ItemDescriptionData.Tables[0].Rows[0]["PK_ItemD_Id"]);
                    IVR.Po_Item_No = Convert.ToString(ItemDescriptionData.Tables[0].Rows[0]["Po_Item_No"]);
                    IVR.ItemCode_Description = Convert.ToString(ItemDescriptionData.Tables[0].Rows[0]["ItemCode_Description"]);
                    IVR.Po_Quantity = Convert.ToString(ItemDescriptionData.Tables[0].Rows[0]["Po_Quantity"]);
                    IVR.Offered_Quantity = Convert.ToString(ItemDescriptionData.Tables[0].Rows[0]["Offered_Quantity"]);
                    IVR.PK_CALL_ID = Convert.ToInt32(ItemDescriptionData.Tables[0].Rows[0]["PK_CALL_ID"]);
                    IVR.Pk_callidAVR = Convert.ToString(ItemDescriptionData.Tables[0].Rows[0]["Pk_call_idARC"]);

                    IVR.Item_Code = Convert.ToString(ItemDescriptionData.Tables[0].Rows[0]["Item_Code"]);
                    IVR.Accepted_Quantity = Convert.ToString(ItemDescriptionData.Tables[0].Rows[0]["Accepted_Quantity"]);
                    IVR.Cumulative_Accepted_Qty = Convert.ToString(ItemDescriptionData.Tables[0].Rows[0]["Cumulative_Accepted_Qty"]);
                    IVR.Unit = Convert.ToString(ItemDescriptionData.Tables[0].Rows[0]["Unit"]);
                    IVR.HeatNumber = Convert.ToString(ItemDescriptionData.Tables[0].Rows[0]["HeatNumber"]);
                    IVR.TotalQuantity = Convert.ToString(ItemDescriptionData.Tables[0].Rows[0]["TotalQuantity"]);
                    


                    if (IVR.PK_CALL_ID != 0 && IVR.PK_CALL_ID != null)
                    {
                        CostSheetDashBoard = objDalVisitReport.GetitemDescription(IVR.PK_CALL_ID);
                        if (CostSheetDashBoard.Rows.Count > 0)
                        {
                            foreach (DataRow dr in CostSheetDashBoard.Rows)
                            {
                                lstCompanyDashBoard.Add(
                                    new ItemDescriptionModel
                                    {
                                        PK_ItemD_Id = Convert.ToInt32(dr["PK_ItemD_Id"]),
                                        Po_Item_No = Convert.ToString(dr["Po_Item_No"]),
                                        ItemCode_Description = Convert.ToString(dr["ItemCode_Description"]),
                                        Po_Quantity = Convert.ToString(dr["Po_Quantity"]),
                                        Offered_Quantity = Convert.ToString(dr["Offered_Quantity"]),
                                        PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"]),

                                        Item_Code = Convert.ToString(dr["Item_Code"]),
                                        Accepted_Quantity = Convert.ToString(dr["Accepted_Quantity"]),
                                        Cumulative_Accepted_Qty = Convert.ToString(dr["Cumulative_Accepted_Qty"]),
                                        Unit = Convert.ToString(dr["Unit"]),
                                        HeatNumber = Convert.ToString(dr["HeatNumber"]),
                                        TotalQuantity = Convert.ToString(dr["TotalQuantity"]),
                                    }
                                    );
                            }
                        }

                    }

                }
            }
            else
            {
                try
                {
                    CostSheetDashBoard = objDalVisitReport.GetitemDescriptionARC(IVR.Pk_callidAVR);

                    if (CostSheetDashBoard.Rows.Count > 0)
                    {
                        IVR.HeatNoShow = Convert.ToString(CostSheetDashBoard.Rows[0]["HeatNoShow"]);
                        foreach (DataRow dr in CostSheetDashBoard.Rows)
                        {
                            lstCompanyDashBoard.Add(
                                new ItemDescriptionModel
                                {
                                    HeatNoShow = Convert.ToString(dr["HeatNoShow"]),
                                    PK_ItemD_Id = Convert.ToInt32(dr["PK_ItemD_Id"]),
                                    Po_Item_No = Convert.ToString(dr["Po_Item_No"]),
                                    ItemCode_Description = Convert.ToString(dr["ItemCode_Description"]),
                                    Po_Quantity = Convert.ToString(dr["Po_Quantity"]),
                                    Offered_Quantity = Convert.ToString(dr["Offered_Quantity"]),
                                    PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"]),
                                    Item_Code = Convert.ToString(dr["Item_Code"]),
                                    Accepted_Quantity = Convert.ToString(dr["Accepted_Quantity"]),
                                    Cumulative_Accepted_Qty = Convert.ToString(dr["Cumulative_Accepted_Qty"]),
                                    Unit = Convert.ToString(dr["Unit"]),
                                    HeatNumber = Convert.ToString(dr["HeatNumber"]),
                                    TotalQuantity = Convert.ToString(dr["TotalQuantity"]),

                                }
                                );
                        }
                    }
                }
                catch (Exception ex)
                {
                    string Error = ex.Message.ToString();
                    return RedirectToAction("ErrorPage", "InspectionReleaseNote", new { @Error = Error });
                }
            }

            ViewData["CostSheet"] = lstCompanyDashBoard;
            return View(IVR);
        }
        [HttpPost]
        public ActionResult ItemDescription(ItemDescriptionModel IVR, FormCollection fc, HttpPostedFileBase FileUpload)
        {
            string Result = string.Empty;
            try
            {
                if (IVR.PK_ItemD_Id == 0)
                {


                    #region Rahul Code By 03-May-2019
                    HttpPostedFileBase files = FileUpload;

                    if (/*files.ContentLength > 0*/  files != null && !string.IsNullOrEmpty(files.FileName) && files.FileName.Contains(".xlsx"))
                    {

                        //if(files.FileName == "ExcellData.xlsx")
                        //{


                        try
                        {

                            string fileName = files.FileName;
                            string fileContentType = files.ContentType;
                            byte[] fileBytes = new byte[files.ContentLength];
                            var data1 = files.InputStream.Read(fileBytes, 0, Convert.ToInt32(files.ContentLength));
                            var package = new ExcelPackage(files.InputStream);  //===========Go to Manage Nuget in Install ExcellPackge 

                            var currentSheet = package.Workbook.Worksheets;
                            var workSheet = currentSheet.First();
                            int noOfCol = workSheet.Dimension.End.Column;
                            int noOfRow = workSheet.Dimension.End.Row;
                            int rowIterator = 1;
                            if ("Sr.No" == Convert.ToString(workSheet.Cells[rowIterator, 1].Value) && "Image Name" == Convert.ToString(workSheet.Cells[rowIterator, 2].Value) && "Product Image" == Convert.ToString(workSheet.Cells[rowIterator, 3].Value))
                            {

                            }
                            else
                            {

                            }
                            for (rowIterator = 2; rowIterator <= noOfRow; rowIterator++)
                            {

                                string PoItemNo = Convert.ToString(workSheet.Cells[rowIterator, 1].Value);
                                string itemCode = Convert.ToString(workSheet.Cells[rowIterator, 2].Value);
                                string ItemDescription = Convert.ToString(workSheet.Cells[rowIterator, 3].Value);
                                string Unit = Convert.ToString(workSheet.Cells[rowIterator, 4].Value);
                                string PoQuantity = Convert.ToString(workSheet.Cells[rowIterator, 5].Value);
                                string OfferedQuantity = Convert.ToString(workSheet.Cells[rowIterator, 6].Value);
                                string AcceptedQuantity = Convert.ToString(workSheet.Cells[rowIterator, 7].Value);
                                //string TypeOfFood = Convert.ToString(workSheet.Cells[rowIterator, 8].Value);
                                //string ProductFeatured = Convert.ToString(workSheet.Cells[rowIterator, 9].Value);
                                //string IsNew = Convert.ToString(workSheet.Cells[rowIterator, 10].Value);
                                //string Description = Convert.ToString(workSheet.Cells[rowIterator, 11].Value);
                                // string Image = Convert.ToString(workSheet.Cells[rowIterator, 3].Value);

                                //string BrandID = Convert.ToString(workSheet.Cells[rowIterator, 13].Value);
                                //string BreedID = Convert.ToString(workSheet.Cells[rowIterator, 14].Value);

                                // string ImageCode = getImagecode(Image);
                                // string Imagenames = ImageName;


                                try
                                {

                                    if (PoItemNo != "")
                                    {
                                        //itvm.MwmImage = ImageCode;
                                        //itvm.ImgSName = Imagenames;

                                        IVR.Po_Item_No = PoItemNo;
                                        IVR.Item_Code = itemCode;
                                        IVR.ItemCode_Description = ItemDescription;
                                        IVR.Unit = Unit;
                                        IVR.Po_Quantity = PoQuantity;
                                        IVR.Offered_Quantity = OfferedQuantity;
                                        IVR.Accepted_Quantity = AcceptedQuantity;
                                        IVR.Status = "1";
                                        IVR.Type = "IVR";
                                        Result = objDalVisitReport.InsertUpdateItemDescription(IVR);
                                    }
                                    else
                                    {
                                        throw new System.ArgumentException();
                                    }
                                }
                                catch (Exception ex)
                                {

                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            TempData["Message"] = ex.Message;
                            return View(IVR);
                        }


                    }

                    #endregion
                    else
                    {
                        IVR.Status = "1";
                        IVR.Type = "IVR";
                        Result = objDalVisitReport.InsertUpdateItemDescription(IVR);
                        if (Result != "" && Result != null)
                        {
                            TempData["InsertCompany"] = Result;

                        }
                    }


                }
                else
                {


                    Result = objDalVisitReport.InsertUpdateItemDescription(IVR);
                    if (Result != null && Result != "")
                    {

                        TempData["UpdateCompany"] = Result;

                    }

                }
            }
            catch (Exception ex)
            {
                string Error = ex.Message.ToString();
                return RedirectToAction("ErrorPage", "InspectionReleaseNote", new { @Error = Error });
            }
            #region
            DataTable CostSheetDashBoard = new DataTable();
            List<ItemDescriptionModel> lstCompanyDashBoard = new List<ItemDescriptionModel>();
            if(IVR.PK_CALL_ID !=0 && IVR.PK_CALL_ID != null)
            {
                CostSheetDashBoard = objDalVisitReport.GetitemDescription(IVR.PK_CALL_ID);
                try
                {
                    if (CostSheetDashBoard.Rows.Count > 0)
                    {
                        foreach (DataRow dr in CostSheetDashBoard.Rows)
                        {
                            lstCompanyDashBoard.Add(
                                new ItemDescriptionModel
                                {
                                    PK_ItemD_Id = Convert.ToInt32(dr["PK_ItemD_Id"]),
                                    Po_Item_No = Convert.ToString(dr["Po_Item_No"]),
                                    ItemCode_Description = Convert.ToString(dr["ItemCode_Description"]),
                                    Po_Quantity = Convert.ToString(dr["Po_Quantity"]),
                                    Offered_Quantity = Convert.ToString(dr["Offered_Quantity"]),
                                    PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"]),

                                    Item_Code = Convert.ToString(dr["Item_Code"]),
                                    Accepted_Quantity = Convert.ToString(dr["Accepted_Quantity"]),
                                    Cumulative_Accepted_Qty = Convert.ToString(dr["Cumulative_Accepted_Qty"]),
                                    Unit = Convert.ToString(dr["Unit"]),
                                }
                                );
                        }
                    }
                }
                catch (Exception ex)
                {
                    string Error = ex.Message.ToString();
                    return RedirectToAction("ErrorPage", "InspectionReleaseNote", new { @Error = Error });
                }
            }else
            {
                CostSheetDashBoard = objDalVisitReport.GetitemDescriptionARC(IVR.Pk_callidAVR);
                try
                {
                    if (CostSheetDashBoard.Rows.Count > 0)
                    {
                        foreach (DataRow dr in CostSheetDashBoard.Rows)
                        {
                            lstCompanyDashBoard.Add(
                                new ItemDescriptionModel
                                {
                                    PK_ItemD_Id = Convert.ToInt32(dr["PK_ItemD_Id"]),
                                    Po_Item_No = Convert.ToString(dr["Po_Item_No"]),
                                    ItemCode_Description = Convert.ToString(dr["ItemCode_Description"]),
                                    Po_Quantity = Convert.ToString(dr["Po_Quantity"]),
                                    Offered_Quantity = Convert.ToString(dr["Offered_Quantity"]),
                                    PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"]),

                                    Item_Code = Convert.ToString(dr["Item_Code"]),
                                    Accepted_Quantity = Convert.ToString(dr["Accepted_Quantity"]),
                                    Cumulative_Accepted_Qty = Convert.ToString(dr["Cumulative_Accepted_Qty"]),
                                    Unit = Convert.ToString(dr["Unit"]),
                                }
                                );
                        }
                    }
                }
                catch (Exception ex)
                {
                    string Error = ex.Message.ToString();
                    return RedirectToAction("ErrorPage", "InspectionReleaseNote", new { @Error = Error });
                }
            }
            
            ViewData["CostSheet"] = lstCompanyDashBoard;
            IVR.Po_Item_No = null;
            IVR.Item_Code = null;
            IVR.ItemCode_Description = null;
            IVR.Unit = null;
            IVR.Po_Quantity = null;
            IVR.Offered_Quantity = null;
            IVR.Accepted_Quantity = null;
            IVR.PK_ItemD_Id = 0;
            #endregion
            ItemDescriptionModel IVRNew = new ItemDescriptionModel();
            
            if (IVR.Pk_callidAVR != null)
            {
                IVRNew.Pk_callidAVR = IVR.Pk_callidAVR;
            }
            else
            {
                IVRNew.PK_CALL_ID = IVR.PK_CALL_ID;
            }

            return RedirectToAction("ItemDescription", IVRNew);
            //return View(IVR);
        }

        public ActionResult DeleteItemDescriptionData(ItemDescriptionModel IVR)
        {
            DataSet ItemDescriptionData = new DataSet();
            int Result = 0;
            int PK_IVR_ID = 0;
            try
            {
                Result = objDalVisitReport.DeleteItemDescriptionData(IVR.PK_ItemD_Id);


                if (Result != 0)
                {
                    TempData["DeleteBranch"] = Result;
                    return RedirectToAction("ItemDescription", new { PK_CALL_ID = IVR.PK_CALL_ID });
                    //return RedirectToAction("ItemDescription", IVR);
                }
            }
            catch (Exception)
            {
                throw;
            }
            ItemDescriptionModel IVRNew = new ItemDescriptionModel();
            IVRNew.PK_IVR_ID = PK_IVR_ID;
            return RedirectToAction("ItemDescription", new { PK_CALL_ID = IVR.PK_CALL_ID });
            //return RedirectToAction("ItemDescription", IVRNew);
        }


        #region 3-may-2019 Code By Rahul
        string getImagecode(string str)
        {
            var extrctdStrng = "";
            for (int i = 0; i < str.Length; i++)
            {
                if (str.ElementAt(i) == '=')
                {
                    var num = i + 1;
                    extrctdStrng = str.Substring(num);
                }
            }
            extrctdStrng = "https://drive.google.com/uc?export=view&id=" + extrctdStrng;
            return extrctdStrng;
        }

        #endregion
        #endregion


        #region  Refrance Documents

        [HttpGet]
        public ActionResult ReferenceDocuments(ReferenceDocumentsModel IVR, int? sid, string Sids)
        {
            if (Convert.ToInt32(sid) != 0)
            {
                IVR.PK_CALL_ID = Convert.ToInt32(sid);
            }

            else if (Convert.ToString(Sids) != null)
            {
                IVR.Pk_callidAVR = Convert.ToString(Sids);
            }


            DataTable CostSheetDashBoard = new DataTable();
            DataSet ItemDescriptionData = new DataSet();
            List<ReferenceDocumentsModel> lstRefranceDocsDashBoard = new List<ReferenceDocumentsModel>();
            List<ReferenceDocumentsModel> lstDocName = new List<ReferenceDocumentsModel>();


            if (IVR.PK_RD_ID != 0)
            {
                ItemDescriptionData = objDalVisitReport.GetRefranceDocuments(IVR.PK_RD_ID);
                if (ItemDescriptionData.Tables[0].Rows.Count > 0)
                {
                    IVR.Document_Name = Convert.ToString(ItemDescriptionData.Tables[0].Rows[0]["Document_Name"]);
                    IVR.Document_No = Convert.ToString(ItemDescriptionData.Tables[0].Rows[0]["Document_No"]);
                    IVR.Approval_Status = Convert.ToString(ItemDescriptionData.Tables[0].Rows[0]["Approval_Status"]);
                    IVR.PK_RD_ID = Convert.ToInt32(ItemDescriptionData.Tables[0].Rows[0]["PK_RD_ID"]);
                    IVR.PK_CALL_ID = Convert.ToInt32(ItemDescriptionData.Tables[0].Rows[0]["PK_CALL_ID"]);
                    IVR.VendorDocumentNumber = Convert.ToString(ItemDescriptionData.Tables[0].Rows[0]["VendorDocumentNumber"]);
                    if (ItemDescriptionData.Tables.Count > 0)
                    {
                        IVR.Visible = "True";
                        foreach (DataRow dr in ItemDescriptionData.Tables[0].Rows)
                        {
                            lstDocName.Add(
                                new ReferenceDocumentsModel
                                {
                                    Document_No = Convert.ToString(dr["Document_No"]),
                                    Document_Name = Convert.ToString(dr["Document_Name"]),
                                    Approval_Status = Convert.ToString(dr["Approval_Status"]),
                                    PK_RD_ID = Convert.ToInt32(dr["PK_RD_ID"]),
                                    PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"]),
                                    VendorDocumentNumber = Convert.ToString(dr["VendorDocumentNumber"])
                                }
                                );
                        }
                        ViewBag.DocName = lstDocName;
                    }





                    CostSheetDashBoard = objDalVisitReport.GetReferenceDocuments(IVR.PK_CALL_ID);
                    if (CostSheetDashBoard.Rows.Count > 0)
                    {
                        IVR.Visible = "True";
                        foreach (DataRow dr in CostSheetDashBoard.Rows)
                        {
                            lstRefranceDocsDashBoard.Add(
                                new ReferenceDocumentsModel
                                {
                                    Document_No = Convert.ToString(dr["Document_No"]),
                                    Document_Name = Convert.ToString(dr["Document_Name"]),
                                    Approval_Status = Convert.ToString(dr["Approval_Status"]),
                                    PK_RD_ID = Convert.ToInt32(dr["PK_RD_ID"]),
                                    PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"]),
                                    VendorDocumentNumber = Convert.ToString(dr["VendorDocumentNumber"])
                                }
                                );
                        }
                        //  ViewBag.DocName = lstRefranceDocsDashBoard;
                    }

                }

            }
            else
            {
                try
                {



                    if (IVR.PK_CALL_ID != null)
                    {
                        CostSheetDashBoard = objDalVisitReport.GetReferenceDocuments(IVR.PK_CALL_ID);
                        if (CostSheetDashBoard.Rows.Count > 0)
                        {
                            IVR.Visible = "False";
                            foreach (DataRow dr in CostSheetDashBoard.Rows)
                            {
                                lstRefranceDocsDashBoard.Add(
                                    new ReferenceDocumentsModel
                                    {
                                        Document_No = Convert.ToString(dr["Document_No"]),
                                        Document_Name = Convert.ToString(dr["Document_Name"]),
                                        Approval_Status = Convert.ToString(dr["Approval_Status"]),
                                        PK_RD_ID = Convert.ToInt32(dr["PK_RD_ID"]),
                                        PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"]),
                                        VendorDocumentNumber = Convert.ToString(dr["VendorDocumentNumber"])
                                    }
                                    );
                            }
                        }

                        else
                        {
                            #region Bind Hardcoded Document Name
                            var arrDocName = new string[] { "PR/MR/ARM", "QAP/ITP/QCP", "Drawing(s)", "Procedure(s)", "Datasheet(s)", "Others(Specify)" };

                            foreach (var dr in arrDocName) // loop for adding add from dataset to list<modeldata>  
                            {
                                lstDocName.Add(new ReferenceDocumentsModel
                                {
                                    Document_Name = dr,

                                });
                            }

                            IVR.Visible = "True";
                            IVR.Document_Name = null;
                            ViewData["DocName"] = lstDocName;
                            ViewBag.DocName = lstDocName;
                            #endregion
                        }

                    }
                    else
                    {
                        CostSheetDashBoard = objDalVisitReport.GetReferenceDocumentsARC(IVR.Pk_callidAVR);
                        if (CostSheetDashBoard.Rows.Count > 0)
                        {
                            IVR.Visible = "False";
                            foreach (DataRow dr in CostSheetDashBoard.Rows)
                            {
                                lstRefranceDocsDashBoard.Add(
                                    new ReferenceDocumentsModel
                                    {
                                        Document_No = Convert.ToString(dr["Document_No"]),
                                        Document_Name = Convert.ToString(dr["Document_Name"]),
                                        Approval_Status = Convert.ToString(dr["Approval_Status"]),
                                        PK_RD_ID = Convert.ToInt32(dr["PK_RD_ID"]),
                                        Pk_callidAVR = Convert.ToString(dr["Pk_call_idARC"]),
                                        VendorDocumentNumber = Convert.ToString(dr["VendorDocumentNumber"])
                                    }
                                    );
                            }
                        }

                        else
                        {
                            #region Bind Hardcoded Document Name
                            var arrDocName = new string[] { "PR/MR/ARM", "QAP/ITP/QCP", "Drawing(s)", "Procedure(s)", "Datasheet(s)", "Others(Specify)" };

                            foreach (var dr in arrDocName) // loop for adding add from dataset to list<modeldata>  
                            {
                                lstDocName.Add(new ReferenceDocumentsModel
                                {
                                    Document_Name = dr,

                                });
                            }

                            IVR.Visible = "True";
                            IVR.Document_Name = null;
                            ViewData["DocName"] = lstDocName;
                            ViewBag.DocName = lstDocName;
                            #endregion
                        }
                    }


                }
                catch (Exception ex)
                {
                    string Error = ex.Message.ToString();
                    return RedirectToAction("ErrorPage", "InspectionReleaseNote", new { @Error = Error });
                }
            }


            ViewData["CostSheet"] = lstRefranceDocsDashBoard;
            ViewBag.CostSheet = lstRefranceDocsDashBoard;
            return View(IVR);
            //return View();
        }
        [HttpPost]
        public ActionResult ReferenceDocuments(ReferenceDocumentsModel IVR, FormCollection fc)
        {

            int? PK_CALL_ID = IVR.PK_CALL_ID;

            string Result = string.Empty;
            try
            {
                if (IVR.PK_RD_ID == 0)
                {
                    foreach (var item in IVR.RD)
									 
																				   
													   
                    {
                        IVR.Type = "IVR";
                        IVR.Status = "1";
                        IVR.Document_Name = item.Document_Name;
                        IVR.Document_No = item.Document_No;
                        IVR.VendorDocumentNumber = item.VendorDocumentNumber;
                        IVR.Approval_Status = item.Approval_Status;
                        Result = objDalVisitReport.InsertUpdateReferenceDocuments(IVR);
                        if (Result != "" && Result != null)
                        {
                            TempData["InsertCompany"] = Result;
                        }
                    }

                    

                }
                else
                {
                    foreach (var item in IVR.RD)
                    {
                        IVR.Type = "IVR";
                        IVR.Status = "1";
                        IVR.Document_Name = item.Document_Name;
                        IVR.Document_No = item.Document_No;
                        IVR.VendorDocumentNumber = item.VendorDocumentNumber;
                        IVR.Approval_Status = item.Approval_Status;
                        Result = objDalVisitReport.InsertUpdateReferenceDocuments(IVR);
                        if (Result != "" && Result != null)
                        {
                            TempData["InsertCompany"] = Result;
                        }
                    }

                    
                    if (Result != null && Result != "")
                    {
                        TempData["UpdateCompany"] = Result;
                    }

                }
            }
            catch (Exception ex)
            {
                string Error = ex.Message.ToString();
                return RedirectToAction("ErrorPage", "InspectionReleaseNote", new { @Error = Error });
            }
            #region
            DataTable CostSheetDashBoard = new DataTable();
            List<ReferenceDocumentsModel> lstCompanyDashBoard = new List<ReferenceDocumentsModel>();
            if (IVR.PK_CALL_ID != null)
            {
                CostSheetDashBoard = objDalVisitReport.GetReferenceDocuments(IVR.PK_CALL_ID);
                try
                {
                    if (CostSheetDashBoard.Rows.Count > 0)
                    {
                        IVR.PK_CALL_ID = Convert.ToInt32(CostSheetDashBoard.Rows[0]["PK_CALL_ID"]);
                        foreach (DataRow dr in CostSheetDashBoard.Rows)
                        {
                            lstCompanyDashBoard.Add(
                                new ReferenceDocumentsModel
                                {
                                    Document_No = Convert.ToString(dr["Document_No"]),
                                    Document_Name = Convert.ToString(dr["Document_Name"]),
                                    Approval_Status = Convert.ToString(dr["Approval_Status"]),
                                    PK_RD_ID = Convert.ToInt32(dr["PK_RD_ID"]),
                                    PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"]),
                                    VendorDocumentNumber = Convert.ToString(dr["VendorDocumentNumber"]),
                                }
                                );
                        }
                    }
                }
                catch (Exception ex)
                {
                    string Error = ex.Message.ToString();
                    return RedirectToAction("ErrorPage", "InspectionReleaseNote", new { @Error = Error });
                }
                ViewData["CostSheet"] = lstCompanyDashBoard;
                ViewBag.CostSheet = lstCompanyDashBoard;
                #endregion
            }
            else
            {
                CostSheetDashBoard = objDalVisitReport.GetReferenceDocumentsARC(IVR.Pk_callidAVR);
                try
                {
                    if (CostSheetDashBoard.Rows.Count > 0)
                    {
                        IVR.Pk_callidAVR = Convert.ToString(CostSheetDashBoard.Rows[0]["Pk_callidAVR"]);
                        foreach (DataRow dr in CostSheetDashBoard.Rows)
                        {
                            lstCompanyDashBoard.Add(
                                new ReferenceDocumentsModel
                                {
                                    Document_No = Convert.ToString(dr["Document_No"]),
                                    Document_Name = Convert.ToString(dr["Document_Name"]),
                                    Approval_Status = Convert.ToString(dr["Approval_Status"]),
                                    PK_RD_ID = Convert.ToInt32(dr["PK_RD_ID"]),
                                    Pk_callidAVR = Convert.ToString(dr["Pk_call_idARC"]),
                                    VendorDocumentNumber = Convert.ToString(dr["VendorDocumentNumber"]),
                                }
                                );
                        }
                    }
                }
                catch (Exception ex)
                {
                    string Error = ex.Message.ToString();
                    return RedirectToAction("ErrorPage", "InspectionReleaseNote", new { @Error = Error });
                }
                ViewData["CostSheet"] = lstCompanyDashBoard;
                ViewBag.CostSheet = lstCompanyDashBoard;
            }

           

            //IVR.Document_No =".";
            //IVR.Document_Name=".";
            //IVR.Approval_Status="0";
            //IVR.PK_RD_ID = 0;
            //IVR.VendorDocumentNumber = "" ;

            IVR.Document_No = "";
            IVR.Document_Name = "";
            IVR.Approval_Status = "";
            IVR.PK_RD_ID = 0;
            IVR.VendorDocumentNumber = "";


            // IVR = null;

            

            ReferenceDocumentsModel IVRNew = new ReferenceDocumentsModel();
            if (IVR.PK_CALL_ID != null)
            {
                return RedirectToAction("ReferenceDocuments", new { sid = IVR.PK_CALL_ID });
            }
            else
            {
                return RedirectToAction("ReferenceDocuments", new { Sids = IVR.Pk_callidAVR });
            }
        }

        [HttpPost]
        public ActionResult UpdateReferenceD(ReferenceDocumentsModel IVR, FormCollection fc)
        {


            string str = fc["RD[j].Document_No"];
            int? PK_CALL_ID = IVR.PK_CALL_ID;

            string Result = string.Empty;
            try
            {
               // IVR.PK_RD_ID = 1;// Set Hard code value for Update
                //if (IVR.PK_RD_ID == 0)
                //{
                //    foreach (var item in IVR.RD)
                //    {
                //        IVR.Type = "IVR";
                //        IVR.Status = "1";
                //        IVR.Document_Name = item.Document_Name;
                //        IVR.Document_No = item.Document_No;
                //        IVR.VendorDocumentNumber = item.Document_No;
                //        IVR.Approval_Status = item.Approval_Status;
                //        Result = objDalVisitReport.InsertUpdateReferenceDocuments(IVR);
                //        if (Result != "" && Result != null)
                //        {
                //            TempData["InsertCompany"] = Result;
                //        }
                //    }



                //}
                //else
                //{
                    foreach (var item in IVR.RD)
                    {

                    IVR.PK_CALL_ID = item.PK_CALL_ID;
                        IVR.Type = "IVR";
                        IVR.Status = "1";
                        IVR.Document_Name = item.Document_Name;
                        IVR.Document_No = item.Document_No;
                        IVR.VendorDocumentNumber = item.VendorDocumentNumber;
                        IVR.Approval_Status = item.Approval_Status;
                        IVR.PK_RD_ID = item.PK_RD_ID;
                        Result = objDalVisitReport.InsertUpdateReferenceDocuments(IVR);
                        if (Result != "" && Result != null)
                        {
                            TempData["InsertCompany"] = Result;
                        }
                    }


                    if (Result != null && Result != "")
                    {
                        TempData["UpdateCompany"] = Result;
                    }

                //}
            }
            catch (Exception ex)
            {
                string Error = ex.Message.ToString();
                return RedirectToAction("ErrorPage", "InspectionReleaseNote", new { @Error = Error });
            }
            #region
            DataTable CostSheetDashBoard = new DataTable();
            List<ReferenceDocumentsModel> lstCompanyDashBoard = new List<ReferenceDocumentsModel>();
            CostSheetDashBoard = objDalVisitReport.GetReferenceDocuments(IVR.PK_CALL_ID);
            try
            {
                if (CostSheetDashBoard.Rows.Count > 0)
                {
                    
                    IVR.PK_CALL_ID = Convert.ToInt32(CostSheetDashBoard.Rows[0]["PK_CALL_ID"]);
                    foreach (DataRow dr in CostSheetDashBoard.Rows)
                    {
                        lstCompanyDashBoard.Add(
                            new ReferenceDocumentsModel
                            {

                                Document_No = Convert.ToString(dr["Document_No"]),
                                Document_Name = Convert.ToString(dr["Document_Name"]),
                                Approval_Status = Convert.ToString(dr["Approval_Status"]),
                                PK_RD_ID = Convert.ToInt32(dr["PK_RD_ID"]),
                                PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"]),
                                VendorDocumentNumber = Convert.ToString(dr["VendorDocumentNumber"]),
                            }
                            );
                    }
                }
            }
            catch (Exception ex)
            {
                string Error = ex.Message.ToString();
                return RedirectToAction("ErrorPage", "InspectionReleaseNote", new { @Error = Error });
            }
            ViewData["CostSheet"] = lstCompanyDashBoard;
            ViewBag.CostSheet = lstCompanyDashBoard;
            #endregion
            
            IVR.Document_No = "";
            IVR.Document_Name = "";
            IVR.Approval_Status = "";
            IVR.PK_RD_ID = 0;
            IVR.VendorDocumentNumber = "";


            // IVR = null;

            ReferenceDocumentsModel IVRNew = new ReferenceDocumentsModel();

            return RedirectToAction("ReferenceDocuments" , new { sid = IVR.PK_CALL_ID });
        }

        public ActionResult DeleteIReferenceDocumentsData(ReferenceDocumentsModel IVR)
        {
            DataSet ItemDescriptionData = new DataSet();
            int Result = 0;

            try
            {
                Result = objDalVisitReport.DeleteRefranceDocumentData(IVR.PK_RD_ID);


                if (Result != 0)
                {
                    TempData["DeleteBranch"] = Result;
                    return RedirectToAction("ReferenceDocuments", new { PK_CALL_ID = IVR.PK_CALL_ID });
                    // return RedirectToAction("ReferenceDocuments", IVRNews);
                }
            }
            catch (Exception)
            {
                throw;
            }

            return RedirectToAction("ReferenceDocuments", new { PK_CALL_ID = IVR.PK_CALL_ID });
        }
        #endregion

        #region  Inspection Activities

        [HttpGet]
        public ActionResult InspectionActivites(InspectionActivitiesModel IVR)
        {

            DataTable CostSheetDashBoard = new DataTable();
            DataSet ItemDescriptionData = new DataSet();
            List<InspectionActivitiesModel> lstCompanyDashBoard = new List<InspectionActivitiesModel>();



            if (IVR.PK_IA_ID != 0)
            {
                ItemDescriptionData = objDalVisitReport.GetInspectionActivitiesByPKIAID(IVR.PK_IA_ID);
                if (ItemDescriptionData.Tables[0].Rows.Count > 0)
                {
                    IVR.Stages_Witnessed = Convert.ToString(ItemDescriptionData.Tables[0].Rows[0]["Stages_Witnessed"]);
                    IVR.PK_IA_ID = Convert.ToInt32(ItemDescriptionData.Tables[0].Rows[0]["PK_IA_ID"]);
                    IVR.PK_CALL_ID = Convert.ToInt32(ItemDescriptionData.Tables[0].Rows[0]["PK_CALL_ID"]);
                    IVR.Pk_callidAVR = Convert.ToString(ItemDescriptionData.Tables[0].Rows[0]["Pk_call_idARC"]);

                    if (IVR.PK_CALL_ID != 0 && IVR.PK_CALL_ID != null)
                    {
                        CostSheetDashBoard = objDalVisitReport.GetInspectionActivities(IVR.PK_CALL_ID);
                        if (CostSheetDashBoard.Rows.Count > 0)
                        {
                            foreach (DataRow dr in CostSheetDashBoard.Rows)
                            {
                                lstCompanyDashBoard.Add(
                                    new InspectionActivitiesModel
                                    {
                                        Stages_Witnessed = Convert.ToString(dr["Stages_Witnessed"]),
                                        PK_IA_ID = Convert.ToInt32(dr["PK_IA_ID"]),
                                        PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"])

                                    }
                                    );
                            }
                        }
                    }else
                    {
                        CostSheetDashBoard = objDalVisitReport.GetInspectionActivitiesARC(IVR.Pk_callidAVR);
                        if (CostSheetDashBoard.Rows.Count > 0)
                        {
                            foreach (DataRow dr in CostSheetDashBoard.Rows)
                            {
                                lstCompanyDashBoard.Add(
                                    new InspectionActivitiesModel
                                    {
                                        Stages_Witnessed = Convert.ToString(dr["Stages_Witnessed"]),
                                        PK_IA_ID = Convert.ToInt32(dr["PK_IA_ID"]),
                                        Pk_callidAVR = Convert.ToString(dr["Pk_call_idARC"])

                                    }
                                    );
                            }
                        }
                    }

                }

            }
            else if (IVR.PK_CALL_ID != 0 && IVR.PK_CALL_ID != null)
            {
                try
                {
                    CostSheetDashBoard = objDalVisitReport.GetInspectionActivities(IVR.PK_CALL_ID);
                    if (CostSheetDashBoard.Rows.Count > 0)
                    {
                        foreach (DataRow dr in CostSheetDashBoard.Rows)
                        {
                            lstCompanyDashBoard.Add(
                                new InspectionActivitiesModel
                                {
                                    Stages_Witnessed = Convert.ToString(dr["Stages_Witnessed"]),
                                    PK_IA_ID = Convert.ToInt32(dr["PK_IA_ID"]),
                                    PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"])
                                }
                                );
                        }
                    }
                }
                catch (Exception ex)
                {
                    string Error = ex.Message.ToString();
                    return RedirectToAction("ErrorPage", "InspectionReleaseNote", new { @Error = Error });
                }
            }
            else
            {
                try
                {
                    CostSheetDashBoard = objDalVisitReport.GetInspectionActivities(IVR.PK_CALL_ID);
                    if (CostSheetDashBoard.Rows.Count > 0)
                    {
                        foreach (DataRow dr in CostSheetDashBoard.Rows)
                        {
                            lstCompanyDashBoard.Add(
                                new InspectionActivitiesModel
                                {
                                    Stages_Witnessed = Convert.ToString(dr["Stages_Witnessed"]),
                                    PK_IA_ID = Convert.ToInt32(dr["PK_IA_ID"]),
                                    PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"])
                                }
                                );
                        }
                    }
                }
                catch (Exception ex)
                {
                    string Error = ex.Message.ToString();
                    return RedirectToAction("ErrorPage", "InspectionReleaseNote", new { @Error = Error });
                }
            }

            ViewData["CostSheet"] = lstCompanyDashBoard;
            return View(IVR);
        }
        [HttpPost]
        public ActionResult InspectionActivites(InspectionActivitiesModel IVR, FormCollection fc)
        {
            string Result = string.Empty;
            try
            {
                if (IVR.PK_IA_ID == 0)
                {
                    IVR.Type = "IVR";
                    IVR.Status = "1";
                    Result = objDalVisitReport.InsertUpdateInspectionActivities(IVR);
                    if (Result != "" && Result != null)
                    {
                        TempData["InsertCompany"] = Result;
                    }

                }
                else
                {
                    Result = objDalVisitReport.InsertUpdateInspectionActivities(IVR);
                    if (Result != null && Result != "")
                    {
                        TempData["UpdateCompany"] = Result;
                    }

                }
            }
            catch (Exception ex)
            {
                string Error = ex.Message.ToString();
                return RedirectToAction("ErrorPage", "InspectionReleaseNote", new { @Error = Error });
            }
            #region
            DataTable CostSheetDashBoard = new DataTable();
            List<InspectionActivitiesModel> lstCompanyDashBoard = new List<InspectionActivitiesModel>();
            if (IVR.PK_CALL_ID != null && IVR.PK_CALL_ID != 0)
            {
                CostSheetDashBoard = objDalVisitReport.GetInspectionActivities(IVR.PK_CALL_ID);
                try
                {
                    if (CostSheetDashBoard.Rows.Count > 0)
                    {
                        foreach (DataRow dr in CostSheetDashBoard.Rows)
                        {
                            lstCompanyDashBoard.Add(
                                new InspectionActivitiesModel
                                {
                                    Stages_Witnessed = Convert.ToString(dr["Stages_Witnessed"]),
                                    PK_IA_ID = Convert.ToInt32(dr["PK_IA_ID"]),
                                    PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"])
                                }
                                );
                        }
                    }
                }
                catch (Exception ex)
                {
                    string Error = ex.Message.ToString();
                    return RedirectToAction("ErrorPage", "InspectionReleaseNote", new { @Error = Error });
                }
            }
            else
            {
                CostSheetDashBoard = objDalVisitReport.GetInspectionActivitiesARC(IVR.Pk_callidAVR);
                try
                {
                    if (CostSheetDashBoard.Rows.Count > 0)
                    {
                        foreach (DataRow dr in CostSheetDashBoard.Rows)
                        {
                            lstCompanyDashBoard.Add(
                                new InspectionActivitiesModel
                                {
                                    Stages_Witnessed = Convert.ToString(dr["Stages_Witnessed"]),
                                    PK_IA_ID = Convert.ToInt32(dr["PK_IA_ID"]),
                                    Pk_callidAVR = Convert.ToString(dr["Pk_call_idARC"])
                                }
                                );
                        }
                    }
                }
                catch (Exception ex)
                {
                    string Error = ex.Message.ToString();
                    return RedirectToAction("ErrorPage", "InspectionReleaseNote", new { @Error = Error });
                }
            }
            ViewData["CostSheet"] = lstCompanyDashBoard;
            #endregion

            InspectionActivitiesModel IVRNEW = new InspectionActivitiesModel();
            
            if (IVR.PK_CALL_ID != null && IVR.PK_CALL_ID != 0)
            {
                IVRNEW.PK_CALL_ID = IVR.PK_CALL_ID;
            }
            else
            {
                IVRNEW.Pk_callidAVR = IVR.Pk_callidAVR;
            }

            // return View(IVR);
            return RedirectToAction("InspectionActivites", IVRNEW);
        }


        public ActionResult DeleteIInspectionActivitesData(InspectionActivitiesModel IVR)
        {
            DataSet ItemDescriptionData = new DataSet();
            int Result = 0;

            try
            {
                Result = objDalVisitReport.DeleteInspectionActivitiesData(IVR.PK_IA_ID);

                if (Result != 0)
                {
                    TempData["DeleteBranch"] = Result;
                    InspectionActivitiesModel IVRNews = new InspectionActivitiesModel();
                    IVRNews.PK_IVR_ID = IVR.PK_IVR_ID;
                    return RedirectToAction("InspectionActivites", new { PK_CALL_ID = IVR.PK_CALL_ID });
                    //return RedirectToAction("InspectionActivites", IVRNews);
                }
            }
            catch (Exception)
            {
                throw;
            }
            return RedirectToAction("InspectionActivites", new { PK_CALL_ID = IVR.PK_CALL_ID });
            //return RedirectToAction("InspectionActivites", IVRNew);
        }

        #endregion

        #region  Document Reviewd

        [HttpGet]
        public ActionResult DocumentReviewed(DocumentRevieweModel IVR)
        {

            DataTable CostSheetDashBoard = new DataTable();
            DataSet ItemDescriptionData = new DataSet();
            List<DocumentRevieweModel> lstCompanyDashBoard = new List<DocumentRevieweModel>();



            if (IVR.PK_DR_ID != 0)
            {
                ItemDescriptionData = objDalVisitReport.GetDocumentRevieweModelById(IVR.PK_DR_ID);
                if (ItemDescriptionData.Tables[0].Rows.Count > 0)
                {
                    IVR.Description = Convert.ToString(ItemDescriptionData.Tables[0].Rows[0]["Description"]);
                    IVR.PK_DR_ID = Convert.ToInt32(ItemDescriptionData.Tables[0].Rows[0]["PK_DR_ID"]);
                    IVR.PK_CALL_ID = Convert.ToInt32(ItemDescriptionData.Tables[0].Rows[0]["PK_CALL_ID"]);


                    CostSheetDashBoard = objDalVisitReport.GetDocumentRevieweModelByCall_Id(IVR.PK_CALL_ID);
                    if (CostSheetDashBoard.Rows.Count > 0)
                    {
                        foreach (DataRow dr in CostSheetDashBoard.Rows)
                        {
                            lstCompanyDashBoard.Add(
                                new DocumentRevieweModel
                                {
                                    Description = Convert.ToString(dr["Description"]),
                                    PK_DR_ID = Convert.ToInt32(dr["PK_DR_ID"]),
                                    PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"])

                                }
                                );
                        }
                    }

                }

            }
            else
            {
                try
                {
                    CostSheetDashBoard = objDalVisitReport.GetDocumentRevieweModelByCall_Id(IVR.PK_CALL_ID);
                    if (CostSheetDashBoard.Rows.Count > 0)
                    {
                        foreach (DataRow dr in CostSheetDashBoard.Rows)
                        {
                            lstCompanyDashBoard.Add(
                                new DocumentRevieweModel
                                {
                                    Description = Convert.ToString(dr["Description"]),
                                    PK_DR_ID = Convert.ToInt32(dr["PK_DR_ID"]),
                                    PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"])
                                }
                                );
                        }
                    }
                }
                catch (Exception ex)
                {
                    string Error = ex.Message.ToString();
                    return RedirectToAction("ErrorPage", "InspectionReleaseNote", new { @Error = Error });
                }
            }

            ViewData["CostSheet"] = lstCompanyDashBoard;
            return View(IVR);
        }
        [HttpPost]
        public ActionResult DocumentReviewed(DocumentRevieweModel IVR, FormCollection fc)
        {
            string Result = string.Empty;
            try
            {
                if (IVR.PK_DR_ID == 0)
                {
                    IVR.Type = "IVR";
                    IVR.Status = "1";
                    Result = objDalVisitReport.InsertUpdateDocumentReviewe(IVR);
                    if (Result != "" && Result != null)
                    {
                        TempData["InsertCompany"] = Result;
                    }

                }
                else
                {
                    Result = objDalVisitReport.InsertUpdateDocumentReviewe(IVR);
                    if (Result != null && Result != "")
                    {
                        TempData["UpdateCompany"] = Result;
                    }

                }
            }
            catch (Exception ex)
            {
                string Error = ex.Message.ToString();
                return RedirectToAction("ErrorPage", "InspectionReleaseNote", new { @Error = Error });
            }
            #region
            DataTable CostSheetDashBoard = new DataTable();
            List<DocumentRevieweModel> lstCompanyDashBoard = new List<DocumentRevieweModel>();
            CostSheetDashBoard = objDalVisitReport.GetDocumentRevieweModelByCall_Id(IVR.PK_CALL_ID);
            try
            {
                if (CostSheetDashBoard.Rows.Count > 0)
                {
                    foreach (DataRow dr in CostSheetDashBoard.Rows)
                    {
                        lstCompanyDashBoard.Add(
                            new DocumentRevieweModel
                            {
                                Description = Convert.ToString(dr["Description"]),
                                PK_DR_ID = Convert.ToInt32(dr["PK_DR_ID"]),
                                PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"])
                            }
                            );
                    }
                }
            }
            catch (Exception ex)
            {
                string Error = ex.Message.ToString();
                return RedirectToAction("ErrorPage", "InspectionReleaseNote", new { @Error = Error });
            }
            ViewData["CostSheet"] = lstCompanyDashBoard;
            IVR.PK_DR_ID = 0;
            #endregion

            DocumentRevieweModel IVRNEW = new DocumentRevieweModel();
            IVRNEW.PK_CALL_ID = IVR.PK_CALL_ID;
            //return View(IVR);
            return RedirectToAction("DocumentReviewed", IVRNEW);
        }

        public ActionResult DeleteDocumentReviewedData(DocumentRevieweModel IVR)
        {
            DataSet ItemDescriptionData = new DataSet();
            int Result = 0;

            try
            {
                Result = objDalVisitReport.DeleteDocumentRevieweData(Convert.ToInt32(IVR.PK_DR_ID));

                if (Result != 0)
                {
                    TempData["DeleteBranch"] = Result;
                    return RedirectToAction("DocumentReviewed", new { PK_CALL_ID = IVR.PK_CALL_ID });
                }
            }
            catch (Exception)
            {
                throw;
            }
            return RedirectToAction("DocumentReviewed", new { PK_CALL_ID = IVR.PK_CALL_ID });
        }
        #endregion


        #region  EquipmentDetails

        [HttpGet]
        public ActionResult EquipmentDetails(EquipmentDetailsModel IVR)
        {

            DataTable CostSheetDashBoard = new DataTable();
            DataSet ItemDescriptionData = new DataSet();
            List<EquipmentDetailsModel> lstCompanyDashBoard = new List<EquipmentDetailsModel>();



            if (IVR.PK_DOE_Id != 0)
            {
                ItemDescriptionData = objDalVisitReport.GetEquipmentDetailsById(IVR.PK_DOE_Id);
                if (ItemDescriptionData.Tables[0].Rows.Count > 0)
                {
                    IVR.Name_Of_Equipments = Convert.ToString(ItemDescriptionData.Tables[0].Rows[0]["Name_Of_Equipments"]);
                    IVR.Range = Convert.ToString(ItemDescriptionData.Tables[0].Rows[0]["Range"]);
                    IVR.Id = Convert.ToString(ItemDescriptionData.Tables[0].Rows[0]["Id"]);
                    IVR.CalibrationValid_Till_date = Convert.ToString(ItemDescriptionData.Tables[0].Rows[0]["CalibrationValid_Till_date"]);
                    IVR.Certification_No_Date = Convert.ToString(ItemDescriptionData.Tables[0].Rows[0]["Certification_No_Date"]);

                    IVR.PK_DOE_Id = Convert.ToInt32(ItemDescriptionData.Tables[0].Rows[0]["PK_DOE_Id"]);
                    IVR.PK_CALL_ID = Convert.ToInt32(ItemDescriptionData.Tables[0].Rows[0]["PK_CALL_ID"]);
                    int NABLseenote1 = Convert.ToInt32(ItemDescriptionData.Tables[0].Rows[0]["NABLseenote1"]);
                    IVR.NABLseenote1 = Convert.ToBoolean(NABLseenote1);
                    int NonNABLseenote2 = Convert.ToInt32(ItemDescriptionData.Tables[0].Rows[0]["NonNABLseenote2"]);
                    IVR.NonNABLseenote2 = Convert.ToBoolean(NonNABLseenote2);

                    CostSheetDashBoard = objDalVisitReport.GetEquipmentDetailsModelByCall_Id(IVR.PK_CALL_ID);
                    if (CostSheetDashBoard.Rows.Count > 0)
                    {
                        foreach (DataRow dr in CostSheetDashBoard.Rows)
                        {
                            lstCompanyDashBoard.Add(
                                new EquipmentDetailsModel
                                {
                                    Name_Of_Equipments = Convert.ToString(dr["Name_Of_Equipments"]),
                                    Range = Convert.ToString(dr["Range"]),
                                    Id = Convert.ToString(dr["Id"]),
                                    CalibrationValid_Till_date = Convert.ToString(dr["CalibrationValid_Till_date"]),
                                    Certification_No_Date = Convert.ToString(dr["Certification_No_Date"]),
                                    PK_DOE_Id = Convert.ToInt32(dr["PK_DOE_Id"]),
                                    PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"]),
                                    NABLseenote1 = Convert.ToBoolean(dr["NABLseenote1"]),
                                    NonNABLseenote2 = Convert.ToBoolean(dr["NonNABLseenote2"]),

                                }
                                );
                        }
                    }

                }

            }
            else
            {
                try
                {
                    CostSheetDashBoard = objDalVisitReport.GetEquipmentDetailsModelByCall_Id(IVR.PK_CALL_ID);
                    if (CostSheetDashBoard.Rows.Count > 0)
                    {
                        foreach (DataRow dr in CostSheetDashBoard.Rows)
                        {
                            lstCompanyDashBoard.Add(
                                new EquipmentDetailsModel
                                {
                                    Name_Of_Equipments = Convert.ToString(dr["Name_Of_Equipments"]),
                                    Range = Convert.ToString(dr["Range"]),
                                    Id = Convert.ToString(dr["Id"]),
                                    CalibrationValid_Till_date = Convert.ToString(dr["CalibrationValid_Till_date"]),
                                    Certification_No_Date = Convert.ToString(dr["Certification_No_Date"]),
                                    PK_DOE_Id = Convert.ToInt32(dr["PK_DOE_Id"]),
                                    PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"]),
                                    //NABLseenote1 = Convert.ToBoolean(dr["NABLseenote1"]) == "True" ? "Yes" : "No",
                                    //NonNABLseenote2 = Convert.ToBoolean(dr["NonNABLseenote2"]) == "True" ? "Yes" : "No",
                                    SNABLseenote1 = Convert.ToString(dr["NABLseenote1"]) == "True" ? "Yes" : "-",
                                    SNonNABLseenote2 = Convert.ToString(dr["NonNABLseenote2"]) == "True" ? "Yes" : "-",

                                }
                                );
                        }
                    }
                }
                catch (Exception ex)
                {
                    string Error = ex.Message.ToString();
                    return RedirectToAction("ErrorPage", "InspectionReleaseNote", new { @Error = Error });
                }
            }

            ViewData["CostSheet"] = lstCompanyDashBoard;
            return View(IVR);
        }

        [HttpPost]
        public ActionResult EquipmentDetails(EquipmentDetailsModel IVR, FormCollection fc)
        {
            string Result = string.Empty;
            try
            {
                if (IVR.PK_DOE_Id == 0)
                {
                    IVR.Type = "IVR";
                    IVR.Status = "1";
                    Result = objDalVisitReport.InsertUpdateEquipmentDetails(IVR);
                    if (Result != "" && Result != null)
                    {
                        TempData["InsertCompany"] = Result;
                    }

                }
                else
                {
                    Result = objDalVisitReport.InsertUpdateEquipmentDetails(IVR);
                    if (Result != null && Result != "")
                    {
                        TempData["UpdateCompany"] = Result;
                    }

                }
            }
            catch (Exception ex)
            {
                string Error = ex.Message.ToString();
                return RedirectToAction("ErrorPage", "InspectionReleaseNote", new { @Error = Error });
            }
            #region
            DataTable CostSheetDashBoard = new DataTable();
            List<EquipmentDetailsModel> lstCompanyDashBoard = new List<EquipmentDetailsModel>();
            CostSheetDashBoard = objDalVisitReport.GetEquipmentDetailsModelByCall_Id(IVR.PK_CALL_ID);
            try
            {
                if (CostSheetDashBoard.Rows.Count > 0)
                {
                    foreach (DataRow dr in CostSheetDashBoard.Rows)
                    {
                        lstCompanyDashBoard.Add(
                            new EquipmentDetailsModel
                            {
                                Name_Of_Equipments = Convert.ToString(dr["Name_Of_Equipments"]),
                                Range = Convert.ToString(dr["Range"]),
                                Id = Convert.ToString(dr["Id"]),
                                CalibrationValid_Till_date = Convert.ToString(dr["CalibrationValid_Till_date"]),
                                Certification_No_Date = Convert.ToString(dr["Certification_No_Date"]),
                                PK_DOE_Id = Convert.ToInt32(dr["PK_DOE_Id"]),
                                PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"])
                            }
                            );
                    }
                }
            }
            catch (Exception ex)
            {
                string Error = ex.Message.ToString();
                return RedirectToAction("ErrorPage", "InspectionReleaseNote", new { @Error = Error });
            }
            ViewData["CostSheet"] = lstCompanyDashBoard;
            IVR.PK_DOE_Id = 0;
            #endregion

            EquipmentDetailsModel IVRNEw = new EquipmentDetailsModel();

            IVRNEw.PK_CALL_ID = IVR.PK_CALL_ID;
            return RedirectToAction("EquipmentDetails", IVRNEw);
            //return View(IVR);
        }

        public ActionResult DeleteEquipmentDetails(EquipmentDetailsModel IVR)
        {
            DataSet ItemDescriptionData = new DataSet();
            int Result = 0;

            try
            {
                Result = objDalVisitReport.DeleteEquipmentDetailsData(Convert.ToInt32(IVR.PK_DOE_Id));

                if (Result != 0)
                {
                    TempData["DeleteBranch"] = Result;
                    return RedirectToAction("EquipmentDetails", new { PK_CALL_ID = IVR.PK_CALL_ID });
                }
            }
            catch (Exception)
            {
                throw;
            }
            return RedirectToAction("EquipmentDetails", new { PK_CALL_ID = IVR.PK_CALL_ID });
        }
        #endregion


        #region  ReportImage

        [HttpGet]
        public ActionResult ReportImage(ReportImageModel IVR, int? sid)
        {
            if (Convert.ToInt32(sid) != 0)
            {
                IVR.PK_CALL_ID = Convert.ToInt32(sid);
            }

            DataTable CostSheetDashBoard = new DataTable();
            DataSet ItemDescriptionData = new DataSet();
            List<ReportImageModel> lstCompanyDashBoard = new List<ReportImageModel>();



            if (IVR.PK_IP_Id != 0)
            {
                ItemDescriptionData = objDalVisitReport.GetReportImageById(IVR.PK_IP_Id);
                if (ItemDescriptionData.Tables[0].Rows.Count > 0)
                {
                    IVR.Heading = Convert.ToString(ItemDescriptionData.Tables[0].Rows[0]["Heading"]);
                    IVR.Image = Convert.ToString(ItemDescriptionData.Tables[0].Rows[0]["Image"]);
                    IVR.PK_IP_Id = Convert.ToInt32(ItemDescriptionData.Tables[0].Rows[0]["PK_IP_Id"]);
                    IVR.PK_CALL_ID = Convert.ToInt32(ItemDescriptionData.Tables[0].Rows[0]["PK_CALL_ID"]);


                    CostSheetDashBoard = objDalVisitReport.GetReportImageByCall_Id(IVR.PK_CALL_ID);
                    if (CostSheetDashBoard.Rows.Count > 0)
                    {
                        foreach (DataRow dr in CostSheetDashBoard.Rows)
                        {
                            lstCompanyDashBoard.Add(
                                new ReportImageModel
                                {
                                    Image = Convert.ToString(dr["Image"]),
                                    Heading = Convert.ToString(dr["Heading"]),
                                    PK_IP_Id = Convert.ToInt32(dr["PK_IP_Id"]),
                                    PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"])

                                }
                                );
                        }
                    }

                }

            }
            else
            {
                try
                {
                    CostSheetDashBoard = objDalVisitReport.GetReportImageByCall_Id(IVR.PK_CALL_ID);
                    if (CostSheetDashBoard.Rows.Count > 0)
                    {
                        foreach (DataRow dr in CostSheetDashBoard.Rows)
                        {
                            lstCompanyDashBoard.Add(
                                new ReportImageModel
                                {
                                    Image = Convert.ToString(dr["Image"]),
                                    Heading = Convert.ToString(dr["Heading"]),
                                    PK_IP_Id = Convert.ToInt32(dr["PK_IP_Id"]),
                                    PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"])
                                }
                                );
                        }
                    }
                }
                catch (Exception ex)
                {
                    string Error = ex.Message.ToString();
                    return RedirectToAction("ErrorPage", "InspectionReleaseNote", new { @Error = Error });
                }
            }

            ViewData["CostSheet"] = lstCompanyDashBoard;
			ViewBag.CostSheet = lstCompanyDashBoard;										
            return View(IVR);
        }

        [HttpPost]
        public ActionResult ReportImage(ReportImageModel IVR, FormCollection fc, HttpPostedFileBase  File, List<HttpPostedFileBase> img_Banner)
        {
            string Result = string.Empty;
            try
            {
                if (IVR.PK_IP_Id == 0)
                {
                    HttpPostedFileBase Imagesection;
                    if (!string.IsNullOrEmpty(Convert.ToString(Request.Files["img_Banner"])))
                    {
                        foreach (HttpPostedFileBase single in img_Banner) // Added by Sagar Panigrahi
																				
						 
																											
																																						   
						 
							
                        {
                            Imagesection = single;//Request.Files["img_Banner"];
                            if (Imagesection != null && Imagesection.FileName != "")
                            {
                                //IVR.Image = CommonControl.FileUpload("Content/Uploads/Images/", Imagesection);
                                //IVR.Image = CommonControl.FileUploadCompress("Content/Uploads/Images/", Imagesection, IVR.PK_IP_Id, IVR.PK_CALL_ID.ToString());
                                IVR.Image = CommonControl.FileUploadResize("Content/Uploads/Images/", Imagesection, IVR.PK_IP_Id, IVR.PK_CALL_ID.ToString());
                            }
                            else
                            {
                                if (Imagesection.FileName != "")
                                {
                                    IVR.Image = "NoImage.gif";
                                }
                            }

                            IVR.Type = "IVR";
                            IVR.Status = "1";
                            Result = objDalVisitReport.InsertUpdateReportImage(IVR);
                            if (Result != "" && Result != null)
                            {
                                ModelState.Clear();
                                TempData["InsertCompany"] = Result;
                            }
                        }
                        
									 
									 
																			
													   
					 
										   
														   
                    }
                  
                    return RedirectToAction("ReportImage", IVR);
                }
                else
                {
                    HttpPostedFileBase Imagesection;
                    if (!string.IsNullOrEmpty(Convert.ToString(Request.Files["img_Banner"])))
                    {
                        Imagesection = Request.Files["img_Banner"];
                        if (Imagesection != null && Imagesection.FileName != "")
                        {
                            //IVR.Image = CommonControl.FileUpload("Content/Uploads/Images/", Imagesection);
                            IVR.Image = CommonControl.FileUploadCompress("Content/Uploads/Images/", Imagesection, IVR.PK_IP_Id, IVR.PK_CALL_ID.ToString());
                        }
                        else
                        {
                            if (Imagesection.FileName != "")
                            {
                                IVR.Image = "NoImage.gif";
                            }
                        }
                    }
                    Result = objDalVisitReport.InsertUpdateReportImage(IVR);
                    if (Result != null && Result != "")
                    {
                        ModelState.Clear();
                        TempData["UpdateCompany"] = Result;
                    }
                    return RedirectToAction("ReportImage", IVR);
                }
            }
            catch (Exception ex)
            {
                string Error = ex.Message.ToString();
            }
            #region
            DataTable CostSheetDashBoard = new DataTable();
            List<ReportImageModel> lstCompanyDashBoard = new List<ReportImageModel>();
            CostSheetDashBoard = objDalVisitReport.GetReportImageByCall_Id(IVR.PK_CALL_ID);
            try
            {
                if (CostSheetDashBoard.Rows.Count > 0)
                {
                    foreach (DataRow dr in CostSheetDashBoard.Rows)
                    {
                        lstCompanyDashBoard.Add(
                            new ReportImageModel
                            {
                                Image = Convert.ToString(dr["Image"]),
                                Heading = Convert.ToString(dr["Heading"]),
                                PK_IP_Id = Convert.ToInt32(dr["PK_IP_Id"]),
                                PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"])
                            }
                            );
                    }
                }
            }
            catch (Exception ex)
            {
                string Error = ex.Message.ToString();
                return RedirectToAction("ErrorPage", "InspectionReleaseNote", new { @Error = Error });
            }
            ViewData["CostSheet"] = lstCompanyDashBoard;
            IVR.PK_IP_Id = 0;
            #endregion
            IVR.PK_IP_Id = 0;
            IVR.Image = null;
            // IVR.Heading = null;
            return View(IVR);
        }
        

        public ActionResult DeleteImage(int? aid, int? kid)
        {
            ObjModel.PK_Call_ID = Convert.ToInt32(kid);
            try
            {
                if (objDalVisitReport.DeleteImage(Convert.ToInt32(aid)))
                {
                    TempData["Deleted"] = "Activity Details Deleted Successfully ..!";
                }
                return RedirectToAction("ReportImage", new { @sid = Convert.ToInt32(ObjModel.PK_Call_ID) });
            }
            catch (Exception)
            {
                return View();
            }
        }

       



        [HttpPost]
        public ActionResult SaveHeading(ReportImageModel IVR, FormCollection fc)
        {
            string Result = string.Empty;

            foreach (var item in IVR.Activity)
            {
                if(item.chkbox==true)
                {
                    int aid = item.PK_IP_Id;
                    bool s = objDalVisitReport.DeleteImage(Convert.ToInt32(aid));
                }
                else
                {
                    IVR.PK_CALL_ID = item.PK_CALL_ID;
                    IVR.Heading = item.Heading;
                    IVR.PK_IP_Id = item.PK_IP_Id;
                    Result = objDalVisitReport.UpdateHeading(IVR);
                }
                
            }

            int? sid = IVR.PK_CALL_ID;
                return RedirectToAction("ReportImage",new { sid= IVR.PK_CALL_ID } );
        }
        #endregion


        #region  IVR Report

        [HttpGet]
        public ActionResult IvrReports(ReportModel IVR)
        {


            Session["PK_Call_ID"] = null;
            DataTable CostSheetDashBoard = new DataTable();
            DataSet ItemDescriptionData = new DataSet();
            List<ReportModel> lstCompanyDashBoard = new List<ReportModel>();



            if (IVR.PK_RM_ID != 0)
            {
                ItemDescriptionData = objDalVisitReport.GetReportById(IVR.PK_RM_ID);
                if (ItemDescriptionData.Tables[0].Rows.Count > 0)
                {
                    IVR.ReportName = Convert.ToString(ItemDescriptionData.Tables[0].Rows[0]["ReportName"]);
                    IVR.Report = Convert.ToString(ItemDescriptionData.Tables[0].Rows[0]["Report"]);
                    IVR.PK_RM_ID = Convert.ToInt32(ItemDescriptionData.Tables[0].Rows[0]["PK_RM_ID"]);
                    IVR.PK_CALL_ID = Convert.ToInt32(ItemDescriptionData.Tables[0].Rows[0]["PK_CALL_ID"]);


                    CostSheetDashBoard = objDalVisitReport.GetReportByCall_Id(IVR.PK_CALL_ID);
                    if (CostSheetDashBoard.Rows.Count > 0)
                    {
                        foreach (DataRow dr in CostSheetDashBoard.Rows)
                        {
                            lstCompanyDashBoard.Add(
                                new ReportModel
                                {
                                    Count = CostSheetDashBoard.Rows.Count,
                                    ReportName = Convert.ToString(dr["ReportName"]),
                                    Report = Convert.ToString(dr["Report"]),
                                    CraetedDate = Convert.ToString(dr["CraetedDate"]),
                                    PK_RM_ID = Convert.ToInt32(dr["PK_RM_ID"]),
                                    PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"])

                                }
                                );
                        }
                    }

                }

            }
            else if (IVR.PK_CALL_ID != null && IVR.PK_CALL_ID != 0)
            {
                try
                {
                    CostSheetDashBoard = objDalVisitReport.GetReportByCall_Id(IVR.PK_CALL_ID);
                    if (CostSheetDashBoard.Rows.Count > 0)
                    {
                        foreach (DataRow dr in CostSheetDashBoard.Rows)
                        {
                            lstCompanyDashBoard.Add(
                                new ReportModel
                                {
                                    Count = CostSheetDashBoard.Rows.Count,
                                    ReportName = Convert.ToString(dr["ReportName"]),
                                    ReportNo = Convert.ToString(dr["ReportNo"]),
                                    Report = Convert.ToString(dr["Report"]),
                                    CraetedDate = Convert.ToString(dr["CraetedDate"]),
                                    PK_RM_ID = Convert.ToInt32(dr["PK_RM_ID"]),
                                    PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"]),

                                    SubJob_No = Convert.ToString(dr["SubJob_No"]),
                                    Sap_And_Controle_No = Convert.ToString(dr["Sap_And_Controle_No"]),
                                    Project_Name_Location = Convert.ToString(dr["Project_Name_Location"]),
                                    Client_Name = Convert.ToString(dr["Client_Name"]),
                                    Vendor_Name_Location = Convert.ToString(dr["Vendor_Name_Location"]),
                                    Po_No = Convert.ToString(dr["Po_No"]),
                                    Inspector = Convert.ToString(dr["Inspector"]),
                                    inspectionDate = Convert.ToString(dr["InspectionDate"]),
                                    ReportDate = Convert.ToString(dr["ReportDate"]),
                                    Product_item = Convert.ToString(dr["Product_item"]),
                                    Originating_Branch = Convert.ToString(dr["Originating_Branch"]),
                                    Excuting_Branch = Convert.ToString(dr["Excuting_Branch"]),
                                    // NCR = Convert.ToString(dr["NCR"]),
                                    Call_No = Convert.ToString(dr["Call_No"]),
                                    CanIRNbeissued = Convert.ToString(dr["CanIRNbeissued"]),
                                    IssuedPOItemNumbers = Convert.ToString(dr["IssuedPOItemNumbers"])

                                }
                                );
                        }
                    }
                }
                catch (Exception ex)
                {
                    string Error = ex.Message.ToString();
                    return RedirectToAction("ErrorPage", "InspectionReleaseNote", new { @Error = Error });
                }
            }
            else
            {
                CostSheetDashBoard = objDalVisitReport.GetReportByUser();
                if (CostSheetDashBoard.Rows.Count > 0)
                {
                    foreach (DataRow dr in CostSheetDashBoard.Rows)
                    {
                        lstCompanyDashBoard.Add(
                            new ReportModel
                            {
                                Count = CostSheetDashBoard.Rows.Count,
                                ReportName = Convert.ToString(dr["ReportName"]),
                                Report = Convert.ToString(dr["Report"]),
                                ReportNo = Convert.ToString(dr["ReportNo"]),
                                CraetedDate = Convert.ToString(dr["CraetedDate"]),
                                PK_RM_ID = Convert.ToInt32(dr["PK_RM_ID"]),
                                PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"]),

                                SubJob_No = Convert.ToString(dr["SubJob_No"]),
                                Sap_And_Controle_No = Convert.ToString(dr["Sap_And_Controle_No"]),
                                Project_Name_Location = Convert.ToString(dr["Project_Name_Location"]),
                                Client_Name = Convert.ToString(dr["Client_Name"]),
                                Vendor_Name_Location = Convert.ToString(dr["Vendor_Name_Location"]),
                                Po_No = Convert.ToString(dr["Po_No"]),
                                Inspector = Convert.ToString(dr["Inspector"]),
                                inspectionDate = Convert.ToString(dr["InspectionDate"]),
                                ReportDate = Convert.ToString(dr["ReportDate"]),
                                Product_item = Convert.ToString(dr["Product_item"]),
                                Originating_Branch = Convert.ToString(dr["Originating_Branch"]),
                                Excuting_Branch = Convert.ToString(dr["Excuting_Branch"]),
                                //NCR = Convert.ToString(dr["NCR"]),
                                Call_No = Convert.ToString(dr["Call_No"]),
                                CanIRNbeissued = Convert.ToString(dr["CanIRNbeissued"]),
                                IssuedPOItemNumbers = Convert.ToString(dr["IssuedPOItemNumbers"]),
                                Conclusion = Convert.ToString(dr["Conclusion"]),
                                Areas_Of_Concerns = Convert.ToString(dr["Areas_Of_Concerns"]),
                                Edit = Convert.ToString(dr["Edit"]),
                                //added by shrutika salve 041012023
                                checkIFCustomer = Convert.ToString(dr["checkIFCustomerSpecific"]),
                                IVRDownloadDate = Convert.ToString(dr["IVRDownloadDate"]),

                            }
                            );
                    }


                }
            }

            ViewData["CostSheet"] = lstCompanyDashBoard;
            ViewBag.ExportToExcel = lstCompanyDashBoard;
            IVR.lst1 = lstCompanyDashBoard;

            return View(IVR);
        }

        //[HttpPost]
        //public ActionResult IvrReports(ReportModel IVR, FormCollection fc, HttpPostedFileBase File)
        //{
        //    string Result = string.Empty;
        //    try
        //    {
        //        if (IVR.PK_RM_ID == 0)
        //        {
        //            //HttpPostedFileBase Imagesection;
        //            //if (!string.IsNullOrEmpty(Convert.ToString(Request.Files["img_Banner"])))
        //            //{
        //            //    Imagesection = Request.Files["img_Banner"];
        //            //    if (Imagesection != null && Imagesection.FileName != "")
        //            //    {
        //            //        IVR.Image = CommonControl.FileUpload("Content/Uploads/Images/", Imagesection);
        //            //    }
        //            //    else
        //            //    {
        //            //        if (Imagesection.FileName != "")
        //            //        {
        //            //            IVR.Image = "NoImage.gif";
        //            //        }
        //            //    }
        //            //}
        //            IVR.Type = "IVR";
        //            IVR.Status = "1";
        //            Result = objDalVisitReport.InsertUpdateReport(IVR);
        //            if (Result != "" && Result != null)
        //            {
        //                TempData["InsertCompany"] = Result;
        //            }

        //        }
        //        else
        //        {
        //            //HttpPostedFileBase Imagesection;
        //            //if (!string.IsNullOrEmpty(Convert.ToString(Request.Files["img_Banner"])))
        //            //{
        //            //    Imagesection = Request.Files["img_Banner"];
        //            //    if (Imagesection != null && Imagesection.FileName != "")
        //            //    {
        //            //        IVR.Image = CommonControl.FileUpload("Content/Uploads/Images/", Imagesection);
        //            //    }
        //            //    else
        //            //    {
        //            //        if (Imagesection.FileName != "")
        //            //        {
        //            //            IVR.Image = "NoImage.gif";
        //            //        }
        //            //    }
        //            //}
        //            Result = objDalVisitReport.InsertUpdateReport(IVR);
        //            if (Result != null && Result != "")
        //            {
        //                TempData["UpdateCompany"] = Result;
        //            }

        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        string Error = ex.Message.ToString();
        //    }
        //    #region
        //    DataTable CostSheetDashBoard = new DataTable();
        //    List<ReportModel> lstCompanyDashBoard = new List<ReportModel>();
        //    CostSheetDashBoard = objDalVisitReport.GetReportByCall_Id(IVR.PK_CALL_ID);
        //    try
        //    {
        //        if (CostSheetDashBoard.Rows.Count > 0)
        //        {
        //            foreach (DataRow dr in CostSheetDashBoard.Rows)
        //            {
        //                lstCompanyDashBoard.Add(
        //                    new ReportModel
        //                    {
        //                        ReportName = Convert.ToString(dr["ReportName"]),
        //                        Report = Convert.ToString(dr["Report"]),
        //                        CraetedDate = Convert.ToDateTime(dr["CraetedDate"]),
        //                        PK_RM_ID = Convert.ToInt32(dr["PK_RM_ID"]),
        //                        PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"])
        //                    }
        //                    );
        //            }
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        string Error = ex.Message.ToString();
        //    }
        //    ViewData["CostSheet"] = lstCompanyDashBoard;
        //    IVR.PK_RM_ID = 0;
        //    #endregion


        //    return View(IVR);
        //}


        [HttpPost]
        public ActionResult IvrReports(int? PK_CALL_ID)
        {
            RMData.PK_CALL_ID = Convert.ToInt32(PK_CALL_ID);
            DataTable ItemDescriptionDashBoard = new DataTable();
            DataTable RefranceDocumentsDashBoard = new DataTable();
            DataTable InspectionActivitesDashBoard = new DataTable();
            DataTable DocumentsReviewBoard = new DataTable();
            DataTable EquipmentDetailsBoard = new DataTable();
            DataSet DSJobMasterByQtId = new DataSet();
            DataTable ReportDashBoard = new DataTable();
            DataTable CostSheetDashBoard = new DataTable();
            int count = 0;
            DataTable ImageReportDashBoard = new DataTable();
            List<ReportImageModel> ImageDashBoard = new List<ReportImageModel>();
            List<ItemDescriptionModel> lstCompanyDashBoard = new List<ItemDescriptionModel>();
            List<ReferenceDocumentsModel> RefranceDocuments = new List<ReferenceDocumentsModel>();
            List<InspectionActivitiesModel> InspectionDocuments = new List<InspectionActivitiesModel>();
            List<DocumentRevieweModel> DocumentReview = new List<DocumentRevieweModel>();
            List<EquipmentDetailsModel> EquipmentDetails = new List<EquipmentDetailsModel>();
            List<ReportModel> ReportDashboard = new List<ReportModel>();
            DataSet dtSrNo = new DataSet();
            string SrNo = "";

            ReportModel RM = new ReportModel();
            string Result = "";
            if (PK_CALL_ID != 0 || PK_CALL_ID != null)
            {
                int i = 0;
                int J = 0;
                int K = 0;
                int L = 0;
                int M = 0;
                int N = 0;
                #region 
                DSJobMasterByQtId = objDalVisitReport.EditInspectionVisitReportByPKCallID(PK_CALL_ID);

                if (DSJobMasterByQtId.Tables[0].Rows.Count > 0)
                {
                    ObjModelVisitReport.Branch = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Branch"]);
                    ObjModelVisitReport.Sap_And_Controle_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Sap_And_Controle_No"]);
                    ObjModelVisitReport.PK_IVR_ID = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["PK_IVR_ID"]);
                    ObjModelVisitReport.Project_Name_Location = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Project_Name_Location"]);
                    ObjModelVisitReport.Address_Of_Inspection = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Address_Of_Inspection"]);
                    ObjModelVisitReport.End_user_Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["End_user_Name"]);
                    ObjModelVisitReport.Vendor_Name_Location = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Vendor_Name_Location"]);
                    ObjModelVisitReport.PK_Call_ID = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["PK_Call_ID"]);
                    ObjModelVisitReport.Notification_Name_No_Date = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Notification_Name_No_Date"]);

                    ObjModelVisitReport.Date_Of_Inspection = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Date_Of_Inspection"]);
                    ObjModelVisitReport.Client_Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Client_Name"]);
                    ObjModelVisitReport.DEC_PMC_EPC_Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["DEC_PMC_EPC_Name"]);
                    ObjModelVisitReport.DEC_PMC_EPC_Assignment_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["DEC_PMC_EPC_Assignment_No"]);
                    ObjModelVisitReport.Po_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Po_No"]);
                    ObjModelVisitReport.Sub_Vendor_Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Sub_Vendor_Name"]);
                    ObjModelVisitReport.Po_No_SubVendor = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Po_No_SubVendor"]);
                    ObjModelVisitReport.SubJob_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["SubJob_No"]);

                    int kick = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Kick_Off_Pre_Inspection"]);
                    ObjModelVisitReport.Kick_Off_Pre_Inspection = Convert.ToBoolean(kick);

                    int Mi = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Material_identification"]);
                    ObjModelVisitReport.Material_identification = Convert.ToBoolean(Mi);

                    int Interim_Stages = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Interim_Stages"]);
                    ObjModelVisitReport.Interim_Stages = Convert.ToBoolean(Interim_Stages);

                    int Document_review = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Document_review"]);
                    ObjModelVisitReport.Document_review = Convert.ToBoolean(Document_review);

                    int Final_Inspection = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Final_Inspection"]);
                    ObjModelVisitReport.Final_Inspection = Convert.ToBoolean(Final_Inspection);

                    int Re_inspection = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Re_inspection"]);
                    ObjModelVisitReport.Re_inspection = Convert.ToBoolean(Re_inspection);

                    int MasterListOfcalibratedInstruments = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["MasterListOfcalibratedInstruments"]);
                    ObjModelVisitReport.MasterListOfcalibratedInstruments = Convert.ToBoolean(MasterListOfcalibratedInstruments);


                    ObjModelVisitReport.CanIRNbeissued = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["CanIRNbeissued"]);
                    ObjModelVisitReport.IssuedPOItemNumbers = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["IssuedPOItemNumbers"]);


                    ObjModelVisitReport.Conclusion = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Conclusion"]);
                    ObjModelVisitReport.Pending_Activites = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Pending_Activites"]);
                    ObjModelVisitReport.Identification_Of_Inspected = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Identification_Of_Inspected"]);
                    ObjModelVisitReport.Areas_Of_Concerns = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Areas_Of_Concerns"]);
                    ObjModelVisitReport.Non_Conformities_raised = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Non_Conformities_raised"]);
                    ObjModelVisitReport.Signatures = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Signatures"]);
                    ObjModelVisitReport.Type = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Type"]);
                    ObjModelVisitReport.Report_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Report_No"]);
                    ObjModelVisitReport.Call_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Call_No"]);
                    ObjModelVisitReport.Signatures = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Signature"]);
                    ObjModelVisitReport.Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["FirstName"]) + " " + Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["LastName"]);
                    ObjModelVisitReport.ReportCreatedDate = Convert.ToDateTime(DSJobMasterByQtId.Tables[0].Rows[0]["CreatedDate"]).ToString("dd/MMM/yyyy");

                    int Inspection_records = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Inspection_records"]);
                    ObjModelVisitReport.Inspection_records = Convert.ToBoolean(Inspection_records);

                    int Inspection_Photo = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Inspection_Photo"]);
                    ObjModelVisitReport.Inspection_Photo = Convert.ToBoolean(Inspection_Photo);

                    int Other_Specify = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Other_Specify"]);
                    ObjModelVisitReport.Other_Specify = Convert.ToBoolean(Other_Specify);

                    ObjModelVisitReport.SubJob_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["SubJob_No"]);
                    ObjModelVisitReport.PK_SubJob_Id = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["PK_SubJob_Id"]);


                    ObjModelVisitReport.Type = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Type"]);

                    ObjModelVisitReport.TempInspectionPhotosNo = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["TempInspectionPhotosNo"]);
                    ObjModelVisitReport.TempMaster_List_Of_calibrated_Instruments = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["TempMaster_List_Of_calibrated_Instruments"]);
                    ObjModelVisitReport.ReviseReason = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["ReviseReason"]);

                    int DTUVIndiaClientEndUser = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["DTUVIndiaClientEndUser"]);
                    ObjModelVisitReport.DTUVIndiaClientEndUser = Convert.ToBoolean(DTUVIndiaClientEndUser);
                    int DTUVIndiaExecuting_Originating_Branch = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["DTUVIndiaExecuting_Originating_Branch"]);
                    ObjModelVisitReport.DTUVIndiaExecuting_Originating_Branch = Convert.ToBoolean(DTUVIndiaExecuting_Originating_Branch);
                    int DVendor_Sub_Vendor = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["DVendor_Sub_Vendor"]);
                    ObjModelVisitReport.DVendor_Sub_Vendor = Convert.ToBoolean(DVendor_Sub_Vendor);

                }
                else
                {

                    InspectionvisitReportModel Abc = new InspectionvisitReportModel();
                    Abc.PK_Call_ID = PK_CALL_ID;
                    return RedirectToAction("VisitReportForm", Abc);
                }
                #endregion


                #region  item Description

                ItemDescriptionDashBoard = objDalVisitReport.GetitemDescription(PK_CALL_ID);
                if (ItemDescriptionDashBoard.Rows.Count > 0)
                {
                    foreach (DataRow dr in ItemDescriptionDashBoard.Rows)
                    {
                        lstCompanyDashBoard.Add(
                            new ItemDescriptionModel
                            {
                                PK_ItemD_Id = Convert.ToInt32(dr["PK_ItemD_Id"]),
                                Po_Item_No = Convert.ToString(dr["Po_Item_No"]),
                                ItemCode_Description = Convert.ToString(dr["ItemCode_Description"]),
                                Po_Quantity = Convert.ToString(dr["Po_Quantity"]),
                                Offered_Quantity = Convert.ToString(dr["Offered_Quantity"]),
                                PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"]),
                                Item_Code = Convert.ToString(dr["Item_Code"]),
                                Accepted_Quantity = Convert.ToString(dr["Accepted_Quantity"]),
                                Cumulative_Accepted_Qty = Convert.ToString(dr["Cumulative_Accepted_Qty"]),
                                Unit = Convert.ToString(dr["Unit"]),
                            }
                            );
                    }
                }
                #endregion


                #region Reference Documents

                RefranceDocumentsDashBoard = objDalVisitReport.GetReferenceDocuments(PK_CALL_ID);
                if (RefranceDocumentsDashBoard.Rows.Count > 0)
                {
                    foreach (DataRow dr in RefranceDocumentsDashBoard.Rows)
                    {
                        RefranceDocuments.Add(
                            new ReferenceDocumentsModel
                            {
                                Document_No = Convert.ToString(dr["Document_No"]),
                                Document_Name = Convert.ToString(dr["Document_Name"]),
                                Approval_Status = Convert.ToString(dr["Approval_Status"]),
                                PK_RD_ID = Convert.ToInt32(dr["PK_RD_ID"]),
                                PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"])

                            }
                            );
                    }
                }
                #endregion


                #region Inspection Activities
                InspectionActivitesDashBoard = objDalVisitReport.GetInspectionActivities(PK_CALL_ID);
                if (InspectionActivitesDashBoard.Rows.Count > 0)
                {
                    foreach (DataRow dr in InspectionActivitesDashBoard.Rows)
                    {
                        InspectionDocuments.Add(
                            new InspectionActivitiesModel
                            {
                                Stages_Witnessed = Convert.ToString(dr["Stages_Witnessed"]),
                                PK_IA_ID = Convert.ToInt32(dr["PK_IA_ID"]),
                                PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"])

                            }
                            );
                    }
                }
                #endregion

                #region Documents Review
                DocumentsReviewBoard = objDalVisitReport.GetDocumentRevieweModelByCall_Id(PK_CALL_ID);
                if (DocumentsReviewBoard.Rows.Count > 0)
                {
                    foreach (DataRow dr in DocumentsReviewBoard.Rows)
                    {
                        DocumentReview.Add(
                            new DocumentRevieweModel
                            {
                                Description = Convert.ToString(dr["Description"]),
                                PK_DR_ID = Convert.ToInt32(dr["PK_DR_ID"]),
                                PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"])

                            }
                            );
                    }
                }
                #endregion

                #region Equipments Details
                EquipmentDetailsBoard = objDalVisitReport.GetEquipmentDetailsModelByCall_Id(PK_CALL_ID);
                if (EquipmentDetailsBoard.Rows.Count > 0)
                {
                    foreach (DataRow dr in EquipmentDetailsBoard.Rows)
                    {
                        EquipmentDetails.Add(
                            new EquipmentDetailsModel
                            {
                                Name_Of_Equipments = Convert.ToString(dr["Name_Of_Equipments"]),
                                Range = Convert.ToString(dr["Range"]),
                                Id = Convert.ToString(dr["Id"]),
                                CalibrationValid_Till_date = Convert.ToString(dr["CalibrationValid_Till_date"]),
                                Certification_No_Date = Convert.ToString(dr["Certification_No_Date"]),
                                PK_DOE_Id = Convert.ToInt32(dr["PK_DOE_Id"]),
                                PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"]),
                                SNABLseenote1 = Convert.ToString(dr["NABLseenote1"]),
                                SNonNABLseenote2 = Convert.ToString(dr["NonNABLseenote2"])
                            }
                            );
                    }
                }
                #endregion

                #region report Count
                ReportDashBoard = objDalVisitReport.GetReportByCall_Id(PK_CALL_ID);
                if (ReportDashBoard.Rows.Count > 0)
                {
                    count = ReportDashBoard.Rows.Count;
                }
                string countNo = Convert.ToString(count);
                #endregion


                #region Report Image data
                ImageReportDashBoard = objDalVisitReport.GetReportImageByCall_Id(PK_CALL_ID);
                if (ImageReportDashBoard.Rows.Count > 0)
                {
                    foreach (DataRow dr in ImageReportDashBoard.Rows)
                    {
                        ImageDashBoard.Add(
                            new ReportImageModel
                            {
                                Image = Convert.ToString(dr["Image"]),
                                Heading = Convert.ToString(dr["Heading"]),
                            }
                            );
                    }
                }
                #endregion

                #region Image Save to pdf
                SelectPdf.GlobalProperties.LicenseKey = "uZKImYuMiJmImYuIl4mZioiXiIuXgICAgA==";
                System.Text.StringBuilder strss = new System.Text.StringBuilder();
                string bodys = string.Empty;
                string ImageContent = "";
                string ImageContentname = "";
                string ImageContentnameTest = "";
                using (StreamReader reader = new StreamReader(Server.MapPath("~/inspection-visit-report-images.html")))
                {
                    bodys = reader.ReadToEnd();
                }
                foreach (ReportImageModel v in ImageDashBoard)
                {
                    #region testTr
                    //var table = document.createElement('table');
                    //for (var i = 1; i < 4; i++)
                    //{
                    //    var tr = document.createElement('tr');

                    //    var td1 = document.createElement('td');
                    //    var td2 = document.createElement('td');

                    //    var text1 = document.createTextNode('Text1');
                    //    var text2 = document.createTextNode('Text2');

                    //    td1.appendChild(text1);
                    //    td2.appendChild(text2);
                    //    tr.appendChild(td1);
                    //    tr.appendChild(td2);

                    //    table.appendChild(tr);
                    //}
                    //document.body.appendChild(table);
                    #endregion


                    N = N + 1;
                    ImageContentname += "<tr><td style='padding: 10px; width: 50 %;'>" + v.Heading + "</td></tr>";

                    ImageContent += "<tr><td style='padding:10px;' valign='top'><img src='" + ConfigurationManager.AppSettings["Web"].ToString() + "/Content/Sign/" + v.Image + "' style='width:100px;height:100px;  ' alt=''></td></tr>";
                    ImageContentnameTest += "<tr><td style='padding: 10px; width: 50 %;'>" + v.Heading + "</td></tr>" + "<tr><td style='padding:10px;' valign='top'><img src='" + ConfigurationManager.AppSettings["Web"].ToString() + "/Content/Uploads/Images/" + v.Image + "' style='width:100px;height:100px; ' alt=''></td></tr>";

                }
                bodys = bodys.Replace("[Image]", ImageContent);
                bodys = bodys.Replace("[ImageName]", ImageContentname);
                bodys = bodys.Replace("[Logos]", "http://localhost:54895/AllJsAndCss/images/logo.png");

                strss.Append(bodys);
                PdfPageSize pageSizes = PdfPageSize.A4;
                PdfPageOrientation pdfOrientations = PdfPageOrientation.Portrait;
                HtmlToPdf converters = new HtmlToPdf();
                converters.Options.PdfPageSize = pageSizes;
                converters.Options.PdfPageOrientation = pdfOrientations;
                SelectPdf.PdfDocument docs = converters.ConvertHtmlString(bodys);
                string ReportNames = ObjModelVisitReport.Call_No + "/" + count + ".pdf";
                string paths = Server.MapPath("~/Content");
                docs.Save(paths + '\\' + ReportNames);
                docs.Close();

                #endregion

                #region Save to Pdf Code 


                SelectPdf.GlobalProperties.LicenseKey = "uZKImYuMiJmImYuIl4mZioiXiIuXgICAgA==";
                System.Text.StringBuilder strs = new System.Text.StringBuilder();
                string body = string.Empty;

                string ItemDescriptioncontent = "";
                string ReferenceDocumentscontent = "";
                string InspectionDocumentsContent = "";
                string DocumentreviewContent = "";
                string EquipmentDetailscontent = "";

                string check1 = "";
                string check2 = "";
                string check3 = "";
                string check4 = "";
                string check5 = "";
                string check6 = "";
                string check7 = "";
                string check8 = "";
                string check9 = "";
                string check10 = "";
                string check11 = "";
                string check12 = "";
                string check13 = "";





                using (StreamReader reader = new StreamReader(Server.MapPath("~/inspection-visit-report.html")))
                {
                    body = reader.ReadToEnd();
                }


                #region testImage
                body = body.Replace("[Image]", ImageContent);
                body = body.Replace("[ImageName]", ImageContentname);
                body = body.Replace("[ImageNameTest]", ImageContentnameTest);
                #endregion


                body = body.Replace("[SapAndControle_No]", ObjModelVisitReport.SubJob_No);
                body = body.Replace("[Branch]", ObjModelVisitReport.Branch);
                body = body.Replace("[NotificationNameNo_Date]", ObjModelVisitReport.Notification_Name_No_Date);
                body = body.Replace("[DateOfInspection]", ObjModelVisitReport.Date_Of_Inspection);
                body = body.Replace("[ProjectNameLocation]", ObjModelVisitReport.Project_Name_Location);
                body = body.Replace("[AddressOfInspection]", ObjModelVisitReport.Address_Of_Inspection);
                body = body.Replace("[ClientName]", ObjModelVisitReport.Client_Name);
                body = body.Replace("[Enduser_Name]", ObjModelVisitReport.End_user_Name);
                body = body.Replace("[DECPMCEPC_Name]", ObjModelVisitReport.DEC_PMC_EPC_Name);
                body = body.Replace("[DECPMCEPCAssignment_No]", ObjModelVisitReport.DEC_PMC_EPC_Assignment_No);
                body = body.Replace("[VendorNameLocation]", ObjModelVisitReport.Vendor_Name_Location);
                body = body.Replace("[PoNo]", ObjModelVisitReport.Po_No);
                body = body.Replace("[SubVendorName]", ObjModelVisitReport.Sub_Vendor_Name);
                body = body.Replace("[PoNoSubVendor]", ObjModelVisitReport.Po_No_SubVendor);
                body = body.Replace("[Conclusion]", ObjModelVisitReport.Conclusion);
                body = body.Replace("[CanIRNbeissued]", ObjModelVisitReport.CanIRNbeissued + ' ' + ObjModelVisitReport.IssuedPOItemNumbers);

                body = body.Replace("[PendingActivites]", ObjModelVisitReport.Pending_Activites);
                body = body.Replace("[IdentificationOfInspected]", ObjModelVisitReport.Identification_Of_Inspected);
                body = body.Replace("[AreasOfConcerns]", ObjModelVisitReport.Areas_Of_Concerns);
                body = body.Replace("[NonConformitiesraised]", ObjModelVisitReport.Non_Conformities_raised);
                body = body.Replace("[Name]", ObjModelVisitReport.Name);
                body = body.Replace("[date]", ObjModelVisitReport.ReportCreatedDate);

                body = body.Replace("[RevisionNo]", countNo);
                if (ObjModelVisitReport.Kick_Off_Pre_Inspection == true)
                {
                    check1 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox' style='border:1px solid #000;' value=" + ObjModelVisitReport.Kick_Off_Pre_Inspection + " checked></span></td>";
                }
                else
                {
                    check1 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox' style='border:1px solid #000;' style='border:1px solid #000;' value=" + ObjModelVisitReport.Kick_Off_Pre_Inspection + "></span></td>";
                }
                if (ObjModelVisitReport.Material_identification == true)
                {
                    check2 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Material_identification + " checked></span></td>";
                }
                else
                {
                    check2 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Material_identification + " ></span></td>";
                }
                if (ObjModelVisitReport.Interim_Stages == true)
                {
                    check3 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Interim_Stages + " checked></span></td>";
                }
                else
                {
                    check3 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Interim_Stages + "></span></td>";
                }
                if (ObjModelVisitReport.Document_review == true)
                {
                    check4 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Document_review + " checked></span></td>";
                }
                else
                {
                    check4 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Document_review + "></span></td>";
                }
                if (ObjModelVisitReport.Final_Inspection == true)
                {
                    check5 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Final_Inspection + " checked></span></td>";
                }
                else
                {
                    check5 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Final_Inspection + " ></span></td>";
                }
                if (ObjModelVisitReport.Re_inspection == true)
                {
                    check6 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Re_inspection + " checked></span></td>";
                }
                else
                {
                    check6 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Re_inspection + " ></span></td>";
                }

                if (ObjModelVisitReport.Inspection_records == true)
                {
                    check7 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Inspection_records + " checked></span></td>";
                }
                else
                {
                    check7 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Inspection_records + " ></span></td>";
                }
                if (ObjModelVisitReport.Other_Specify == true)
                {
                    check8 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Other_Specify + " checked></span></td>";
                }
                else
                {
                    check8 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Other_Specify + " ></span></td>";
                }
                if (ObjModelVisitReport.Inspection_Photo == true)
                {
                    check9 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Inspection_Photo + " checked></span></td>";
                }
                else
                {
                    check9 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Inspection_Photo + "></span></td>";
                }

                if (ObjModelVisitReport.MasterListOfcalibratedInstruments == true)
                {
                    check10 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.MasterListOfcalibratedInstruments + " checked></span></td>";
                }
                else
                {
                    check10 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.MasterListOfcalibratedInstruments + "></span></td>";
                }

                foreach (ItemDescriptionModel v in lstCompanyDashBoard)
                {
                    i = i + 1;
                    ItemDescriptioncontent += "<tr><td width='10%' align='center' style='font - size: 14px; color: #000; font-family: Arial;'>" + Convert.ToString(v.Po_Item_No) + "</td><td width='10%' style='font - size: 14px; color: #000; font-family: Arial;'>" + v.Item_Code + " </td><td width='30%' style='font - size: 14px; color: #000; font-family: Arial;'>" + v.ItemCode_Description + "</td><td width='10%' style='font - size: 14px; color: #000; font-family: Arial;'>" + v.Unit + "</td><td width='10%'>" + v.Po_Quantity + "</td><td width='10%' style='font - size: 14px; color: #000; font-family: Arial;'>" + v.Offered_Quantity + "</td><td width='10%' style='font - size: 14px; color: #000; font-family: Arial;'>" + v.Accepted_Quantity + "</td></tr>";
                }

                foreach (ReferenceDocumentsModel v in RefranceDocuments)
                {
                    J = J + 1;
                    //   ReferenceDocumentscontent += "<tr><td> " + J + " </td><td>" + Convert.ToString(v.Document_Name) + "</td><td>" + v.Document_No + " </td><td>" + v.Approval_Status + "</td></tr>";  //25-2-2020
                    ReferenceDocumentscontent += "<tr><td> " + J + ')' + " </td><td>" + Convert.ToString(v.Document_Name) + "</td><td>" + v.Document_No + " </td><td>" + v.VendorDocumentNumber + "</td><td>" + v.Approval_Status + "</td></tr>";
                }

                foreach (InspectionActivitiesModel v in InspectionDocuments)
                {
                    K = K + 1;
                    InspectionDocumentsContent += "<tr><td width='10%' align='center'> " + K + ')' + " </td><td width='90%' colspan='5'><span style='font-size: 14px;white-space: pre-line;'>" + Convert.ToString(v.Stages_Witnessed) + "</span></td></tr>";
                }
                foreach (DocumentRevieweModel v in DocumentReview)
                {
                    L = L + 1;
                    DocumentreviewContent += "<tr><td width='10%' align='center'><span> " + L + ')' + " </span></td><td width='90%' colspan='3'><span style='font-size:14px;'>" + Convert.ToString(v.Description) + "</span></td></tr>";
                }
                foreach (EquipmentDetailsModel v in EquipmentDetails)
                {
                    M = M + 1;
                    // EquipmentDetailscontent += "<tr><td> " + M + " </td><td>" + Convert.ToString(v.Name_Of_Equipments) + "</td><td>" + v.Range + " </td><td>" + v.Id + "</td><td>" + v.CalibrationValid_Till_date + "</td><td>" + v.Certification_No_Date + "</td></tr>";
                    //EquipmentDetailscontent += "<tr><td> " + M + " </td><td>" + Convert.ToString(v.Name_Of_Equipments) + "</td><td>" + v.Range + " </td><td>" + v.Id + "</td><td>" + v.CalibrationValid_Till_date + "</td><td>" + v.Certification_No_Date + "</td><td>" + v.SNABLseenote1 + "</td><td>" + v.SNonNABLseenote2 + "</td></tr>";
                    EquipmentDetailscontent += "<tr><td> " + M + ')' + " </td><td>" + Convert.ToString(v.Name_Of_Equipments) + "</td><td>" + v.Range + " </td><td>" + v.Id + "</td><td>" + v.CalibrationValid_Till_date + "</td><td>" + v.Certification_No_Date + "</td><td>" + v.SNABLseenote1 + "</td><td>" + v.SNonNABLseenote2 + "</td></tr>";

                }

                body = body.Replace("[ItemDescriptionContent]", ItemDescriptioncontent);
                body = body.Replace("[ReferenceDocumentsContent]", ReferenceDocumentscontent);
                body = body.Replace("[InspectionDocumentsContent]", InspectionDocumentsContent);
                body = body.Replace("[DocumentreviewContent]", DocumentreviewContent);
                body = body.Replace("[EquipmentDetailscontent]", EquipmentDetailscontent);

                body = body.Replace("[TempInspectionPhotosNo]", ObjModelVisitReport.TempInspectionPhotosNo);
                body = body.Replace("[TempMaster_List_Of_calibrated_Instruments]", ObjModelVisitReport.TempMaster_List_Of_calibrated_Instruments);
                //body = body.Replace("[ReviseReason]", ObjModelVisitReport.ReviseReason);
                if (ObjModelVisitReport.ReviseReason != "-" && ObjModelVisitReport.ReviseReason != "")
                {
                    body = body.Replace("[ReviseReason]", "Reason for Revision - " + Convert.ToString(ObjModelVisitReport.ReviseReason));
                }
                else
                {
                    body = body.Replace("[ReviseReason]", "-");
                }

                if (ObjModelVisitReport.DTUVIndiaClientEndUser == true)
                {
                    check11 = "<span><input type='checkbox'  value=" + ObjModelVisitReport.DTUVIndiaClientEndUser + " checked></span>";
                }
                else
                {
                    check11 = "<span><input type='checkbox'  value=" + ObjModelVisitReport.DTUVIndiaClientEndUser + " ></span>";
                }
                if (ObjModelVisitReport.DTUVIndiaExecuting_Originating_Branch == true)
                {
                    check12 = "<span><input type='checkbox'  value=" + ObjModelVisitReport.DTUVIndiaExecuting_Originating_Branch + " checked></span>";
                }
                else
                {
                    check12 = "<span><input type='checkbox'  value=" + ObjModelVisitReport.DTUVIndiaExecuting_Originating_Branch + " ></span>";
                }
                if (ObjModelVisitReport.DVendor_Sub_Vendor == true)
                {
                    check13 = "<span><input type='checkbox'  value=" + ObjModelVisitReport.DVendor_Sub_Vendor + " checked></span>";
                }
                else
                {
                    check13 = "<span><input type='checkbox'  value=" + ObjModelVisitReport.DVendor_Sub_Vendor + " ></span>";
                }






                body = body.Replace("[Stamp]", "http://localhost:54895/Stamp.png");
                body = body.Replace("[Signature]", "http://localhost:54895/signature.jpg");
                if (ObjModelVisitReport.Signatures != null)
                {
                    body = body.Replace("[Signature]", ConfigurationManager.AppSettings["Web"].ToString() + "/Content/Sign/" + ObjModelVisitReport.Signatures + "");
                }
                else
                {

                }
                body = body.Replace("[Checkbox1]", check1);
                body = body.Replace("[Checkbox2]", check2);
                body = body.Replace("[Checkbox3]", check3);
                body = body.Replace("[Checkbox4]", check4);
                body = body.Replace("[Checkbox5]", check5);
                body = body.Replace("[Checkbox6]", check6);
                body = body.Replace("[Checkbox7]", check7);
                body = body.Replace("[Checkbox8]", check8);
                body = body.Replace("[Checkbox9]", check9);
                body = body.Replace("[Checkbox10]", check10);
                body = body.Replace("[Checkbox11]", check11);
                body = body.Replace("[Checkbox12]", check12);
                body = body.Replace("[Checkbox13]", check13);

                strs.Append(body);
                PdfPageSize pageSize = PdfPageSize.A4;
                PdfPageOrientation pdfOrientation = PdfPageOrientation.Portrait;
                HtmlToPdf converter = new HtmlToPdf();



                // set the page timeout (in seconds)
                converter.Options.MaxPageLoadTime = 240;  //=========================5-Aug-2019
                converter.Options.PdfPageSize = pageSize;
                converter.Options.PdfPageOrientation = pdfOrientation;

                string _Header = string.Empty;
                string _footer = string.Empty;

                // for Report header by abel
                StreamReader _readHeader_File = new StreamReader(Server.MapPath("~/IV_Report_Header.html"));
                _Header = _readHeader_File.ReadToEnd();
                _Header = _Header.Replace("[SapAndControle_No]", ObjModelVisitReport.SubJob_No);
                _Header = _Header.Replace("[RevisionNo]", countNo);
                /* _Header = _Header.Replace("[Logo]", "http://localhost:54895/AllJsAndCss/images/logo.png");*/ // change123 once pulished on server

                _Header = _Header.Replace("[Logo]", ConfigurationManager.AppSettings["Web"].ToString() + "/AllJsAndCss/images/logo.png");
                #region Generate no
                if (RM.Report == null)
                {

                    dtSrNo = objDalVisitReport.GetSrNo(ObjModelVisitReport.SubJob_No);
                    if (dtSrNo.Tables[0].Rows.Count > 0)
                    {
                        SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["SrNo"]);

                    }
                    RM.ReportNo = "IVR-" + ObjModelVisitReport.SubJob_No + "-" + SrNo + "-Rev." + countNo;
                    _Header = _Header.Replace("[ReportNo]", RM.ReportNo);

                }
                else
                {
                    dtSrNo = objDalVisitReport.GetReportNo(Convert.ToString(RM.PK_RM_ID));
                    if (dtSrNo.Tables[0].Rows.Count > 0)
                    {
                        SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["ReportNo"]);

                    }

                    _Header = _Header.Replace("[ReportNo]", SrNo);
                }
                #endregion

                StreamReader _readFooter_File = new StreamReader(Server.MapPath("~/IV_Report_Footer.html"));
                _footer = _readFooter_File.ReadToEnd();

                // header settings
                converter.Options.DisplayHeader = true || true || true;
                converter.Header.DisplayOnFirstPage = true;
                converter.Header.DisplayOnOddPages = true;
                converter.Header.DisplayOnEvenPages = true;
                converter.Header.Height = 75;

                PdfHtmlSection headerHtml = new PdfHtmlSection(_Header, string.Empty);
                headerHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
                converter.Header.Add(headerHtml);

                // footer settings
                converter.Options.DisplayFooter = true ||
                    true || true;
                converter.Footer.DisplayOnFirstPage = true;
                converter.Footer.DisplayOnOddPages = true;
                converter.Footer.DisplayOnEvenPages = true;
                converter.Footer.Height = 170;

                PdfHtmlSection footerHtml = new PdfHtmlSection(_footer, string.Empty);
                footerHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
                converter.Footer.Add(footerHtml);

                //end abel code

                #region Footer Code
                // page numbers can be added using a PdfTextSection object
                PdfTextSection text = new PdfTextSection(0, 145, "Page: {page_number} of {total_pages}  ", new System.Drawing.Font("Arial", 8));
                text.HorizontalAlign = PdfTextHorizontalAlign.Right;
                converter.Footer.Add(text);
                #endregion

                SelectPdf.PdfDocument doc = converter.ConvertHtmlString(body);
                // string ReportName = ObjModelVisitReport.Call_No + "/" + count + ".pdf";
                string ReportName = "IVR-" + ObjModelVisitReport.SubJob_No + "-" + SrNo + "-Rev." + countNo + ".pdf";


                string path = Server.MapPath("~/IVRReport");
                doc.Save(path + '\\' + ReportName);
                doc.Close();
                #endregion
                if (RM.PK_RM_ID == 0)
                {
                    RM.Type = "IVR";
                    RM.Status = "1";
                    RM.ImageReport = ReportNames;
                    RM.Report = ReportName;
                    RM.ReportName = ReportName;
                    RM.PK_CALL_ID = PK_CALL_ID;
                    RM.SubJob_No = ObjModelVisitReport.SubJob_No;
                    RM.PK_SubJob_Id = ObjModelVisitReport.PK_SubJob_Id;
                    RM.ProjectName = ObjModelVisitReport.End_user_Name;
                    RM.Po_No = ObjModelVisitReport.Po_No;
                    Result = objDalVisitReport.InsertUpdateReport(RM);
                    if (Result != "" && Result != null)
                    {
                        TempData["InsertCompany"] = Result;
                    }
                }

                #region
                CostSheetDashBoard = objDalVisitReport.GetReportByCall_Id(PK_CALL_ID);
                if (CostSheetDashBoard.Rows.Count > 0)
                {
                    foreach (DataRow dr in CostSheetDashBoard.Rows)
                    {
                        ReportDashboard.Add(
                            new ReportModel
                            {
                                ReportName = Convert.ToString(dr["ReportName"]),
                                Report = Convert.ToString(dr["Report"]),
                                CraetedDate = Convert.ToString(dr["CraetedDate"]),
                                PK_RM_ID = Convert.ToInt32(dr["PK_RM_ID"]),
                                PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"])
                            }
                            );
                    }
                }
                ViewData["CostSheet"] = ReportDashboard;
                #endregion

                return View(RMData);

            }
            else
            {


                return View(RMData);
            }
        }

        #endregion


        #region  AllIvrReports

        [HttpGet]
        public ActionResult AllIvrReports(ReportModel IVR)
        {


            Session["PK_Call_ID"] = null;
            DataTable CostSheetDashBoard = new DataTable();
            DataSet ItemDescriptionData = new DataSet();
            List<ReportModel> lstCompanyDashBoard = new List<ReportModel>();



            if (IVR.PK_RM_ID != 0)
            {
                ItemDescriptionData = objDalVisitReport.GetReportById(IVR.PK_RM_ID);
                if (ItemDescriptionData.Tables[0].Rows.Count > 0)
                {
                    IVR.ReportName = Convert.ToString(ItemDescriptionData.Tables[0].Rows[0]["ReportName"]);
                    IVR.Report = Convert.ToString(ItemDescriptionData.Tables[0].Rows[0]["Report"]);
                    IVR.PK_RM_ID = Convert.ToInt32(ItemDescriptionData.Tables[0].Rows[0]["PK_RM_ID"]);
                    IVR.PK_CALL_ID = Convert.ToInt32(ItemDescriptionData.Tables[0].Rows[0]["PK_CALL_ID"]);


                    CostSheetDashBoard = objDalVisitReport.GetReportByCall_Id(IVR.PK_CALL_ID);
                    if (CostSheetDashBoard.Rows.Count > 0)
                    {
                        foreach (DataRow dr in CostSheetDashBoard.Rows)
                        {
                            lstCompanyDashBoard.Add(
                                new ReportModel
                                {
                                    Count = CostSheetDashBoard.Rows.Count,
                                    ReportName = Convert.ToString(dr["ReportName"]),
                                    Report = Convert.ToString(dr["Report"]),
                                    CraetedDate = Convert.ToString(dr["CraetedDate"]),
                                    PK_RM_ID = Convert.ToInt32(dr["PK_RM_ID"]),
                                    PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"])

                                }
                                );
                        }
                    }

                }

            }
            else if (IVR.PK_CALL_ID != null && IVR.PK_CALL_ID != 0)
            {
                try
                {
                    CostSheetDashBoard = objDalVisitReport.GetReportByCall_Id(IVR.PK_CALL_ID);
                    if (CostSheetDashBoard.Rows.Count > 0)
                    {
                        foreach (DataRow dr in CostSheetDashBoard.Rows)
                        {
                            lstCompanyDashBoard.Add(
                                new ReportModel
                                {
                                    Count = CostSheetDashBoard.Rows.Count,
                                    ReportName = Convert.ToString(dr["ReportName"]),
                                    ReportNo = Convert.ToString(dr["ReportNo"]),
                                    Report = Convert.ToString(dr["Report"]),
                                    CraetedDate = Convert.ToString(dr["CraetedDate"]),
                                    PK_RM_ID = Convert.ToInt32(dr["PK_RM_ID"]),
                                    PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"]),

                                    SubJob_No = Convert.ToString(dr["SubJob_No"]),
                                    Sap_And_Controle_No = Convert.ToString(dr["Sap_And_Controle_No"]),
                                    Project_Name_Location = Convert.ToString(dr["Project_Name_Location"]),
                                    Client_Name = Convert.ToString(dr["Client_Name"]),
                                    Vendor_Name_Location = Convert.ToString(dr["Vendor_Name_Location"]),
                                    Po_No = Convert.ToString(dr["Po_No"]),
                                    Inspector = Convert.ToString(dr["Inspector"]),
                                    inspectionDate = Convert.ToString(dr["InspectionDate"]),
                                    ReportDate = Convert.ToString(dr["ReportDate"]),
                                    Product_item = Convert.ToString(dr["Product_item"]),
                                    Originating_Branch = Convert.ToString(dr["Originating_Branch"]),
                                    Excuting_Branch = Convert.ToString(dr["Excuting_Branch"]),
                                    // NCR = Convert.ToString(dr["NCR"]),
                                    Call_No = Convert.ToString(dr["Call_No"]),
                                    CanIRNbeissued = Convert.ToString(dr["CanIRNbeissued"]),
                                    IssuedPOItemNumbers = Convert.ToString(dr["IssuedPOItemNumbers"])

                                }
                                );
                        }
                    }
                }
                catch (Exception ex)
                {
                    string Error = ex.Message.ToString();
                    return RedirectToAction("ErrorPage", "InspectionReleaseNote", new { @Error = Error });
                }
            }
            else
            {
                CostSheetDashBoard = objDalVisitReport.GetAllReportByUser();
                if (CostSheetDashBoard.Rows.Count > 0)
                {
                    foreach (DataRow dr in CostSheetDashBoard.Rows)
                    {
                        lstCompanyDashBoard.Add(
                            new ReportModel
                            {
                                Count = CostSheetDashBoard.Rows.Count,
                                ReportName = Convert.ToString(dr["ReportName"]),
                                Report = Convert.ToString(dr["Report"]),
                                ReportNo = Convert.ToString(dr["ReportNo"]),
                                CraetedDate = Convert.ToString(dr["CraetedDate"]),
                                PK_RM_ID = Convert.ToInt32(dr["PK_RM_ID"]),
                                PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"]),

                                SubJob_No = Convert.ToString(dr["SubJob_No"]),
                                Sap_And_Controle_No = Convert.ToString(dr["Sap_And_Controle_No"]),
                                Project_Name_Location = Convert.ToString(dr["Project_Name_Location"]),
                                Client_Name = Convert.ToString(dr["Client_Name"]),
                                Vendor_Name_Location = Convert.ToString(dr["Vendor_Name_Location"]),
                                Po_No = Convert.ToString(dr["Po_No"]),
                                Inspector = Convert.ToString(dr["Inspector"]),
                                inspectionDate = Convert.ToString(dr["InspectionDate"]),
                                ReportDate = Convert.ToString(dr["ReportDate"]),
                                Product_item = Convert.ToString(dr["Product_item"]),
                                Originating_Branch = Convert.ToString(dr["Originating_Branch"]),
                                Excuting_Branch = Convert.ToString(dr["Excuting_Branch"]),
                                //NCR = Convert.ToString(dr["NCR"]),
                                Call_No = Convert.ToString(dr["Call_No"]),
                                CanIRNbeissued = Convert.ToString(dr["CanIRNbeissued"]),
                                IssuedPOItemNumbers = Convert.ToString(dr["IssuedPOItemNumbers"]),
                                Conclusion = Convert.ToString(dr["Conclusion"]),
                                Areas_Of_Concerns = Convert.ToString(dr["Areas_Of_Concerns"]),
                                Edit = Convert.ToString(dr["Edit"]),
                                Date_Of_Inspection = Convert.ToString(dr["Date_of_Inspection"]), //added by nikita on 04102023
                                IVRDownloadDate = Convert.ToString(dr["IVRDownloadDate"]),//added by nikita on 04102023
                                checkIFCustomerSpecific = Convert.ToInt32(dr["checkIFCustomerSpecific"]),//added by nikita on 04102023
                                ReportprepareinTiimes = Convert.ToString(dr["ReportprepareinTiimes"]),//added by nikita on 04102023
                                //mitigateddate = Convert.ToString(dr["mitigateddate"]),//added by nikita on 04102023

                            }
                            );
                    }


                }
            }

            ViewData["CostSheet"] = lstCompanyDashBoard;
            ViewBag.ExportToExcel = lstCompanyDashBoard;
            IVR.lst1 = lstCompanyDashBoard;

            return View(IVR);
        }


        [HttpPost]
        public ActionResult AllIvrReports(int? PK_CALL_ID)
        {
            RMData.PK_CALL_ID = Convert.ToInt32(PK_CALL_ID);
            DataTable ItemDescriptionDashBoard = new DataTable();
            DataTable RefranceDocumentsDashBoard = new DataTable();
            DataTable InspectionActivitesDashBoard = new DataTable();
            DataTable DocumentsReviewBoard = new DataTable();
            DataTable EquipmentDetailsBoard = new DataTable();
            DataSet DSJobMasterByQtId = new DataSet();
            DataTable ReportDashBoard = new DataTable();
            DataTable CostSheetDashBoard = new DataTable();
            int count = 0;
            DataTable ImageReportDashBoard = new DataTable();
            List<ReportImageModel> ImageDashBoard = new List<ReportImageModel>();
            List<ItemDescriptionModel> lstCompanyDashBoard = new List<ItemDescriptionModel>();
            List<ReferenceDocumentsModel> RefranceDocuments = new List<ReferenceDocumentsModel>();
            List<InspectionActivitiesModel> InspectionDocuments = new List<InspectionActivitiesModel>();
            List<DocumentRevieweModel> DocumentReview = new List<DocumentRevieweModel>();
            List<EquipmentDetailsModel> EquipmentDetails = new List<EquipmentDetailsModel>();
            List<ReportModel> ReportDashboard = new List<ReportModel>();
            DataSet dtSrNo = new DataSet();
            string SrNo = "";

            ReportModel RM = new ReportModel();
            string Result = "";
            if (PK_CALL_ID != 0 || PK_CALL_ID != null)
            {
                int i = 0;
                int J = 0;
                int K = 0;
                int L = 0;
                int M = 0;
                int N = 0;
                #region 
                DSJobMasterByQtId = objDalVisitReport.EditInspectionVisitReportByPKCallID(PK_CALL_ID);

                if (DSJobMasterByQtId.Tables[0].Rows.Count > 0)
                {
                    ObjModelVisitReport.Branch = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Branch"]);
                    ObjModelVisitReport.Sap_And_Controle_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Sap_And_Controle_No"]);
                    ObjModelVisitReport.PK_IVR_ID = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["PK_IVR_ID"]);
                    ObjModelVisitReport.Project_Name_Location = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Project_Name_Location"]);
                    ObjModelVisitReport.Address_Of_Inspection = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Address_Of_Inspection"]);
                    ObjModelVisitReport.End_user_Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["End_user_Name"]);
                    ObjModelVisitReport.Vendor_Name_Location = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Vendor_Name_Location"]);
                    ObjModelVisitReport.PK_Call_ID = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["PK_Call_ID"]);
                    ObjModelVisitReport.Notification_Name_No_Date = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Notification_Name_No_Date"]);

                    ObjModelVisitReport.Date_Of_Inspection = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Date_Of_Inspection"]);
                    ObjModelVisitReport.Client_Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Client_Name"]);
                    ObjModelVisitReport.DEC_PMC_EPC_Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["DEC_PMC_EPC_Name"]);
                    ObjModelVisitReport.DEC_PMC_EPC_Assignment_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["DEC_PMC_EPC_Assignment_No"]);
                    ObjModelVisitReport.Po_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Po_No"]);
                    ObjModelVisitReport.Sub_Vendor_Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Sub_Vendor_Name"]);
                    ObjModelVisitReport.Po_No_SubVendor = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Po_No_SubVendor"]);
                    ObjModelVisitReport.SubJob_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["SubJob_No"]);

                    int kick = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Kick_Off_Pre_Inspection"]);
                    ObjModelVisitReport.Kick_Off_Pre_Inspection = Convert.ToBoolean(kick);

                    int Mi = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Material_identification"]);
                    ObjModelVisitReport.Material_identification = Convert.ToBoolean(Mi);

                    int Interim_Stages = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Interim_Stages"]);
                    ObjModelVisitReport.Interim_Stages = Convert.ToBoolean(Interim_Stages);

                    int Document_review = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Document_review"]);
                    ObjModelVisitReport.Document_review = Convert.ToBoolean(Document_review);

                    int Final_Inspection = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Final_Inspection"]);
                    ObjModelVisitReport.Final_Inspection = Convert.ToBoolean(Final_Inspection);

                    int Re_inspection = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Re_inspection"]);
                    ObjModelVisitReport.Re_inspection = Convert.ToBoolean(Re_inspection);

                    int MasterListOfcalibratedInstruments = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["MasterListOfcalibratedInstruments"]);
                    ObjModelVisitReport.MasterListOfcalibratedInstruments = Convert.ToBoolean(MasterListOfcalibratedInstruments);


                    ObjModelVisitReport.CanIRNbeissued = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["CanIRNbeissued"]);
                    ObjModelVisitReport.IssuedPOItemNumbers = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["IssuedPOItemNumbers"]);


                    ObjModelVisitReport.Conclusion = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Conclusion"]);
                    ObjModelVisitReport.Pending_Activites = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Pending_Activites"]);
                    ObjModelVisitReport.Identification_Of_Inspected = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Identification_Of_Inspected"]);
                    ObjModelVisitReport.Areas_Of_Concerns = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Areas_Of_Concerns"]);
                    ObjModelVisitReport.Non_Conformities_raised = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Non_Conformities_raised"]);
                    ObjModelVisitReport.Signatures = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Signatures"]);
                    ObjModelVisitReport.Type = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Type"]);
                    ObjModelVisitReport.Report_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Report_No"]);
                    ObjModelVisitReport.Call_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Call_No"]);
                    ObjModelVisitReport.Signatures = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Signature"]);
                    ObjModelVisitReport.Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["FirstName"]) + " " + Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["LastName"]);
                    ObjModelVisitReport.ReportCreatedDate = Convert.ToDateTime(DSJobMasterByQtId.Tables[0].Rows[0]["CreatedDate"]).ToString("dd/MMM/yyyy");

                    int Inspection_records = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Inspection_records"]);
                    ObjModelVisitReport.Inspection_records = Convert.ToBoolean(Inspection_records);

                    int Inspection_Photo = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Inspection_Photo"]);
                    ObjModelVisitReport.Inspection_Photo = Convert.ToBoolean(Inspection_Photo);

                    int Other_Specify = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Other_Specify"]);
                    ObjModelVisitReport.Other_Specify = Convert.ToBoolean(Other_Specify);

                    ObjModelVisitReport.SubJob_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["SubJob_No"]);
                    ObjModelVisitReport.PK_SubJob_Id = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["PK_SubJob_Id"]);


                    ObjModelVisitReport.Type = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Type"]);

                    ObjModelVisitReport.TempInspectionPhotosNo = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["TempInspectionPhotosNo"]);
                    ObjModelVisitReport.TempMaster_List_Of_calibrated_Instruments = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["TempMaster_List_Of_calibrated_Instruments"]);
                    ObjModelVisitReport.ReviseReason = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["ReviseReason"]);

                    int DTUVIndiaClientEndUser = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["DTUVIndiaClientEndUser"]);
                    ObjModelVisitReport.DTUVIndiaClientEndUser = Convert.ToBoolean(DTUVIndiaClientEndUser);
                    int DTUVIndiaExecuting_Originating_Branch = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["DTUVIndiaExecuting_Originating_Branch"]);
                    ObjModelVisitReport.DTUVIndiaExecuting_Originating_Branch = Convert.ToBoolean(DTUVIndiaExecuting_Originating_Branch);
                    int DVendor_Sub_Vendor = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["DVendor_Sub_Vendor"]);
                    ObjModelVisitReport.DVendor_Sub_Vendor = Convert.ToBoolean(DVendor_Sub_Vendor);

                }
                else
                {

                    InspectionvisitReportModel Abc = new InspectionvisitReportModel();
                    Abc.PK_Call_ID = PK_CALL_ID;
                    return RedirectToAction("VisitReportForm", Abc);
                }
                #endregion


                #region  item Description

                ItemDescriptionDashBoard = objDalVisitReport.GetitemDescription(PK_CALL_ID);
                if (ItemDescriptionDashBoard.Rows.Count > 0)
                {
                    foreach (DataRow dr in ItemDescriptionDashBoard.Rows)
                    {
                        lstCompanyDashBoard.Add(
                            new ItemDescriptionModel
                            {
                                PK_ItemD_Id = Convert.ToInt32(dr["PK_ItemD_Id"]),
                                Po_Item_No = Convert.ToString(dr["Po_Item_No"]),
                                ItemCode_Description = Convert.ToString(dr["ItemCode_Description"]),
                                Po_Quantity = Convert.ToString(dr["Po_Quantity"]),
                                Offered_Quantity = Convert.ToString(dr["Offered_Quantity"]),
                                PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"]),
                                Item_Code = Convert.ToString(dr["Item_Code"]),
                                Accepted_Quantity = Convert.ToString(dr["Accepted_Quantity"]),
                                Cumulative_Accepted_Qty = Convert.ToString(dr["Cumulative_Accepted_Qty"]),
                                Unit = Convert.ToString(dr["Unit"]),
                            }
                            );
                    }
                }
                #endregion


                #region Reference Documents

                RefranceDocumentsDashBoard = objDalVisitReport.GetReferenceDocuments(PK_CALL_ID);
                if (RefranceDocumentsDashBoard.Rows.Count > 0)
                {
                    foreach (DataRow dr in RefranceDocumentsDashBoard.Rows)
                    {
                        RefranceDocuments.Add(
                            new ReferenceDocumentsModel
                            {
                                Document_No = Convert.ToString(dr["Document_No"]),
                                Document_Name = Convert.ToString(dr["Document_Name"]),
                                Approval_Status = Convert.ToString(dr["Approval_Status"]),
                                PK_RD_ID = Convert.ToInt32(dr["PK_RD_ID"]),
                                PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"])

                            }
                            );
                    }
                }
                #endregion


                #region Inspection Activities
                InspectionActivitesDashBoard = objDalVisitReport.GetInspectionActivities(PK_CALL_ID);
                if (InspectionActivitesDashBoard.Rows.Count > 0)
                {
                    foreach (DataRow dr in InspectionActivitesDashBoard.Rows)
                    {
                        InspectionDocuments.Add(
                            new InspectionActivitiesModel
                            {
                                Stages_Witnessed = Convert.ToString(dr["Stages_Witnessed"]),
                                PK_IA_ID = Convert.ToInt32(dr["PK_IA_ID"]),
                                PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"])

                            }
                            );
                    }
                }
                #endregion

                #region Documents Review
                DocumentsReviewBoard = objDalVisitReport.GetDocumentRevieweModelByCall_Id(PK_CALL_ID);
                if (DocumentsReviewBoard.Rows.Count > 0)
                {
                    foreach (DataRow dr in DocumentsReviewBoard.Rows)
                    {
                        DocumentReview.Add(
                            new DocumentRevieweModel
                            {
                                Description = Convert.ToString(dr["Description"]),
                                PK_DR_ID = Convert.ToInt32(dr["PK_DR_ID"]),
                                PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"])

                            }
                            );
                    }
                }
                #endregion

                #region Equipments Details
                EquipmentDetailsBoard = objDalVisitReport.GetEquipmentDetailsModelByCall_Id(PK_CALL_ID);
                if (EquipmentDetailsBoard.Rows.Count > 0)
                {
                    foreach (DataRow dr in EquipmentDetailsBoard.Rows)
                    {
                        EquipmentDetails.Add(
                            new EquipmentDetailsModel
                            {
                                Name_Of_Equipments = Convert.ToString(dr["Name_Of_Equipments"]),
                                Range = Convert.ToString(dr["Range"]),
                                Id = Convert.ToString(dr["Id"]),
                                CalibrationValid_Till_date = Convert.ToString(dr["CalibrationValid_Till_date"]),
                                Certification_No_Date = Convert.ToString(dr["Certification_No_Date"]),
                                PK_DOE_Id = Convert.ToInt32(dr["PK_DOE_Id"]),
                                PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"]),
                                SNABLseenote1 = Convert.ToString(dr["NABLseenote1"]),
                                SNonNABLseenote2 = Convert.ToString(dr["NonNABLseenote2"])
                            }
                            );
                    }
                }
                #endregion

                #region report Count
                ReportDashBoard = objDalVisitReport.GetReportByCall_Id(PK_CALL_ID);
                if (ReportDashBoard.Rows.Count > 0)
                {
                    count = ReportDashBoard.Rows.Count;
                }
                string countNo = Convert.ToString(count);
                #endregion


                #region Report Image data
                ImageReportDashBoard = objDalVisitReport.GetReportImageByCall_Id(PK_CALL_ID);
                if (ImageReportDashBoard.Rows.Count > 0)
                {
                    foreach (DataRow dr in ImageReportDashBoard.Rows)
                    {
                        ImageDashBoard.Add(
                            new ReportImageModel
                            {
                                Image = Convert.ToString(dr["Image"]),
                                Heading = Convert.ToString(dr["Heading"]),
                            }
                            );
                    }
                }
                #endregion

                #region Image Save to pdf
                SelectPdf.GlobalProperties.LicenseKey = "uZKImYuMiJmImYuIl4mZioiXiIuXgICAgA==";
                System.Text.StringBuilder strss = new System.Text.StringBuilder();
                string bodys = string.Empty;
                string ImageContent = "";
                string ImageContentname = "";
                string ImageContentnameTest = "";
                using (StreamReader reader = new StreamReader(Server.MapPath("~/inspection-visit-report-images.html")))
                {
                    bodys = reader.ReadToEnd();
                }
                foreach (ReportImageModel v in ImageDashBoard)
                {



                    N = N + 1;
                    ImageContentname += "<tr><td style='padding: 10px; width: 50 %;'>" + v.Heading + "</td></tr>";

                    ImageContent += "<tr><td style='padding:10px;' valign='top'><img src='" + ConfigurationManager.AppSettings["Web"].ToString() + "/Content/Uploads/Images/" + v.Image + "' style='width:100px;height:100px;  ' alt=''></td></tr>";
                    ImageContentnameTest += "<tr><td style='padding: 10px; width: 50 %;'>" + v.Heading + "</td></tr>" + "<tr><td style='padding:10px;' valign='top'><img src='" + ConfigurationManager.AppSettings["Web"].ToString() + "/Content/Uploads/Images/" + v.Image + "' style='width:100px;height:100px; ' alt=''></td></tr>";

                }
                bodys = bodys.Replace("[Image]", ImageContent);
                bodys = bodys.Replace("[ImageName]", ImageContentname);
                bodys = bodys.Replace("[Logos]", "http://localhost:54895/AllJsAndCss/images/logo.png");

                strss.Append(bodys);
                PdfPageSize pageSizes = PdfPageSize.A4;
                PdfPageOrientation pdfOrientations = PdfPageOrientation.Portrait;
                HtmlToPdf converters = new HtmlToPdf();
                converters.Options.PdfPageSize = pageSizes;
                converters.Options.PdfPageOrientation = pdfOrientations;
                SelectPdf.PdfDocument docs = converters.ConvertHtmlString(bodys);
                string ReportNames = ObjModelVisitReport.Call_No + "/" + count + ".pdf";
                string paths = Server.MapPath("~/Content");
                docs.Save(paths + '\\' + ReportNames);
                docs.Close();

                #endregion

                #region Save to Pdf Code 


                SelectPdf.GlobalProperties.LicenseKey = "uZKImYuMiJmImYuIl4mZioiXiIuXgICAgA==";
                System.Text.StringBuilder strs = new System.Text.StringBuilder();
                string body = string.Empty;

                string ItemDescriptioncontent = "";
                string ReferenceDocumentscontent = "";
                string InspectionDocumentsContent = "";
                string DocumentreviewContent = "";
                string EquipmentDetailscontent = "";

                string check1 = "";
                string check2 = "";
                string check3 = "";
                string check4 = "";
                string check5 = "";
                string check6 = "";
                string check7 = "";
                string check8 = "";
                string check9 = "";
                string check10 = "";
                string check11 = "";
                string check12 = "";
                string check13 = "";





                using (StreamReader reader = new StreamReader(Server.MapPath("~/inspection-visit-report.html")))
                {
                    body = reader.ReadToEnd();
                }


                #region testImage
                body = body.Replace("[Image]", ImageContent);
                body = body.Replace("[ImageName]", ImageContentname);
                body = body.Replace("[ImageNameTest]", ImageContentnameTest);
                #endregion


                body = body.Replace("[SapAndControle_No]", ObjModelVisitReport.SubJob_No);
                body = body.Replace("[Branch]", ObjModelVisitReport.Branch);
                body = body.Replace("[NotificationNameNo_Date]", ObjModelVisitReport.Notification_Name_No_Date);
                body = body.Replace("[DateOfInspection]", ObjModelVisitReport.Date_Of_Inspection);
                body = body.Replace("[ProjectNameLocation]", ObjModelVisitReport.Project_Name_Location);
                body = body.Replace("[AddressOfInspection]", ObjModelVisitReport.Address_Of_Inspection);
                body = body.Replace("[ClientName]", ObjModelVisitReport.Client_Name);
                body = body.Replace("[Enduser_Name]", ObjModelVisitReport.End_user_Name);
                body = body.Replace("[DECPMCEPC_Name]", ObjModelVisitReport.DEC_PMC_EPC_Name);
                body = body.Replace("[DECPMCEPCAssignment_No]", ObjModelVisitReport.DEC_PMC_EPC_Assignment_No);
                body = body.Replace("[VendorNameLocation]", ObjModelVisitReport.Vendor_Name_Location);
                body = body.Replace("[PoNo]", ObjModelVisitReport.Po_No);
                body = body.Replace("[SubVendorName]", ObjModelVisitReport.Sub_Vendor_Name);
                body = body.Replace("[PoNoSubVendor]", ObjModelVisitReport.Po_No_SubVendor);
                body = body.Replace("[Conclusion]", ObjModelVisitReport.Conclusion);
                body = body.Replace("[CanIRNbeissued]", ObjModelVisitReport.CanIRNbeissued + ' ' + ObjModelVisitReport.IssuedPOItemNumbers);

                body = body.Replace("[PendingActivites]", ObjModelVisitReport.Pending_Activites);
                body = body.Replace("[IdentificationOfInspected]", ObjModelVisitReport.Identification_Of_Inspected);
                body = body.Replace("[AreasOfConcerns]", ObjModelVisitReport.Areas_Of_Concerns);
                body = body.Replace("[NonConformitiesraised]", ObjModelVisitReport.Non_Conformities_raised);
                body = body.Replace("[Name]", ObjModelVisitReport.Name);
                body = body.Replace("[date]", ObjModelVisitReport.ReportCreatedDate);

                body = body.Replace("[RevisionNo]", countNo);
                if (ObjModelVisitReport.Kick_Off_Pre_Inspection == true)
                {
                    check1 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox' style='border:1px solid #000;' value=" + ObjModelVisitReport.Kick_Off_Pre_Inspection + " checked></span></td>";
                }
                else
                {
                    check1 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox' style='border:1px solid #000;' style='border:1px solid #000;' value=" + ObjModelVisitReport.Kick_Off_Pre_Inspection + "></span></td>";
                }
                if (ObjModelVisitReport.Material_identification == true)
                {
                    check2 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Material_identification + " checked></span></td>";
                }
                else
                {
                    check2 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Material_identification + " ></span></td>";
                }
                if (ObjModelVisitReport.Interim_Stages == true)
                {
                    check3 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Interim_Stages + " checked></span></td>";
                }
                else
                {
                    check3 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Interim_Stages + "></span></td>";
                }
                if (ObjModelVisitReport.Document_review == true)
                {
                    check4 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Document_review + " checked></span></td>";
                }
                else
                {
                    check4 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Document_review + "></span></td>";
                }
                if (ObjModelVisitReport.Final_Inspection == true)
                {
                    check5 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Final_Inspection + " checked></span></td>";
                }
                else
                {
                    check5 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Final_Inspection + " ></span></td>";
                }
                if (ObjModelVisitReport.Re_inspection == true)
                {
                    check6 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Re_inspection + " checked></span></td>";
                }
                else
                {
                    check6 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Re_inspection + " ></span></td>";
                }

                if (ObjModelVisitReport.Inspection_records == true)
                {
                    check7 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Inspection_records + " checked></span></td>";
                }
                else
                {
                    check7 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Inspection_records + " ></span></td>";
                }
                if (ObjModelVisitReport.Other_Specify == true)
                {
                    check8 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Other_Specify + " checked></span></td>";
                }
                else
                {
                    check8 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Other_Specify + " ></span></td>";
                }
                if (ObjModelVisitReport.Inspection_Photo == true)
                {
                    check9 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Inspection_Photo + " checked></span></td>";
                }
                else
                {
                    check9 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Inspection_Photo + "></span></td>";
                }

                if (ObjModelVisitReport.MasterListOfcalibratedInstruments == true)
                {
                    check10 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.MasterListOfcalibratedInstruments + " checked></span></td>";
                }
                else
                {
                    check10 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.MasterListOfcalibratedInstruments + "></span></td>";
                }

                foreach (ItemDescriptionModel v in lstCompanyDashBoard)
                {
                    i = i + 1;
                    ItemDescriptioncontent += "<tr><td width='10%' align='center' style='font - size: 14px; color: #000; font-family: Arial;'>" + Convert.ToString(v.Po_Item_No) + "</td><td width='10%' style='font - size: 14px; color: #000; font-family: Arial;'>" + v.Item_Code + " </td><td width='30%' style='font - size: 14px; color: #000; font-family: Arial;'>" + v.ItemCode_Description + "</td><td width='10%' style='font - size: 14px; color: #000; font-family: Arial;'>" + v.Unit + "</td><td width='10%'>" + v.Po_Quantity + "</td><td width='10%' style='font - size: 14px; color: #000; font-family: Arial;'>" + v.Offered_Quantity + "</td><td width='10%' style='font - size: 14px; color: #000; font-family: Arial;'>" + v.Accepted_Quantity + "</td></tr>";
                }

                foreach (ReferenceDocumentsModel v in RefranceDocuments)
                {
                    J = J + 1;
                    //   ReferenceDocumentscontent += "<tr><td> " + J + " </td><td>" + Convert.ToString(v.Document_Name) + "</td><td>" + v.Document_No + " </td><td>" + v.Approval_Status + "</td></tr>";  //25-2-2020
                    ReferenceDocumentscontent += "<tr><td> " + J + ')' + " </td><td>" + Convert.ToString(v.Document_Name) + "</td><td>" + v.Document_No + " </td><td>" + v.VendorDocumentNumber + "</td><td>" + v.Approval_Status + "</td></tr>";
                }

                foreach (InspectionActivitiesModel v in InspectionDocuments)
                {
                    K = K + 1;
                    InspectionDocumentsContent += "<tr><td width='10%' align='center'> " + K + ')' + " </td><td width='90%' colspan='5'><span style='font-size: 14px;white-space: pre-line;'>" + Convert.ToString(v.Stages_Witnessed) + "</span></td></tr>";
                }
                foreach (DocumentRevieweModel v in DocumentReview)
                {
                    L = L + 1;
                    DocumentreviewContent += "<tr><td width='10%' align='center'><span> " + L + ')' + " </span></td><td width='90%' colspan='3'><span style='font-size:14px;'>" + Convert.ToString(v.Description) + "</span></td></tr>";
                }
                foreach (EquipmentDetailsModel v in EquipmentDetails)
                {
                    M = M + 1;
                    // EquipmentDetailscontent += "<tr><td> " + M + " </td><td>" + Convert.ToString(v.Name_Of_Equipments) + "</td><td>" + v.Range + " </td><td>" + v.Id + "</td><td>" + v.CalibrationValid_Till_date + "</td><td>" + v.Certification_No_Date + "</td></tr>";
                    //EquipmentDetailscontent += "<tr><td> " + M + " </td><td>" + Convert.ToString(v.Name_Of_Equipments) + "</td><td>" + v.Range + " </td><td>" + v.Id + "</td><td>" + v.CalibrationValid_Till_date + "</td><td>" + v.Certification_No_Date + "</td><td>" + v.SNABLseenote1 + "</td><td>" + v.SNonNABLseenote2 + "</td></tr>";
                    EquipmentDetailscontent += "<tr><td> " + M + ')' + " </td><td>" + Convert.ToString(v.Name_Of_Equipments) + "</td><td>" + v.Range + " </td><td>" + v.Id + "</td><td>" + v.CalibrationValid_Till_date + "</td><td>" + v.Certification_No_Date + "</td><td>" + v.SNABLseenote1 + "</td><td>" + v.SNonNABLseenote2 + "</td></tr>";

                }

                body = body.Replace("[ItemDescriptionContent]", ItemDescriptioncontent);


                body = body.Replace("[ReferenceDocumentsContent]", ReferenceDocumentscontent);
                body = body.Replace("[InspectionDocumentsContent]", InspectionDocumentsContent);
                body = body.Replace("[DocumentreviewContent]", DocumentreviewContent);
                body = body.Replace("[EquipmentDetailscontent]", EquipmentDetailscontent);

                body = body.Replace("[TempInspectionPhotosNo]", ObjModelVisitReport.TempInspectionPhotosNo);
                body = body.Replace("[TempMaster_List_Of_calibrated_Instruments]", ObjModelVisitReport.TempMaster_List_Of_calibrated_Instruments);
                //body = body.Replace("[ReviseReason]", ObjModelVisitReport.ReviseReason);
                if (ObjModelVisitReport.ReviseReason != "-" && ObjModelVisitReport.ReviseReason != "")
                {
                    body = body.Replace("[ReviseReason]", "Reason for Revision - " + Convert.ToString(ObjModelVisitReport.ReviseReason));
                }
                else
                {
                    body = body.Replace("[ReviseReason]", "-");
                }

                if (ObjModelVisitReport.DTUVIndiaClientEndUser == true)
                {
                    check11 = "<span><input type='checkbox'  value=" + ObjModelVisitReport.DTUVIndiaClientEndUser + " checked></span>";
                }
                else
                {
                    check11 = "<span><input type='checkbox'  value=" + ObjModelVisitReport.DTUVIndiaClientEndUser + " ></span>";
                }
                if (ObjModelVisitReport.DTUVIndiaExecuting_Originating_Branch == true)
                {
                    check12 = "<span><input type='checkbox'  value=" + ObjModelVisitReport.DTUVIndiaExecuting_Originating_Branch + " checked></span>";
                }
                else
                {
                    check12 = "<span><input type='checkbox'  value=" + ObjModelVisitReport.DTUVIndiaExecuting_Originating_Branch + " ></span>";
                }
                if (ObjModelVisitReport.DVendor_Sub_Vendor == true)
                {
                    check13 = "<span><input type='checkbox'  value=" + ObjModelVisitReport.DVendor_Sub_Vendor + " checked></span>";
                }
                else
                {
                    check13 = "<span><input type='checkbox'  value=" + ObjModelVisitReport.DVendor_Sub_Vendor + " ></span>";
                }






                body = body.Replace("[Stamp]", "http://localhost:54895/Stamp.png");
                body = body.Replace("[Signature]", "http://localhost:54895/signature.jpg");
                if (ObjModelVisitReport.Signatures != null)
                {
                    body = body.Replace("[Signature]", ConfigurationManager.AppSettings["Web"].ToString() + "/Content/Sign/" + ObjModelVisitReport.Signatures + "");
                }
                else
                {

                }
                body = body.Replace("[Checkbox1]", check1);
                body = body.Replace("[Checkbox2]", check2);
                body = body.Replace("[Checkbox3]", check3);
                body = body.Replace("[Checkbox4]", check4);
                body = body.Replace("[Checkbox5]", check5);
                body = body.Replace("[Checkbox6]", check6);
                body = body.Replace("[Checkbox7]", check7);
                body = body.Replace("[Checkbox8]", check8);
                body = body.Replace("[Checkbox9]", check9);
                body = body.Replace("[Checkbox10]", check10);
                body = body.Replace("[Checkbox11]", check11);
                body = body.Replace("[Checkbox12]", check12);
                body = body.Replace("[Checkbox13]", check13);

                strs.Append(body);
                PdfPageSize pageSize = PdfPageSize.A4;
                PdfPageOrientation pdfOrientation = PdfPageOrientation.Portrait;
                HtmlToPdf converter = new HtmlToPdf();



                // set the page timeout (in seconds)
                converter.Options.MaxPageLoadTime = 240;  //=========================5-Aug-2019
                converter.Options.PdfPageSize = pageSize;
                converter.Options.PdfPageOrientation = pdfOrientation;

                string _Header = string.Empty;
                string _footer = string.Empty;

                // for Report header by abel
                StreamReader _readHeader_File = new StreamReader(Server.MapPath("~/IV_Report_Header.html"));
                _Header = _readHeader_File.ReadToEnd();
                _Header = _Header.Replace("[SapAndControle_No]", ObjModelVisitReport.SubJob_No);
                _Header = _Header.Replace("[RevisionNo]", countNo);
                /* _Header = _Header.Replace("[Logo]", "http://localhost:54895/AllJsAndCss/images/logo.png");*/ // change123 once pulished on server

                _Header = _Header.Replace("[Logo]", ConfigurationManager.AppSettings["Web"].ToString() + "/AllJsAndCss/images/logo.png");
                #region Generate no
                if (RM.Report == null)
                {

                    dtSrNo = objDalVisitReport.GetSrNo(ObjModelVisitReport.SubJob_No);
                    if (dtSrNo.Tables[0].Rows.Count > 0)
                    {
                        SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["SrNo"]);

                    }
                    RM.ReportNo = "IVR-" + ObjModelVisitReport.SubJob_No + "-" + SrNo + "-Rev." + countNo;
                    _Header = _Header.Replace("[ReportNo]", RM.ReportNo);

                }
                else
                {
                    dtSrNo = objDalVisitReport.GetReportNo(Convert.ToString(RM.PK_RM_ID));
                    if (dtSrNo.Tables[0].Rows.Count > 0)
                    {
                        SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["ReportNo"]);

                    }

                    _Header = _Header.Replace("[ReportNo]", SrNo);
                }
                #endregion

                StreamReader _readFooter_File = new StreamReader(Server.MapPath("~/IV_Report_Footer.html"));
                _footer = _readFooter_File.ReadToEnd();

                // header settings
                converter.Options.DisplayHeader = true || true || true;
                converter.Header.DisplayOnFirstPage = true;
                converter.Header.DisplayOnOddPages = true;
                converter.Header.DisplayOnEvenPages = true;
                converter.Header.Height = 75;

                PdfHtmlSection headerHtml = new PdfHtmlSection(_Header, string.Empty);
                headerHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
                converter.Header.Add(headerHtml);

                // footer settings
                converter.Options.DisplayFooter = true ||
                    true || true;
                converter.Footer.DisplayOnFirstPage = true;
                converter.Footer.DisplayOnOddPages = true;
                converter.Footer.DisplayOnEvenPages = true;
                converter.Footer.Height = 170;

                PdfHtmlSection footerHtml = new PdfHtmlSection(_footer, string.Empty);
                footerHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
                converter.Footer.Add(footerHtml);

                //end abel code

                #region Footer Code
                // page numbers can be added using a PdfTextSection object
                PdfTextSection text = new PdfTextSection(0, 145, "Page: {page_number} of {total_pages}  ", new System.Drawing.Font("Arial", 8));
                text.HorizontalAlign = PdfTextHorizontalAlign.Right;
                converter.Footer.Add(text);
                #endregion

                SelectPdf.PdfDocument doc = converter.ConvertHtmlString(body);
                // string ReportName = ObjModelVisitReport.Call_No + "/" + count + ".pdf";
                string ReportName = "IVR-" + ObjModelVisitReport.SubJob_No + "-" + SrNo + "-Rev." + countNo + ".pdf";


                string path = Server.MapPath("~/IVRReport");
                doc.Save(path + '\\' + ReportName);
                doc.Close();
                #endregion
                if (RM.PK_RM_ID == 0)
                {
                    RM.Type = "IVR";
                    RM.Status = "1";
                    RM.ImageReport = ReportNames;
                    RM.Report = ReportName;
                    RM.ReportName = ReportName;
                    RM.PK_CALL_ID = PK_CALL_ID;
                    RM.SubJob_No = ObjModelVisitReport.SubJob_No;
                    RM.PK_SubJob_Id = ObjModelVisitReport.PK_SubJob_Id;
                    RM.ProjectName = ObjModelVisitReport.End_user_Name;
                    RM.Po_No = ObjModelVisitReport.Po_No;
                    Result = objDalVisitReport.InsertUpdateReport(RM);
                    if (Result != "" && Result != null)
                    {
                        TempData["InsertCompany"] = Result;
                    }
                }

                #region
                CostSheetDashBoard = objDalVisitReport.GetReportByCall_Id(PK_CALL_ID);
                if (CostSheetDashBoard.Rows.Count > 0)
                {
                    foreach (DataRow dr in CostSheetDashBoard.Rows)
                    {
                        ReportDashboard.Add(
                            new ReportModel
                            {
                                ReportName = Convert.ToString(dr["ReportName"]),
                                Report = Convert.ToString(dr["Report"]),
                                CraetedDate = Convert.ToString(dr["CraetedDate"]),
                                PK_RM_ID = Convert.ToInt32(dr["PK_RM_ID"]),
                                PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"])
                            }
                            );
                    }
                }
                ViewData["CostSheet"] = ReportDashboard;
                #endregion

                return View(RMData);

            }
            else
            {


                return View(RMData);
            }
        }

        #endregion


        #region VisitReportAttachment

        public ActionResult VisitReportAttchment(int? PK_CALL_ID)
        {

            return View();


        }

        [HttpPost]
        public ActionResult VisitReportAttchment(InspectionvisitReportModel ObjModelVisitReport, FormCollection fc, List<HttpPostedFileBase> img_Banner)
        {
            string Result = "";
            string IPath = string.Empty;
            var list = Session["list"] as List<string>;
            if (list != null && list.Count != 0)
            {
                IPath = string.Join(",", list.ToList());
                IPath = IPath.TrimEnd(',');
            }
            List<string> lstAttachment = new List<string>();
            if (!string.IsNullOrEmpty(Convert.ToString(Request.Files["img_Banner"])))
            {
                foreach (HttpPostedFileBase single in img_Banner) // Added by Sagar Panigrahi
                {
                    //HttpPostedFileBase Imagesection;
                    //Imagesection = Request.Files[single];
                    if (single != null && single.FileName != "")
                    {
                        var filename = CommonControl.FileUpload("~/VisitReportAttachment/", single);
                        lstAttachment.Add(filename);
                    }
                }
                ObjModelVisitReport.VisitReportAttachment = string.Join(",", lstAttachment);
                if (string.IsNullOrEmpty(ObjModelVisitReport.VisitReportAttachment))
                {
                    ObjModelVisitReport.VisitReportAttachment = "NoImage.gif";
                }
            }
            else
            {
                ObjModelVisitReport.VisitReportAttachment = "NoImage.gif";
            }

            try
            {
                if (ObjModelVisitReport.PK_Call_ID == 0)
                {
                    Result = objDalVisitReport.InsertUpdatevisitreportattachment(ObjModelVisitReport);
                }
                else
                {

                }
            }
            catch (Exception ex)
            {

                string Error = ex.Message.ToString();
                return RedirectToAction("ErrorPage", "InspectionReleaseNote", new { @Error = Error });
            }

            return View();
        }


        public JsonResult TemporaryFilePathVisitReportAttchment()//Photo Uploading Functionality For Adding TemporaryFilePathDocumentAttachment
        {
            var IPath = string.Empty;
            string[] splitedGrp;
            List<string> Selected = new List<string>();
            try
            {

                FormCollection fc = new FormCollection();
                string filePath = string.Empty;
                for (int i = 0; i < Request.Files.Count; i++)
                {
                    HttpPostedFileBase files = Request.Files[i]; //Uploaded file
                    int fileSize = files.ContentLength;
                    if (files != null && files.ContentLength > 0)
                    {
                        // if (files.FileName.EndsWith(".xlsx") || files.FileName.EndsWith(".xls") || files.FileName.EndsWith(".pdf") || files.FileName.EndsWith(".JPEG") || files.FileName.EndsWith(".jpg") || files.FileName.EndsWith(".png") || files.FileName.EndsWith(".gif") || files.FileName.EndsWith(".doc"))
                        if (files.FileName.EndsWith(".xlsx") || files.FileName.EndsWith(".xls") || files.FileName.EndsWith(".pdf") || files.FileName.EndsWith(".JPEG") || files.FileName.EndsWith(".jpg") || files.FileName.EndsWith(".JPG") || files.FileName.EndsWith(".png") || files.FileName.EndsWith(".gif") || files.FileName.EndsWith(".doc") || files.FileName.EndsWith(".DOC") || files.FileName.EndsWith(".docx") || files.FileName.EndsWith(".DOCX"))

                        {
                            string fileName = files.FileName;
                            filePath = Path.Combine(Server.MapPath("~/VisitReportAttachment/"), filePath);
                            var K = "~/VisitReportAttachment/" + fileName;
                            //IPath = K.TrimStart('~');
                            IPath = K;

                            files.SaveAs(Server.MapPath(IPath));
                            // string[] readText = System.IO.File.ReadAllLines(IPath, Encoding.UTF8);

                            var ExistingUploadFile = IPath;
                            splitedGrp = ExistingUploadFile.Split(',');
                            foreach (var single in splitedGrp)
                            {
                                Selected.Add(single);
                            }
                            Session["list"] = Selected;

                        }
                        else
                        {
                            ViewBag.Error = "Please Select XLSX or PDF File";
                        }
                    }

                }


            }
            catch (Exception ex)
            {
                string Error = ex.Message.ToString();
                ViewBag.Error = "Please Select XLSX or PDF File";
            }
            return Json(IPath, JsonRequestBehavior.AllowGet);
        }
        #endregion

        public ActionResult IVR()
        {
            return View();
        }



        #region  Revise & Update Report


        public ActionResult ReviseReportsBAK1(int? PK_CALL_ID, InspectionvisitReportModel I, string Reason)
        {
            RMData.PK_CALL_ID = Convert.ToInt32(PK_CALL_ID);
            DataTable ItemDescriptionDashBoard = new DataTable();
            DataTable RefranceDocumentsDashBoard = new DataTable();
            DataTable InspectionActivitesDashBoard = new DataTable();
            DataTable DocumentsReviewBoard = new DataTable();
            DataTable EquipmentDetailsBoard = new DataTable();
            DataSet DSJobMasterByQtId = new DataSet();
            DataTable ReportDashBoard = new DataTable();
            DataTable CostSheetDashBoard = new DataTable();
            int count = 0;
            DataTable ImageReportDashBoard = new DataTable();
            List<ReportImageModel> ImageDashBoard = new List<ReportImageModel>();
            List<ItemDescriptionModel> lstCompanyDashBoard = new List<ItemDescriptionModel>();
            List<ReferenceDocumentsModel> RefranceDocuments = new List<ReferenceDocumentsModel>();
            List<InspectionActivitiesModel> InspectionDocuments = new List<InspectionActivitiesModel>();
            List<DocumentRevieweModel> DocumentReview = new List<DocumentRevieweModel>();
            List<EquipmentDetailsModel> EquipmentDetails = new List<EquipmentDetailsModel>();
            List<ReportModel> ReportDashboard = new List<ReportModel>();
            DataSet dtSrNo = new DataSet();
            string SrNo = "";


            ReportModel RM = new ReportModel();
            string Result = "";
            if (PK_CALL_ID != 0 || PK_CALL_ID != null)
            {
                int i = 0;
                int J = 0;
                int K = 0;
                int L = 0;
                int M = 0;
                int N = 0;
                #region 
                DSJobMasterByQtId = objDalVisitReport.EditInspectionVisitReportByPKCallID(PK_CALL_ID);

                if (DSJobMasterByQtId.Tables[0].Rows.Count > 0)
                {
                    ObjModelVisitReport.Branch = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Branch"]);
                    ObjModelVisitReport.Sap_And_Controle_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Sap_And_Controle_No"]);
                    ObjModelVisitReport.PK_IVR_ID = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["PK_IVR_ID"]);
                    ObjModelVisitReport.Project_Name_Location = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Project_Name_Location"]);
                    ObjModelVisitReport.Address_Of_Inspection = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Address_Of_Inspection"]);
                    ObjModelVisitReport.End_user_Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["End_user_Name"]);
                    ObjModelVisitReport.Vendor_Name_Location = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Vendor_Name_Location"]);
                    ObjModelVisitReport.PK_Call_ID = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["PK_Call_ID"]);
                    ObjModelVisitReport.Notification_Name_No_Date = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Notification_Name_No_Date"]);

                    ObjModelVisitReport.Date_Of_Inspection = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Date_Of_Inspection"]);
                    ObjModelVisitReport.Client_Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Client_Name"]);
                    ObjModelVisitReport.DEC_PMC_EPC_Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["DEC_PMC_EPC_Name"]);
                    ObjModelVisitReport.DEC_PMC_EPC_Assignment_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["DEC_PMC_EPC_Assignment_No"]);
                    ObjModelVisitReport.Po_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Po_No"]);
                    ObjModelVisitReport.Sub_Vendor_Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Sub_Vendor_Name"]);
                    ObjModelVisitReport.Po_No_SubVendor = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Po_No_SubVendor"]);
                    ObjModelVisitReport.SubJob_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["SubJob_No"]);

                    int kick = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Kick_Off_Pre_Inspection"]);
                    ObjModelVisitReport.Kick_Off_Pre_Inspection = Convert.ToBoolean(kick);

                    int Mi = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Material_identification"]);
                    ObjModelVisitReport.Material_identification = Convert.ToBoolean(Mi);

                    int Interim_Stages = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Interim_Stages"]);
                    ObjModelVisitReport.Interim_Stages = Convert.ToBoolean(Interim_Stages);

                    int Document_review = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Document_review"]);
                    ObjModelVisitReport.Document_review = Convert.ToBoolean(Document_review);

                    int Final_Inspection = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Final_Inspection"]);
                    ObjModelVisitReport.Final_Inspection = Convert.ToBoolean(Final_Inspection);

                    int Re_inspection = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Re_inspection"]);
                    ObjModelVisitReport.Re_inspection = Convert.ToBoolean(Re_inspection);

                    int MasterListOfcalibratedInstruments = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["MasterListOfcalibratedInstruments"]);
                    ObjModelVisitReport.MasterListOfcalibratedInstruments = Convert.ToBoolean(MasterListOfcalibratedInstruments);


                    ObjModelVisitReport.CanIRNbeissued = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["CanIRNbeissued"]);
                    ObjModelVisitReport.IssuedPOItemNumbers = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["IssuedPOItemNumbers"]);


                    ObjModelVisitReport.Conclusion = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Conclusion"]);
                    ObjModelVisitReport.Pending_Activites = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Pending_Activites"]);
                    ObjModelVisitReport.Identification_Of_Inspected = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Identification_Of_Inspected"]);
                    ObjModelVisitReport.Areas_Of_Concerns = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Areas_Of_Concerns"]);
                    ObjModelVisitReport.Non_Conformities_raised = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Non_Conformities_raised"]);
                    ObjModelVisitReport.Signatures = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Signatures"]);
                    ObjModelVisitReport.Type = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Type"]);
                    ObjModelVisitReport.Report_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Report_No"]);
                    ObjModelVisitReport.Call_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Call_No"]);
                    ObjModelVisitReport.Signatures = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Signature"]);
                    ObjModelVisitReport.Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["FirstName"]) + " " + Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["LastName"]);
                    ObjModelVisitReport.ReportCreatedDate = Convert.ToDateTime(DSJobMasterByQtId.Tables[0].Rows[0]["CreatedDate"]).ToString("dd/MMM/yyyy");

                    int Inspection_records = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Inspection_records"]);
                    ObjModelVisitReport.Inspection_records = Convert.ToBoolean(Inspection_records);

                    int Inspection_Photo = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Inspection_Photo"]);
                    ObjModelVisitReport.Inspection_Photo = Convert.ToBoolean(Inspection_Photo);

                    int Other_Specify = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Other_Specify"]);
                    ObjModelVisitReport.Other_Specify = Convert.ToBoolean(Other_Specify);

                    ObjModelVisitReport.SubJob_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["SubJob_No"]);
                    ObjModelVisitReport.PK_SubJob_Id = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["PK_SubJob_Id"]);


                    ObjModelVisitReport.Type = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Type"]);

                    ObjModelVisitReport.TempInspectionPhotosNo = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["TempInspectionPhotosNo"]);
                    ObjModelVisitReport.TempMaster_List_Of_calibrated_Instruments = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["TempMaster_List_Of_calibrated_Instruments"]);
                    int DTUVIndiaClientEndUser = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["DTUVIndiaClientEndUser"]);
                    ObjModelVisitReport.DTUVIndiaClientEndUser = Convert.ToBoolean(DTUVIndiaClientEndUser);
                    int DTUVIndiaExecuting_Originating_Branch = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["DTUVIndiaExecuting_Originating_Branch"]);
                    ObjModelVisitReport.DTUVIndiaExecuting_Originating_Branch = Convert.ToBoolean(DTUVIndiaExecuting_Originating_Branch);
                    int DVendor_Sub_Vendor = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["DVendor_Sub_Vendor"]);
                    ObjModelVisitReport.DVendor_Sub_Vendor = Convert.ToBoolean(DVendor_Sub_Vendor);
                    ObjModelVisitReport.ReviseReason = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["ReviseReason"]);

                }
                else
                {

                    InspectionvisitReportModel Abc = new InspectionvisitReportModel();
                    Abc.PK_Call_ID = PK_CALL_ID;
                    return RedirectToAction("VisitReportForm", Abc);
                }
                #endregion


                #region  item Description

                ItemDescriptionDashBoard = objDalVisitReport.GetitemDescription(PK_CALL_ID);
                if (ItemDescriptionDashBoard.Rows.Count > 0)
                {
                    foreach (DataRow dr in ItemDescriptionDashBoard.Rows)
                    {
                        lstCompanyDashBoard.Add(
                            new ItemDescriptionModel
                            {
                                PK_ItemD_Id = Convert.ToInt32(dr["PK_ItemD_Id"]),
                                Po_Item_No = Convert.ToString(dr["Po_Item_No"]),
                                ItemCode_Description = Convert.ToString(dr["ItemCode_Description"]),
                                Po_Quantity = Convert.ToString(dr["Po_Quantity"]),
                                Offered_Quantity = Convert.ToString(dr["Offered_Quantity"]),
                                PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"]),
                                Item_Code = Convert.ToString(dr["Item_Code"]),
                                Accepted_Quantity = Convert.ToString(dr["Accepted_Quantity"]),
                                Cumulative_Accepted_Qty = Convert.ToString(dr["Cumulative_Accepted_Qty"]),
                                Unit = Convert.ToString(dr["Unit"]),
                            }
                            );
                    }
                }
                #endregion


                #region Reference Documents

                RefranceDocumentsDashBoard = objDalVisitReport.GetReferenceDocuments(PK_CALL_ID);
                if (RefranceDocumentsDashBoard.Rows.Count > 0)
                {
                    foreach (DataRow dr in RefranceDocumentsDashBoard.Rows)
                    {
                        RefranceDocuments.Add(
                            new ReferenceDocumentsModel
                            {
                                Document_No = Convert.ToString(dr["Document_No"]),
                                Document_Name = Convert.ToString(dr["Document_Name"]),
                                Approval_Status = Convert.ToString(dr["Approval_Status"]),
                                PK_RD_ID = Convert.ToInt32(dr["PK_RD_ID"]),
                                PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"])

                            }
                            );
                    }
                }
                #endregion


                #region Inspection Activities
                InspectionActivitesDashBoard = objDalVisitReport.GetInspectionActivities(PK_CALL_ID);
                if (InspectionActivitesDashBoard.Rows.Count > 0)
                {
                    foreach (DataRow dr in InspectionActivitesDashBoard.Rows)
                    {
                        InspectionDocuments.Add(
                            new InspectionActivitiesModel
                            {
                                Stages_Witnessed = Convert.ToString(dr["Stages_Witnessed"]),
                                PK_IA_ID = Convert.ToInt32(dr["PK_IA_ID"]),
                                PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"])

                            }
                            );
                    }
                }
                #endregion

                #region Documents Review
                DocumentsReviewBoard = objDalVisitReport.GetDocumentRevieweModelByCall_Id(PK_CALL_ID);
                if (DocumentsReviewBoard.Rows.Count > 0)
                {
                    foreach (DataRow dr in DocumentsReviewBoard.Rows)
                    {
                        DocumentReview.Add(
                            new DocumentRevieweModel
                            {
                                Description = Convert.ToString(dr["Description"]),
                                PK_DR_ID = Convert.ToInt32(dr["PK_DR_ID"]),
                                PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"])

                            }
                            );
                    }
                }
                #endregion

                #region Equipments Details
                EquipmentDetailsBoard = objDalVisitReport.GetEquipmentDetailsModelByCall_Id(PK_CALL_ID);
                if (EquipmentDetailsBoard.Rows.Count > 0)
                {
                    foreach (DataRow dr in EquipmentDetailsBoard.Rows)
                    {
                        EquipmentDetails.Add(
                            new EquipmentDetailsModel
                            {
                                Name_Of_Equipments = Convert.ToString(dr["Name_Of_Equipments"]),
                                Range = Convert.ToString(dr["Range"]),
                                Id = Convert.ToString(dr["Id"]),
                                CalibrationValid_Till_date = Convert.ToString(dr["CalibrationValid_Till_date"]),
                                Certification_No_Date = Convert.ToString(dr["Certification_No_Date"]),
                                PK_DOE_Id = Convert.ToInt32(dr["PK_DOE_Id"]),
                                PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"]),
                                SNABLseenote1 = Convert.ToString(dr["NABLseenote1"]),
                                SNonNABLseenote2 = Convert.ToString(dr["NonNABLseenote2"])
                            }
                            );
                    }
                }
                #endregion

                #region report Count
                ReportDashBoard = objDalVisitReport.GetReportByCall_Id(PK_CALL_ID);
                if (ReportDashBoard.Rows.Count > 0)
                {
                    count = ReportDashBoard.Rows.Count;
                }
                string countNo = Convert.ToString(count);
                string ReportNew = ReportDashBoard.Rows[0]["ReportNo"].ToString().TrimEnd('.'); //.TrimEnd('.');

                #endregion


                #region Report Image data
                ImageReportDashBoard = objDalVisitReport.GetReportImageByCall_Id(PK_CALL_ID);
                if (ImageReportDashBoard.Rows.Count > 0)
                {
                    foreach (DataRow dr in ImageReportDashBoard.Rows)
                    {
                        ImageDashBoard.Add(
                            new ReportImageModel
                            {
                                Image = Convert.ToString(dr["Image"]),
                                Heading = Convert.ToString(dr["Heading"]),
                            }
                            );
                    }
                }
                #endregion

                #region Image Save to pdf
                SelectPdf.GlobalProperties.LicenseKey = "uZKImYuMiJmImYuIl4mZioiXiIuXgICAgA==";
                System.Text.StringBuilder strss = new System.Text.StringBuilder();
                string bodys = string.Empty;
                string ImageContent = "";
                string ImageContentname = "";
                string ImageContentnameTest = "";
                using (StreamReader reader = new StreamReader(Server.MapPath("~/inspection-visit-report-images.html")))
                {
                    bodys = reader.ReadToEnd();
                }
                foreach (ReportImageModel v in ImageDashBoard)
                {
                    N = N + 1;
                    ImageContentname += "<tr><td style='padding: 10px; width: 50 %;'>" + v.Heading + "</td></tr>";

                    ImageContent += "<tr><td style='padding:10px;' valign='top'><img src='" + ConfigurationManager.AppSettings["Web"].ToString() + "/Content/Uploads/Images/" + v.Image + "' style='width:100px;height:100px;  ' alt=''></td></tr>";
                    ImageContentnameTest += "<tr><td style='padding: 10px; width: 50 %;'>" + v.Heading + "</td></tr>" + "<tr><td style='padding:10px;' valign='top'><img src='" + ConfigurationManager.AppSettings["Web"].ToString() + "/Content/Uploads/Images/" + v.Image + "' style='width:100px;height:100px; ' alt=''></td></tr>";

                }
                bodys = bodys.Replace("[Image]", ImageContent);
                bodys = bodys.Replace("[ImageName]", ImageContentname);
                bodys = bodys.Replace("[Logos]", "http://localhost:54895/AllJsAndCss/images/logo.png");

                strss.Append(bodys);
                PdfPageSize pageSizes = PdfPageSize.A4;
                PdfPageOrientation pdfOrientations = PdfPageOrientation.Portrait;
                HtmlToPdf converters = new HtmlToPdf();
                converters.Options.PdfPageSize = pageSizes;
                converters.Options.PdfPageOrientation = pdfOrientations;
                SelectPdf.PdfDocument docs = converters.ConvertHtmlString(bodys);
                string ReportNames = ObjModelVisitReport.Call_No + "/" + count + ".pdf";
                string paths = Server.MapPath("~/Content");
                docs.Save(paths + '\\' + ReportNames);
                docs.Close();
                #endregion

                #region Save to Pdf Code 


                SelectPdf.GlobalProperties.LicenseKey = "uZKImYuMiJmImYuIl4mZioiXiIuXgICAgA==";
                System.Text.StringBuilder strs = new System.Text.StringBuilder();
                string body = string.Empty;

                string ItemDescriptioncontent = "";
                string ReferenceDocumentscontent = "";
                string InspectionDocumentsContent = "";
                string DocumentreviewContent = "";
                string EquipmentDetailscontent = "";

                string check1 = "";
                string check2 = "";
                string check3 = "";
                string check4 = "";
                string check5 = "";
                string check6 = "";
                string check7 = "";
                string check8 = "";
                string check9 = "";
                string check10 = "";
                string checkNonNABL = "";
                string check11 = "";
                string check12 = "";
                string check13 = "";
                using (StreamReader reader = new StreamReader(Server.MapPath("~/inspection-visit-report.html")))
                {
                    body = reader.ReadToEnd();
                }


                #region testImage
                body = body.Replace("[Image]", ImageContent);
                body = body.Replace("[ImageName]", ImageContentname);
                body = body.Replace("[ImageNameTest]", ImageContentnameTest);
                #endregion


                body = body.Replace("[SapAndControle_No]", ObjModelVisitReport.SubJob_No);
                body = body.Replace("[Branch]", ObjModelVisitReport.Branch);
                body = body.Replace("[NotificationNameNo_Date]", ObjModelVisitReport.Notification_Name_No_Date);
                body = body.Replace("[DateOfInspection]", ObjModelVisitReport.Date_Of_Inspection);
                body = body.Replace("[ProjectNameLocation]", ObjModelVisitReport.Project_Name_Location);
                body = body.Replace("[AddressOfInspection]", ObjModelVisitReport.Address_Of_Inspection);
                body = body.Replace("[ClientName]", ObjModelVisitReport.Client_Name);
                body = body.Replace("[Enduser_Name]", ObjModelVisitReport.End_user_Name);
                body = body.Replace("[DECPMCEPC_Name]", ObjModelVisitReport.DEC_PMC_EPC_Name);
                body = body.Replace("[DECPMCEPCAssignment_No]", ObjModelVisitReport.DEC_PMC_EPC_Assignment_No);
                body = body.Replace("[VendorNameLocation]", ObjModelVisitReport.Vendor_Name_Location);
                body = body.Replace("[PoNo]", ObjModelVisitReport.Po_No);
                body = body.Replace("[SubVendorName]", ObjModelVisitReport.Sub_Vendor_Name);
                body = body.Replace("[PoNoSubVendor]", ObjModelVisitReport.Po_No_SubVendor);
                body = body.Replace("[Conclusion]", ObjModelVisitReport.Conclusion);
                body = body.Replace("[CanIRNbeissued]", ObjModelVisitReport.CanIRNbeissued + ' ' + ObjModelVisitReport.IssuedPOItemNumbers);

                body = body.Replace("[PendingActivites]", ObjModelVisitReport.Pending_Activites);
                body = body.Replace("[IdentificationOfInspected]", ObjModelVisitReport.Identification_Of_Inspected);
                body = body.Replace("[AreasOfConcerns]", ObjModelVisitReport.Areas_Of_Concerns);
                body = body.Replace("[NonConformitiesraised]", ObjModelVisitReport.Non_Conformities_raised);
                body = body.Replace("[Name]", ObjModelVisitReport.Name);
                body = body.Replace("[date]", ObjModelVisitReport.ReportCreatedDate);

                body = body.Replace("[RevisionNo]", countNo);

                body = body.Replace("[TempInspectionPhotosNo]", ObjModelVisitReport.TempInspectionPhotosNo);
                body = body.Replace("[TempMaster_List_Of_calibrated_Instruments]", ObjModelVisitReport.TempMaster_List_Of_calibrated_Instruments);
                if (ObjModelVisitReport.ReviseReason != "-" && ObjModelVisitReport.ReviseReason != "")
                {
                    body = body.Replace("[ReviseReason]", "Reason for Revision - " + Convert.ToString(ObjModelVisitReport.ReviseReason));
                }
                else
                {
                    body = body.Replace("[ReviseReason]", "-");
                }

                if (ObjModelVisitReport.DTUVIndiaClientEndUser == true)
                {
                    check11 = "<span><input type='checkbox'  value=" + ObjModelVisitReport.DTUVIndiaClientEndUser + " checked></span>";
                }
                else
                {
                    check11 = "<span><input type='checkbox'  value=" + ObjModelVisitReport.DTUVIndiaClientEndUser + " ></span>";
                }
                if (ObjModelVisitReport.DTUVIndiaExecuting_Originating_Branch == true)
                {
                    check12 = "<span><input type='checkbox'  value=" + ObjModelVisitReport.DTUVIndiaExecuting_Originating_Branch + " checked></span>";
                }
                else
                {
                    check12 = "<span><input type='checkbox'  value=" + ObjModelVisitReport.DTUVIndiaExecuting_Originating_Branch + " ></span>";
                }
                if (ObjModelVisitReport.DVendor_Sub_Vendor == true)
                {
                    check13 = "<span><input type='checkbox'  value=" + ObjModelVisitReport.DVendor_Sub_Vendor + " checked></span>";
                }
                else
                {
                    check13 = "<span><input type='checkbox'  value=" + ObjModelVisitReport.DVendor_Sub_Vendor + " ></span>";
                }


                if (ObjModelVisitReport.Kick_Off_Pre_Inspection == true)
                {
                    check1 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox' style='border:1px solid #000;'  value=" + ObjModelVisitReport.Kick_Off_Pre_Inspection + " checked></span></td>";
                }
                else
                {
                    check1 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox' style='border:1px solid #000;'  value=" + ObjModelVisitReport.Kick_Off_Pre_Inspection + "></span></td>";
                }
                if (ObjModelVisitReport.Material_identification == true)
                {
                    check2 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Material_identification + " checked></span></td>";
                }
                else
                {
                    check2 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Material_identification + " ></span></td>";
                }
                if (ObjModelVisitReport.Interim_Stages == true)
                {
                    check3 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Interim_Stages + " checked></span></td>";
                }
                else
                {
                    check3 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Interim_Stages + "></span></td>";
                }
                if (ObjModelVisitReport.Document_review == true)
                {
                    check4 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Document_review + " checked></span></td>";
                }
                else
                {
                    check4 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Document_review + "></span></td>";
                }
                if (ObjModelVisitReport.Final_Inspection == true)
                {
                    check5 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Final_Inspection + " checked></span></td>";
                }
                else
                {
                    check5 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Final_Inspection + " ></span></td>";
                }
                if (ObjModelVisitReport.Re_inspection == true)
                {
                    check6 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Re_inspection + " checked></span></td>";
                }
                else
                {
                    check6 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Re_inspection + " ></span></td>";
                }

                if (ObjModelVisitReport.Inspection_records == true)
                {
                    check7 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Inspection_records + " checked></span></td>";
                }
                else
                {
                    check7 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Inspection_records + " ></span></td>";
                }
                if (ObjModelVisitReport.Other_Specify == true)
                {
                    check8 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Other_Specify + " checked></span></td>";
                }
                else
                {
                    check8 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Other_Specify + " ></span></td>";
                }
                if (ObjModelVisitReport.Inspection_Photo == true)
                {
                    check9 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Inspection_Photo + " checked></span></td>";
                }
                else
                {
                    check9 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Inspection_Photo + "></span></td>";
                }
                if (ObjModelVisitReport.MasterListOfcalibratedInstruments == true)
                {
                    check10 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.MasterListOfcalibratedInstruments + " checked></span></td>";
                }
                else
                {
                    check10 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.MasterListOfcalibratedInstruments + "></span></td>";
                }

                foreach (ItemDescriptionModel v in lstCompanyDashBoard)
                {
                    i = i + 1;
                    ItemDescriptioncontent += "<tr><td width='10%' align='center' style='font - size: 14px; color: #000; font-family: Arial;'>" + Convert.ToString(v.Po_Item_No) + "</td><td width='10%' style='font - size: 14px; color: #000; font-family: Arial;'>" + v.Item_Code + " </td><td width='30%' style='font - size: 14px; color: #000; font-family: Arial;'>" + v.ItemCode_Description + "</td><td width='10%' style='font - size: 14px; color: #000; font-family: Arial;'>" + v.Unit + "</td><td width='10%'>" + v.Po_Quantity + "</td><td width='10%' style='font - size: 14px; color: #000; font-family: Arial;'>" + v.Offered_Quantity + "</td><td width='10%' style='font - size: 14px; color: #000; font-family: Arial;'>" + v.Accepted_Quantity + "</td></tr>";
                }

                foreach (ReferenceDocumentsModel v in RefranceDocuments)
                {
                    J = J + 1;
                    //                    ReferenceDocumentscontent += "<tr><td> " + J + " </td><td>" + Convert.ToString(v.Document_Name) + "</td><td>" + v.Document_No + " </td><td>" + v.Approval_Status + "</td></tr>";
                    ReferenceDocumentscontent += "<tr><td> " + J + ')' + " </td><td>" + Convert.ToString(v.Document_Name) + "</td><td>" + v.Document_No + " </td><td>" + v.VendorDocumentNumber + "</td><td>" + v.Approval_Status + "</td></tr>";

                }

                foreach (InspectionActivitiesModel v in InspectionDocuments)
                {
                    K = K + 1;
                    InspectionDocumentsContent += "<tr><td width='10%' align='center'> " + K + ')' + " </td><td width='90%' colspan='5'><span style='font-size: 14px;white-space: pre-line;'>" + Convert.ToString(v.Stages_Witnessed) + "</span></td></tr>";
                }
                foreach (DocumentRevieweModel v in DocumentReview)
                {
                    L = L + 1;
                    DocumentreviewContent += "<tr><td width='10%' align='center'><span> " + L + ')' + " </span></td><td width='90%' colspan='3'><span style='font-size:14px;'>" + Convert.ToString(v.Description) + "</span></td></tr>";
                }
                foreach (EquipmentDetailsModel v in EquipmentDetails)
                {
                    M = M + 1;
                    // EquipmentDetailscontent += "<tr><td> " + M + " </td><td>" + Convert.ToString(v.Name_Of_Equipments) + "</td><td>" + v.Range + " </td><td>" + v.Id + "</td><td>" + v.CalibrationValid_Till_date + "</td><td>" + v.Certification_No_Date + "</td></tr>";
                    EquipmentDetailscontent += "<tr><td> " + M + ')' + " </td><td>" + Convert.ToString(v.Name_Of_Equipments) + "</td><td>" + v.Range + " </td><td>" + v.Id + "</td><td>" + v.CalibrationValid_Till_date + "</td><td>" + v.Certification_No_Date + "</td><td>" + v.SNABLseenote1 + "</td><td>" + v.SNonNABLseenote2 + "</td></tr>";
                }

                body = body.Replace("[ItemDescriptionContent]", ItemDescriptioncontent);
                body = body.Replace("[ReferenceDocumentsContent]", ReferenceDocumentscontent);
                body = body.Replace("[InspectionDocumentsContent]", InspectionDocumentsContent);
                body = body.Replace("[DocumentreviewContent]", DocumentreviewContent);
                body = body.Replace("[EquipmentDetailscontent]", EquipmentDetailscontent);
                body = body.Replace("[Stamp]", "http://localhost:54895/Stamp.png");
                body = body.Replace("[Signature]", "http://localhost:54895/signature.jpg");
                if (ObjModelVisitReport.Signatures != null)
                {
                    body = body.Replace("[Signature]", ConfigurationManager.AppSettings["Web"].ToString() + "/Content/Sign/" + ObjModelVisitReport.Signatures + "");
                }
                else
                {

                }
                body = body.Replace("[Checkbox1]", check1);
                body = body.Replace("[Checkbox2]", check2);
                body = body.Replace("[Checkbox3]", check3);
                body = body.Replace("[Checkbox4]", check4);
                body = body.Replace("[Checkbox5]", check5);
                body = body.Replace("[Checkbox6]", check6);
                body = body.Replace("[Checkbox7]", check7);
                body = body.Replace("[Checkbox8]", check8);
                body = body.Replace("[Checkbox9]", check9);
                body = body.Replace("[Checkbox10]", check10);
                body = body.Replace("[Checkbox11]", check11);
                body = body.Replace("[Checkbox12]", check12);
                body = body.Replace("[Checkbox13]", check13);

                strs.Append(body);
                PdfPageSize pageSize = PdfPageSize.A4;
                PdfPageOrientation pdfOrientation = PdfPageOrientation.Portrait;
                HtmlToPdf converter = new HtmlToPdf();


                // set the page timeout (in seconds)
                converter.Options.MaxPageLoadTime = 240;  //=========================5-Aug-2019
                converter.Options.PdfPageSize = pageSize;
                converter.Options.PdfPageOrientation = pdfOrientation;

                string _Header = string.Empty;
                string _footer = string.Empty;

                // for Report header by abel
                StreamReader _readHeader_File = new StreamReader(Server.MapPath("~/IV_Report_Header.html"));
                _Header = _readHeader_File.ReadToEnd();
                _Header = _Header.Replace("[SapAndControle_No]", ObjModelVisitReport.SubJob_No);
                _Header = _Header.Replace("[RevisionNo]", countNo);
                /* _Header = _Header.Replace("[Logo]", "http://localhost:54895/AllJsAndCss/images/logo.png"); */// change123 once pulished on server
                _Header = _Header.Replace("[Logo]", ConfigurationManager.AppSettings["Web"].ToString() + "/AllJsAndCss/images/logo.png");
                #region Generate no
                if (RM.Report == null)
                {

                    dtSrNo = objDalVisitReport.GetSrNo(ObjModelVisitReport.SubJob_No);
                    if (dtSrNo.Tables[0].Rows.Count > 0)
                    {
                        SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["SrNo"]);

                    }

                    string s = ReportNew.Remove(ReportNew.Length - 1);

                    RM.ReportNo = s + countNo;

                    _Header = _Header.Replace("[ReportNo]", RM.ReportNo);

                }
                else
                {
                    dtSrNo = objDalVisitReport.GetReportNo(Convert.ToString(RM.PK_RM_ID));
                    if (dtSrNo.Tables[0].Rows.Count > 0)
                    {
                        SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["ReportNo"]);

                    }

                    _Header = _Header.Replace("[ReportNo]", SrNo);
                }
                #endregion



                StreamReader _readFooter_File = new StreamReader(Server.MapPath("~/IV_Report_Footer.html"));
                _footer = _readFooter_File.ReadToEnd();

                // header settings
                converter.Options.DisplayHeader = true ||
                    true || true;
                converter.Header.DisplayOnFirstPage = true;
                converter.Header.DisplayOnOddPages = true;
                converter.Header.DisplayOnEvenPages = true;
                converter.Header.Height = 75;

                PdfHtmlSection headerHtml = new PdfHtmlSection(_Header, string.Empty);
                headerHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
                converter.Header.Add(headerHtml);

                // footer settings
                converter.Options.DisplayFooter = true ||
                    true || true;
                converter.Footer.DisplayOnFirstPage = true;
                converter.Footer.DisplayOnOddPages = true;
                converter.Footer.DisplayOnEvenPages = true;
                converter.Footer.Height = 170;

                PdfHtmlSection footerHtml = new PdfHtmlSection(_footer, string.Empty);
                footerHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
                converter.Footer.Add(footerHtml);

                //end abel code

                #region Footer Code
                // page numbers can be added using a PdfTextSection object
                PdfTextSection text = new PdfTextSection(0, 145, "Page: {page_number} of {total_pages}  ", new System.Drawing.Font("Arial", 8));
                text.HorizontalAlign = PdfTextHorizontalAlign.Right;
                converter.Footer.Add(text);
                #endregion




                SelectPdf.PdfDocument doc = converter.ConvertHtmlString(body);
                //string ReportName = ObjModelVisitReport.Call_No + "/" + count + ".pdf";
                string ReportName = RM.ReportNo + ".pdf";
                string path = Server.MapPath("~/IVRReport");
                doc.Save(path + '\\' + ReportName);
                doc.Close();
                #endregion
                if (RM.PK_RM_ID == 0)
                {
                    RM.Type = "IVR";
                    RM.Status = "1";
                    RM.ImageReport = ReportNames;
                    RM.Report = ReportName;
                    RM.ReportName = ReportName;
                    RM.PK_CALL_ID = PK_CALL_ID;
                    RM.SubJob_No = ObjModelVisitReport.SubJob_No;
                    RM.PK_SubJob_Id = ObjModelVisitReport.PK_SubJob_Id;
                    RM.ProjectName = ObjModelVisitReport.End_user_Name;
                    RM.Po_No = ObjModelVisitReport.Po_No;

                    Result = objDalVisitReport.InsertUpdateReport(RM);
                    if (Result != "" && Result != null)
                    {
                        TempData["InsertCompany"] = Result;
                    }
                }

                #region
                CostSheetDashBoard = objDalVisitReport.GetReportByCall_Id(PK_CALL_ID);
                if (CostSheetDashBoard.Rows.Count > 0)
                {
                    foreach (DataRow dr in CostSheetDashBoard.Rows)
                    {
                        ReportDashboard.Add(
                            new ReportModel
                            {
                                ReportName = Convert.ToString(dr["ReportName"]),
                                Report = Convert.ToString(dr["Report"]),
                                CraetedDate = Convert.ToString(dr["CraetedDate"]),
                                PK_RM_ID = Convert.ToInt32(dr["PK_RM_ID"]),
                                PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"])
                            }
                            );
                    }
                }
                ViewData["CostSheet"] = ReportDashboard;
                #endregion

                return RedirectToAction("IvrReports", RMData);

            }
            else
            {


                return RedirectToAction("IvrReports", RMData);
            }
        }

        #endregion

        #region Revise new BAK
        public ActionResult ReviseReportsNew(int? PK_CALL_ID, InspectionvisitReportModel I, string Reason)
        {
            RMData.PK_CALL_ID = Convert.ToInt32(PK_CALL_ID);
            DataTable ItemDescriptionDashBoard = new DataTable();
            DataTable RefranceDocumentsDashBoard = new DataTable();
            DataTable InspectionActivitesDashBoard = new DataTable();
            DataTable DocumentsReviewBoard = new DataTable();
            DataTable EquipmentDetailsBoard = new DataTable();
            DataSet DSJobMasterByQtId = new DataSet();
            DataTable ReportDashBoard = new DataTable();
            DataTable CostSheetDashBoard = new DataTable();
            int count = 0;
            DataTable ImageReportDashBoard = new DataTable();
            List<ReportImageModel> ImageDashBoard = new List<ReportImageModel>();
            List<ItemDescriptionModel> lstCompanyDashBoard = new List<ItemDescriptionModel>();
            List<ReferenceDocumentsModel> RefranceDocuments = new List<ReferenceDocumentsModel>();
            List<InspectionActivitiesModel> InspectionDocuments = new List<InspectionActivitiesModel>();
            List<DocumentRevieweModel> DocumentReview = new List<DocumentRevieweModel>();
            List<EquipmentDetailsModel> EquipmentDetails = new List<EquipmentDetailsModel>();
            List<ReportModel> ReportDashboard = new List<ReportModel>();
            DataSet dtSrNo = new DataSet();
            string SrNo = "";


            ReportModel RM = new ReportModel();
            string Result = "";
            if (PK_CALL_ID != 0 || PK_CALL_ID != null)
            {
                int i = 0;
                int J = 0;
                int K = 0;
                int L = 0;
                int M = 0;
                int N = 0;
                #region 
                DSJobMasterByQtId = objDalVisitReport.EditInspectionVisitReportByPKCallID(PK_CALL_ID);

                if (DSJobMasterByQtId.Tables[0].Rows.Count > 0)
                {
                    ObjModelVisitReport.Branch = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Branch"]);
                    ObjModelVisitReport.Sap_And_Controle_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Sap_And_Controle_No"]);
                    ObjModelVisitReport.PK_IVR_ID = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["PK_IVR_ID"]);
                    ObjModelVisitReport.Project_Name_Location = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Project_Name_Location"]);
                    ObjModelVisitReport.Address_Of_Inspection = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Address_Of_Inspection"]);
                    ObjModelVisitReport.End_user_Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["End_user_Name"]);
                    ObjModelVisitReport.Vendor_Name_Location = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Vendor_Name_Location"]);
                    ObjModelVisitReport.PK_Call_ID = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["PK_Call_ID"]);
                    ObjModelVisitReport.Notification_Name_No_Date = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Notification_Name_No_Date"]);

                    ObjModelVisitReport.Date_Of_Inspection = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Date_Of_Inspection"]);
                    ObjModelVisitReport.Client_Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Client_Name"]);
                    ObjModelVisitReport.DEC_PMC_EPC_Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["DEC_PMC_EPC_Name"]);
                    ObjModelVisitReport.DEC_PMC_EPC_Assignment_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["DEC_PMC_EPC_Assignment_No"]);
                    ObjModelVisitReport.Po_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Po_No"]);
                    ObjModelVisitReport.Sub_Vendor_Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Sub_Vendor_Name"]);
                    ObjModelVisitReport.Po_No_SubVendor = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Po_No_SubVendor"]);
                    ObjModelVisitReport.SubJob_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["SubJob_No"]);

                    int kick = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Kick_Off_Pre_Inspection"]);
                    ObjModelVisitReport.Kick_Off_Pre_Inspection = Convert.ToBoolean(kick);

                    int Mi = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Material_identification"]);
                    ObjModelVisitReport.Material_identification = Convert.ToBoolean(Mi);

                    int Interim_Stages = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Interim_Stages"]);
                    ObjModelVisitReport.Interim_Stages = Convert.ToBoolean(Interim_Stages);

                    int Document_review = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Document_review"]);
                    ObjModelVisitReport.Document_review = Convert.ToBoolean(Document_review);

                    int Final_Inspection = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Final_Inspection"]);
                    ObjModelVisitReport.Final_Inspection = Convert.ToBoolean(Final_Inspection);

                    int Re_inspection = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Re_inspection"]);
                    ObjModelVisitReport.Re_inspection = Convert.ToBoolean(Re_inspection);

                    int MasterListOfcalibratedInstruments = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["MasterListOfcalibratedInstruments"]);
                    ObjModelVisitReport.MasterListOfcalibratedInstruments = Convert.ToBoolean(MasterListOfcalibratedInstruments);


                    ObjModelVisitReport.CanIRNbeissued = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["CanIRNbeissued"]);
                    ObjModelVisitReport.IssuedPOItemNumbers = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["IssuedPOItemNumbers"]);


                    ObjModelVisitReport.Conclusion = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Conclusion"]);
                    ObjModelVisitReport.Pending_Activites = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Pending_Activites"]);
                    ObjModelVisitReport.Identification_Of_Inspected = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Identification_Of_Inspected"]);
                    ObjModelVisitReport.Areas_Of_Concerns = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Areas_Of_Concerns"]);
                    ObjModelVisitReport.Non_Conformities_raised = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Non_Conformities_raised"]);
                    ObjModelVisitReport.Signatures = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Signatures"]);
                    ObjModelVisitReport.Type = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Type"]);
                    ObjModelVisitReport.Report_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Report_No"]);
                    ObjModelVisitReport.Call_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Call_No"]);
                    ObjModelVisitReport.Signatures = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Signature"]);
                    ObjModelVisitReport.Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["FirstName"]) + " " + Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["LastName"]);
                    ObjModelVisitReport.ReportCreatedDate = Convert.ToDateTime(DSJobMasterByQtId.Tables[0].Rows[0]["CreatedDate"]).ToString("dd/MMM/yyyy");

                    int Inspection_records = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Inspection_records"]);
                    ObjModelVisitReport.Inspection_records = Convert.ToBoolean(Inspection_records);

                    int Inspection_Photo = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Inspection_Photo"]);
                    ObjModelVisitReport.Inspection_Photo = Convert.ToBoolean(Inspection_Photo);

                    int Other_Specify = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Other_Specify"]);
                    ObjModelVisitReport.Other_Specify = Convert.ToBoolean(Other_Specify);

                    ObjModelVisitReport.SubJob_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["SubJob_No"]);
                    ObjModelVisitReport.PK_SubJob_Id = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["PK_SubJob_Id"]);


                    ObjModelVisitReport.Type = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Type"]);

                    ObjModelVisitReport.TempInspectionPhotosNo = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["TempInspectionPhotosNo"]);
                    ObjModelVisitReport.TempMaster_List_Of_calibrated_Instruments = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["TempMaster_List_Of_calibrated_Instruments"]);
                    int DTUVIndiaClientEndUser = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["DTUVIndiaClientEndUser"]);
                    ObjModelVisitReport.DTUVIndiaClientEndUser = Convert.ToBoolean(DTUVIndiaClientEndUser);
                    int DTUVIndiaExecuting_Originating_Branch = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["DTUVIndiaExecuting_Originating_Branch"]);
                    ObjModelVisitReport.DTUVIndiaExecuting_Originating_Branch = Convert.ToBoolean(DTUVIndiaExecuting_Originating_Branch);
                    int DVendor_Sub_Vendor = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["DVendor_Sub_Vendor"]);
                    ObjModelVisitReport.DVendor_Sub_Vendor = Convert.ToBoolean(DVendor_Sub_Vendor);
                    ObjModelVisitReport.ReviseReason = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["ReviseReason"]);

                }
                else
                {

                    InspectionvisitReportModel Abc = new InspectionvisitReportModel();
                    Abc.PK_Call_ID = PK_CALL_ID;
                    return RedirectToAction("VisitReportForm", Abc);
                }
                #endregion




                #region report Count
                ReportDashBoard = objDalVisitReport.GetReportByCall_Id(PK_CALL_ID);
                if (ReportDashBoard.Rows.Count > 0)
                {
                    count = ReportDashBoard.Rows.Count;
                }
                string countNo = Convert.ToString(count);
                string ReportNew = ReportDashBoard.Rows[0]["ReportNo"].ToString().TrimEnd('.'); //.TrimEnd('.');

                #endregion


                #region Image Save to pdf
                SelectPdf.GlobalProperties.LicenseKey = "uZKImYuMiJmImYuIl4mZioiXiIuXgICAgA==";
                System.Text.StringBuilder strss = new System.Text.StringBuilder();
                string bodys = string.Empty;
                string ImageContent = "";
                string ImageContentname = "";
                string ImageContentnameTest = "";
                using (StreamReader reader = new StreamReader(Server.MapPath("~/inspection-visit-report-images.html")))
                {
                    bodys = reader.ReadToEnd();
                }
                foreach (ReportImageModel v in ImageDashBoard)
                {
                    #region testTr
                    //var table = document.createElement('table');
                    //for (var i = 1; i < 4; i++)
                    //{
                    //    var tr = document.createElement('tr');

                    //    var td1 = document.createElement('td');
                    //    var td2 = document.createElement('td');

                    //    var text1 = document.createTextNode('Text1');
                    //    var text2 = document.createTextNode('Text2');

                    //    td1.appendChild(text1);
                    //    td2.appendChild(text2);
                    //    tr.appendChild(td1);
                    //    tr.appendChild(td2);

                    //    table.appendChild(tr);
                    //}
                    //document.body.appendChild(table);
                    #endregion


                    N = N + 1;
                    ImageContentname += "<tr><td style='padding: 10px; width: 50 %;'>" + v.Heading + "</td></tr>";

                    ImageContent += "<tr><td style='padding:10px;' valign='top'><img src='" + ConfigurationManager.AppSettings["Web"].ToString() + "/Content/Uploads/Images/" + v.Image + "' style='width:100px;height:100px;  ' alt=''></td></tr>";
                    ImageContentnameTest += "<tr><td style='padding: 10px; width: 50 %;'>" + v.Heading + "</td></tr>" + "<tr><td style='padding:10px;' valign='top'><img src='" + ConfigurationManager.AppSettings["Web"].ToString() + "/Content/Uploads/Images/" + v.Image + "' style='width:100px;height:100px; ' alt=''></td></tr>";

                }
                bodys = bodys.Replace("[Image]", ImageContent);
                bodys = bodys.Replace("[ImageName]", ImageContentname);
                bodys = bodys.Replace("[Logos]", "http://localhost:54895/AllJsAndCss/images/logo.png");

                strss.Append(bodys);
                PdfPageSize pageSizes = PdfPageSize.A4;
                PdfPageOrientation pdfOrientations = PdfPageOrientation.Portrait;
                HtmlToPdf converters = new HtmlToPdf();
                converters.Options.PdfPageSize = pageSizes;
                converters.Options.PdfPageOrientation = pdfOrientations;
                SelectPdf.PdfDocument docs = converters.ConvertHtmlString(bodys);
                string ReportNames = ObjModelVisitReport.Call_No + "/" + count + ".pdf";
                string paths = Server.MapPath("~/Content");
                docs.Save(paths + '\\' + ReportNames);
                docs.Close();

                #endregion
                #region Save to Pdf Code 


                SelectPdf.GlobalProperties.LicenseKey = "uZKImYuMiJmImYuIl4mZioiXiIuXgICAgA==";
                System.Text.StringBuilder strs = new System.Text.StringBuilder();
                string body = string.Empty;

                string ItemDescriptioncontent = "";
                string ReferenceDocumentscontent = "";
                string InspectionDocumentsContent = "";
                string DocumentreviewContent = "";
                string EquipmentDetailscontent = "";

                string check1 = "";
                string check2 = "";
                string check3 = "";
                string check4 = "";
                string check5 = "";
                string check6 = "";
                string check7 = "";
                string check8 = "";
                string check9 = "";
                string check10 = "";
                string checkNonNABL = "";
                string check11 = "";
                string check12 = "";
                string check13 = "";
                using (StreamReader reader = new StreamReader(Server.MapPath("~/inspection-visit-report.html")))
                {
                    body = reader.ReadToEnd();
                }





                body = body.Replace("[SapAndControle_No]", ObjModelVisitReport.SubJob_No);
                body = body.Replace("[Branch]", ObjModelVisitReport.Branch);
                body = body.Replace("[NotificationNameNo_Date]", ObjModelVisitReport.Notification_Name_No_Date);
                body = body.Replace("[DateOfInspection]", ObjModelVisitReport.Date_Of_Inspection);
                body = body.Replace("[ProjectNameLocation]", ObjModelVisitReport.Project_Name_Location);
                body = body.Replace("[AddressOfInspection]", ObjModelVisitReport.Address_Of_Inspection);
                body = body.Replace("[ClientName]", ObjModelVisitReport.Client_Name);
                body = body.Replace("[Enduser_Name]", ObjModelVisitReport.End_user_Name);
                body = body.Replace("[DECPMCEPC_Name]", ObjModelVisitReport.DEC_PMC_EPC_Name);
                body = body.Replace("[DECPMCEPCAssignment_No]", ObjModelVisitReport.DEC_PMC_EPC_Assignment_No);
                body = body.Replace("[VendorNameLocation]", ObjModelVisitReport.Vendor_Name_Location);
                body = body.Replace("[PoNo]", ObjModelVisitReport.Po_No);
                body = body.Replace("[SubVendorName]", ObjModelVisitReport.Sub_Vendor_Name);
                body = body.Replace("[PoNoSubVendor]", ObjModelVisitReport.Po_No_SubVendor);
                body = body.Replace("[Conclusion]", ObjModelVisitReport.Conclusion);
                body = body.Replace("[CanIRNbeissued]", ObjModelVisitReport.CanIRNbeissued + ' ' + ObjModelVisitReport.IssuedPOItemNumbers);

                body = body.Replace("[PendingActivites]", ObjModelVisitReport.Pending_Activites);
                body = body.Replace("[IdentificationOfInspected]", ObjModelVisitReport.Identification_Of_Inspected);
                body = body.Replace("[AreasOfConcerns]", ObjModelVisitReport.Areas_Of_Concerns);
                body = body.Replace("[NonConformitiesraised]", ObjModelVisitReport.Non_Conformities_raised);
                body = body.Replace("[Name]", ObjModelVisitReport.Name);
                body = body.Replace("[date]", ObjModelVisitReport.ReportCreatedDate);

                body = body.Replace("[RevisionNo]", countNo);

                body = body.Replace("[TempInspectionPhotosNo]", ObjModelVisitReport.TempInspectionPhotosNo);
                body = body.Replace("[TempMaster_List_Of_calibrated_Instruments]", ObjModelVisitReport.TempMaster_List_Of_calibrated_Instruments);
                if (ObjModelVisitReport.ReviseReason != "-" && ObjModelVisitReport.ReviseReason != "")
                {
                    body = body.Replace("[ReviseReason]", "Reason for Revision - " + Convert.ToString(ObjModelVisitReport.ReviseReason));
                }
                else
                {
                    body = body.Replace("[ReviseReason]", "-");
                }

                if (ObjModelVisitReport.DTUVIndiaClientEndUser == true)
                {
                    check11 = "<span><input type='checkbox'  value=" + ObjModelVisitReport.DTUVIndiaClientEndUser + " checked></span>";
                }
                else
                {
                    check11 = "<span><input type='checkbox'  value=" + ObjModelVisitReport.DTUVIndiaClientEndUser + " ></span>";
                }
                if (ObjModelVisitReport.DTUVIndiaExecuting_Originating_Branch == true)
                {
                    check12 = "<span><input type='checkbox'  value=" + ObjModelVisitReport.DTUVIndiaExecuting_Originating_Branch + " checked></span>";
                }
                else
                {
                    check12 = "<span><input type='checkbox'  value=" + ObjModelVisitReport.DTUVIndiaExecuting_Originating_Branch + " ></span>";
                }
                if (ObjModelVisitReport.DVendor_Sub_Vendor == true)
                {
                    check13 = "<span><input type='checkbox'  value=" + ObjModelVisitReport.DVendor_Sub_Vendor + " checked></span>";
                }
                else
                {
                    check13 = "<span><input type='checkbox'  value=" + ObjModelVisitReport.DVendor_Sub_Vendor + " ></span>";
                }


                if (ObjModelVisitReport.Kick_Off_Pre_Inspection == true)
                {
                    check1 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox' style='border:1px solid #000;'  value=" + ObjModelVisitReport.Kick_Off_Pre_Inspection + " checked></span></td>";
                }
                else
                {
                    check1 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox' style='border:1px solid #000;'  value=" + ObjModelVisitReport.Kick_Off_Pre_Inspection + "></span></td>";
                }
                if (ObjModelVisitReport.Material_identification == true)
                {
                    check2 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Material_identification + " checked></span></td>";
                }
                else
                {
                    check2 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Material_identification + " ></span></td>";
                }
                if (ObjModelVisitReport.Interim_Stages == true)
                {
                    check3 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Interim_Stages + " checked></span></td>";
                }
                else
                {
                    check3 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Interim_Stages + "></span></td>";
                }
                if (ObjModelVisitReport.Document_review == true)
                {
                    check4 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Document_review + " checked></span></td>";
                }
                else
                {
                    check4 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Document_review + "></span></td>";
                }
                if (ObjModelVisitReport.Final_Inspection == true)
                {
                    check5 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Final_Inspection + " checked></span></td>";
                }
                else
                {
                    check5 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Final_Inspection + " ></span></td>";
                }
                if (ObjModelVisitReport.Re_inspection == true)
                {
                    check6 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Re_inspection + " checked></span></td>";
                }
                else
                {
                    check6 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Re_inspection + " ></span></td>";
                }

                if (ObjModelVisitReport.Inspection_records == true)
                {
                    check7 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Inspection_records + " checked></span></td>";
                }
                else
                {
                    check7 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Inspection_records + " ></span></td>";
                }
                if (ObjModelVisitReport.Other_Specify == true)
                {
                    check8 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Other_Specify + " checked></span></td>";
                }
                else
                {
                    check8 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Other_Specify + " ></span></td>";
                }
                if (ObjModelVisitReport.Inspection_Photo == true)
                {
                    check9 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Inspection_Photo + " checked></span></td>";
                }
                else
                {
                    check9 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Inspection_Photo + "></span></td>";
                }
                if (ObjModelVisitReport.MasterListOfcalibratedInstruments == true)
                {
                    check10 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.MasterListOfcalibratedInstruments + " checked></span></td>";
                }
                else
                {
                    check10 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.MasterListOfcalibratedInstruments + "></span></td>";
                }

                foreach (ItemDescriptionModel v in lstCompanyDashBoard)
                {
                    i = i + 1;
                    ItemDescriptioncontent += "<tr><td width='10%' align='center' style='font - size: 14px; color: #000; font-family: Arial;'>" + Convert.ToString(v.Po_Item_No) + "</td><td width='10%' style='font - size: 14px; color: #000; font-family: Arial;'>" + v.Item_Code + " </td><td width='30%' style='font - size: 14px; color: #000; font-family: Arial;'>" + v.ItemCode_Description + "</td><td width='10%' style='font - size: 14px; color: #000; font-family: Arial;'>" + v.Unit + "</td><td width='10%'>" + v.Po_Quantity + "</td><td width='10%' style='font - size: 14px; color: #000; font-family: Arial;'>" + v.Offered_Quantity + "</td><td width='10%' style='font - size: 14px; color: #000; font-family: Arial;'>" + v.Accepted_Quantity + "</td></tr>";
                }

                foreach (ReferenceDocumentsModel v in RefranceDocuments)
                {
                    J = J + 1;
                    //                    ReferenceDocumentscontent += "<tr><td> " + J + " </td><td>" + Convert.ToString(v.Document_Name) + "</td><td>" + v.Document_No + " </td><td>" + v.Approval_Status + "</td></tr>";
                    ReferenceDocumentscontent += "<tr><td> " + J + ')' + " </td><td>" + Convert.ToString(v.Document_Name) + "</td><td>" + v.Document_No + " </td><td>" + v.VendorDocumentNumber + "</td><td>" + v.Approval_Status + "</td></tr>";

                }

                foreach (InspectionActivitiesModel v in InspectionDocuments)
                {
                    K = K + 1;
                    InspectionDocumentsContent += "<tr><td width='10%' align='center'> " + K + ')' + " </td><td width='90%' colspan='5'><span style='font-size: 14px;white-space: pre-line;'>" + Convert.ToString(v.Stages_Witnessed) + "</span></td></tr>";
                }
                foreach (DocumentRevieweModel v in DocumentReview)
                {
                    L = L + 1;
                    DocumentreviewContent += "<tr><td width='10%' align='center'><span> " + L + ')' + " </span></td><td width='90%' colspan='3'><span style='font-size:14px;'>" + Convert.ToString(v.Description) + "</span></td></tr>";
                }
                foreach (EquipmentDetailsModel v in EquipmentDetails)
                {
                    M = M + 1;
                    // EquipmentDetailscontent += "<tr><td> " + M + " </td><td>" + Convert.ToString(v.Name_Of_Equipments) + "</td><td>" + v.Range + " </td><td>" + v.Id + "</td><td>" + v.CalibrationValid_Till_date + "</td><td>" + v.Certification_No_Date + "</td></tr>";
                    EquipmentDetailscontent += "<tr><td> " + M + ')' + " </td><td>" + Convert.ToString(v.Name_Of_Equipments) + "</td><td>" + v.Range + " </td><td>" + v.Id + "</td><td>" + v.CalibrationValid_Till_date + "</td><td>" + v.Certification_No_Date + "</td><td>" + v.SNABLseenote1 + "</td><td>" + v.SNonNABLseenote2 + "</td></tr>";
                }

                body = body.Replace("[ItemDescriptionContent]", ItemDescriptioncontent);
                body = body.Replace("[ReferenceDocumentsContent]", ReferenceDocumentscontent);
                body = body.Replace("[InspectionDocumentsContent]", InspectionDocumentsContent);
                body = body.Replace("[DocumentreviewContent]", DocumentreviewContent);
                body = body.Replace("[EquipmentDetailscontent]", EquipmentDetailscontent);
                body = body.Replace("[Stamp]", "http://localhost:54895/Stamp.png");
                body = body.Replace("[Signature]", "http://localhost:54895/signature.jpg");
                if (ObjModelVisitReport.Signatures != null)
                {
                    body = body.Replace("[Signature]", ConfigurationManager.AppSettings["Web"].ToString() + "/Content/Sign/" + ObjModelVisitReport.Signatures + "");
                }
                else
                {

                }
                body = body.Replace("[Checkbox1]", check1);
                body = body.Replace("[Checkbox2]", check2);
                body = body.Replace("[Checkbox3]", check3);
                body = body.Replace("[Checkbox4]", check4);
                body = body.Replace("[Checkbox5]", check5);
                body = body.Replace("[Checkbox6]", check6);
                body = body.Replace("[Checkbox7]", check7);
                body = body.Replace("[Checkbox8]", check8);
                body = body.Replace("[Checkbox9]", check9);
                body = body.Replace("[Checkbox10]", check10);
                body = body.Replace("[Checkbox11]", check11);
                body = body.Replace("[Checkbox12]", check12);
                body = body.Replace("[Checkbox13]", check13);

                strs.Append(body);
                PdfPageSize pageSize = PdfPageSize.A4;
                PdfPageOrientation pdfOrientation = PdfPageOrientation.Portrait;
                HtmlToPdf converter = new HtmlToPdf();


                // set the page timeout (in seconds)
                converter.Options.MaxPageLoadTime = 240;  //=========================5-Aug-2019
                converter.Options.PdfPageSize = pageSize;
                converter.Options.PdfPageOrientation = pdfOrientation;

                string _Header = string.Empty;
                string _footer = string.Empty;

                // for Report header by abel
                StreamReader _readHeader_File = new StreamReader(Server.MapPath("~/IV_Report_Header.html"));
                _Header = _readHeader_File.ReadToEnd();
                _Header = _Header.Replace("[SapAndControle_No]", ObjModelVisitReport.SubJob_No);
                _Header = _Header.Replace("[RevisionNo]", countNo);
                /* _Header = _Header.Replace("[Logo]", "http://localhost:54895/AllJsAndCss/images/logo.png"); */// change123 once pulished on server
                _Header = _Header.Replace("[Logo]", ConfigurationManager.AppSettings["Web"].ToString() + "/AllJsAndCss/images/logo.png");
                #region Generate no
                if (RM.Report == null)
                {

                    dtSrNo = objDalVisitReport.GetSrNo(ObjModelVisitReport.SubJob_No);
                    if (dtSrNo.Tables[0].Rows.Count > 0)
                    {
                        SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["SrNo"]);

                    }

                    string s = ReportNew.Remove(ReportNew.Length - 1);

                    RM.ReportNo = s + countNo;

                    _Header = _Header.Replace("[ReportNo]", RM.ReportNo);

                }
                else
                {
                    dtSrNo = objDalVisitReport.GetReportNo(Convert.ToString(RM.PK_RM_ID));
                    if (dtSrNo.Tables[0].Rows.Count > 0)
                    {
                        SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["ReportNo"]);

                    }

                    _Header = _Header.Replace("[ReportNo]", SrNo);
                }
                #endregion



                StreamReader _readFooter_File = new StreamReader(Server.MapPath("~/IV_Report_Footer.html"));
                _footer = _readFooter_File.ReadToEnd();

                // header settings
                converter.Options.DisplayHeader = true ||
                    true || true;
                converter.Header.DisplayOnFirstPage = true;
                converter.Header.DisplayOnOddPages = true;
                converter.Header.DisplayOnEvenPages = true;
                converter.Header.Height = 75;

                PdfHtmlSection headerHtml = new PdfHtmlSection(_Header, string.Empty);
                headerHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
                converter.Header.Add(headerHtml);

                // footer settings
                converter.Options.DisplayFooter = true ||
                    true || true;
                converter.Footer.DisplayOnFirstPage = true;
                converter.Footer.DisplayOnOddPages = true;
                converter.Footer.DisplayOnEvenPages = true;
                converter.Footer.Height = 170;

                PdfHtmlSection footerHtml = new PdfHtmlSection(_footer, string.Empty);
                footerHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
                converter.Footer.Add(footerHtml);

                //end abel code

                #region Footer Code
                // page numbers can be added using a PdfTextSection object
                PdfTextSection text = new PdfTextSection(0, 145, "Page: {page_number} of {total_pages}  ", new System.Drawing.Font("Arial", 8));
                text.HorizontalAlign = PdfTextHorizontalAlign.Right;
                converter.Footer.Add(text);
                #endregion




                SelectPdf.PdfDocument doc = converter.ConvertHtmlString(body);
                //string ReportName = ObjModelVisitReport.Call_No + "/" + count + ".pdf";
                string ReportName = RM.ReportNo + ".pdf";
                string path = Server.MapPath("~/IVRReport");
                doc.Save(path + '\\' + ReportName);
                doc.Close();
                #endregion
                if (RM.PK_RM_ID == 0)
                {
                    RM.Type = "IVR";
                    RM.Status = "1";
                    RM.ImageReport = ReportNames;
                    RM.Report = ReportName;
                    RM.ReportName = ReportName;
                    RM.PK_CALL_ID = PK_CALL_ID;
                    RM.SubJob_No = ObjModelVisitReport.SubJob_No;
                    RM.PK_SubJob_Id = ObjModelVisitReport.PK_SubJob_Id;
                    RM.ProjectName = ObjModelVisitReport.End_user_Name;
                    RM.Po_No = ObjModelVisitReport.Po_No;

                    Result = objDalVisitReport.InsertUpdateReport(RM);
                    if (Result != "" && Result != null)
                    {
                        TempData["InsertCompany"] = Result;
                    }
                }

                #region
                CostSheetDashBoard = objDalVisitReport.GetReportByCall_Id(PK_CALL_ID);
                if (CostSheetDashBoard.Rows.Count > 0)
                {
                    foreach (DataRow dr in CostSheetDashBoard.Rows)
                    {
                        ReportDashboard.Add(
                            new ReportModel
                            {
                                ReportName = Convert.ToString(dr["ReportName"]),
                                Report = Convert.ToString(dr["Report"]),
                                CraetedDate = Convert.ToString(dr["CraetedDate"]),
                                PK_RM_ID = Convert.ToInt32(dr["PK_RM_ID"]),
                                PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"])
                            }
                            );
                    }
                }
                ViewData["CostSheet"] = ReportDashboard;
                #endregion


                //return RedirectToAction("IvrReports", RMData);
                // return RedirectToAction("VisitReportForm", RM.PK_CALL_ID);

                return RedirectToAction("VisitReportForm", new { PK_Call_ID = RM.PK_CALL_ID });

            }
            else
            {


                //return RedirectToAction("IvrReports", RMData);
                //return RedirectToAction("VisitReportForm", RM.PK_CALL_ID);
                return RedirectToAction("VisitReportForm", new { PK_Call_ID = RM.PK_CALL_ID });

            }
        }
        #endregion


        #region Revise new  
        public ActionResult ReviseReports(int? PK_CALL_ID, InspectionvisitReportModel I, string Reason)
        {
            RMData.PK_CALL_ID = Convert.ToInt32(PK_CALL_ID);
            DataTable ItemDescriptionDashBoard = new DataTable();
            DataTable RefranceDocumentsDashBoard = new DataTable();
            DataTable InspectionActivitesDashBoard = new DataTable();
            DataTable DocumentsReviewBoard = new DataTable();
            DataTable EquipmentDetailsBoard = new DataTable();
            DataSet DSJobMasterByQtId = new DataSet();
            DataTable ReportDashBoard = new DataTable();
            DataTable CostSheetDashBoard = new DataTable();
            int count = 0;
            DataTable ImageReportDashBoard = new DataTable();
            List<ReportImageModel> ImageDashBoard = new List<ReportImageModel>();
            List<ItemDescriptionModel> lstCompanyDashBoard = new List<ItemDescriptionModel>();
            List<ReferenceDocumentsModel> RefranceDocuments = new List<ReferenceDocumentsModel>();
            List<InspectionActivitiesModel> InspectionDocuments = new List<InspectionActivitiesModel>();
            List<DocumentRevieweModel> DocumentReview = new List<DocumentRevieweModel>();
            List<EquipmentDetailsModel> EquipmentDetails = new List<EquipmentDetailsModel>();
            List<ReportModel> ReportDashboard = new List<ReportModel>();
            DataSet dtSrNo = new DataSet();
            string SrNo = "";


            ReportModel RM = new ReportModel();
            string Result = "";
            if (PK_CALL_ID != 0 || PK_CALL_ID != null)
            {
                int i = 0;
                int J = 0;
                int K = 0;
                int L = 0;
                int M = 0;
                int N = 0;





                #region report Count
                ReportDashBoard = objDalVisitReport.GetReportByCall_Id(PK_CALL_ID);
                if (ReportDashBoard.Rows.Count > 0)
                {
                    count = ReportDashBoard.Rows.Count;
                }
                string countNo = Convert.ToString(count);
                string ReportNew = ReportDashBoard.Rows[0]["ReportNo"].ToString().TrimEnd('.'); //.TrimEnd('.');

                #endregion




                #region Generate no
                if (RM.Report == null)
                {

                    dtSrNo = objDalVisitReport.GetSrNo(ObjModelVisitReport.SubJob_No);
                    if (dtSrNo.Tables[0].Rows.Count > 0)
                    {
                        SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["SrNo"]);

                    }

                    string s = ReportNew.Remove(ReportNew.Length - 1);

                    RM.ReportNo = s + countNo;



                }
                else
                {
                    dtSrNo = objDalVisitReport.GetReportNo(Convert.ToString(RM.PK_RM_ID));
                    if (dtSrNo.Tables[0].Rows.Count > 0)
                    {
                        SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["ReportNo"]);

                    }


                }
                #endregion


                if (RM.PK_RM_ID == 0)
                {
                    RM.Type = "IVR";
                    RM.Status = "1";
                    //RM.ImageReport = ReportNames;
                    //RM.Report = ReportName;
                    //RM.ReportName = ReportName;

                    string R = RM.ReportNo + ".pdf";
                     
                    RM.ImageReport = R;
                    RM.Report = R;
                    RM.ReportName = RM.ReportNo;
                    
                    RM.PK_CALL_ID = PK_CALL_ID;
                    RM.SubJob_No = ObjModelVisitReport.SubJob_No;
                    RM.PK_SubJob_Id = ObjModelVisitReport.PK_SubJob_Id;
                    RM.ProjectName = ObjModelVisitReport.End_user_Name;
                    RM.Po_No = ObjModelVisitReport.Po_No;

                    Result = objDalVisitReport.InsertUpdateReport(RM);
                    if (Result != "" && Result != null)
                    {
                        TempData["InsertCompany"] = Result;
                    }
                }




                //return RedirectToAction("IvrReports", RMData);
                // return RedirectToAction("VisitReportForm", RM.PK_CALL_ID);

                return RedirectToAction("VisitReportForm", new { PK_Call_ID = RM.PK_CALL_ID });

            }
            else
            {


                //return RedirectToAction("IvrReports", RMData);
                //return RedirectToAction("VisitReportForm", RM.PK_CALL_ID);
                return RedirectToAction("VisitReportForm", new { PK_Call_ID = RM.PK_CALL_ID });

            }
        }
        #endregion





        public ActionResult UpdateReports(int? PK_CALL_ID, string flag)
        {
            RMData.PK_CALL_ID = Convert.ToInt32(PK_CALL_ID);
            DataTable ItemDescriptionDashBoard = new DataTable();
            DataTable RefranceDocumentsDashBoard = new DataTable();
            DataTable InspectionActivitesDashBoard = new DataTable();
            DataTable DocumentsReviewBoard = new DataTable();
            DataTable EquipmentDetailsBoard = new DataTable();
            DataTable DTVisitTime = new DataTable();
            DataSet DSJobMasterByQtId = new DataSet();
            DataTable ReportDashBoard = new DataTable();
            DataSet UpdateReport = new DataSet();
            DataTable CostSheetDashBoard = new DataTable();
            int count = 0;
            DataTable ImageReportDashBoard = new DataTable();
            List<ReportImageModel> ImageDashBoard = new List<ReportImageModel>();
            List<ItemDescriptionModel> lstCompanyDashBoard = new List<ItemDescriptionModel>();
            List<ReferenceDocumentsModel> RefranceDocuments = new List<ReferenceDocumentsModel>();
            List<InspectionActivitiesModel> InspectionDocuments = new List<InspectionActivitiesModel>();
            List<DocumentRevieweModel> DocumentReview = new List<DocumentRevieweModel>();
            List<EquipmentDetailsModel> EquipmentDetails = new List<EquipmentDetailsModel>();
            List<ReportModel> ReportDashboard = new List<ReportModel>();

            List<InspectionvisitReportModel> lstAreasOfConcern = new List<InspectionvisitReportModel>();
            List<InspectionvisitReportModel> lstPendingActivity = new List<InspectionvisitReportModel>();

            List<InspectionvisitReportModel> lstVisitReportTime = new List<InspectionvisitReportModel>();


            DataTable dtAreasOfConcern = new DataTable();
            DataTable dtAreasOfConcernOnPDF = new DataTable();
            DataTable dtPendingActivity = new DataTable();

            DataSet dtSrNo = new DataSet();
            string SrNo = "";
            string SubJobDate = string.Empty;

            ReportModel RM = new ReportModel();
            string Result = "";
            try
            {


                if (PK_CALL_ID != 0 || PK_CALL_ID != null)
                {

                    int i = 0;
                    int J = 0;
                    int K = 0;
                    int L = 0;
                    int M = 0;
                    int N = 0;
                    int A = 0;
                    int PA = 0;
                    int VT = 0;

                    #region 
                    DSJobMasterByQtId = objDalVisitReport.EditInspectionVisitReportByPKCallID(PK_CALL_ID);

                    //DSJobMasterByQtId = objDalVisitReport.PrintVisitReport(PK_CALL_ID);

                    #region ARC first Visit Flag
                    string chkIfARC = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["chkARC"]);
                    string Count = Convert.ToString(DSJobMasterByQtId.Tables[1].Rows[0]["IVRCount"]);

                    if (chkIfARC == "1" /*& Count=="1"*/ )
                    {

                        Result = objDalVisitReport.UpdateARCFlagFirstClick(PK_CALL_ID);
                    }

                    //added by shrutika salve  on 16/06/2023 
                    if (PK_CALL_ID != 0 || PK_CALL_ID != null)
                    {

                        Result = objDalVisitReport.UpdateDownloadDate(PK_CALL_ID);
                    }

                    #endregion


                    if (DSJobMasterByQtId.Tables[0].Rows.Count > 0)
                    {
                        ObjModelVisitReport.ItemDescriptionDynamic = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["ItemDescriptionDynamic"]);
                        ObjModelVisitReport.SAPNo = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["SAP_No"]);
                        ObjModelVisitReport.Branch = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Branch"]);
                        ObjModelVisitReport.Sap_And_Controle_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Sap_And_Controle_No"]);
                        ObjModelVisitReport.PK_IVR_ID = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["PK_IVR_ID"]);
                        ObjModelVisitReport.Project_Name_Location = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Project_Name_Location"]);
                        ObjModelVisitReport.Address_Of_Inspection = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Address_Of_Inspection"]);
                        ObjModelVisitReport.End_user_Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["End_user_Name"]);
                        ObjModelVisitReport.Vendor_Name_Location = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Vendor_Name_Location"]);
                        ObjModelVisitReport.PK_Call_ID = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["PK_Call_ID"]);
                        ObjModelVisitReport.Notification_Name_No_Date = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Notification_Name_No_Date"]);

                        ObjModelVisitReport.Date_Of_Inspection = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Date_Of_Inspection"]);
                        ObjModelVisitReport.Client_Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Client_Name"]);
                        ObjModelVisitReport.DEC_PMC_EPC_Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["DEC_PMC_EPC_Name"]);
                        ObjModelVisitReport.DEC_PMC_EPC_Assignment_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["DEC_PMC_EPC_Assignment_No"]);
                        ObjModelVisitReport.Po_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Po_No"]);
                        //ObjModelVisitReport.Sub_Vendor_Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Sub_Vendor_Name"]);
                        //ObjModelVisitReport.Po_No_SubVendor = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Po_No_SubVendor"]);
                        //ObjModelVisitReport.SubJob_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["SubJob_No"]);

                        ObjModelVisitReport.Po_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Po_Number"]);
                        ObjModelVisitReport.Sub_Vendor_Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["SubVendorName"]);
                        ObjModelVisitReport.Po_No_SubVendor = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["SubVendorPoNo"]);
                        ObjModelVisitReport.SubJob_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["SubJob_No"]);
                        ObjModelVisitReport.Date_of_PO = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Date_of_PO"]);
                        ObjModelVisitReport.SubSubVendorDate_of_PO = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["SubSubSubVendorPODate"]);

                        ObjModelVisitReport.SubSubSubVendorName = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["SubSubVendorName"]);
                        ObjModelVisitReport.SubSubSubPoNo = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["SubSubVendorPoNo"]);
                        ObjModelVisitReport.SubSubSubPoDate = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["SubSubVendorPoDate"]);
                        ObjModelVisitReport.SubType = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["JobType"]);


                        DataSet DsSubJobDate = new DataSet();
                        DsSubJobDate = objDalVisitReport.getsubJobdate(ObjModelVisitReport.SubJob_No);


                        if (DsSubJobDate.Tables[0].Rows.Count > 0)
                        {
                            SubJobDate = DsSubJobDate.Tables[0].Rows[0]["SubJobDate"].ToString();
                        }


                        int kick = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Kick_Off_Pre_Inspection"]);
                        ObjModelVisitReport.Kick_Off_Pre_Inspection = Convert.ToBoolean(kick);

                        int Mi = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Material_identification"]);
                        ObjModelVisitReport.Material_identification = Convert.ToBoolean(Mi);

                        int Interim_Stages = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Interim_Stages"]);
                        ObjModelVisitReport.Interim_Stages = Convert.ToBoolean(Interim_Stages);

                        int Document_review = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Document_review"]);
                        ObjModelVisitReport.Document_review = Convert.ToBoolean(Document_review);

                        int Final_Inspection = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Final_Inspection"]);
                        ObjModelVisitReport.Final_Inspection = Convert.ToBoolean(Final_Inspection);

                        int Re_inspection = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Re_inspection"]);
                        ObjModelVisitReport.Re_inspection = Convert.ToBoolean(Re_inspection);

                        int MasterListOfcalibratedInstruments = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["MasterListOfcalibratedInstruments"]);
                        ObjModelVisitReport.MasterListOfcalibratedInstruments = Convert.ToBoolean(MasterListOfcalibratedInstruments);


                        ObjModelVisitReport.CanIRNbeissued = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["CanIRNbeissued"]);
                        ObjModelVisitReport.IssuedPOItemNumbers = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["IssuedPOItemNumbers"]);
                        ObjModelVisitReport.ReasonName = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["ReasonName"]);

                        //if (ObjModelVisitReport.CanIRNbeissued == "Yes")
                        //{
                        //    ObjModelVisitReport.CanIRNbeissued = "IRN can be issued for all items " + ObjModelVisitReport.IssuedPOItemNumbers.ToString() + ".";
                        //}
                        //else if (ObjModelVisitReport.CanIRNbeissued == "Partially")
                        //{
                        //    ObjModelVisitReport.CanIRNbeissued = "IRN can be issued for PO item Numbers " + ObjModelVisitReport.IssuedPOItemNumbers.ToString() + " for remaining " + ObjModelVisitReport.ReasonName.ToString() + ".";
                        //}
                        //else if (ObjModelVisitReport.CanIRNbeissued == "No")
                        //{
                        //    ObjModelVisitReport.CanIRNbeissued = "IRN can not be issued for all PO items because " + ObjModelVisitReport.ReasonName.ToString() + ".";
                        //}
                        //else
                        //{
                        //    ObjModelVisitReport.CanIRNbeissued = "";
                        //}
                        if (ObjModelVisitReport.CanIRNbeissued == "Yes")
                        {
                            // ObjModelVisitReport.CanIRNbeissued = "IRN can be issued for all items " + ObjModelVisitReport.IssuedPOItemNumbers.ToString() + ".";
                            ObjModelVisitReport.CanIRNbeissued = "IRN can be issued for all inspected items " + "(" + ObjModelVisitReport.IssuedPOItemNumbers.ToString() + ") .";
                        }
                        else if (ObjModelVisitReport.CanIRNbeissued == "Partially")
                        {
                            ObjModelVisitReport.CanIRNbeissued = "IRN can be issued for PO item Numbers " + ObjModelVisitReport.IssuedPOItemNumbers.ToString() + " for remaining " + ObjModelVisitReport.ReasonName.ToString() + ".";
                        }
                        else if (ObjModelVisitReport.CanIRNbeissued == "No")
                        {
                            ObjModelVisitReport.CanIRNbeissued = "IRN can not be issued for all PO items because " + ObjModelVisitReport.ReasonName.ToString() + ".";
                        }
                        else
                        {
                            ObjModelVisitReport.CanIRNbeissued = "";
                        }



                        ObjModelVisitReport.Conclusion = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Conclusion"]);
                        ObjModelVisitReport.Pending_Activites = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Pending_Activites"]);
                        ObjModelVisitReport.Identification_Of_Inspected = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Identification_Of_Inspected"]);
                        ObjModelVisitReport.Areas_Of_Concerns = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Areas_Of_Concerns"]);
                        ObjModelVisitReport.Non_Conformities_raised = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Non_Conformities_raised"]);
                        ObjModelVisitReport.Signatures = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Signatures"]);
                        ObjModelVisitReport.Type = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Type"]);
                        //ObjModelVisitReport.Report_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Report_No"]);
                        ObjModelVisitReport.Report_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["ReportNo"]);
                        ObjModelVisitReport.Call_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Call_No"]);
                        ObjModelVisitReport.Signatures = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Signature"]);
                        ObjModelVisitReport.Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["FirstName"]) + " " + Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["LastName"]);
                        ObjModelVisitReport.ReportCreatedDate = Convert.ToDateTime(DSJobMasterByQtId.Tables[0].Rows[0]["CreatedDate"]).ToString("dd/MM/yyyy");

                        int Inspection_records = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Inspection_records"]);
                        ObjModelVisitReport.Inspection_records = Convert.ToBoolean(Inspection_records);

                        int Inspection_Photo = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Inspection_Photo"]);
                        ObjModelVisitReport.Inspection_Photo = Convert.ToBoolean(Inspection_Photo);

                        int Other_Specify = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Other_Specify"]);
                        ObjModelVisitReport.Other_Specify = Convert.ToBoolean(Other_Specify);
                        ObjModelVisitReport.InspectiobRecord_Remark = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["InspectiobRecord_Remark"]);
                        ObjModelVisitReport.OtherSpecifyRecords = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["OtherSpecifyRecords"]);


                        ObjModelVisitReport.SubJob_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["SubJob_No"]);
                        ObjModelVisitReport.PK_SubJob_Id = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["PK_SubJob_Id"]);


                        ObjModelVisitReport.Type = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Type"]);


                        ObjModelVisitReport.TempInspectionPhotosNo = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["TempInspectionPhotosNo"]);
                        ObjModelVisitReport.TempMaster_List_Of_calibrated_Instruments = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["TempMaster_List_Of_calibrated_Instruments"]);
                        int DTUVIndiaClientEndUser = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["DTUVIndiaClientEndUser"]);
                        ObjModelVisitReport.DTUVIndiaClientEndUser = Convert.ToBoolean(DTUVIndiaClientEndUser);
                        int DTUVIndiaExecuting_Originating_Branch = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["DTUVIndiaExecuting_Originating_Branch"]);
                        ObjModelVisitReport.DTUVIndiaExecuting_Originating_Branch = Convert.ToBoolean(DTUVIndiaExecuting_Originating_Branch);
                        int DVendor_Sub_Vendor = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["DVendor_Sub_Vendor"]);
                        ObjModelVisitReport.DVendor_Sub_Vendor = Convert.ToBoolean(DVendor_Sub_Vendor);
                        ObjModelVisitReport.ReviseReason = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["ReviseReason"]);
                        ObjModelVisitReport.ReviseReportNoForPDF = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["ReviseReportNoForPDF"]);
                        ObjModelVisitReport.ReportNoForPDF = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["ReportNoForPDF"]);
                       // ObjModelVisitReport.Date_of_PO = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Date_of_PO"]);
                        //ObjModelVisitReport.SubSubVendorDate_of_PO = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["SubvendorPODate1"]);
                        ObjModelVisitReport.Expenses = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Expenses"]);
                        ObjModelVisitReport.DownloadPDF = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Report"]);
                        ObjModelVisitReport.Intime = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Intime"]);
                        ObjModelVisitReport.Outtime = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Outtime"]);
                        ObjModelVisitReport.CustomerSpecificReportNumber = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["CustomerSpecificReportNumber"]);
                        ObjModelVisitReport.IsCustomerSpecificReportNumber = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["IsCustomerSpecificReportNumber"]);
                        ObjModelVisitReport.PDF_IfConcernsDisplayOfPDF = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["IfConcernsDisplayOfPDF"]);
                        ObjModelVisitReport.ShowCount = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["ShowCount"]);
                        ObjModelVisitReport.DisplayTotalQuantity = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["DisplayTotalQuantity"]);
                        

                        ObjModelVisitReport.PO_QuantityTotal1 = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["PO_QuantityTotal"]);
                        ObjModelVisitReport.Offered_QuantityTotal1 = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Offered_QuantityTotal"]);
                        ObjModelVisitReport.Accepted_QuantityTotal1 = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Accepted_QuantityTotal"]);


                    }
                    else
                    {

                        InspectionvisitReportModel Abc = new InspectionvisitReportModel();
                        Abc.PK_Call_ID = PK_CALL_ID;
                        return RedirectToAction("VisitReportForm", Abc);
                    }
                    #endregion


                    #region  item Description

                    ItemDescriptionDashBoard = objDalVisitReport.GetitemDescription(PK_CALL_ID);
                    if (ItemDescriptionDashBoard.Rows.Count > 0)
                    {
                        foreach (DataRow dr in ItemDescriptionDashBoard.Rows)
                        {
                            lstCompanyDashBoard.Add(
                                new ItemDescriptionModel
                                {
                                    PK_ItemD_Id = Convert.ToInt32(dr["PK_ItemD_Id"]),
                                    Po_Item_No = Convert.ToString(dr["Po_Item_No"]),
                                    ItemCode_Description = Convert.ToString(dr["ItemCode_Description"]),
                                    Po_Quantity = Convert.ToString(dr["Po_Quantity"]),
                                    Offered_Quantity = Convert.ToString(dr["Offered_Quantity"]),
                                    PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"]),
                                    Item_Code = Convert.ToString(dr["Item_Code"]),
                                    Accepted_Quantity = Convert.ToString(dr["Accepted_Quantity"]),
                                    Cumulative_Accepted_Qty = Convert.ToString(dr["Cumulative_Accepted_Qty"]),
                                    Unit = Convert.ToString(dr["Unit"]),
                                    HeatNumber = Convert.ToString(dr["HeatNumber"]),
                                    TotalQuantity = Convert.ToString(dr["TotalQuantity"]),
                                }
                                );
                        }
                    }
                    #endregion


                    #region Reference Documents

                    RefranceDocumentsDashBoard = objDalVisitReport.GetReferenceDocuments(PK_CALL_ID);
                    if (RefranceDocumentsDashBoard.Rows.Count > 0)
                    {
                        foreach (DataRow dr in RefranceDocumentsDashBoard.Rows)
                        {
                            RefranceDocuments.Add(
                                new ReferenceDocumentsModel
                                {
                                    Document_No = Convert.ToString(dr["Document_No"]),
                                    Document_Name = Convert.ToString(dr["Document_Name"]),
                                    Approval_Status = Convert.ToString(dr["Approval_Status"]),
                                    PK_RD_ID = Convert.ToInt32(dr["PK_RD_ID"]),
                                    PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"]),
                                    VendorDocumentNumber = Convert.ToString(dr["VendorDocumentNumber"])
                                }
                                );
                        }
                    }
                    #endregion


                    #region Inspection Activities
                    InspectionActivitesDashBoard = objDalVisitReport.GetInspectionActivities(PK_CALL_ID);
                    if (InspectionActivitesDashBoard.Rows.Count > 0)
                    {
                        foreach (DataRow dr in InspectionActivitesDashBoard.Rows)
                        {
                            InspectionDocuments.Add(
                                new InspectionActivitiesModel
                                {
                                    Stages_Witnessed = Convert.ToString(dr["Stages_Witnessed"]),
                                    PK_IA_ID = Convert.ToInt32(dr["PK_IA_ID"]),
                                    PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"])

                                }
                                );
                        }
                    }
                    #endregion

                    #region Documents Review
                    DocumentsReviewBoard = objDalVisitReport.GetDocumentRevieweModelByCall_Id(PK_CALL_ID);
                    if (DocumentsReviewBoard.Rows.Count > 0)
                    {
                        foreach (DataRow dr in DocumentsReviewBoard.Rows)
                        {
                            DocumentReview.Add(
                                new DocumentRevieweModel
                                {
                                    Description = Convert.ToString(dr["Description"]),
                                    PK_DR_ID = Convert.ToInt32(dr["PK_DR_ID"]),
                                    PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"])

                                }
                                );
                        }
                    }
                    #endregion

                    #region Equipments Details
                    EquipmentDetailsBoard = objDalVisitReport.GetEquipmentDetailsModelByCall_Id(PK_CALL_ID);
                    if (EquipmentDetailsBoard.Rows.Count > 0)
                    {
                        foreach (DataRow dr in EquipmentDetailsBoard.Rows)
                        {
                            EquipmentDetails.Add(
                                new EquipmentDetailsModel
                                {
                                    Name_Of_Equipments = Convert.ToString(dr["Name_Of_Equipments"]),
                                    Range = Convert.ToString(dr["Range"]),
                                    Id = Convert.ToString(dr["Id"]),
                                    CalibrationValid_Till_date = Convert.ToString(dr["CalibrationValid_Till_date"]),
                                    Certification_No_Date = Convert.ToString(dr["Certification_No_Date"]),
                                    PK_DOE_Id = Convert.ToInt32(dr["PK_DOE_Id"]),
                                    PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"]),
                                    SNABLseenote1 = Convert.ToString(dr["NABLseenote1"]) == "True" ? "Yes" : "-",

                                    SNonNABLseenote2 = Convert.ToString(dr["NonNABLseenote2"]) == "True" ? "Yes" : "-"
                                }
                                );
                        }
                    }
                    #endregion

                    #region Get Visit Time
                    DTVisitTime = objDalVisitReport.GetVisitTime(PK_CALL_ID);
                    if (DTVisitTime.Rows.Count > 0)
                    {
                        foreach (DataRow dr in DTVisitTime.Rows)
                        {
                            lstVisitReportTime.Add(
                                new InspectionvisitReportModel
                                {
                                    DateSe = Convert.ToString(dr["DateSe"]),
                                    Intime = Convert.ToString(dr["Intime"]),
                                    Outtime = Convert.ToString(dr["Outtime"]),

                                }
                                );
                        }
                    }
                    #endregion



                    #region report Count
                    UpdateReport = objDalVisitReport.GetReportByLastId(PK_CALL_ID);
                    if (UpdateReport.Tables[0].Rows.Count > 0)
                    {
                        RM.PK_RM_ID = Convert.ToInt32(UpdateReport.Tables[0].Rows[0]["PK_RM_ID"]);
                        RM.Report = Convert.ToString(UpdateReport.Tables[0].Rows[0]["Report"]);
                        //RM.ImageReport = Convert.ToString(UpdateReport.Tables[0].Rows[0]["ImageReport"]);
                    }

                    #region report Count
                    ReportDashBoard = objDalVisitReport.GetReportByCall_Id(PK_CALL_ID);
                    if (ReportDashBoard.Rows.Count > 0)
                    {
                        int counts = ReportDashBoard.Rows.Count;
                        count = counts - 1;
                    }
                    string countNo = Convert.ToString(count);
                    #endregion
                    #endregion


                    #region Report Image data
                    ImageReportDashBoard = objDalVisitReport.GetReportImageByCall_Id(PK_CALL_ID);
                    if (ImageReportDashBoard.Rows.Count > 0)
                    {
                        foreach (DataRow dr in ImageReportDashBoard.Rows)
                        {
                            ImageDashBoard.Add(
                                new ReportImageModel
                                {
                                    Image = Convert.ToString(dr["Image"]),
                                    Heading = Convert.ToString(dr["Heading"]),
                                }
                                );
                        }
                    }
                    #endregion


                    #region  Areas of Concern
                    dtAreasOfConcern = objDalVisitReport.GetAreasOfConcern(PK_CALL_ID);
                    if (dtAreasOfConcern.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtAreasOfConcern.Rows)
                        {
                            lstAreasOfConcern.Add(
                                new InspectionvisitReportModel
                                {
                                    Areas_Of_Concerns = Convert.ToString(dr["Areas_Of_Concerns"]),

                                }
                                );
                        }
                    }

                    #endregion

                    #region  Pending Activities
                    dtPendingActivity = objDalVisitReport.GetPendingActivity(PK_CALL_ID);
                    if (dtPendingActivity.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtPendingActivity.Rows)
                        {
                            lstPendingActivity.Add(
                                new InspectionvisitReportModel
                                {
                                    Pending_Activites = Convert.ToString(dr["Pending_Activity"]),

                                }
                                );
                        }
                    }

                    #endregion

                    #region Image Save to pdf
                    SelectPdf.GlobalProperties.LicenseKey = "uZKImYuMiJmImYuIl4mZioiXiIuXgICAgA==";
                    System.Text.StringBuilder strss = new System.Text.StringBuilder();

                    string bodys = string.Empty;
                    string ImageContent = string.Empty;
                    string ReportNames = string.Empty;
                    string paths = string.Empty;
                    int img = 0;
                    int imagecount = ImageReportDashBoard.Rows.Count;
                    int rows = imagecount / 2;
                    int imageposted = 0;
                    int reminder = (imagecount % 2);
                    int iteration = 1;
                    StreamReader reader;

                    //using (reader = new StreamReader(Server.MapPath("~/inspection-visit-report-images.html")))
                    //{
                    //    bodys = reader.ReadToEnd();
                    //}


                    ///First File start
                    PdfPageSize pageSizes = PdfPageSize.A4;
                    PdfPageOrientation pdfOrientations = PdfPageOrientation.Portrait;

                    HtmlToPdf converters = new HtmlToPdf();

                    #endregion

                    #region Comment 11 June

                    converters.Options.DisplayFooter = true || true || true;

                    if (Directory.Exists(Server.MapPath("~/Content/" + ObjModelVisitReport.Call_No)))
                    {
                        string[] files = Directory.GetFiles(Server.MapPath("~/Content/" + ObjModelVisitReport.Call_No));
                        foreach (string file in files)
                        {
                            System.IO.File.Delete(file);

                        }

                        Directory.Delete(Server.MapPath("~/Content/" + ObjModelVisitReport.Call_No));
                    }

                    Directory.CreateDirectory(Server.MapPath("~/Content/" + ObjModelVisitReport.Call_No));

                    #region Vaibhav If Images count less than 6

                    if (imagecount <= 6)
                    {
                        for (int ic = 0; ic < rows; ic++)
                        {
                            if (imageposted > 0)
                            {
                                if ((imageposted % 6) == 0)
                                {
                                    using (reader = new StreamReader(Server.MapPath("~/inspection-visit-report-images.html")))
                                    {
                                        bodys = reader.ReadToEnd();
                                    }

                                    bodys = bodys.Replace("[Image]", ImageContent);
                                    bodys = bodys.Replace("[Logos]", "http://localhost:54895/AllJsAndCss/images/logo.png");

                                    #region Initial setting vaibhav
                                    //strs.Append(body);
                                    PdfPageSize vpageSize = PdfPageSize.A4;
                                    PdfPageOrientation vpdfOrientation = PdfPageOrientation.Portrait;
                                    HtmlToPdf Vconverter = new HtmlToPdf();

                                    // set the page timeout (in seconds)
                                    Vconverter.Options.MaxPageLoadTime = 240;  //=========================5-Aug-2019
                                    Vconverter.Options.PdfPageSize = vpageSize;
                                    Vconverter.Options.PdfPageOrientation = vpdfOrientation;
                                    #endregion


                                    #region Header and Footer Vaibhav
                                    #region Heder code
                                    string _VHeader = string.Empty;
                                    string _Vfooter = string.Empty;

                                    // for Report header by abel
                                    StreamReader _VreadHeader_File = new StreamReader(Server.MapPath("~/IV_Report_Header.html"));
                                    _VHeader = _VreadHeader_File.ReadToEnd();
                                    _VHeader = _VHeader.Replace("[SapAndControle_No]", ObjModelVisitReport.SubJob_No);
                                    _VHeader = _VHeader.Replace("[RevisionNo]", countNo);
                                    /*_Header = _Header.Replace("[Logo]", "http://localhost:54895/AllJsAndCss/images/logo.png");*/ // change123 once pulished on server
                                    //_VHeader = _VHeader.Replace("[Logo]", ConfigurationManager.AppSettings["Web"].ToString() + "/AllJsAndCss/images/logo.png");
                                    _VHeader = _VHeader.Replace("[Logo]", ConfigurationManager.AppSettings["Web"].ToString() + "/AllJsAndCss/images/logo.svg");
                                    _VHeader = _VHeader.Replace("[CustomerSpeReportNo]", ObjModelVisitReport.CustomerSpecificReportNumber);
                                    #endregion


                                    #region Generate no
                                    if (RM.Report == null)
                                    {

                                        dtSrNo = objDalVisitReport.GetSrNo(ObjModelVisitReport.SubJob_No);
                                        if (dtSrNo.Tables[0].Rows.Count > 0)
                                        {
                                            SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["SrNo"]);

                                        }
                                        RM.ReportNo = "IVR-" + ObjModelVisitReport.SubJob_No + "-" + SrNo + "-Rev." + countNo;
                                        _VHeader = _VHeader.Replace("[ReportNo]", RM.ReportNo);

                                    }
                                    else
                                    {
                                        //dtSrNo = objDalVisitReport.GetReportNo(RM.Report);
                                        dtSrNo = objDalVisitReport.GetReportNo(Convert.ToString(RM.PK_RM_ID));
                                        if (dtSrNo.Tables[0].Rows.Count > 0)
                                        {
                                            SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["ReportNo"]);

                                        }

                                        //_VHeader = _VHeader.Replace("[ReportNo]", SrNo);
                                        if (ObjModelVisitReport.IsCustomerSpecificReportNumber == "Yes")
                                        {
                                            string strReportNo = "<span> Number: " + ObjModelVisitReport.CustomerSpecificReportNumber + "<Br />" + "( " + SrNo + " )";
                                            _VHeader = _VHeader.Replace("[ReportNo]", strReportNo);
                                        }
                                        else
                                        {
                                            _VHeader = _VHeader.Replace("[ReportNo]", SrNo);

                                        }
                                    }
                                    #endregion

                                    #region Footer Code

                                    StreamReader _VreadFooter_File = new StreamReader(Server.MapPath("~/IV_Report_Footer.html"));
                                    _Vfooter = _VreadFooter_File.ReadToEnd();
                                    _Vfooter = _Vfooter.Replace("[LogoFooter]", ConfigurationManager.AppSettings["Web"].ToString() + "/AllJsAndCss/images/FTUEV-NORD-GROUP_Logo_Electric-Blue.svg");
                                    // header settings
                                    Vconverter.Options.DisplayHeader = true || true || true;
                                    Vconverter.Header.DisplayOnFirstPage = true;
                                    Vconverter.Header.DisplayOnOddPages = true;
                                    Vconverter.Header.DisplayOnEvenPages = true;
                                    Vconverter.Header.Height = 75;

                                    PdfHtmlSection VheaderHtml = new PdfHtmlSection(_VHeader, string.Empty);
                                    VheaderHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
                                    Vconverter.Header.Add(VheaderHtml);

                                    // footer settings
                                    Vconverter.Options.DisplayFooter = true || true || true;
                                    Vconverter.Footer.DisplayOnFirstPage = true;
                                    Vconverter.Footer.DisplayOnOddPages = true;
                                    Vconverter.Footer.DisplayOnEvenPages = true;

                                    //Vconverter.Footer.Height = 150;
                                    Vconverter.Footer.Height = 105;
                                    //converter.Footer.Height = 120;

                                    PdfHtmlSection VfooterHtml = new PdfHtmlSection(_Vfooter, string.Empty);
                                    VfooterHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
                                    Vconverter.Footer.Add(VfooterHtml);

                                    //end abel code


                                    //// page numbers can be added using a PdfTextSection object
                                    //PdfTextSection Vtext1 = new PdfTextSection(0, 145, "Page: {page_number} of {total_pages}  ", new System.Drawing.Font("Arial", 8));
                                    //Vtext1.HorizontalAlign = PdfTextHorizontalAlign.Right;
                                    //Vconverter.Footer.Add(Vtext1);
                                    #endregion
                                    #endregion

                                    SelectPdf.PdfDocument docs = Vconverter.ConvertHtmlString(bodys);
                                    ReportNames = ObjModelVisitReport.Call_No + "_Img_" + iteration + ".pdf";



                                    paths = Server.MapPath("~/Content/" + ObjModelVisitReport.Call_No);
                                    docs.Save(paths + '\\' + ReportNames);
                                    docs.Close();
                                    bodys = string.Empty;
                                    ImageContent = string.Empty;
                                    iteration = iteration + 1;
                                    ViewBag.Reminder = "1";
                                }
                            }

                            ImageContent += "<tr><td style='padding: 10px; width: 50 %;border:1px solid #000000;border-top-width: 0px;border-left-width: 0px;' align='center'>" + ImageReportDashBoard.Rows[img]["Heading"].ToString() + "</td>";
                            ImageContent += "<td style='padding: 10px; width: 50 %;border:1px solid #000000;border-top-width: 0px;border-left-width: 0px;' align='center'>" + ImageReportDashBoard.Rows[img + 1]["Heading"].ToString() + "</td></tr>";

                            ImageContent += "<tr><td style='padding:10px;border:1px solid #000000;border-top-width: 0px;border-left-width: 0px;' align='center'><img src='" + ConfigurationManager.AppSettings["Web"].ToString() + "/CompressFiles/" + ImageReportDashBoard.Rows[img]["Image"].ToString() + "' style='width:400px;height:200px; ' align='center' alt=''></td>";
                            ImageContent += "<td style='padding:10px;border:1px solid #000000;border-top-width: 0px;border-left-width: 0px;' align='center'><img src='" + ConfigurationManager.AppSettings["Web"].ToString() + "/CompressFiles/" + ImageReportDashBoard.Rows[img + 1]["Image"].ToString() + "' style='width:400px;height:200px; ' align='center' alt=''></td></tr>";

                            img = img + 2;
                            imageposted = imageposted + 2;
                        }



                        #region Reminder = 1

                        if (reminder == 1)
                        {
                            //if (ImageContent != string.Empty)
                            //{
                            //    ImageContent += "<tr><td style='padding: 10px; width: 50 %;' align='center'>" + ImageReportDashBoard.Rows[imagecount - 1]["Heading"].ToString() + "</td></tr>";
                            //    ImageContent += "<tr><td style='padding:10px;' align='center'><img src='" + ConfigurationManager.AppSettings["Web"].ToString() + "/CompressFiles/" + ImageReportDashBoard.Rows[imagecount - 1]["Image"].ToString() + "' style='width:400px;height:200px; ' align='center' alt=''></td></tr>";
                            //}
                            //else
                            //{
                            //    ImageContent = "<tr><td style='padding: 10px; width: 50 %;' align='center'>" + ImageReportDashBoard.Rows[imagecount - 1]["Heading"].ToString() + "</td></tr>";
                            //    ImageContent += "<tr><td style='padding:10px;' align='center'><img src='" + ConfigurationManager.AppSettings["Web"].ToString() + "/CompressFiles/" + ImageReportDashBoard.Rows[imagecount - 1]["Image"].ToString() + "' style='width:400px;height:200px; ' align='center' alt=''></td></tr>";
                            //}

                            if (ImageContent != string.Empty)
                            {
                                ImageContent += "<tr><td style='border:1px solid #000000;border-left-width: 0px;border-top-width: 0px;padding: 10px; width: 50 %;' align='center'>" + ImageReportDashBoard.Rows[imagecount - 1]["Heading"].ToString() + "</td></tr>";
                                ImageContent += "<tr><td style='border:1px solid #000000;border-left-width: 0px;border-top-width: 0px;padding:10px;' align='center'><img src='" + ConfigurationManager.AppSettings["Web"].ToString() + "/CompressFiles/" + ImageReportDashBoard.Rows[imagecount - 1]["Image"].ToString() + "' style='width:400px;height:200px; ' align='center' alt=''></td></tr>";
                            }
                            else
                            {
                                ImageContent = "<tr><td style='border:1px solid #000000;border-left-width: 0px;border-top-width: 0px;padding: 10px; width: 50 %;' align='center'>" + ImageReportDashBoard.Rows[imagecount - 1]["Heading"].ToString() + "</td></tr>";
                                ImageContent += "<tr><td style='border:1px solid #000000;border-left-width: 0px;border-top-width: 0px;padding:10px;' align='center'><img src='" + ConfigurationManager.AppSettings["Web"].ToString() + "/CompressFiles/" + ImageReportDashBoard.Rows[imagecount - 1]["Image"].ToString() + "' style='width:400px;height:200px; ' align='center' alt=''></td></tr>";
                            }


                            using (reader = new StreamReader(Server.MapPath("~/inspection-visit-report-images.html")))
                            {
                                bodys = reader.ReadToEnd();
                            }
                            bodys = bodys.Replace("[Image]", ImageContent);
                            bodys = bodys.Replace("[Logos]", "http://localhost:54895/AllJsAndCss/images/logo.png");

                            #region Initial setting vaibhav
                            //strs.Append(body);
                            PdfPageSize vpageSize = PdfPageSize.A4;
                            PdfPageOrientation vpdfOrientation = PdfPageOrientation.Portrait;
                            HtmlToPdf Vconverter = new HtmlToPdf();

                            // set the page timeout (in seconds)
                            Vconverter.Options.MaxPageLoadTime = 240;  //=========================5-Aug-2019
                            Vconverter.Options.PdfPageSize = vpageSize;
                            Vconverter.Options.PdfPageOrientation = vpdfOrientation;
                            #endregion


                            #region Header and Footer Vaibhav
                            #region Heder code
                            string _VHeader = string.Empty;
                            string _Vfooter = string.Empty;

                            // for Report header by abel
                            StreamReader _VreadHeader_File = new StreamReader(Server.MapPath("~/IV_Report_Header.html"));
                            _VHeader = _VreadHeader_File.ReadToEnd();
                            _VHeader = _VHeader.Replace("[SapAndControle_No]", ObjModelVisitReport.SubJob_No);
                            _VHeader = _VHeader.Replace("[RevisionNo]", countNo);
                            /*_Header = _Header.Replace("[Logo]", "http://localhost:54895/AllJsAndCss/images/logo.png");*/ // change123 once pulished on server
                            _VHeader = _VHeader.Replace("[Logo]", ConfigurationManager.AppSettings["Web"].ToString() + "/AllJsAndCss/images/logo.svg");
                            _VHeader = _VHeader.Replace("[CustomerSpeReportNo]", ObjModelVisitReport.CustomerSpecificReportNumber);

                            #endregion


                            #region Generate no
                            if (RM.Report == null)
                            {

                                dtSrNo = objDalVisitReport.GetSrNo(ObjModelVisitReport.SubJob_No);
                                if (dtSrNo.Tables[0].Rows.Count > 0)
                                {
                                    SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["SrNo"]);

                                }
                                RM.ReportNo = "IVR-" + ObjModelVisitReport.SubJob_No + "-" + SrNo + "-Rev." + countNo;
                                _VHeader = _VHeader.Replace("[ReportNo]", RM.ReportNo);

                            }
                            else
                            {
                                //dtSrNo = objDalVisitReport.GetReportNo(RM.Report);
                                dtSrNo = objDalVisitReport.GetReportNo(Convert.ToString(RM.PK_RM_ID));
                                if (dtSrNo.Tables[0].Rows.Count > 0)
                                {
                                    SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["ReportNo"]);

                                }

                                // _VHeader = _VHeader.Replace("[ReportNo]", SrNo);
                                if (ObjModelVisitReport.IsCustomerSpecificReportNumber == "Yes")
                                {
                                    string strReportNo = "<span> Number: " + ObjModelVisitReport.CustomerSpecificReportNumber + "<Br />" + "( " + SrNo + " )";
                                    _VHeader = _VHeader.Replace("[ReportNo]", strReportNo);
                                }
                                else
                                {
                                    _VHeader = _VHeader.Replace("[ReportNo]", SrNo);

                                }
                            }
                            #endregion

                            #region Footer Code

                            StreamReader _VreadFooter_File = new StreamReader(Server.MapPath("~/IV_Report_Footer.html"));
                            _Vfooter = _VreadFooter_File.ReadToEnd();
                            _Vfooter = _Vfooter.Replace("[LogoFooter]", ConfigurationManager.AppSettings["Web"].ToString() + "/AllJsAndCss/images/FTUEV-NORD-GROUP_Logo_Electric-Blue.svg");
                            // header settings
                            Vconverter.Options.DisplayHeader = true || true || true;
                            Vconverter.Header.DisplayOnFirstPage = true;
                            Vconverter.Header.DisplayOnOddPages = true;
                            Vconverter.Header.DisplayOnEvenPages = true;
                            Vconverter.Header.Height = 75;

                            PdfHtmlSection VheaderHtml = new PdfHtmlSection(_VHeader, string.Empty);
                            VheaderHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
                            Vconverter.Header.Add(VheaderHtml);

                            // footer settings
                            Vconverter.Options.DisplayFooter = true || true || true;
                            Vconverter.Footer.DisplayOnFirstPage = true;
                            Vconverter.Footer.DisplayOnOddPages = true;
                            Vconverter.Footer.DisplayOnEvenPages = true;

                            //Vconverter.Footer.Height = 150;
                            Vconverter.Footer.Height = 105;
                            //converter.Footer.Height = 120;

                            PdfHtmlSection VfooterHtml = new PdfHtmlSection(_Vfooter, string.Empty);
                            VfooterHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
                            Vconverter.Footer.Add(VfooterHtml);

                            //end abel code


                            //// page numbers can be added using a PdfTextSection object
                            //PdfTextSection Vtext1 = new PdfTextSection(0, 145, "Page: {page_number} of {total_pages}  ", new System.Drawing.Font("Arial", 8));
                            //Vtext1.HorizontalAlign = PdfTextHorizontalAlign.Right;
                            //Vconverter.Footer.Add(Vtext1);
                            #endregion
                            #endregion



                            SelectPdf.PdfDocument docs = Vconverter.ConvertHtmlString(bodys);
                            ReportNames = ObjModelVisitReport.Call_No + "_Img_" + iteration + ".pdf";

                            paths = Server.MapPath("~/Content/" + ObjModelVisitReport.Call_No);
                            docs.Save(paths + '\\' + ReportNames);
                            docs.Close();
                            bodys = string.Empty;
                            ImageContent = string.Empty;
                            ViewBag.Reminder = "1";
                        }

                        #region 4 Image If not reminder =0
                        if (imageposted <= imagecount)
                        {
                            if (reminder == 0)
                            {
                                ViewBag.Reminder = "2";
                                using (reader = new StreamReader(Server.MapPath("~/inspection-visit-report-images.html")))
                                {
                                    bodys = reader.ReadToEnd();
                                }
                                bodys = bodys.Replace("[Image]", ImageContent);
                                bodys = bodys.Replace("[Logos]", "http://localhost:54895/AllJsAndCss/images/logo.png");



                                #region Initial setting vaibhav
                                //strs.Append(body);
                                PdfPageSize vpageSize = PdfPageSize.A4;
                                PdfPageOrientation vpdfOrientation = PdfPageOrientation.Portrait;
                                HtmlToPdf Vconverter = new HtmlToPdf();

                                // set the page timeout (in seconds)
                                Vconverter.Options.MaxPageLoadTime = 240;  //=========================5-Aug-2019
                                Vconverter.Options.PdfPageSize = vpageSize;
                                Vconverter.Options.PdfPageOrientation = vpdfOrientation;
                                #endregion


                                #region Header and Footer Vaibhav
                                #region Heder code
                                string _VHeader = string.Empty;
                                string _Vfooter = string.Empty;

                                // for Report header by abel
                                StreamReader _VreadHeader_File = new StreamReader(Server.MapPath("~/IV_Report_Header.html"));
                                _VHeader = _VreadHeader_File.ReadToEnd();
                                _VHeader = _VHeader.Replace("[SapAndControle_No]", ObjModelVisitReport.SubJob_No);
                                _VHeader = _VHeader.Replace("[RevisionNo]", countNo);
                                /*_Header = _Header.Replace("[Logo]", "http://localhost:54895/AllJsAndCss/images/logo.png");*/ // change123 once pulished on server
                                _VHeader = _VHeader.Replace("[Logo]", ConfigurationManager.AppSettings["Web"].ToString() + "/AllJsAndCss/images/logo.svg");
                                _VHeader = _VHeader.Replace("[CustomerSpeReportNo]", ObjModelVisitReport.CustomerSpecificReportNumber);

                                #endregion


                                #region Generate no
                                if (RM.Report == null)
                                {

                                    dtSrNo = objDalVisitReport.GetSrNo(ObjModelVisitReport.SubJob_No);
                                    if (dtSrNo.Tables[0].Rows.Count > 0)
                                    {
                                        SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["SrNo"]);

                                    }
                                    RM.ReportNo = "IVR-" + ObjModelVisitReport.SubJob_No + "-" + SrNo + "- Rev." + countNo;
                                    _VHeader = _VHeader.Replace("[ReportNo]", RM.ReportNo);

                                }
                                else
                                {
                                    //dtSrNo = objDalVisitReport.GetReportNo(RM.Report);
                                    dtSrNo = objDalVisitReport.GetReportNo(Convert.ToString(RM.PK_RM_ID));
                                    if (dtSrNo.Tables[0].Rows.Count > 0)
                                    {
                                        SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["ReportNo"]);

                                    }

                                    //_VHeader = _VHeader.Replace("[ReportNo]", SrNo);
                                    if (ObjModelVisitReport.IsCustomerSpecificReportNumber == "Yes")
                                    {
                                        string strReportNo = "<span> Number: " + ObjModelVisitReport.CustomerSpecificReportNumber + "<Br />" + "( " + SrNo + " )";
                                        _VHeader = _VHeader.Replace("[ReportNo]", strReportNo);
                                    }
                                    else
                                    {
                                        _VHeader = _VHeader.Replace("[ReportNo]", SrNo);

                                    }
                                }
                                #endregion

                                #region Footer Code

                                StreamReader _VreadFooter_File = new StreamReader(Server.MapPath("~/IV_Report_Footer.html"));
                                _Vfooter = _VreadFooter_File.ReadToEnd();
                                _Vfooter = _Vfooter.Replace("[LogoFooter]", ConfigurationManager.AppSettings["Web"].ToString() + "/AllJsAndCss/images/FTUEV-NORD-GROUP_Logo_Electric-Blue.svg");
                                // header settings
                                Vconverter.Options.DisplayHeader = true || true || true;
                                Vconverter.Header.DisplayOnFirstPage = true;
                                Vconverter.Header.DisplayOnOddPages = true;
                                Vconverter.Header.DisplayOnEvenPages = true;
                                Vconverter.Header.Height = 75;

                                PdfHtmlSection VheaderHtml = new PdfHtmlSection(_VHeader, string.Empty);
                                VheaderHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
                                Vconverter.Header.Add(VheaderHtml);

                                // footer settings
                                Vconverter.Options.DisplayFooter = true || true || true;
                                Vconverter.Footer.DisplayOnFirstPage = true;
                                Vconverter.Footer.DisplayOnOddPages = true;
                                Vconverter.Footer.DisplayOnEvenPages = true;

                                //Vconverter.Footer.Height = 150;
                                Vconverter.Footer.Height = 105;
                                //converter.Footer.Height = 120;

                                PdfHtmlSection VfooterHtml = new PdfHtmlSection(_Vfooter, string.Empty);
                                VfooterHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
                                Vconverter.Footer.Add(VfooterHtml);

                                //end abel code


                                //// page numbers can be added using a PdfTextSection object
                                //PdfTextSection Vtext1 = new PdfTextSection(0, 145, "Page: {page_number} of {total_pages}  ", new System.Drawing.Font("Arial", 8));
                                //Vtext1.HorizontalAlign = PdfTextHorizontalAlign.Right;
                                //Vconverter.Footer.Add(Vtext1);
                                #endregion
                                #endregion

                                Vconverter.Options.AutoFitWidth = HtmlToPdfPageFitMode.ShrinkOnly;
                                Vconverter.Options.AutoFitHeight = HtmlToPdfPageFitMode.NoAdjustment;



                                // SelectPdf.PdfDocument docs = converters.ConvertHtmlString(bodys);
                                SelectPdf.PdfDocument docs = Vconverter.ConvertHtmlString(bodys);

                                ReportNames = ObjModelVisitReport.Call_No + "_Img_" + iteration + ".pdf";
                                paths = Server.MapPath("~/Content/" + ObjModelVisitReport.Call_No);
                                docs.Save(paths + '\\' + ReportNames);
                                docs.Close();
                                bodys = string.Empty;
                                ImageContent = string.Empty;
                                iteration = iteration + 1;
                            }
                        }

                        #endregion


                        #region 20 Feb 2021 Resolve blank page if Image count 6 
                        #region 6 Images
                        //if (((imageposted % 6) == 0) && imageposted > 0)
                        //{
                        //    ViewBag.Reminder = "2";
                        //    using (reader = new StreamReader(Server.MapPath("~/inspection-visit-report-images.html")))
                        //    {
                        //        bodys = reader.ReadToEnd();
                        //    }
                        //    bodys = bodys.Replace("[Image]", ImageContent);
                        //    bodys = bodys.Replace("[Logos]", "http://localhost:54895/AllJsAndCss/images/logo.png");



                        //    #region Initial setting vaibhav
                        //    //strs.Append(body);
                        //    PdfPageSize vpageSize = PdfPageSize.A4;
                        //    PdfPageOrientation vpdfOrientation = PdfPageOrientation.Portrait;
                        //    HtmlToPdf Vconverter = new HtmlToPdf();

                        //    // set the page timeout (in seconds)
                        //    Vconverter.Options.MaxPageLoadTime = 240;  //=========================5-Aug-2019
                        //    Vconverter.Options.PdfPageSize = vpageSize;
                        //    Vconverter.Options.PdfPageOrientation = vpdfOrientation;
                        //    #endregion


                        //    #region Header and Footer Vaibhav
                        //    #region Heder code
                        //    string _VHeader = string.Empty;
                        //    string _Vfooter = string.Empty;

                        //    // for Report header by abel
                        //    StreamReader _VreadHeader_File = new StreamReader(Server.MapPath("~/IV_Report_Header.html"));
                        //    _VHeader = _VreadHeader_File.ReadToEnd();
                        //    _VHeader = _VHeader.Replace("[SapAndControle_No]", ObjModelVisitReport.SubJob_No);
                        //    _VHeader = _VHeader.Replace("[RevisionNo]", countNo);
                        //    /*_Header = _Header.Replace("[Logo]", "http://localhost:54895/AllJsAndCss/images/logo.png");*/ // change123 once pulished on server
                        //    _VHeader = _VHeader.Replace("[Logo]", ConfigurationManager.AppSettings["Web"].ToString() + "/AllJsAndCss/images/logo.png");


                        //    #endregion


                        //    #region Generate no
                        //    if (RM.Report == null)
                        //    {

                        //        dtSrNo = objDalVisitReport.GetSrNo(ObjModelVisitReport.SubJob_No);
                        //        if (dtSrNo.Tables[0].Rows.Count > 0)
                        //        {
                        //            SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["SrNo"]);

                        //        }
                        //        RM.ReportNo = "IVR-" + ObjModelVisitReport.SubJob_No + "-" + SrNo + "-Rev." + countNo;
                        //        _VHeader = _VHeader.Replace("[ReportNo]", RM.ReportNo);

                        //    }
                        //    else
                        //    {
                        //        //dtSrNo = objDalVisitReport.GetReportNo(RM.Report);
                        //        dtSrNo = objDalVisitReport.GetReportNo(Convert.ToString(RM.PK_RM_ID));
                        //        if (dtSrNo.Tables[0].Rows.Count > 0)
                        //        {
                        //            SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["ReportNo"]);

                        //        }

                        //        _VHeader = _VHeader.Replace("[ReportNo]", SrNo);
                        //    }
                        //    #endregion

                        //    #region Footer Code

                        //    StreamReader _VreadFooter_File = new StreamReader(Server.MapPath("~/IV_Report_Footer.html"));
                        //    _Vfooter = _VreadFooter_File.ReadToEnd();

                        //    // header settings
                        //    Vconverter.Options.DisplayHeader = true || true || true;
                        //    Vconverter.Header.DisplayOnFirstPage = true;
                        //    Vconverter.Header.DisplayOnOddPages = true;
                        //    Vconverter.Header.DisplayOnEvenPages = true;
                        //    Vconverter.Header.Height = 75;

                        //    PdfHtmlSection VheaderHtml = new PdfHtmlSection(_VHeader, string.Empty);
                        //    VheaderHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
                        //    Vconverter.Header.Add(VheaderHtml);

                        //    // footer settings
                        //    Vconverter.Options.DisplayFooter = true || true || true;
                        //    Vconverter.Footer.DisplayOnFirstPage = true;
                        //    Vconverter.Footer.DisplayOnOddPages = true;
                        //    Vconverter.Footer.DisplayOnEvenPages = true;

                        //    //Vconverter.Footer.Height = 150;
                        //    Vconverter.Footer.Height = 105;
                        //    //converter.Footer.Height = 120;

                        //    PdfHtmlSection VfooterHtml = new PdfHtmlSection(_Vfooter, string.Empty);
                        //    VfooterHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
                        //    Vconverter.Footer.Add(VfooterHtml);

                        //    //end abel code


                        //    // page numbers can be added using a PdfTextSection object
                        //    //PdfTextSection Vtext1 = new PdfTextSection(0, 145, "Page: {page_number} of {total_pages}  ", new System.Drawing.Font("Arial", 8));
                        //    //Vtext1.HorizontalAlign = PdfTextHorizontalAlign.Right;
                        //    //Vconverter.Footer.Add(Vtext1);
                        //    #endregion
                        //    #endregion





                        //    // SelectPdf.PdfDocument docs = converters.ConvertHtmlString(bodys);
                        //    SelectPdf.PdfDocument docs = Vconverter.ConvertHtmlString(bodys);

                        //    ReportNames = ObjModelVisitReport.Call_No + "_Img_" + iteration + ".pdf";
                        //    paths = Server.MapPath("~/Content/" + ObjModelVisitReport.Call_No);
                        //    docs.Save(paths + '\\' + ReportNames);
                        //    docs.Close();
                        //    bodys = string.Empty;
                        //    ImageContent = string.Empty;
                        //    iteration = iteration + 1;
                        //}
                        #endregion
                        #endregion




                    }
                    #endregion






                    #endregion


                    #region Vaibhav If Images count more than 6
                    else
                    {
                        for (int ic = 0; ic < rows; ic++)
                        {
                            if (imageposted > 0)
                            {
                                if ((imageposted % 6) == 0)
                                {
                                    using (reader = new StreamReader(Server.MapPath("~/inspection-visit-report-images.html")))
                                    {
                                        bodys = reader.ReadToEnd();
                                    }

                                    bodys = bodys.Replace("[Image]", ImageContent);

                                    bodys = bodys.Replace("[Logos]", ConfigurationManager.AppSettings["Web"].ToString() + "/AllJsAndCss/images/logo.png");

                                    #region Initial setting vaibhav
                                    //strs.Append(body);
                                    PdfPageSize vpageSize = PdfPageSize.A4;
                                    PdfPageOrientation vpdfOrientation = PdfPageOrientation.Portrait;
                                    HtmlToPdf Vconverter = new HtmlToPdf();

                                    // set the page timeout (in seconds)
                                    Vconverter.Options.MaxPageLoadTime = 240;  //=========================5-Aug-2019
                                    Vconverter.Options.PdfPageSize = vpageSize;
                                    Vconverter.Options.PdfPageOrientation = vpdfOrientation;
                                    #endregion


                                    #region Header and Footer Vaibhav
                                    #region Heder code
                                    string _VHeader = string.Empty;
                                    string _Vfooter = string.Empty;

                                    // for Report header by abel
                                    StreamReader _VreadHeader_File = new StreamReader(Server.MapPath("~/IV_Report_Header.html"));
                                    _VHeader = _VreadHeader_File.ReadToEnd();
                                    _VHeader = _VHeader.Replace("[SapAndControle_No]", ObjModelVisitReport.SubJob_No);
                                    _VHeader = _VHeader.Replace("[RevisionNo]", countNo);
                                    /*_Header = _Header.Replace("[Logo]", "http://localhost:54895/AllJsAndCss/images/logo.png");*/ // change123 once pulished on server
                                    _VHeader = _VHeader.Replace("[Logo]", ConfigurationManager.AppSettings["Web"].ToString() + "/AllJsAndCss/images/logo.svg");
                                    _VHeader = _VHeader.Replace("[CustomerSpeReportNo]", ObjModelVisitReport.CustomerSpecificReportNumber);

                                    #endregion


                                    #region Generate no
                                    if (RM.Report == null)
                                    {

                                        dtSrNo = objDalVisitReport.GetSrNo(ObjModelVisitReport.SubJob_No);
                                        if (dtSrNo.Tables[0].Rows.Count > 0)
                                        {
                                            SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["SrNo"]);

                                        }
                                        RM.ReportNo = "IVR-" + ObjModelVisitReport.SubJob_No + "-" + SrNo + "-Rev." + countNo;
                                        _VHeader = _VHeader.Replace("[ReportNo]", RM.ReportNo);

                                    }
                                    else
                                    {
                                        //dtSrNo = objDalVisitReport.GetReportNo(RM.Report);
                                        dtSrNo = objDalVisitReport.GetReportNo(Convert.ToString(RM.PK_RM_ID));
                                        if (dtSrNo.Tables[0].Rows.Count > 0)
                                        {
                                            SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["ReportNo"]);

                                        }

                                        //_VHeader = _VHeader.Replace("[ReportNo]", SrNo);
                                        if (ObjModelVisitReport.IsCustomerSpecificReportNumber == "Yes")
                                        {
                                            string strReportNo = "<span> Number: " + ObjModelVisitReport.CustomerSpecificReportNumber + "<Br />" + "( " + SrNo + " )";
                                            _VHeader = _VHeader.Replace("[ReportNo]", strReportNo);
                                        }
                                        else
                                        {
                                            _VHeader = _VHeader.Replace("[ReportNo]", SrNo);

                                        }
                                    }
                                    #endregion

                                    #region Footer Code

                                    StreamReader _VreadFooter_File = new StreamReader(Server.MapPath("~/IV_Report_Footer.html"));
                                    _Vfooter = _VreadFooter_File.ReadToEnd();
                                    _Vfooter = _Vfooter.Replace("[LogoFooter]", ConfigurationManager.AppSettings["Web"].ToString() + "/AllJsAndCss/images/FTUEV-NORD-GROUP_Logo_Electric-Blue.svg");
                                    // header settings
                                    Vconverter.Options.DisplayHeader = true || true || true;
                                    Vconverter.Header.DisplayOnFirstPage = true;
                                    Vconverter.Header.DisplayOnOddPages = true;
                                    Vconverter.Header.DisplayOnEvenPages = true;
                                    Vconverter.Header.Height = 75;

                                    PdfHtmlSection VheaderHtml = new PdfHtmlSection(_VHeader, string.Empty);
                                    VheaderHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
                                    Vconverter.Header.Add(VheaderHtml);

                                    // footer settings
                                    Vconverter.Options.DisplayFooter = true || true || true;
                                    Vconverter.Footer.DisplayOnFirstPage = true;
                                    Vconverter.Footer.DisplayOnOddPages = true;
                                    Vconverter.Footer.DisplayOnEvenPages = true;

                                    //Vconverter.Footer.Height = 150;
                                    Vconverter.Footer.Height = 105;
                                    //converter.Footer.Height = 120;

                                    PdfHtmlSection VfooterHtml = new PdfHtmlSection(_Vfooter, string.Empty);
                                    VfooterHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
                                    Vconverter.Footer.Add(VfooterHtml);

                                    //end abel code


                                    // page numbers can be added using a PdfTextSection object
                                    //PdfTextSection Vtext1 = new PdfTextSection(0, 145, "Page: {page_number} of {total_pages}  ", new System.Drawing.Font("Arial", 8));
                                    //Vtext1.HorizontalAlign = PdfTextHorizontalAlign.Right;
                                    //Vconverter.Footer.Add(Vtext1);
                                    #endregion
                                    #endregion




                                    SelectPdf.PdfDocument docs = Vconverter.ConvertHtmlString(bodys);
                                    ReportNames = ObjModelVisitReport.Call_No + "_Img_" + iteration + ".pdf";



                                    paths = Server.MapPath("~/Content/" + ObjModelVisitReport.Call_No);
                                    docs.Save(paths + '\\' + ReportNames);
                                    docs.Close();
                                    bodys = string.Empty;
                                    ImageContent = string.Empty;
                                    iteration = iteration + 1;
                                }
                            }

                            ImageContent += "<tr><td style='padding: 10px; width: 50 %;border:1px solid #000000;border-top-width: 0px;border-left-width: 0px;' align='center'>" + ImageReportDashBoard.Rows[img]["Heading"].ToString() + "</td>";
                            ImageContent += "<td style='padding: 10px; width: 50 %;border:1px solid #000000;border-top-width: 0px;border-left-width: 0px;' align='center'>" + ImageReportDashBoard.Rows[img + 1]["Heading"].ToString() + "</td></tr>";

                            ImageContent += "<tr><td style='padding:10px;border:1px solid #000000;border-top-width: 0px;border-left-width: 0px;' align='center'><img src='" + ConfigurationManager.AppSettings["Web"].ToString() + "/CompressFiles/" + ImageReportDashBoard.Rows[img]["Image"].ToString() + "' style='width:400px;height:250px; ' align='center' alt=''></td>";
                            ImageContent += "<td style='padding:10px;border:1px solid #000000;border-top-width: 0px;border-left-width: 0px;' align='center'><img src='" + ConfigurationManager.AppSettings["Web"].ToString() + "/CompressFiles/" + ImageReportDashBoard.Rows[img + 1]["Image"].ToString() + "' style='width:400px;height:250px; ' align='center' alt=''></td></tr>";

                            img = img + 2;
                            imageposted = imageposted + 2;
                        }









                        ViewBag.Reminder = "2";
                        /*
                        #region  reminder


                        if (reminder == 1)
                        {                       
                            if (ImageContent != string.Empty)
                            {
                                ImageContent += "<tr><td style='border:1px solid #000000;border-left-width: 0px;border-top-width: 0px;padding: 10px; width: 50 %;' align='center'>" + ImageReportDashBoard.Rows[imagecount - 1]["Heading"].ToString() + "</td></tr>";
                                ImageContent += "<tr><td style='border:1px solid #000000;border-left-width: 0px;border-top-width: 0px;padding:10px;' align='center'><img src='" + ConfigurationManager.AppSettings["Web"].ToString() + "/CompressFiles/" + ImageReportDashBoard.Rows[imagecount - 1]["Image"].ToString() + "' style='width:400px;height:250px; ' align='center' alt=''></td></tr>";
                            }
                            else
                            {
                                ImageContent = "<tr><td style='border:1px solid #000000;border-left-width: 0px;border-top-width: 0px;padding: 10px; width: 50 %;' align='center'>" + ImageReportDashBoard.Rows[imagecount - 1]["Heading"].ToString() + "</td></tr>";
                                ImageContent += "<tr><td style='border:1px solid #000000;border-left-width: 0px;border-top-width: 0px;padding:10px;' align='center'><img src='" + ConfigurationManager.AppSettings["Web"].ToString() + "/CompressFiles/" + ImageReportDashBoard.Rows[imagecount - 1]["Image"].ToString() + "' style='width:400px;height:250px; ' align='center' alt=''></td></tr>";
                            }

                            using (reader = new StreamReader(Server.MapPath("~/inspection-visit-report-images.html")))
                            {
                                bodys = reader.ReadToEnd();
                            }
                            bodys = bodys.Replace("[Image]", ImageContent);
                            bodys = bodys.Replace("[Logos]", "http://localhost:54895/AllJsAndCss/images/logo.png");

                            #region Initial setting vaibhav
                            //strs.Append(body);
                            PdfPageSize vpageSize = PdfPageSize.A4;
                            PdfPageOrientation vpdfOrientation = PdfPageOrientation.Portrait;
                            HtmlToPdf Vconverter = new HtmlToPdf();

                            // set the page timeout (in seconds)
                            Vconverter.Options.MaxPageLoadTime = 240;  //=========================5-Aug-2019
                            Vconverter.Options.PdfPageSize = vpageSize;
                            Vconverter.Options.PdfPageOrientation = vpdfOrientation;
                            #endregion


                            #region Header and Footer Vaibhav
                            #region Heder code
                            string _VHeader = string.Empty;
                            string _Vfooter = string.Empty;

                            // for Report header by abel
                            StreamReader _VreadHeader_File = new StreamReader(Server.MapPath("~/IV_Report_Header.html"));
                            _VHeader = _VreadHeader_File.ReadToEnd();
                            _VHeader = _VHeader.Replace("[SapAndControle_No]", ObjModelVisitReport.SubJob_No);
                            _VHeader = _VHeader.Replace("[RevisionNo]", countNo);                        
                            _VHeader = _VHeader.Replace("[Logo]", ConfigurationManager.AppSettings["Web"].ToString() + "/AllJsAndCss/images/logo.png");

                            #endregion

                            #region Generate no
                            if (RM.Report == null)
                            {

                                dtSrNo = objDalVisitReport.GetSrNo(ObjModelVisitReport.SubJob_No);
                                if (dtSrNo.Tables[0].Rows.Count > 0)
                                {
                                    SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["SrNo"]);

                                }
                                RM.ReportNo = "IVR-" + ObjModelVisitReport.SubJob_No + "-" + SrNo + "- Rev." + countNo;
                                _VHeader = _VHeader.Replace("[ReportNo]", RM.ReportNo);

                            }
                            else
                            {
                                //dtSrNo = objDalVisitReport.GetReportNo(RM.Report);
                                dtSrNo = objDalVisitReport.GetReportNo(Convert.ToString(RM.PK_RM_ID));
                                if (dtSrNo.Tables[0].Rows.Count > 0)
                                {
                                    SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["ReportNo"]);

                                }

                                _VHeader = _VHeader.Replace("[ReportNo]", SrNo);
                            }
                            #endregion

                            #region Footer Code

                            StreamReader _VreadFooter_File = new StreamReader(Server.MapPath("~/IV_Report_Footer.html"));
                            _Vfooter = _VreadFooter_File.ReadToEnd();

                            // header settings
                            Vconverter.Options.DisplayHeader = true || true || true;
                            Vconverter.Header.DisplayOnFirstPage = true;
                            Vconverter.Header.DisplayOnOddPages = true;
                            Vconverter.Header.DisplayOnEvenPages = true;
                            Vconverter.Header.Height = 75;

                            PdfHtmlSection VheaderHtml = new PdfHtmlSection(_VHeader, string.Empty);
                            VheaderHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
                            Vconverter.Header.Add(VheaderHtml);

                            // footer settings
                            Vconverter.Options.DisplayFooter = true || true || true;
                            Vconverter.Footer.DisplayOnFirstPage = true;
                            Vconverter.Footer.DisplayOnOddPages = true;
                            Vconverter.Footer.DisplayOnEvenPages = true;

                            //Vconverter.Footer.Height = 150;
                            Vconverter.Footer.Height = 105;
                            //converter.Footer.Height = 120;

                            PdfHtmlSection VfooterHtml = new PdfHtmlSection(_Vfooter, string.Empty);
                            VfooterHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
                            Vconverter.Footer.Add(VfooterHtml);

                            //end abel code


                            // page numbers can be added using a PdfTextSection object
                            //PdfTextSection Vtext1 = new PdfTextSection(0, 145, "Page: {page_number} of {total_pages}  ", new System.Drawing.Font("Arial", 8));
                            //Vtext1.HorizontalAlign = PdfTextHorizontalAlign.Right;
                            //Vconverter.Footer.Add(Vtext1);
                            #endregion
                            #endregion



                            SelectPdf.PdfDocument docs = Vconverter.ConvertHtmlString(bodys);
                            ReportNames = ObjModelVisitReport.Call_No + "_Img_" + iteration + ".pdf";

                            paths = Server.MapPath("~/Content/" + ObjModelVisitReport.Call_No);
                            docs.Save(paths + '\\' + ReportNames);
                            docs.Close();
                            bodys = string.Empty;
                            ImageContent = string.Empty;
                            ViewBag.Reminder = "1";
                        }


                        #endregion
                        */


                        #region  reminder
                        if (reminder == 1)
                        {

                            if (ImageContent != string.Empty)
                            {
                                if ((imageposted % 6) == 0)
                                {
                                    using (reader = new StreamReader(Server.MapPath("~/inspection-visit-report-images.html")))
                                    {
                                        bodys = reader.ReadToEnd();
                                    }
                                    bodys = bodys.Replace("[Image]", ImageContent);
                                    bodys = bodys.Replace("[Logos]", "http://localhost:54895/AllJsAndCss/images/logo.png");

                                    #region Initial setting vaibhav
                                    //strs.Append(body);
                                    PdfPageSize vpageSize1 = PdfPageSize.A4;
                                    PdfPageOrientation vpdfOrientation1 = PdfPageOrientation.Portrait;
                                    HtmlToPdf Vconverter1 = new HtmlToPdf();

                                    // set the page timeout (in seconds)
                                    Vconverter1.Options.MaxPageLoadTime = 240;  //=========================5-Aug-2019
                                    Vconverter1.Options.PdfPageSize = vpageSize1;
                                    Vconverter1.Options.PdfPageOrientation = vpdfOrientation1;
                                    #endregion

                                    #region Heder code
                                    string _VHeader1 = string.Empty;
                                    string _Vfooter1 = string.Empty;

                                    // for Report header by abel
                                    StreamReader _VreadHeader_File1 = new StreamReader(Server.MapPath("~/IV_Report_Header.html"));

                                    _VHeader1 = _VreadHeader_File1.ReadToEnd();
                                    _VHeader1 = _VHeader1.Replace("[SapAndControle_No]", ObjModelVisitReport.SubJob_No);
                                    _VHeader1 = _VHeader1.Replace("[RevisionNo]", countNo);
                                    /*_Header = _Header.Replace("[Logo]", "http://localhost:54895/AllJsAndCss/images/logo.png");*/ // change123 once pulished on server
                                    _VHeader1 = _VHeader1.Replace("[Logo]", ConfigurationManager.AppSettings["Web"].ToString() + "/AllJsAndCss/images/logo.svg");
                                    _VHeader1 = _VHeader1.Replace("[CustomerSpeReportNo]", ObjModelVisitReport.CustomerSpecificReportNumber);

                                    #endregion


                                    #region Generate no
                                    if (RM.Report == null)
                                    {

                                        dtSrNo = objDalVisitReport.GetSrNo(ObjModelVisitReport.SubJob_No);
                                        if (dtSrNo.Tables[0].Rows.Count > 0)
                                        {
                                            SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["SrNo"]);

                                        }
                                        RM.ReportNo = "IVR-" + ObjModelVisitReport.SubJob_No + "-" + SrNo + "- Rev." + countNo;
                                        _VHeader1 = _VHeader1.Replace("[ReportNo]", RM.ReportNo);

                                    }
                                    else
                                    {

                                        dtSrNo = objDalVisitReport.GetReportNo(Convert.ToString(RM.PK_RM_ID));
                                        if (dtSrNo.Tables[0].Rows.Count > 0)
                                        {
                                            SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["ReportNo"]);

                                        }
                                        // _VHeader1 = _VHeader1.Replace("[ReportNo]", SrNo);
                                        if (ObjModelVisitReport.IsCustomerSpecificReportNumber == "Yes")
                                        {
                                            string strReportNo = "<span> Number: " + ObjModelVisitReport.CustomerSpecificReportNumber + "<Br />" + "( " + SrNo + " )";
                                            _VHeader1 = _VHeader1.Replace("[ReportNo]", strReportNo);
                                        }
                                        else
                                        {
                                            _VHeader1 = _VHeader1.Replace("[ReportNo]", SrNo);

                                        }
                                    }
                                    #endregion

                                    #region Footer Code

                                    StreamReader _VreadFooter_File1 = new StreamReader(Server.MapPath("~/IV_Report_Footer.html"));
                                    _Vfooter1 = _VreadFooter_File1.ReadToEnd();
                                    _Vfooter1 = _Vfooter1.Replace("[LogoFooter]", ConfigurationManager.AppSettings["Web"].ToString() + "/AllJsAndCss/images/FTUEV-NORD-GROUP_Logo_Electric-Blue.svg");
                                    // header settings
                                    Vconverter1.Options.DisplayHeader = true || true || true;
                                    Vconverter1.Header.DisplayOnFirstPage = true;
                                    Vconverter1.Header.DisplayOnOddPages = true;
                                    Vconverter1.Header.DisplayOnEvenPages = true;
                                    Vconverter1.Header.Height = 75;

                                    PdfHtmlSection VheaderHtml1 = new PdfHtmlSection(_VHeader1, string.Empty);
                                    VheaderHtml1.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
                                    Vconverter1.Header.Add(VheaderHtml1);

                                    // footer settings
                                    Vconverter1.Options.DisplayFooter = true || true || true;
                                    Vconverter1.Footer.DisplayOnFirstPage = true;
                                    Vconverter1.Footer.DisplayOnOddPages = true;
                                    Vconverter1.Footer.DisplayOnEvenPages = true;
                                    Vconverter1.Footer.Height = 105;


                                    PdfHtmlSection VfooterHtml1 = new PdfHtmlSection(_Vfooter1, string.Empty);
                                    VfooterHtml1.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
                                    Vconverter1.Footer.Add(VfooterHtml1);


                                    #endregion

                                    SelectPdf.PdfDocument docs1 = Vconverter1.ConvertHtmlString(bodys);
                                    ReportNames = ObjModelVisitReport.Call_No + "_Img_" + iteration + ".pdf";

                                    paths = Server.MapPath("~/Content/" + ObjModelVisitReport.Call_No);
                                    docs1.Save(paths + '\\' + ReportNames);
                                    docs1.Close();

                                    bodys = string.Empty;
                                    ImageContent = string.Empty;
                                    iteration = iteration + 1;

                                    ImageContent = "<tr><td style='border:1px solid #000000;border-left-width: 0px;border-top-width: 0px;padding: 10px; width: 50 %;' align='center'>" + ImageReportDashBoard.Rows[imagecount - 1]["Heading"].ToString() + "</td></tr>";
                                    ImageContent += "<tr><td style='border:1px solid #000000;border-left-width: 0px;border-top-width: 0px;padding:10px;' align='center'><img src='" + ConfigurationManager.AppSettings["Web"].ToString() + "/CompressFiles/" + ImageReportDashBoard.Rows[imagecount - 1]["Image"].ToString() + "' style='width:400px;height:250px; ' align='center' alt=''></td></tr>";
                                }
                                else
                                {
                                    ImageContent += "<tr><td style='border:1px solid #000000;border-left-width: 0px;border-top-width: 0px;padding: 10px; width: 50 %;' align='center'>" + ImageReportDashBoard.Rows[imagecount - 1]["Heading"].ToString() + "</td></tr>";
                                    ImageContent += "<tr><td style='border:1px solid #000000;border-left-width: 0px;border-top-width: 0px;padding:10px;' align='center'><img src='" + ConfigurationManager.AppSettings["Web"].ToString() + "/CompressFiles/" + ImageReportDashBoard.Rows[imagecount - 1]["Image"].ToString() + "' style='width:400px;height:250px; ' align='center' alt=''></td></tr>";
                                }
                            }
                            else
                            {
                                ImageContent = "<tr><td style='border:1px solid #000000;border-left-width: 0px;border-top-width: 0px;padding: 10px; width: 50 %;' align='center'>" + ImageReportDashBoard.Rows[imagecount - 1]["Heading"].ToString() + "</td></tr>";
                                ImageContent += "<tr><td style='border:1px solid #000000;border-left-width: 0px;border-top-width: 0px;padding:10px;' align='center'><img src='" + ConfigurationManager.AppSettings["Web"].ToString() + "/CompressFiles/" + ImageReportDashBoard.Rows[imagecount - 1]["Image"].ToString() + "' style='width:400px;height:250px; ' align='center' alt=''></td></tr>";
                            }


                            using (reader = new StreamReader(Server.MapPath("~/inspection-visit-report-images.html")))
                            {
                                bodys = reader.ReadToEnd();
                            }
                            bodys = bodys.Replace("[Image]", ImageContent);
                            bodys = bodys.Replace("[Logos]", "http://localhost:54895/AllJsAndCss/images/logo.png");

                            #region Initial setting vaibhav
                            //strs.Append(body);
                            PdfPageSize vpageSize = PdfPageSize.A4;
                            PdfPageOrientation vpdfOrientation = PdfPageOrientation.Portrait;
                            HtmlToPdf Vconverter = new HtmlToPdf();

                            // set the page timeout (in seconds)
                            Vconverter.Options.MaxPageLoadTime = 240;  //=========================5-Aug-2019
                            Vconverter.Options.PdfPageSize = vpageSize;
                            Vconverter.Options.PdfPageOrientation = vpdfOrientation;
                            #endregion


                            #region Header and Footer Vaibhav
                            #region Heder code
                            string _VHeader = string.Empty;
                            string _Vfooter = string.Empty;

                            // for Report header by abel
                            StreamReader _VreadHeader_File = new StreamReader(Server.MapPath("~/IV_Report_Header.html"));
                            _VHeader = _VreadHeader_File.ReadToEnd();
                            _VHeader = _VHeader.Replace("[SapAndControle_No]", ObjModelVisitReport.SubJob_No);
                            _VHeader = _VHeader.Replace("[RevisionNo]", countNo);
                            /*_Header = _Header.Replace("[Logo]", "http://localhost:54895/AllJsAndCss/images/logo.png");*/ // change123 once pulished on server
                            _VHeader = _VHeader.Replace("[Logo]", ConfigurationManager.AppSettings["Web"].ToString() + "/AllJsAndCss/images/logo.svg");
                            _VHeader = _VHeader.Replace("[CustomerSpeReportNo]", ObjModelVisitReport.CustomerSpecificReportNumber);

                            #endregion

                            #region Generate no
                            if (RM.Report == null)
                            {

                                dtSrNo = objDalVisitReport.GetSrNo(ObjModelVisitReport.SubJob_No);
                                if (dtSrNo.Tables[0].Rows.Count > 0)
                                {
                                    SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["SrNo"]);

                                }
                                RM.ReportNo = "IVR-" + ObjModelVisitReport.SubJob_No + "-" + SrNo + "- Rev." + countNo;
                                _VHeader = _VHeader.Replace("[ReportNo]", RM.ReportNo);

                            }
                            else
                            {
                                //dtSrNo = objDalVisitReport.GetReportNo(RM.Report);
                                dtSrNo = objDalVisitReport.GetReportNo(Convert.ToString(RM.PK_RM_ID));
                                if (dtSrNo.Tables[0].Rows.Count > 0)
                                {
                                    SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["ReportNo"]);

                                }

                                // _VHeader = _VHeader.Replace("[ReportNo]", SrNo);
                                if (ObjModelVisitReport.IsCustomerSpecificReportNumber == "Yes")
                                {
                                    string strReportNo = "<span> Number: " + ObjModelVisitReport.CustomerSpecificReportNumber + "<Br />" + "( " + SrNo + " )";
                                    _VHeader = _VHeader.Replace("[ReportNo]", strReportNo);
                                }
                                else
                                {
                                    _VHeader = _VHeader.Replace("[ReportNo]", SrNo);

                                }

                            }
                            #endregion

                            #region Footer Code

                            StreamReader _VreadFooter_File = new StreamReader(Server.MapPath("~/IV_Report_Footer.html"));
                            _Vfooter = _VreadFooter_File.ReadToEnd();
                            _Vfooter = _Vfooter.Replace("[LogoFooter]", ConfigurationManager.AppSettings["Web"].ToString() + "/AllJsAndCss/images/FTUEV-NORD-GROUP_Logo_Electric-Blue.svg");

                            // header settings
                            Vconverter.Options.DisplayHeader = true || true || true;
                            Vconverter.Header.DisplayOnFirstPage = true;
                            Vconverter.Header.DisplayOnOddPages = true;
                            Vconverter.Header.DisplayOnEvenPages = true;
                            Vconverter.Header.Height = 75;

                            PdfHtmlSection VheaderHtml = new PdfHtmlSection(_VHeader, string.Empty);
                            VheaderHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
                            Vconverter.Header.Add(VheaderHtml);

                            // footer settings
                            Vconverter.Options.DisplayFooter = true || true || true;
                            Vconverter.Footer.DisplayOnFirstPage = true;
                            Vconverter.Footer.DisplayOnOddPages = true;
                            Vconverter.Footer.DisplayOnEvenPages = true;

                            //Vconverter.Footer.Height = 150;
                            Vconverter.Footer.Height = 105;
                            //converter.Footer.Height = 120;

                            PdfHtmlSection VfooterHtml = new PdfHtmlSection(_Vfooter, string.Empty);
                            VfooterHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
                            Vconverter.Footer.Add(VfooterHtml);
                            #endregion
                            #endregion



                            SelectPdf.PdfDocument docs = Vconverter.ConvertHtmlString(bodys);
                            ReportNames = ObjModelVisitReport.Call_No + "_Img_" + iteration + ".pdf";

                            paths = Server.MapPath("~/Content/" + ObjModelVisitReport.Call_No);
                            docs.Save(paths + '\\' + ReportNames);
                            docs.Close();
                            bodys = string.Empty;
                            ImageContent = string.Empty;
                            ViewBag.Reminder = "1";
                        }
                        #endregion


                        #region If ImageContent not null

                        if (ViewBag.Reminder != "1")
                        {
                            ViewBag.Reminder = "2";
                            using (reader = new StreamReader(Server.MapPath("~/inspection-visit-report-images.html")))
                            {
                                bodys = reader.ReadToEnd();
                            }
                            bodys = bodys.Replace("[Image]", ImageContent);
                            bodys = bodys.Replace("[Logos]", "http://localhost:54895/AllJsAndCss/images/logo.png");



                            #region Initial setting vaibhav
                            //strs.Append(body);
                            PdfPageSize vpageSize = PdfPageSize.A4;
                            PdfPageOrientation vpdfOrientation = PdfPageOrientation.Portrait;
                            HtmlToPdf Vconverter = new HtmlToPdf();

                            // set the page timeout (in seconds)
                            Vconverter.Options.MaxPageLoadTime = 240;  //=========================5-Aug-2019
                            Vconverter.Options.PdfPageSize = vpageSize;
                            Vconverter.Options.PdfPageOrientation = vpdfOrientation;
                            #endregion


                            #region Header and Footer Vaibhav
                            #region Heder code
                            string _VHeader = string.Empty;
                            string _Vfooter = string.Empty;

                            // for Report header by abel
                            StreamReader _VreadHeader_File = new StreamReader(Server.MapPath("~/IV_Report_Header.html"));
                            _VHeader = _VreadHeader_File.ReadToEnd();
                            _VHeader = _VHeader.Replace("[SapAndControle_No]", ObjModelVisitReport.SubJob_No);
                            _VHeader = _VHeader.Replace("[RevisionNo]", countNo);
                            /*_Header = _Header.Replace("[Logo]", "http://localhost:54895/AllJsAndCss/images/logo.png");*/ // change123 once pulished on server
                            _VHeader = _VHeader.Replace("[Logo]", ConfigurationManager.AppSettings["Web"].ToString() + "/AllJsAndCss/images/logo.svg");
                            _VHeader = _VHeader.Replace("[CustomerSpeReportNo]", ObjModelVisitReport.CustomerSpecificReportNumber);

                            #endregion


                            #region Generate no
                            if (RM.Report == null)
                            {

                                dtSrNo = objDalVisitReport.GetSrNo(ObjModelVisitReport.SubJob_No);
                                if (dtSrNo.Tables[0].Rows.Count > 0)
                                {
                                    SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["SrNo"]);

                                }
                                RM.ReportNo = "IVR-" + ObjModelVisitReport.SubJob_No + "-" + SrNo + "-Rev." + countNo;
                                _VHeader = _VHeader.Replace("[ReportNo]", RM.ReportNo);

                            }
                            else
                            {
                                //dtSrNo = objDalVisitReport.GetReportNo(RM.Report);
                                dtSrNo = objDalVisitReport.GetReportNo(Convert.ToString(RM.PK_RM_ID));
                                if (dtSrNo.Tables[0].Rows.Count > 0)
                                {
                                    SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["ReportNo"]);

                                }

                                //_VHeader = _VHeader.Replace("[ReportNo]", SrNo);
                                if (ObjModelVisitReport.IsCustomerSpecificReportNumber == "Yes")
                                {
                                    string strReportNo = "<span> Number: " + ObjModelVisitReport.CustomerSpecificReportNumber + "<Br />" + "( " + SrNo + " )";
                                    _VHeader = _VHeader.Replace("[ReportNo]", strReportNo);
                                }
                                else
                                {
                                    _VHeader = _VHeader.Replace("[ReportNo]", SrNo);

                                }
                            }
                            #endregion

                            #region Footer Code

                            StreamReader _VreadFooter_File = new StreamReader(Server.MapPath("~/IV_Report_Footer.html"));
                            _Vfooter = _VreadFooter_File.ReadToEnd();
                            _Vfooter = _Vfooter.Replace("[LogoFooter]", ConfigurationManager.AppSettings["Web"].ToString() + "/AllJsAndCss/images/FTUEV-NORD-GROUP_Logo_Electric-Blue.svg");

                            // header settings
                            Vconverter.Options.DisplayHeader = true || true || true;
                            Vconverter.Header.DisplayOnFirstPage = true;
                            Vconverter.Header.DisplayOnOddPages = true;
                            Vconverter.Header.DisplayOnEvenPages = true;
                            Vconverter.Header.Height = 75;

                            PdfHtmlSection VheaderHtml = new PdfHtmlSection(_VHeader, string.Empty);
                            VheaderHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
                            Vconverter.Header.Add(VheaderHtml);

                            // footer settings
                            Vconverter.Options.DisplayFooter = true || true || true;
                            Vconverter.Footer.DisplayOnFirstPage = true;
                            Vconverter.Footer.DisplayOnOddPages = true;
                            Vconverter.Footer.DisplayOnEvenPages = true;

                            //Vconverter.Footer.Height = 150;
                            Vconverter.Footer.Height = 105;
                            //converter.Footer.Height = 120;

                            PdfHtmlSection VfooterHtml = new PdfHtmlSection(_Vfooter, string.Empty);
                            VfooterHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
                            Vconverter.Footer.Add(VfooterHtml);

                            //end abel code


                            //// page numbers can be added using a PdfTextSection object
                            //PdfTextSection Vtext1 = new PdfTextSection(0, 145, "Page: {page_number} of {total_pages}  ", new System.Drawing.Font("Arial", 8));
                            //Vtext1.HorizontalAlign = PdfTextHorizontalAlign.Right;
                            //Vconverter.Footer.Add(Vtext1);
                            #endregion
                            #endregion


                            SelectPdf.PdfDocument docs = Vconverter.ConvertHtmlString(bodys);

                            ReportNames = ObjModelVisitReport.Call_No + "_Img_" + iteration + ".pdf";
                            paths = Server.MapPath("~/Content/" + ObjModelVisitReport.Call_No);
                            docs.Save(paths + '\\' + ReportNames);
                            docs.Close();
                            bodys = string.Empty;
                            ImageContent = string.Empty;
                            iteration = iteration + 1;
                        }
                        #endregion

                    }
                    #endregion



                    string[] pdfs = Directory.GetFiles(Server.MapPath("~/Content/" + ObjModelVisitReport.Call_No));

                    PdfSharp.Pdf.PdfDocument ImageDoc = new PdfSharp.Pdf.PdfDocument();




                    foreach (string pdfFile in pdfs)
                    {
                        if (pdfFile.Contains("Img_"))
                        {
                            #region Initial setting vaibhav
                            //strs.Append(body);
                            PdfPageSize vpageSize = PdfPageSize.A4;
                            PdfPageOrientation vpdfOrientation = PdfPageOrientation.Portrait;
                            HtmlToPdf Vconverter = new HtmlToPdf();

                            // set the page timeout (in seconds)
                            Vconverter.Options.MaxPageLoadTime = 240;  //=========================5-Aug-2019
                            Vconverter.Options.PdfPageSize = vpageSize;
                            Vconverter.Options.PdfPageOrientation = vpdfOrientation;
                            #endregion
                            #region Header footer Vaibhav Test 28-07-2020
                            #region Header and Footer Vaibhav
                            #region Heder code
                            string _VHeader = string.Empty;
                            string _Vfooter = string.Empty;

                            // for Report header by abel
                            StreamReader _VreadHeader_File = new StreamReader(Server.MapPath("~/IV_Report_Header.html"));
                            _VHeader = _VreadHeader_File.ReadToEnd();
                            _VHeader = _VHeader.Replace("[SapAndControle_No]", ObjModelVisitReport.SubJob_No);
                            _VHeader = _VHeader.Replace("[RevisionNo]", countNo);
                            /*_Header = _Header.Replace("[Logo]", "http://localhost:54895/AllJsAndCss/images/logo.png");*/ // change123 once pulished on server
                            _VHeader = _VHeader.Replace("[Logo]", ConfigurationManager.AppSettings["Web"].ToString() + "/AllJsAndCss/images/logo.svg");
                            _VHeader = _VHeader.Replace("[CustomerSpeReportNo]", ObjModelVisitReport.CustomerSpecificReportNumber);

                            #endregion


                            #region Generate no
                            if (RM.Report == null)
                            {

                                dtSrNo = objDalVisitReport.GetSrNo(ObjModelVisitReport.SubJob_No);
                                if (dtSrNo.Tables[0].Rows.Count > 0)
                                {
                                    SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["SrNo"]);

                                }
                                RM.ReportNo = "IVR-" + ObjModelVisitReport.SubJob_No + "-" + SrNo + "-Rev." + countNo;
                                _VHeader = _VHeader.Replace("[ReportNo]", RM.ReportNo);

                            }
                            else
                            {
                                //dtSrNo = objDalVisitReport.GetReportNo(RM.Report);
                                dtSrNo = objDalVisitReport.GetReportNo(Convert.ToString(RM.PK_RM_ID));
                                if (dtSrNo.Tables[0].Rows.Count > 0)
                                {
                                    SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["ReportNo"]);

                                }

                                // _VHeader = _VHeader.Replace("[ReportNo]", SrNo);
                                if (ObjModelVisitReport.IsCustomerSpecificReportNumber == "Yes")
                                {
                                    string strReportNo = "<span> Number: " + ObjModelVisitReport.CustomerSpecificReportNumber + "<Br />" + "( " + SrNo + " )";
                                    _VHeader = _VHeader.Replace("[ReportNo]", strReportNo);
                                }
                                else
                                {
                                    _VHeader = _VHeader.Replace("[ReportNo]", SrNo);

                                }
                            }
                            #endregion

                            #region Footer Code

                            StreamReader _VreadFooter_File = new StreamReader(Server.MapPath("~/IV_Report_Footer.html"));
                            _Vfooter = _VreadFooter_File.ReadToEnd();
                            _Vfooter = _Vfooter.Replace("[LogoFooter]", ConfigurationManager.AppSettings["Web"].ToString() + "/AllJsAndCss/images/FTUEV-NORD-GROUP_Logo_Electric-Blue.svg");//1
                            // header settings
                            Vconverter.Options.DisplayHeader = true || true || true;
                            Vconverter.Header.DisplayOnFirstPage = true;
                            Vconverter.Header.DisplayOnOddPages = true;
                            Vconverter.Header.DisplayOnEvenPages = true;
                            Vconverter.Header.Height = 75;

                            PdfHtmlSection VheaderHtml = new PdfHtmlSection(_VHeader, string.Empty);
                            VheaderHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
                            Vconverter.Header.Add(VheaderHtml);

                            // footer settings
                            Vconverter.Options.DisplayFooter = true || true || true;
                            Vconverter.Footer.DisplayOnFirstPage = true;
                            Vconverter.Footer.DisplayOnOddPages = true;
                            Vconverter.Footer.DisplayOnEvenPages = true;

                            //Vconverter.Footer.Height = 150;
                            Vconverter.Footer.Height = 105;
                            //converter.Footer.Height = 120;

                            PdfHtmlSection VfooterHtml = new PdfHtmlSection(_Vfooter, string.Empty);
                            VfooterHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
                            Vconverter.Footer.Add(VfooterHtml);

                            //end abel code


                            // page numbers can be added using a PdfTextSection object
                            //PdfTextSection Vtext1 = new PdfTextSection(0, 145, "Page: {page_number} of {total_pages}  ", new System.Drawing.Font("Arial", 8));
                            //Vtext1.HorizontalAlign = PdfTextHorizontalAlign.Right;
                            //Vconverter.Footer.Add(Vtext1);
                            SelectPdf.PdfDocument docs = converters.ConvertHtmlString(bodys);
                            #endregion
                            #endregion
                            #endregion
                            PdfSharp.Pdf.PdfDocument ImagePDFDocument = PdfReader.Open(pdfFile, PdfDocumentOpenMode.Import);
                            ImageDoc.Version = ImagePDFDocument.Version;

                            foreach (PdfSharp.Pdf.PdfPage page in ImagePDFDocument.Pages)
                            {
                                ImageDoc.AddPage(page);
                            }
                        }
                    }
                    int ImageC = ImageDoc.PageCount;
                    if (System.IO.File.Exists(paths + "/Image_" + countNo + ".pdf"))
                    {
                        // If file found, delete it    
                        System.IO.File.Delete(paths + "/Image_" + countNo + ".pdf");

                    }


                    //PdfDocument docs = converters.ConvertHtmlString(bodys);


                    /****Final Report Saving ****/
                    if (ImageReportDashBoard.Rows.Count > 0)
                    {
                        if (RM.ImageReport == null || RM.ImageReport == "")
                        {
                            paths = Server.MapPath("~/Content/");

                            ImageDoc.Save(paths + ObjModelVisitReport.Call_No + "/Image_" + countNo + ".pdf");
                            ImageDoc.Close();

                        }
                        else
                        {
                            ReportNames = RM.ImageReport;
                            paths = Server.MapPath("~/Content/");

                            ImageDoc.Save(paths + ReportNames);
                            ImageDoc.Close();
                        }
                    }



                    #endregion

                    #region Save to Pdf Code 
                    SelectPdf.GlobalProperties.LicenseKey = "uZKImYuMiJmImYuIl4mZioiXiIuXgICAgA==";
                    System.Text.StringBuilder strs = new System.Text.StringBuilder();
                    string body = string.Empty;

                    string ItemDescriptioncontent = "";
                    string ReferenceDocumentscontent = "";
                    string InspectionDocumentsContent = "";
                    string DocumentreviewContent = "";
                    string EquipmentDetailscontent = "";
                    string AreasOfConcernContent = "";
                    string PendingActivityContent = "";
                    string AreaOfConcernOnPDF = "";
                    string AreaOfConcernOnPDFHeading = "";


                    string check1 = "";
                    string check2 = "";
                    string check3 = "";
                    string check4 = "";
                    string check5 = "";
                    string check6 = "";
                    string check7 = "";
                    string check8 = "";
                    string check9 = "";
                    string check10 = "";
                    string checkNABL = "";

                    string check11 = "";
                    string check12 = "";
                    string check13 = "";
                    using (StreamReader reader1 = new StreamReader(Server.MapPath("~/inspection-visit-report.html")))
                    {
                        body = reader1.ReadToEnd();
                    }




                    body = body.Replace("[SapAndControle_No]", ObjModelVisitReport.SubJob_No);
                    body = body.Replace("[SAPNo]", ObjModelVisitReport.SAPNo);
                    body = body.Replace("[Branch]", ObjModelVisitReport.Branch);
                    body = body.Replace("[NotificationNameNo_Date]", ObjModelVisitReport.Notification_Name_No_Date);
                    body = body.Replace("[DateOfInspection]", ObjModelVisitReport.Date_Of_Inspection);
                    body = body.Replace("[ProjectNameLocation]", ObjModelVisitReport.Project_Name_Location);
                    body = body.Replace("[AddressOfInspection]", ObjModelVisitReport.Address_Of_Inspection);
                    body = body.Replace("[ClientName]", /*ObjModelVisitReport.Client_Name*/Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Client_NameWithoutId"]));
                    body = body.Replace("[Enduser_Name]", ObjModelVisitReport.End_user_Name);
                    body = body.Replace("[DECPMCEPC_Name]", ObjModelVisitReport.DEC_PMC_EPC_Name);
                    body = body.Replace("[DECPMCEPCAssignment_No]", ObjModelVisitReport.DEC_PMC_EPC_Assignment_No);
                    body = body.Replace("[VendorNameLocation]", /*ObjModelVisitReport.Vendor_Name_Location*/Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Vendor_Name_LocationWithoutId"]));
                    

                    if (SubJobDate == null || SubJobDate == "")
                    {
                        body = body.Replace("[PoNo]", ObjModelVisitReport.Po_No);
                    }
                    else
                    {
                        body = body.Replace("[PoNo]", ObjModelVisitReport.Po_No + " Dated " + SubJobDate);
                    }

                    if (ObjModelVisitReport.SubType == "Sub Job")
                    {
                        body = body.Replace("[PoNoSubVendor]", "");
                        body = body.Replace("[SubVendorName]", "");
                    }
                    else
                    {

                        if (ObjModelVisitReport.SubType == "SubSubSub Job")
                        {
                            if (ObjModelVisitReport.Po_No_SubVendor != string.Empty)
                            {
                                body = body.Replace("[PoNoSubVendor]", ObjModelVisitReport.Po_No_SubVendor + " Dated " + ObjModelVisitReport.SubSubVendorDate_of_PO + " and" + "<br/> " + ObjModelVisitReport.SubSubSubPoNo + " Dated " + ObjModelVisitReport.SubSubSubPoDate);
                            }
                            else
                            {
                                body = body.Replace("[PoNoSubVendor]", ObjModelVisitReport.Po_No_SubVendor);
                            }
                            body = body.Replace("[SubVendorName]", Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Sub_Vendor_NameWithoutId"]) + " and" + "<br/>" + Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["SubSubVendorName"]));

                        }
                        else
                        {
                            if (ObjModelVisitReport.Po_No_SubVendor != string.Empty)
                            {
                                body = body.Replace("[PoNoSubVendor]", ObjModelVisitReport.Po_No_SubVendor + " Dated " + ObjModelVisitReport.SubSubVendorDate_of_PO);
                            }
                            else
                            {
                                body = body.Replace("[PoNoSubVendor]", ObjModelVisitReport.Po_No_SubVendor);
                            }
                            body = body.Replace("[SubVendorName]", Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Sub_Vendor_NameWithoutId"]));

                        }



                    }

                    body = body.Replace("[SubVendorName]", /*ObjModelVisitReport.Sub_Vendor_Name*/Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Sub_Vendor_NameWithoutId"]));
                    if (ObjModelVisitReport.Po_No_SubVendor != string.Empty)
                    {
                        body = body.Replace("[PoNoSubVendor]", ObjModelVisitReport.Po_No_SubVendor + " Dated " + ObjModelVisitReport.SubSubVendorDate_of_PO);
                    }
                    else
                    {
                        body = body.Replace("[PoNoSubVendor]", ObjModelVisitReport.Po_No_SubVendor);
                    }
                    body = body.Replace("[Conclusion]", ObjModelVisitReport.Conclusion);
                    body = body.Replace("[CanIRNbeissued]", ObjModelVisitReport.CanIRNbeissued);


                    //body = body.Replace("[PendingActivites]", ObjModelVisitReport.Pending_Activites);
                    //body = body.Replace("[AreasOfConcerns]", ObjModelVisitReport.Areas_Of_Concerns);
                    body = body.Replace("[IdentificationOfInspected]", ObjModelVisitReport.Identification_Of_Inspected);

                    body = body.Replace("[NonConformitiesraised]", ObjModelVisitReport.Non_Conformities_raised);
                    body = body.Replace("[Name]", ObjModelVisitReport.Name);
                    body = body.Replace("[date]", ObjModelVisitReport.ReportCreatedDate);

                    if (countNo == "0")
                    {
                        body = body.Replace("[RevisionNo]", "0");
                    }
                    else
                    {
                        body = body.Replace("[RevisionNo]", countNo);
                    }

                    //body = body.Replace("[TempInspectionPhotosNo]", ObjModelVisitReport.TempInspectionPhotosNo);//24
                    body = body.Replace("[TempMaster_List_Of_calibrated_Instruments]", ObjModelVisitReport.TempMaster_List_Of_calibrated_Instruments);
                    if (ObjModelVisitReport.ReviseReason != "-" && ObjModelVisitReport.ReviseReason != "")
                    {
                        body = body.Replace("[ReviseReason]", "Reason for Revision - " + Convert.ToString(ObjModelVisitReport.ReviseReason));
                    }
                    else
                    {
                        body = body.Replace("[ReviseReason]", "-");
                    }
                    body = body.Replace("[ReviseReportNoForPDF]", ObjModelVisitReport.ReviseReportNoForPDF);
                    body = body.Replace("[ReportNo]", ObjModelVisitReport.Report_No);
                    body = body.Replace("[ReportNoForPDF]", ObjModelVisitReport.ReportNoForPDF);



                    //if (ObjModelVisitReport.Sap_And_Controle_No == "050104219221")
                    //{
                    //    body = body.Replace("[EPCName]", "<td width='25 % ' style='border: 1px solid #000000;vertical-align:top; border-top-width: 0px;border-right-width: 0px;'><span style='font-size: 14px; color: #000; font-family: 'TNG Pro'; font-weight: bold;vertical-align:top;text-align:left;'><strong>Contractor name:</strong></span><span style='font-size: 8px; color: #000; font-family: 'TNG Pro'; font-weight: bold; display:block;'><i style='line-height:2px'>(If applicable)</i></span></td>");
                    //    body = body.Replace("[EPCNumber]", "<td width='25 % ' style='border: 1px solid #000000;vertical-align:top; border-top-width: 0px;border-right-width: 0px;'><span style='font-size: 14px; color: #000; font-family: 'TNG Pro'; font-weight: bold;vertical-align:top;text-align:left;'><strong>Contractor PO Number:</strong></span><br><span style='font-size: 8px; color: #000; font-family: 'TNG Pro'; font-weight: bold; display:block;'><i style='line-height:2px'>(If applicable)</i></span></td>");
                    //    body = body.Replace("[VendorName]", "<td width='25 % ; style='border: 1px solid #000000;vertical-align:top; border-top-width: 0px;border-right-width: 0px; '><span style='font-size: 14px;border-top-width: 0px;border-right-width: 0px; color: #000; font-family: 'TNG Pro'; font-weight: bold;vertical-align:top;text-align:left;'><strong>Vendor Name & Location:</strong></span></td>");
                    //    body = body.Replace("[PONumber]", "<td width='25 % ' style='border: 1px solid #000000;vertical-align:top; border-top-width: 0px;border-right-width: 0px; '><span style='font-size: 14px; color: #000; font-family: 'TNG Pro'; font-weight: bold;vertical-align:top;text-align:left;'><strong>P.O. Number:</strong></span><br><span style='font-size: 8px; color: #000; font-family: 'TNG Pro'; font-weight: bold; display:block;'><i style='line-height:2px'>(Contractor PO Number on Vendor)</i></span></td>");
                    //    body = body.Replace("[SubVendorNameHeading]", "<td width='25 % ' style='border: 1px solid #000000;vertical-align:top; border-top-width: 0px;border-right-width: 0px;border-bottom-width: 0px; '><span style='font-size: 14px; color: #000; font-family: 'TNG Pro'; font-weight: bold;vertical-align:top;text-align:left;'><strong>Sub-Contractor Name & Location:</strong></span><br><span style='font-size: 8px; color: #000; font-family: 'TNG Pro'; font-weight: bold; display:block;'><i style='line-height:2px'>(If applicable)</i></span></td>");
                    //    body = body.Replace("[SubPONumberH]", "<td width='25 % ' style='border: 1px solid #000000;vertical-align:top; border-top-width: 0px;border-right-width: 0px;border-bottom-width: 0px;'><span style='font-size: 14px; color: #000; font-family: 'TNG Pro'; font-weight: bold;vertical-align:top;text-align:left;'><strong> P.O. Number:</strong></span><br><span style='font-size: 8px; color: #000; font-family: 'TNG Pro'; font-weight: bold; display:block;'><i style='line-height:2px'>(If applicable – Contractor PO Number on Sub-Contractor)</i></span></td>");
                    //}
                    //else
                    //{
                    //    body = body.Replace("[EPCName]", "<td width='25 % ' style='border: 1px solid #000000;vertical-align:top; border-top-width: 0px;border-right-width: 0px;'><span style='font-size: 14px; color: #000; font-family: 'TNG Pro'; font-weight: bold;vertical-align:top;text-align:left;'><strong>DEC / PMC / EPC Name:</strong></span><span style='font-size: 8px; color: #000; font-family: 'TNG Pro'; font-weight: bold; display:block;'><i style='line-height:2px'>(If applicable)</i></span></td>");
                    //    body = body.Replace("[EPCNumber]", "<td width='25 % ' style='border: 1px solid #000000;vertical-align:top; border-top-width: 0px;border-right-width: 0px;'><span style='font-size: 14px; color: #000; font-family: 'TNG Pro'; font-weight: bold;vertical-align:top;text-align:left;'><strong>DEC / PMC / EPC Assignment Number:</strong></span><br><span style='font-size: 8px; color: #000; font-family: 'TNG Pro'; font-weight: bold; display:block;'><i style='line-height:2px'>(If applicable)</i></span></td>");
                    //    body = body.Replace("[VendorName]", "<td width='25 % ; style='border: 1px solid #000000;vertical-align:top; border-top-width: 0px;border-right-width: 0px; '><span style='font-size: 14px; color: #000; font-family: 'TNG Pro'; font-weight: bold;vertical-align:top;text-align:left;'><strong>Vendor Name & Location:</strong></span></td>");
                    //    body = body.Replace("[PONumber]", "<td width='25 % ' style='border: 1px solid #000000;vertical-align:top; border-top-width: 0px;border-right-width: 0px; '><span style='font-size: 14px; color: #000; font-family: 'TNG Pro'; font-weight: bold;vertical-align:top;text-align:left;'><strong>P.O. Number:</strong></span><br><span style='font-size: 8px; color: #000; font-family: 'TNG Pro'; font-weight: bold; display:block;'><i style='line-height:2px'>(Client PO on Vendor)</i></span></td>");
                    //    body = body.Replace("[SubVendorNameHeading]", "<td width='25 % ' style='border: 1px solid #000000;vertical-align:top; border-top-width: 0px;border-right-width: 0px;border-bottom-width: 0px; '><span style='font-size: 14px; color: #000; font-family: 'TNG Pro'; font-weight: bold;vertical-align:top;text-align:left;'><strong>Sub Vendor Name & Location:</strong></span><br><span style='font-size: 8px; color: #000; font-family: 'TNG Pro'; font-weight: bold; display:block;'><i style='line-height:2px'>(If applicable)</i></span></td>");

                    //    body = body.Replace("[SubPONumberH]", "<td width='25 % ' style='border: 1px solid #000000;vertical-align:top; border-top-width: 0px;border-right-width: 0px;border-bottom-width: 0px;'><span style='font-size: 14px; color: #000; font-family: 'TNG Pro'; font-weight: bold;vertical-align:top;text-align:left;'><strong> P.O. Number:</strong></span><br><span style='font-size: 8px; color: #000; font-family: 'TNG Pro'; font-weight: bold; display:block;'><i style='line-height:2px'>(If applicable – Vendor PO on Sub Vendor)</i></span></td>");
                    //}


                    if (ObjModelVisitReport.Sap_And_Controle_No == "050104219221")
                    {
                        body = body.Replace("[EPCName]", "<td width='25 % ' style='border: 1px solid #000000;vertical-align:top; border-top-width: 0px;border-right-width: 0px;border-bottom-width: 0px;'><span style='font-size: 14px; color: #000; font-family: 'TNG Pro'; font-weight: bold;vertical-align:top;text-align:left;'><strong>Contractor name:</strong></span><span style='font-size: 8px; color: #000; font-family: 'TNG Pro'; font-weight: bold; display:block;'><i style='line-height:2px'>(If applicable)</i></span></td>");
                        body = body.Replace("[EPCNumber]", "<td width='25 % ' style='border: 1px solid #000000;vertical-align:top; border-top-width: 0px;border-right-width: 0px;'><span style='font-size: 14px; color: #000; font-family: 'TNG Pro'; font-weight: bold;vertical-align:top;text-align:left;'><strong>Contractor PO Number:</strong></span><br><span style='font-size: 8px; color: #000; font-family: 'TNG Pro'; font-weight: bold; display:block;'><i style='line-height:2px'>(If applicable)</i></span></td>");
                        body = body.Replace("[VendorName]", "<td width='25 % ; style='border: 1px solid #000000;vertical-align:top; border-top-width: 0px;border-right-width: 0px; '><span style='font-size: 14px;border-top-width: 0px;border-right-width: 0px; color: #000; font-family: 'TNG Pro'; font-weight: bold;vertical-align:top;text-align:left;'><strong>Vendor Name & Location:</strong></span></td>");
                        body = body.Replace("[PONumber]", "<td width='25 % ' style='border: 1px solid #000000;vertical-align:top; border-top-width: 0px;border-right-width: 0px; '><span style='font-size: 14px; color: #000; font-family: 'TNG Pro'; font-weight: bold;vertical-align:top;text-align:left;'><strong>P.O. Number:</strong></span><br><span style='font-size: 8px; color: #000; font-family: 'TNG Pro'; font-weight: bold; display:block;'><i style='line-height:2px'>(Contractor PO Number on Vendor)</i></span></td>");
                        body = body.Replace("[SubVendorNameHeading]", "<td width='25 % ' style='border: 1px solid #000000;vertical-align:top; border-top-width: 0px;border-right-width: 0px;border-bottom-width: 0px; '><span style='font-size: 14px; color: #000; font-family: 'TNG Pro'; font-weight: bold;vertical-align:top;text-align:left;'><strong>Sub-Contractor Name & Location:</strong></span><br><span style='font-size: 8px; color: #000; font-family: 'TNG Pro'; font-weight: bold; display:block;'><i style='line-height:2px'>(If applicable)</i></span></td>");
                        body = body.Replace("[SubPONumberH]", "<td width='25 % ' style='border: 1px solid #000000;vertical-align:top; border-top-width: 0px;border-right-width: 0px;border-bottom-width: 0px;'><span style='font-size: 14px; color: #000; font-family: 'TNG Pro'; font-weight: bold;vertical-align:top;text-align:left;'><strong> P.O. Number:</strong></span><br><span style='font-size: 8px; color: #000; font-family: 'TNG Pro'; font-weight: bold; display:block;'><i style='line-height:2px'>(If applicable – Contractor PO Number on Sub-Contractor)</i></span></td>");
                    }
                    else
                    {
                        body = body.Replace("[EPCName]", "<td width='25 % ' style='border: 1px solid #000000;vertical-align:top; border-top-width: 0px;border-right-width: 0px;border-bottom-width: 0px;'><span style='font-size: 14px; color: #000; font-family: 'TNG Pro'; font-weight: bold;vertical-align:top;text-align:left;'><strong>DEC / PMC / EPC Name:</strong></span><span style='font-size: 8px; color: #000; font-family: 'TNG Pro'; font-weight: bold; display:block;'><i style='line-height:2px'>(If applicable)</i></span></td>");
                        body = body.Replace("[EPCNumber]", "<td width='25 % ' style='border: 1px solid #000000;vertical-align:top; border-top-width: 0px;border-right-width: 0px;'><span style='font-size: 14px; color: #000; font-family: 'TNG Pro'; font-weight: bold;vertical-align:top;text-align:left;'><strong>DEC / PMC / EPC Assignment Number:</strong></span><br><span style='font-size: 8px; color: #000; font-family: 'TNG Pro'; font-weight: bold; display:block;'><i style='line-height:2px'>(If applicable)</i></span></td>");
                        body = body.Replace("[VendorName]", "<td width='25 % ; style='border: 1px solid #000000;vertical-align:top; border-top-width: 0px;border-right-width: 0px; '><span style='font-size: 14px; color: #000; font-family: 'TNG Pro'; font-weight: bold;vertical-align:top;text-align:left;'><strong>Vendor Name & Location:</strong></span></td>");
                        body = body.Replace("[PONumber]", "<td width='25 % ' style='border: 1px solid #000000;vertical-align:top; border-top-width: 0px;border-right-width: 0px; '><span style='font-size: 14px; color: #000; font-family: 'TNG Pro'; font-weight: bold;vertical-align:top;text-align:left;'><strong>P.O. Number:</strong></span><br><span style='font-size: 8px; color: #000; font-family: 'TNG Pro'; font-weight: bold; display:block;'><i style='line-height:2px'>(Client PO on Vendor)</i></span></td>");
                        body = body.Replace("[SubVendorNameHeading]", "<td width='25 % ' style='border: 1px solid #000000;vertical-align:top; border-top-width: 0px;border-right-width: 0px;border-bottom-width: 0px; '><span style='font-size: 14px; color: #000; font-family: 'TNG Pro'; font-weight: bold;vertical-align:top;text-align:left;'><strong>Sub Vendor Name & Location:</strong></span><br><span style='font-size: 8px; color: #000; font-family: 'TNG Pro'; font-weight: bold; display:block;'><i style='line-height:2px'>(If applicable)</i></span></td>");

                        body = body.Replace("[SubPONumberH]", "<td width='25 % ' style='border: 1px solid #000000;vertical-align:top; border-top-width: 0px;border-right-width: 0px;border-bottom-width: 0px;'><span style='font-size: 14px; color: #000; font-family: 'TNG Pro'; font-weight: bold;vertical-align:top;text-align:left;'><strong> P.O. Number:</strong></span><br><span style='font-size: 8px; color: #000; font-family: 'TNG Pro'; font-weight: bold; display:block;'><i style='line-height:2px'>(If applicable – Vendor PO on Sub Vendor)</i></span></td>");
                    }

                    //ItemDescription Heading 
                    if (ObjModelVisitReport.ItemDescriptionDynamic == "Yes" && ObjModelVisitReport.ShowCount == "Yes" && ObjModelVisitReport.DisplayTotalQuantity == "Yes")
                    {
                        body = body.Replace("[POItemNo]", "<td style='border: 1px solid #000000;border-bottom-width: 0px;vertical-align: text-top;text-align:center;' width='5%'><span><strong> PO Item No.</strong></span></td>");
                        body = body.Replace("[ItemCode]", "<td style='border: 1px solid #000000;border-bottom-width: 0px;border-left-width: 0px;vertical-align: text-top;text-align:left;' width='10%'><span><strong>Item Code</strong></span></td>");
                        body = body.Replace("[Identification_MTCNumber]", "<td width='47%' style='font-size: 14px;border:1px solid #000000;border-bottom-width: 0px;border-left-width: 0px;vertical-align: text-top;text-align:left;'><span><strong>Item Description / Identification / MTC Number</strong></span></td>");
                        body = body.Replace("[HeatNumber]", "<td width='10%' style='font-size: 14px;border:1px solid #000000;border-bottom-width: 0px;border-left-width: 0px; color: #000000; font-family: 'TNG Pro'; font-weight: bold;vertical-align:top;text-align:center;'><span><strong>Heat Number</strong></span></td>");
                        body = body.Replace("[UOM]", "<td width='10%' style='font-size: 14px;border:1px solid #000000;border-bottom-width: 0px;border-left-width: 0px; color: #000000; font-family: 'TNG Pro'; font-weight: bold;vertical-align:top;'><span><strong>UOM</strong></span></td>");
                        body = body.Replace("[POQuantity]", "<td width='10%' style='font-size: 14px;border:1px solid #000000;border-bottom-width: 0px;border-left-width: 0px; color: #000000; font-family: 'TNG Pro'; font-weight: bold;vertical-align:top;text-align:center;'><span><strong>P.O. Quantity</strong></span></td>");
                        body = body.Replace("[OfferedQuantity]", "<td width='10%' style='font-size: 14px;border:1px solid #000000;border-bottom-width: 0px;border-left-width: 0px; color: #000000; font-family: 'TNG Pro'; font-weight: bold;vertical-align:top;text-align:center;'><span><strong>Offered Quantity</strong></span></td>");
                        body = body.Replace("[AcceptableQuantity]", "<td width='10%' style='font-size: 14px;border:1px solid #000000;border-bottom-width: 0px;border-left-width: 0px; color: #000000; font-family: 'TNG Pro'; font-weight: bold;vertical-align:top;text-align:center;'><span><strong>Acceptable Quantity</strong></span></td>");
                        
                    }
                    else if (ObjModelVisitReport.ItemDescriptionDynamic == "Yes")
                    {
                        body = body.Replace("[POItemNo]", "<td style='border: 1px solid #000000;border-bottom-width: 0px;vertical-align: text-top;text-align:center;' width='5%'><span><strong> PO Item No.</strong></span></td>");
                        body = body.Replace("[ItemCode]", "<td style='border: 1px solid #000000;border-bottom-width: 0px;border-left-width: 0px;vertical-align: text-top;text-align:left;' width='10%'><span><strong>Item Code</strong></span></td>");
                        body = body.Replace("[Identification_MTCNumber]", "<td width='47%' style='font-size: 14px;border:1px solid #000000;border-bottom-width: 0px;border-left-width: 0px;vertical-align: text-top;text-align:left;'><span><strong>Item Description / Identification / MTC Number</strong></span></td>");
                        body = body.Replace("[HeatNumber]", "<td width='10%' style='font-size: 14px;border:1px solid #000000;border-bottom-width: 0px;border-left-width: 0px; color: #000000; font-family: 'TNG Pro'; font-weight: bold;vertical-align:top;text-align:center;'><span><strong>Heat Number</strong></span></td>");
                        body = body.Replace("[UOM]", "<td width='10%' style='font-size: 14px;border:1px solid #000000;border-bottom-width: 0px;border-left-width: 0px; color: #000000; font-family: 'TNG Pro'; font-weight: bold;vertical-align:top;'><span><strong>UOM</strong></span></td>");
                        body = body.Replace("[POQuantity]", "<td width='10%' style='font-size: 14px;border:1px solid #000000;border-bottom-width: 0px;border-left-width: 0px; color: #000000; font-family: 'TNG Pro'; font-weight: bold;vertical-align:top;text-align:center;'><span><strong>P.O. Quantity</strong></span></td>");
                        body = body.Replace("[OfferedQuantity]", "<td width='10%' style='font-size: 14px;border:1px solid #000000;border-bottom-width: 0px;border-left-width: 0px; color: #000000; font-family: 'TNG Pro'; font-weight: bold;vertical-align:top;text-align:center;'><span><strong>Offered Quantity</strong></span></td>");
                        body = body.Replace("[AcceptableQuantity]", "<td width='10%' style='font-size: 14px;border:1px solid #000000;border-bottom-width: 0px;border-left-width: 0px; color: #000000; font-family: 'TNG Pro'; font-weight: bold;vertical-align:top;text-align:center;'><span><strong>Acceptable Quantity</strong></span></td>");
                        
                        
                    }
                    else
                    {
                        body = body.Replace("[POItemNo]", "<td style='border: 1px solid #000000;border-bottom-width: 0px;vertical-align: text-top;text-align:center;' width='5%'><span><strong> PO Item No.</strong></span></td>");
                        body = body.Replace("[ItemCode]", "<td style='border: 1px solid #000000;border-bottom-width: 0px;border-left-width: 0px;vertical-align: text-top;text-align:left;' width='10%'><span><strong>Item Code</strong></span></td>");
                        body = body.Replace("[Identification_MTCNumber]", "<td width='47%' style='font-size: 14px;border:1px solid #000000;border-bottom-width: 0px;border-left-width: 0px;vertical-align: text-top;text-align:left;'><span><strong>Item Description / Identification / MTC Number</strong></span></td>");
                        body = body.Replace("[HeatNumber]", "");
                        body = body.Replace("[UOM]", "<td width='10%' style='font-size: 14px;border:1px solid #000000;border-bottom-width: 0px;border-left-width: 0px; color: #000000; font-family: 'TNG Pro'; font-weight: bold;vertical-align:top;'><span><strong>UOM</strong></span></td>");
                        body = body.Replace("[POQuantity]", "<td width='10%' style='font-size: 14px;border:1px solid #000000;border-bottom-width: 0px;border-left-width: 0px; color: #000000; font-family: 'TNG Pro'; font-weight: bold;vertical-align:top;text-align:center;'><span><strong>P.O. Quantity</strong></span></td>");
                        body = body.Replace("[OfferedQuantity]", "<td width='10%' style='font-size: 14px;border:1px solid #000000;border-bottom-width: 0px;border-left-width: 0px; color: #000000; font-family: 'TNG Pro'; font-weight: bold;vertical-align:top;text-align:center;'><span><strong>Offered Quantity</strong></span></td>");
                        body = body.Replace("[AcceptableQuantity]", "<td width='10%' style='font-size: 14px;border:1px solid #000000;border-bottom-width: 0px;border-left-width: 0px; color: #000000; font-family: 'TNG Pro'; font-weight: bold;vertical-align:top;text-align:center;'><span><strong>Acceptable Quantity</strong></span></td>");
                        
                    }


                        if (ObjModelVisitReport.DTUVIndiaClientEndUser == true)
                    {
                        check11 = "<span><input type='checkbox'  value=" + ObjModelVisitReport.DTUVIndiaClientEndUser + " checked></span>";
                    }
                    else
                    {
                        check11 = "<span><input type='checkbox'  value=" + ObjModelVisitReport.DTUVIndiaClientEndUser + " ></span>";
                    }
                    if (ObjModelVisitReport.DTUVIndiaExecuting_Originating_Branch == true)
                    {
                        check12 = "<span><input type='checkbox'  value=" + ObjModelVisitReport.DTUVIndiaExecuting_Originating_Branch + " checked></span>";
                    }
                    else
                    {
                        check12 = "<span><input type='checkbox'  value=" + ObjModelVisitReport.DTUVIndiaExecuting_Originating_Branch + " ></span>";
                    }
                    if (ObjModelVisitReport.DVendor_Sub_Vendor == true)
                    {
                        check13 = "<span><input type='checkbox'  value=" + ObjModelVisitReport.DVendor_Sub_Vendor + " checked></span>";
                    }
                    else
                    {
                        check13 = "<span><input type='checkbox'  value=" + ObjModelVisitReport.DVendor_Sub_Vendor + " ></span>";
                    }


                    if (ObjModelVisitReport.Kick_Off_Pre_Inspection == true)
                    {
                        check1 = "<span><input type='checkbox'  value=" + ObjModelVisitReport.Kick_Off_Pre_Inspection + " checked></span>";
                    }
                    else
                    {
                        check1 = "<span><input type='checkbox'  value=" + ObjModelVisitReport.Kick_Off_Pre_Inspection + "></span>";
                    }
                    if (ObjModelVisitReport.Material_identification == true)
                    {
                        check2 = "<span><input type='checkbox'  value=" + ObjModelVisitReport.Material_identification + " checked></span>";
                    }
                    else
                    {
                        check2 = "<span><input type='checkbox'  value=" + ObjModelVisitReport.Material_identification + " ></span>";
                    }
                    if (ObjModelVisitReport.Interim_Stages == true)
                    {
                        check3 = "<span><input type='checkbox'  value=" + ObjModelVisitReport.Interim_Stages + " checked></span>";
                    }
                    else
                    {
                        check3 = "<span><input type='checkbox'  value=" + ObjModelVisitReport.Interim_Stages + "></span>";
                    }
                    if (ObjModelVisitReport.Document_review == true)
                    {
                        check4 = "<span><input type='checkbox'  value=" + ObjModelVisitReport.Document_review + " checked></span>";
                    }
                    else
                    {
                        check4 = "<span><input type='checkbox'  value=" + ObjModelVisitReport.Document_review + "></span>";
                    }
                    if (ObjModelVisitReport.Final_Inspection == true)
                    {
                        check5 = "<span><input type='checkbox'  value=" + ObjModelVisitReport.Final_Inspection + " checked></span>";
                    }
                    else
                    {
                        check5 = "<span><input type='checkbox'  value=" + ObjModelVisitReport.Final_Inspection + " ></span>";
                    }
                    if (ObjModelVisitReport.Re_inspection == true)
                    {
                        check6 = "<span><input type='checkbox'  value=" + ObjModelVisitReport.Re_inspection + " checked></span>";
                    }
                    else
                    {
                        check6 = "<span><input type='checkbox'  value=" + ObjModelVisitReport.Re_inspection + " ></span>";
                    }

                    if (ObjModelVisitReport.Inspection_records == true)
                    {
                        check7 = "<td width='5%' align='center' style='border:1px solid #000000;border-right-width: 0px;border-bottom-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Inspection_records + " checked></span></td>";
                    }
                    else
                    {
                        check7 = "<td width='5%' align='center' style='border:1px solid #000000;border-right-width: 0px;border-bottom-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Inspection_records + " ></span></td>";
                    }
                    if (ObjModelVisitReport.Other_Specify == true)
                    {
                        check8 = "<td width='5%' align='center' style='border:1px solid #000000;border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Other_Specify + " checked></span></td>";
                    }
                    else
                    {
                        check8 = "<td width='5%' align='center' style='border:1px solid #000000;border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Other_Specify + " ></span></td>";
                    }
                    //if (ObjModelVisitReport.Inspection_Photo == true)
                    if (imagecount > 0)
                    {
                        ObjModelVisitReport.Inspection_Photo = true;

                        check9 = "<td width='5%' align='center' style='border:1px solid #000000;border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Inspection_Photo + " checked></span></td>";
                    }
                    else
                    {
                        check9 = "<td width='5%' align='center' style='border:1px solid #000000;border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Inspection_Photo + "></span></td>";
                    }
                    if (ObjModelVisitReport.MasterListOfcalibratedInstruments == true)
                    {
                        check10 = "<td width='5%' align='center' style='border:1px solid #000000;border-right-width: 0px;border-bottom-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.MasterListOfcalibratedInstruments + " checked></span></td>";
                    }
                    else
                    {
                        check10 = "<td width='5%' align='center' style='border:1px solid #000000;border-right-width: 0px;border-bottom-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.MasterListOfcalibratedInstruments + "></span></td>";
                    }

                    //foreach (ItemDescriptionModel v in lstCompanyDashBoard)
                    //{
                    //    i = i + 1;
                    //    ItemDescriptioncontent += "<tr><td width='10%' align='center' style='font - size: 14px; color: #000; font-family: Arial;'>" + Convert.ToString(v.Po_Item_No) + "</td><td width='10%' style='font - size: 14px; color: #000; font-family: Arial;'>" + v.Item_Code + " </td><td width='30%' style='font - size: 14px; color: #000; font-family: Arial;white-space: pre-line;'>" + v.ItemCode_Description + "</td><td width='10%' style='font - size: 14px; color: #000; font-family: Arial;'>" + v.Unit + "</td><td width='10%'>" + v.Po_Quantity + "</td><td width='10%' style='font - size: 14px; color: #000; font-family: Arial;'>" + v.Offered_Quantity + "</td><td width='10%' style='font - size: 14px; color: #000; font-family: Arial;'>" + v.Accepted_Quantity + "</td></tr>";
                    //}

                    //foreach (ReferenceDocumentsModel v in RefranceDocuments)
                    //{
                    //    J = J + 1;
                    //    // ReferenceDocumentscontent += "<tr><td> " + J + " </td><td>" + Convert.ToString(v.Document_Name) + "</td><td>" + v.Document_No + " </td><td>" + v.Approval_Status + "</td></tr>";
                    //    //ReferenceDocumentscontent += "<tr><td align='center'> " + J + ')' + " </td><td style='white-space: pre-line;'>" + Convert.ToString(v.Document_Name) + "</td><td><span style='white-space: pre-line;'>" + v.Document_No + " </span></td><td style='white-space: pre-line;'>" + v.VendorDocumentNumber + "</td><td style='white-space: pre-line;'>" + v.Approval_Status + "</td></tr>";
                    //    ReferenceDocumentscontent += "<tr><td style='white-space: pre-line;vertical-align:top;text-align:center;'> " + J + ')' + " </td><td align='top' style='white-space: pre-line;vertical-align:top;'>" + Convert.ToString(v.Document_Name) + "</td><td align='top' style='white-space: pre-line;vertical-align:top;'>" + v.Document_No + " </span></td><td align='top' style='white-space: pre-line;vertical-align:top;'>" + v.VendorDocumentNumber + "</td><td  style='white-space: pre-line;vertical-align:top;'>" + v.Approval_Status + "</td></tr>";
                    //}

                    string ItemDescriptioncontentTotal = "";

                    if (ObjModelVisitReport.ItemDescriptionDynamic == "Yes" && ObjModelVisitReport.ShowCount == "Yes" && ObjModelVisitReport.DisplayTotalQuantity == "Yes")
                    {
                        //09.02.2024
                        foreach (ItemDescriptionModel v in lstCompanyDashBoard)
                        {
                            i = i + 1;

                            if (i == lstCompanyDashBoard.Count)
                                ItemDescriptioncontent += "<tr><td style = 'font-family:TNG Pro; border:1px solid #000000;vertical-align:top; text-align:center;border-bottom-width: 0px;font-size:14px;' width = '5%' align = 'center' ><span> " + Convert.ToString(v.Po_Item_No) /*+ ''*/ + " </span></td><td style = 'font-family:TNG Pro;border:1px solid #000000;vertical-align:top; text-align:left;border-left-width: 0px;border-bottom-width: 0px;font-size:14px;' width = '10%' ><span> " + v.Item_Code + " </span></td><td style = 'font-family:TNG Pro;border:1px solid #000000;vertical-align:top; text-align:left;border-left-width: 0px;border-bottom-width: 0px;font-size:14px;white-space: pre-line;' width = '35%' ><span> " + v.ItemCode_Description + " </span></td><td style = 'border:1px solid #000000;vertical-align:top; text-align:center;border-left-width: 0px;border-bottom-width: 0px;font-size:14px;' width = '10%' ><span> " + v.HeatNumber + " </span></td><td style = 'font-family:TNG Pro;border:1px solid #000000;vertical-align:top; text-align:left;border-left-width: 0px;border-bottom-width: 0px;font-size:14px;' width = '10%' ><span> " + v.Unit + " </span></td><td style = 'border:1px solid #000000;vertical-align:top; text-align:center;border-left-width: 0px;border-bottom-width: 0px;font-size:14px;' width = '10%' ><span> " + v.Po_Quantity + " </span></td><td style = 'font-family:TNG Pro;border:1px solid #000000;vertical-align:top; text-align:center;border-left-width: 0px;border-bottom-width: 0px;font-size:14px;' width = '10%' ><span> " + v.Offered_Quantity + " </span></td><td style = 'border:1px solid #000000;vertical-align:top; text-align:center;border-left-width: 0px;border-bottom-width: 0px;font-size:14px;' width = '10%' ><span> " + v.Accepted_Quantity + " </span></td></tr>";
                            else
                                ItemDescriptioncontent += "<tr><td style = 'font-family:TNG Pro; border:1px solid #000000;border-bottom-width: 0px;vertical-align:top; text-align:center;font-size:14px;' width = '5%' align = 'center' ><span> " + Convert.ToString(v.Po_Item_No) /*+ ''*/ + " </span></td><td style = 'font-family:TNG Pro;border-left-width: 0px;border:1px solid #000000;border-bottom-width: 0px;vertical-align:top; text-align:left;border-left-width: 0px;font-size:14px;' width = '10%' ><span> " + v.Item_Code + " </span></td><td style = 'font-family:TNG Pro;border-left-width: 0px;border:1px solid #000000;border-bottom-width: 0px;vertical-align:top; text-align:left;border-left-width: 0px;font-size:14px;white-space: pre-line;' width = '35%' ><span> " + v.ItemCode_Description + " </span></td><td style = 'border:1px solid #000000;vertical-align:top; text-align:center;border-left-width: 0px;border-bottom-width: 0px;font-size:14px;' width = '10%' ><span> " + v.HeatNumber + " </span></td><td style = 'font-family:TNG Pro;border:1px solid #000000;border-bottom-width: 0px;vertical-align:top; text-align:left;border-left-width: 0px;font-size:14px;' width = '10%' ><span> " + v.Unit + " </span></td><td style = 'font-family:TNG Pro;border:1px solid #000000;border-bottom-width: 0px;vertical-align:top; text-align:center;border-left-width: 0px;font-size:14px;' width = '10%' ><span> " + v.Po_Quantity + " </span></td><td style = 'font-family:TNG Pro;border:1px solid #000000;border-bottom-width: 0px;vertical-align:top; text-align:center;border-left-width: 0px;font-size:14px;' width = '10%' ><span> " + v.Offered_Quantity + " </span></td><td style = 'font-family:TNG Pro;border:1px solid #000000;border-bottom-width: 0px;vertical-align:top; text-align:center;border-left-width: 0px;font-size:14px;' width = '10%' ><span> " + v.Accepted_Quantity + " </span></td></tr>";

                        }
                        ItemDescriptioncontentTotal = "<tr><td style = 'font-family:TNG Pro; border:1px solid #000000;border-bottom-width: 0px;vertical-align:top; text-align:center;font-size:14px;' width = '5%' align = 'center' ><span> " + "" + " </span></td><td style = 'font-family:TNG Pro;border-left-width: 0px;border:1px solid #000000;border-bottom-width: 0px;vertical-align:top; text-align:left;border-left-width: 0px;font-size:14px;' width = '10%' ><span> " + "" + " </span></td><td style = 'font-family:TNG Pro;border-left-width: 0px;border:1px solid #000000;border-bottom-width: 0px;vertical-align:top; text-align:left;border-left-width: 0px;font-size:14px;white-space: pre-line;' width = '35%' ><span> " + "" + " </span></td><td style = 'border:1px solid #000000;vertical-align:top; text-align:center;border-left-width: 0px;border-bottom-width: 0px;font-size:14px;' width = '10%' ><span> " + "" + " </span></td><td style = 'font-family:TNG Pro;border:1px solid #000000;border-bottom-width: 0px;vertical-align:top; text-align:left;border-left-width: 0px;font-size:14px;' width = '10%' ><span> " + "Total" + " </span></td><td style = 'font-family:TNG Pro;border:1px solid #000000;border-bottom-width: 0px;vertical-align:top; text-align:center;border-left-width: 0px;font-size:14px;' width = '10%' ><span> " + ObjModelVisitReport.PO_QuantityTotal1 + " </span></td><td style = 'font-family:TNG Pro;border:1px solid #000000;border-bottom-width: 0px;vertical-align:top; text-align:center;border-left-width: 0px;font-size:14px;' width = '10%' ><span> " + ObjModelVisitReport.Offered_QuantityTotal1 + " </span></td><td style = 'font-family:TNG Pro;border:1px solid #000000;border-bottom-width: 0px;vertical-align:top; text-align:center;border-left-width: 0px;font-size:14px;' width = '10%' ><span> " + ObjModelVisitReport.Accepted_QuantityTotal1 + " </span></td></tr>";
                    }
                    else if (ObjModelVisitReport.ItemDescriptionDynamic == "Yes")
                    {
                        //09.02.2024 curr
                        foreach (ItemDescriptionModel v in lstCompanyDashBoard)
                        {
                            i = i + 1;

                            if (i == lstCompanyDashBoard.Count)
                                ItemDescriptioncontent += "<tr><td style = 'font-family:TNG Pro; border:1px solid #000000;vertical-align:top; text-align:center;border-bottom-width: 0px;font-size:14px;' width = '5%' align = 'center' ><span> " + Convert.ToString(v.Po_Item_No) /*+ ''*/ + " </span></td><td style = 'font-family:TNG Pro;border:1px solid #000000;vertical-align:top; text-align:left;border-left-width: 0px;border-bottom-width: 0px;font-size:14px;' width = '10%' ><span> " + v.Item_Code + " </span></td><td style = 'font-family:TNG Pro;border:1px solid #000000;vertical-align:top; text-align:left;border-left-width: 0px;border-bottom-width: 0px;font-size:14px;white-space: pre-line;' width = '35%' ><span> " + v.ItemCode_Description + " </span></td><td style = 'border:1px solid #000000;vertical-align:top; text-align:center;border-left-width: 0px;border-bottom-width: 0px;font-size:14px;' width = '10%' ><span> " + v.HeatNumber + " </span></td><td style = 'font-family:TNG Pro;border:1px solid #000000;vertical-align:top; text-align:left;border-left-width: 0px;border-bottom-width: 0px;font-size:14px;' width = '10%' ><span> " + v.Unit + " </span></td><td style = 'border:1px solid #000000;vertical-align:top; text-align:center;border-left-width: 0px;border-bottom-width: 0px;font-size:14px;' width = '10%' ><span> " + v.Po_Quantity + " </span></td><td style = 'font-family:TNG Pro;border:1px solid #000000;vertical-align:top; text-align:center;border-left-width: 0px;border-bottom-width: 0px;font-size:14px;' width = '10%' ><span> " + v.Offered_Quantity + " </span></td><td style = 'border:1px solid #000000;vertical-align:top; text-align:center;border-left-width: 0px;border-bottom-width: 0px;font-size:14px;' width = '10%' ><span> " + v.Accepted_Quantity + " </span></td></tr>";
                            else
                                ItemDescriptioncontent += "<tr><td style = 'font-family:TNG Pro; border:1px solid #000000;border-bottom-width: 0px;vertical-align:top; text-align:center;font-size:14px;' width = '5%' align = 'center' ><span> " + Convert.ToString(v.Po_Item_No) /*+ ''*/ + " </span></td><td style = 'font-family:TNG Pro;border-left-width: 0px;border:1px solid #000000;border-bottom-width: 0px;vertical-align:top; text-align:left;border-left-width: 0px;font-size:14px;' width = '10%' ><span> " + v.Item_Code + " </span></td><td style = 'font-family:TNG Pro;border-left-width: 0px;border:1px solid #000000;border-bottom-width: 0px;vertical-align:top; text-align:left;border-left-width: 0px;font-size:14px;white-space: pre-line;' width = '35%' ><span> " + v.ItemCode_Description + " </span></td><td style = 'border:1px solid #000000;vertical-align:top; text-align:center;border-left-width: 0px;border-bottom-width: 0px;font-size:14px;' width = '10%' ><span> " + v.HeatNumber + " </span></td><td style = 'font-family:TNG Pro;border:1px solid #000000;border-bottom-width: 0px;vertical-align:top; text-align:left;border-left-width: 0px;font-size:14px;' width = '10%' ><span> " + v.Unit + " </span></td><td style = 'font-family:TNG Pro;border:1px solid #000000;border-bottom-width: 0px;vertical-align:top; text-align:center;border-left-width: 0px;font-size:14px;' width = '10%' ><span> " + v.Po_Quantity + " </span></td><td style = 'font-family:TNG Pro;border:1px solid #000000;border-bottom-width: 0px;vertical-align:top; text-align:center;border-left-width: 0px;font-size:14px;' width = '10%' ><span> " + v.Offered_Quantity + " </span></td><td style = 'font-family:TNG Pro;border:1px solid #000000;border-bottom-width: 0px;vertical-align:top; text-align:center;border-left-width: 0px;font-size:14px;' width = '10%' ><span> " + v.Accepted_Quantity + " </span></td></tr>";

                        }
                        //ItemDescriptioncontentTotal = "<tr><td style = 'font-family:TNG Pro; border:1px solid #000000;border-bottom-width: 0px;vertical-align:top; text-align:center;font-size:14px;' width = '5%' align = 'center' ><span> " + "" + " </span></td><td style = 'font-family:TNG Pro;border-left-width: 0px;border:1px solid #000000;border-bottom-width: 0px;vertical-align:top; text-align:left;border-left-width: 0px;font-size:14px;' width = '10%' ><span> " + "" + " </span></td><td style = 'font-family:TNG Pro;border-left-width: 0px;border:1px solid #000000;border-bottom-width: 0px;vertical-align:top; text-align:left;border-left-width: 0px;font-size:14px;white-space: pre-line;' width = '35%' ><span> " + "" + " </span></td><td style = 'font-family:TNG Pro;border:1px solid #000000;border-bottom-width: 0px;vertical-align:top; text-align:left;border-left-width: 0px;font-size:14px;' width = '10%' ><span> " + "Total" + " </span></td><td style = 'font-family:TNG Pro;border:1px solid #000000;border-bottom-width: 0px;vertical-align:top; text-align:center;border-left-width: 0px;font-size:14px;' width = '10%' ><span> " + ObjModelVisitReport.PO_QuantityTotal1 + " </span></td><td style = 'font-family:TNG Pro;border:1px solid #000000;border-bottom-width: 0px;vertical-align:top; text-align:center;border-left-width: 0px;font-size:14px;' width = '10%' ><span> " + ObjModelVisitReport.Offered_QuantityTotal1 + " </span></td><td style = 'font-family:TNG Pro;border:1px solid #000000;border-bottom-width: 0px;vertical-align:top; text-align:center;border-left-width: 0px;font-size:14px;' width = '10%' ><span> " + ObjModelVisitReport.Accepted_QuantityTotal1 + " </span></td><td style = 'border:1px solid #000000;vertical-align:top; text-align:center;border-left-width: 0px;border-bottom-width: 0px;font-size:14px;' width = '10%' ><span> " + "" + " </span></td></tr>";
                    }
                    else if (ObjModelVisitReport.DisplayTotalQuantity == "Yes")
                    {
                        foreach (ItemDescriptionModel v in lstCompanyDashBoard)
                        {
                            i = i + 1;
                            //ItemDescriptioncontent += "<tr><td width='3%' align='center' style='font - size: 14px; color: #000; font-family: Arial;vertical-align:top;'>" + Convert.ToString(v.Po_Item_No) + "</td><td width='10%' style='font - size: 14px; color: #000; font-family: Arial;vertical-align:top;text-align:left;'>" + v.Item_Code + " </td><td width='47%' style='font - size: 14px; color: #000; font-family: Arial;;vertical-align:top;text-align:left;'>" + v.ItemCode_Description + "</td><td width='10%' style='font - size: 14px; color: #000; font-family: Arial;vertical-align:top;text-align:left;'>" + v.Unit + "</td><td width='10%' style='vertical-align:top;text-align:center;'>" + v.Po_Quantity + "</td><td width='10%' style='font - size: 14px; color: #000; font-family: Arial;vertical-align:top;text-align:center;'>" + v.Offered_Quantity + "</td><td width='10%' style='font - size: 14px; color: #000; font-family: Arial;vertical-align:top;text-align:center;'>" + v.Accepted_Quantity + "</td></tr>";
                            //if (i == lstCompanyDashBoard.Count)
                            //    ItemDescriptioncontent += "<tr><td style = ' border:1px solid color: #000;vertical-align:top; text-align:center;' width = '5%' align = 'center' ><span> " + Convert.ToString(v.Po_Item_No) /*+ ''*/ + " </span></td><td style = 'border-left-width: 0px;border:1px solid color: #000;vertical-align:top; text-align:left;border-left-width: 0px;' width = '10%' ><span> " + v.Item_Code + " </span></td><td style = 'border-left-width: 0px;border:1px solid color: #000;vertical-align:top; text-align:left;border-left-width: 0px;' width = '35%' ><span> " + v.ItemCode_Description + " </span></td><td style = 'border:1px solid color: #000;vertical-align:top; text-align:left;border-right-width: 0px;border-left-width: 0px;' width = '10%' ><span> " + v.Unit + " </span></td><td style = 'border:1px solid color: #000;vertical-align:top; text-align:center;' width = '10%' ><span> " + v.Po_Quantity + " </span></td><td style = 'border:1px solid color: #000;vertical-align:top; text-align:center;border-left-width: 0px;' width = '10%' ><span> " + v.Offered_Quantity + " </span></td><td style = 'border:1px solid color: #000;vertical-align:top; text-align:center;border-left-width: 0px;' width = '10%' ><span> " + v.Accepted_Quantity + " </span></td></tr>";
                            //else
                            //    ItemDescriptioncontent += "<tr><td style = ' border:1px solid  color: #000;border-bottom-width: 0px;vertical-align:top; text-align:center;' width = '5%' align = 'center' ><span> " + Convert.ToString(v.Po_Item_No) /*+ ''*/ + " </span></td><td style = 'border-left-width: 0px;border:1px solid color: #000;border-bottom-width: 0px;vertical-align:top; text-align:left;border-left-width: 0px;' width = '10%' ><span> " + v.Item_Code + " </span></td><td style = 'border-left-width: 0px;border:1px solid color: #000;border-bottom-width: 0px;vertical-align:top; text-align:left;border-left-width: 0px;' width = '35%' ><span> " + v.ItemCode_Description + " </span></td><td style = 'border:1px solid color: #000;border-bottom-width: 0px;vertical-align:top; text-align:left;border-left-width: 0px;' width = '10%' ><span> " + v.Unit + " </span></td><td style = 'border:1px solid color: #000;border-bottom-width: 0px;vertical-align:top; text-align:center;border-left-width: 0px;' width = '10%' ><span> " + v.Po_Quantity + " </span></td><td style = 'border:1px solid color: #000;border-bottom-width: 0px;vertical-align:top; text-align:center;border-left-width: 0px;' width = '10%' ><span> " + v.Offered_Quantity + " </span></td><td style = 'border:1px color: #000;border-bottom-width: 0px;vertical-align:top; text-align:center;border-left-width: 0px;' width = '10%' ><span> " + v.Accepted_Quantity + " </span></td></tr>";
                            if (i == lstCompanyDashBoard.Count)
                                ItemDescriptioncontent += "<tr><td style = 'font-family:TNG Pro; border:1px solid #000000;vertical-align:top; text-align:center;border-bottom-width: 0px;font-size:14px;' width = '5%' align = 'center' ><span> " + Convert.ToString(v.Po_Item_No) /*+ ''*/ + " </span></td><td style = 'font-family:TNG Pro;border:1px solid #000000;vertical-align:top; text-align:left;border-left-width: 0px;border-bottom-width: 0px;font-size:14px;' width = '10%' ><span> " + v.Item_Code + " </span></td><td style = 'font-family:TNG Pro;border:1px solid #000000;vertical-align:top; text-align:left;border-left-width: 0px;border-bottom-width: 0px;font-size:14px;white-space: pre-line;' width = '35%' ><span> " + v.ItemCode_Description + " </span></td><td style = 'font-family:TNG Pro;border:1px solid #000000;vertical-align:top; text-align:left;border-left-width: 0px;border-bottom-width: 0px;font-size:14px;' width = '10%' ><span> " + v.Unit + " </span></td><td style = 'border:1px solid #000000;vertical-align:top; text-align:center;border-left-width: 0px;border-bottom-width: 0px;font-size:14px;' width = '10%' ><span> " + v.Po_Quantity + " </span></td><td style = 'font-family:TNG Pro;border:1px solid #000000;vertical-align:top; text-align:center;border-left-width: 0px;border-bottom-width: 0px;font-size:14px;' width = '10%' ><span> " + v.Offered_Quantity + " </span></td><td style = 'border:1px solid #000000;vertical-align:top; text-align:center;border-left-width: 0px;border-bottom-width: 0px;font-size:14px;' width = '10%' ><span> " + v.Accepted_Quantity + " </span></td></tr>";
                            else
                                ItemDescriptioncontent += "<tr><td style = 'font-family:TNG Pro; border:1px solid #000000;border-bottom-width: 0px;vertical-align:top; text-align:center;font-size:14px;' width = '5%' align = 'center' ><span> " + Convert.ToString(v.Po_Item_No) /*+ ''*/ + " </span></td><td style = 'font-family:TNG Pro;border-left-width: 0px;border:1px solid #000000;border-bottom-width: 0px;vertical-align:top; text-align:left;border-left-width: 0px;font-size:14px;' width = '10%' ><span> " + v.Item_Code + " </span></td><td style = 'font-family:TNG Pro;border-left-width: 0px;border:1px solid #000000;border-bottom-width: 0px;vertical-align:top; text-align:left;border-left-width: 0px;font-size:14px;white-space: pre-line;' width = '35%' ><span> " + v.ItemCode_Description + " </span></td><td style = 'font-family:TNG Pro;border:1px solid #000000;border-bottom-width: 0px;vertical-align:top; text-align:left;border-left-width: 0px;font-size:14px;' width = '10%' ><span> " + v.Unit + " </span></td><td style = 'font-family:TNG Pro;border:1px solid #000000;border-bottom-width: 0px;vertical-align:top; text-align:center;border-left-width: 0px;font-size:14px;' width = '10%' ><span> " + v.Po_Quantity + " </span></td><td style = 'font-family:TNG Pro;border:1px solid #000000;border-bottom-width: 0px;vertical-align:top; text-align:center;border-left-width: 0px;font-size:14px;' width = '10%' ><span> " + v.Offered_Quantity + " </span></td><td style = 'font-family:TNG Pro;border:1px solid #000000;border-bottom-width: 0px;vertical-align:top; text-align:center;border-left-width: 0px;font-size:14px;' width = '10%' ><span> " + v.Accepted_Quantity + " </span></td></tr>";

                        }
                        ItemDescriptioncontentTotal = "<tr><td style = 'font-family:TNG Pro;border:1px solid #000000;border-bottom-width: 0px;vertical-align:top; text-align:left;font-size:14px;' width = '10%' ><span> " + "" + " </span></td><td style = 'font-family:TNG Pro;border-left-width: 0px;border:1px solid #000000;border-bottom-width: 0px;vertical-align:top; text-align:left;border-left-width: 0px;font-size:14px;white-space: pre-line;' width = '35%' ><span> " + "" + " </span></td><td style = 'border:1px solid #000000;vertical-align:top; text-align:center;border-left-width: 0px;border-bottom-width: 0px;font-size:14px;' width = '10%' ><span> " + "" + " </span></td><td style = 'font-family:TNG Pro;border:1px solid #000000;border-bottom-width: 0px;vertical-align:top; text-align:left;border-left-width: 0px;font-size:14px;' width = '10%' ><span> " + "Total" + " </span></td><td style = 'font-family:TNG Pro;border:1px solid #000000;border-bottom-width: 0px;vertical-align:top; text-align:center;border-left-width: 0px;font-size:14px;' width = '10%' ><span> " + ObjModelVisitReport.PO_QuantityTotal1 + " </span></td><td style = 'font-family:TNG Pro;border:1px solid #000000;border-bottom-width: 0px;vertical-align:top; text-align:center;border-left-width: 0px;font-size:14px;' width = '10%' ><span> " + ObjModelVisitReport.Offered_QuantityTotal1 + " </span></td><td style = 'font-family:TNG Pro;border:1px solid #000000;border-bottom-width: 0px;vertical-align:top; text-align:center;border-left-width: 0px;font-size:14px;' width = '10%' ><span> " + ObjModelVisitReport.Accepted_QuantityTotal1 + " </span></td></tr>";
                    }
                    else
                    {
                        foreach (ItemDescriptionModel v in lstCompanyDashBoard)
                        {
                            i = i + 1;
                            //ItemDescriptioncontent += "<tr><td width='3%' align='center' style='font - size: 14px; color: #000; font-family: Arial;vertical-align:top;'>" + Convert.ToString(v.Po_Item_No) + "</td><td width='10%' style='font - size: 14px; color: #000; font-family: Arial;vertical-align:top;text-align:left;'>" + v.Item_Code + " </td><td width='47%' style='font - size: 14px; color: #000; font-family: Arial;;vertical-align:top;text-align:left;'>" + v.ItemCode_Description + "</td><td width='10%' style='font - size: 14px; color: #000; font-family: Arial;vertical-align:top;text-align:left;'>" + v.Unit + "</td><td width='10%' style='vertical-align:top;text-align:center;'>" + v.Po_Quantity + "</td><td width='10%' style='font - size: 14px; color: #000; font-family: Arial;vertical-align:top;text-align:center;'>" + v.Offered_Quantity + "</td><td width='10%' style='font - size: 14px; color: #000; font-family: Arial;vertical-align:top;text-align:center;'>" + v.Accepted_Quantity + "</td></tr>";
                            //if (i == lstCompanyDashBoard.Count)
                            //    ItemDescriptioncontent += "<tr><td style = ' border:1px solid color: #000;vertical-align:top; text-align:center;' width = '5%' align = 'center' ><span> " + Convert.ToString(v.Po_Item_No) /*+ ''*/ + " </span></td><td style = 'border-left-width: 0px;border:1px solid color: #000;vertical-align:top; text-align:left;border-left-width: 0px;' width = '10%' ><span> " + v.Item_Code + " </span></td><td style = 'border-left-width: 0px;border:1px solid color: #000;vertical-align:top; text-align:left;border-left-width: 0px;' width = '35%' ><span> " + v.ItemCode_Description + " </span></td><td style = 'border:1px solid color: #000;vertical-align:top; text-align:left;border-right-width: 0px;border-left-width: 0px;' width = '10%' ><span> " + v.Unit + " </span></td><td style = 'border:1px solid color: #000;vertical-align:top; text-align:center;' width = '10%' ><span> " + v.Po_Quantity + " </span></td><td style = 'border:1px solid color: #000;vertical-align:top; text-align:center;border-left-width: 0px;' width = '10%' ><span> " + v.Offered_Quantity + " </span></td><td style = 'border:1px solid color: #000;vertical-align:top; text-align:center;border-left-width: 0px;' width = '10%' ><span> " + v.Accepted_Quantity + " </span></td></tr>";
                            //else
                            //    ItemDescriptioncontent += "<tr><td style = ' border:1px solid  color: #000;border-bottom-width: 0px;vertical-align:top; text-align:center;' width = '5%' align = 'center' ><span> " + Convert.ToString(v.Po_Item_No) /*+ ''*/ + " </span></td><td style = 'border-left-width: 0px;border:1px solid color: #000;border-bottom-width: 0px;vertical-align:top; text-align:left;border-left-width: 0px;' width = '10%' ><span> " + v.Item_Code + " </span></td><td style = 'border-left-width: 0px;border:1px solid color: #000;border-bottom-width: 0px;vertical-align:top; text-align:left;border-left-width: 0px;' width = '35%' ><span> " + v.ItemCode_Description + " </span></td><td style = 'border:1px solid color: #000;border-bottom-width: 0px;vertical-align:top; text-align:left;border-left-width: 0px;' width = '10%' ><span> " + v.Unit + " </span></td><td style = 'border:1px solid color: #000;border-bottom-width: 0px;vertical-align:top; text-align:center;border-left-width: 0px;' width = '10%' ><span> " + v.Po_Quantity + " </span></td><td style = 'border:1px solid color: #000;border-bottom-width: 0px;vertical-align:top; text-align:center;border-left-width: 0px;' width = '10%' ><span> " + v.Offered_Quantity + " </span></td><td style = 'border:1px color: #000;border-bottom-width: 0px;vertical-align:top; text-align:center;border-left-width: 0px;' width = '10%' ><span> " + v.Accepted_Quantity + " </span></td></tr>";
                            if (i == lstCompanyDashBoard.Count)
                                ItemDescriptioncontent += "<tr><td style = 'font-family:TNG Pro; border:1px solid #000000;vertical-align:top; text-align:center;border-bottom-width: 0px;font-size:14px;' width = '5%' align = 'center' ><span> " + Convert.ToString(v.Po_Item_No) /*+ ''*/ + " </span></td><td style = 'font-family:TNG Pro;border:1px solid #000000;vertical-align:top; text-align:left;border-left-width: 0px;border-bottom-width: 0px;font-size:14px;' width = '10%' ><span> " + v.Item_Code + " </span></td><td style = 'font-family:TNG Pro;border:1px solid #000000;vertical-align:top; text-align:left;border-left-width: 0px;border-bottom-width: 0px;font-size:14px;white-space: pre-line;' width = '35%' ><span> " + v.ItemCode_Description + " </span></td><td style = 'font-family:TNG Pro;border:1px solid #000000;vertical-align:top; text-align:left;border-left-width: 0px;border-bottom-width: 0px;font-size:14px;' width = '10%' ><span> " + v.Unit + " </span></td><td style = 'border:1px solid #000000;vertical-align:top; text-align:center;border-left-width: 0px;border-bottom-width: 0px;font-size:14px;' width = '10%' ><span> " + v.Po_Quantity + " </span></td><td style = 'font-family:TNG Pro;border:1px solid #000000;vertical-align:top; text-align:center;border-left-width: 0px;border-bottom-width: 0px;font-size:14px;' width = '10%' ><span> " + v.Offered_Quantity + " </span></td><td style = 'border:1px solid #000000;vertical-align:top; text-align:center;border-left-width: 0px;border-bottom-width: 0px;font-size:14px;' width = '10%' ><span> " + v.Accepted_Quantity + " </span></td></tr>";
                            else
                                ItemDescriptioncontent += "<tr><td style = 'font-family:TNG Pro; border:1px solid #000000;border-bottom-width: 0px;vertical-align:top; text-align:center;font-size:14px;' width = '5%' align = 'center' ><span> " + Convert.ToString(v.Po_Item_No) /*+ ''*/ + " </span></td><td style = 'font-family:TNG Pro;border-left-width: 0px;border:1px solid #000000;border-bottom-width: 0px;vertical-align:top; text-align:left;border-left-width: 0px;font-size:14px;' width = '10%' ><span> " + v.Item_Code + " </span></td><td style = 'font-family:TNG Pro;border-left-width: 0px;border:1px solid #000000;border-bottom-width: 0px;vertical-align:top; text-align:left;border-left-width: 0px;font-size:14px;white-space: pre-line;' width = '35%' ><span> " + v.ItemCode_Description + " </span></td><td style = 'font-family:TNG Pro;border:1px solid #000000;border-bottom-width: 0px;vertical-align:top; text-align:left;border-left-width: 0px;font-size:14px;' width = '10%' ><span> " + v.Unit + " </span></td><td style = 'font-family:TNG Pro;border:1px solid #000000;border-bottom-width: 0px;vertical-align:top; text-align:center;border-left-width: 0px;font-size:14px;' width = '10%' ><span> " + v.Po_Quantity + " </span></td><td style = 'font-family:TNG Pro;border:1px solid #000000;border-bottom-width: 0px;vertical-align:top; text-align:center;border-left-width: 0px;font-size:14px;' width = '10%' ><span> " + v.Offered_Quantity + " </span></td><td style = 'font-family:TNG Pro;border:1px solid #000000;border-bottom-width: 0px;vertical-align:top; text-align:center;border-left-width: 0px;font-size:14px;' width = '10%' ><span> " + v.Accepted_Quantity + " </span></td></tr>";

                        }
                       // ItemDescriptioncontentTotal = "<tr><td style = 'font-family:TNG Pro; border:1px solid #000000;border-bottom-width: 0px;vertical-align:top; text-align:center;font-size:14px;' width = '5%' align = 'center' ><span> " + "Total" + " </span></td><td style = 'font-family:TNG Pro;border-left-width: 0px;border:1px solid #000000;border-bottom-width: 0px;vertical-align:top; text-align:left;border-left-width: 0px;font-size:14px;' width = '10%' ><span> " + "" + " </span></td><td style = 'font-family:TNG Pro;border-left-width: 0px;border:1px solid #000000;border-bottom-width: 0px;vertical-align:top; text-align:left;border-left-width: 0px;font-size:14px;white-space: pre-line;' width = '35%' ><span> " + "" + " </span></td><td style = 'font-family:TNG Pro;border:1px solid #000000;border-bottom-width: 0px;vertical-align:top; text-align:left;border-left-width: 0px;font-size:14px;' width = '10%' ><span> " + "" + " </span></td><td style = 'font-family:TNG Pro;border:1px solid #000000;border-bottom-width: 0px;vertical-align:top; text-align:center;border-left-width: 0px;font-size:14px;' width = '10%' ><span> " + "" + " </span></td><td style = 'font-family:TNG Pro;border:1px solid #000000;border-bottom-width: 0px;vertical-align:top; text-align:center;border-left-width: 0px;font-size:14px;' width = '10%' ><span> " + "" + " </span></td><td style = 'font-family:TNG Pro;border:1px solid #000000;border-bottom-width: 0px;vertical-align:top; text-align:center;border-left-width: 0px;font-size:14px;' width = '10%' ><span> " + "" + " </span></td><td style = 'border:1px solid #000000;vertical-align:top; text-align:center;border-left-width: 0px;border-bottom-width: 0px;font-size:14px;' width = '10%' ><span> " + "" + " </span></td></tr>";
                    }
                    
                    


                    foreach (ReferenceDocumentsModel v in RefranceDocuments)
                    {
                        J = J + 1;
                        // ReferenceDocumentscontent += "<tr><td> " + J + " </td><td>" + Convert.ToString(v.Document_Name) + "</td><td>" + v.Document_No + " </td><td>" + v.Approval_Status + "</td></tr>";
                        //ReferenceDocumentscontent += "<tr><td align='center'> " + J + ')' + " </td><td style='white-space: pre-line;'>" + Convert.ToString(v.Document_Name) + "</td><td><span style='white-space: pre-line;'>" + v.Document_No + " </span></td><td style='white-space: pre-line;'>" + v.VendorDocumentNumber + "</td><td style='white-space: pre-line;'>" + v.Approval_Status + "</td></tr>";
                        // ReferenceDocumentscontent += "<tr><td style='border:1px solid #000000;white-space: pre-line;vertical-align:top;text-align:center;border-left-width: 0px;border-bottom-width: 0px;color: #000;'> " + J + " </td><td align='top' style='border:1px solid #000000;white-space: pre-line;vertical-align:top;border-bottom-width: 0px;border-left-width: 0px;color: #000;'>" + Convert.ToString(v.Document_Name) + "</td><td align='top' style='border:1px solid #000000;white-space: pre-line;vertical-align:top;border-bottom-width: 0px;border-left-width: 0px;color: #000;'>" + v.Document_No + " </span></td><td align='top' style='border:1px solid #000000;white-space: pre-line;vertical-align:top;border-bottom-width: 0px;border-left-width: 0px;color: #000;'>" + v.VendorDocumentNumber + "</td><td  style='border:1px solid #000000;white-space: pre-line;vertical-align:top;border-bottom-width: 0px;border-left-width: 0px;color: #000;'>" + v.Approval_Status + "</td></tr>";

                        if (J == RefranceDocuments.Count)
                            ReferenceDocumentscontent += "<tr><td width='2%' style='font-family:TNG Pro;border:1px solid #000000;white-space: pre-line;vertical-align:top;text-align:center;border-left-width: 0px;border-bottom-width: 0px;color: #000;border-left-width: 0px;font-size:14px;'> " + J + " </td><td width='17%' align='top' style='font-family:TNG Pro;border:1px solid #000000;white-space: pre-line;vertical-align:top;border-bottom-width: 0px;border-left-width: 0px;color: #000;font-size:14px;'>" + Convert.ToString(v.Document_Name) + "</td><td width='27%' align='top' style='font-family:TNG Pro;border:1px solid #000000;white-space: pre-line;vertical-align:top;border-bottom-width: 0px;border-left-width: 0px;color: #000;font-size:14px;'>" + v.Document_No + " </span></td><td width='27%' align='top' style='font-family:TNG Pro;border:1px solid #000000;white-space: pre-line;vertical-align:top;border-bottom-width: 0px;border-left-width: 0px;color: #000;font-size:14px;'>" + v.VendorDocumentNumber + "</td><td width='27%' style='font-family:TNG Pro;border:1px solid #000000;white-space: pre-line;vertical-align:top;border-bottom-width: 0px;border-left-width: 0px;border-right-width: 1px;color: #000;font-size:14px;'>" + v.Approval_Status + "</td></tr>";
                        else
                            ReferenceDocumentscontent += "<tr><td width='2%' style='font-family:TNG Pro;border:1px solid #000000;white-space: pre-line;vertical-align:top;text-align:center;border-left-width: 0px;border-bottom-width: 0px;color: #000;border-left-width: 0px;font-size:14px;'> " + J + " </td><td width='17%' align='top' style='font-family:TNG Pro;border:1px solid #000000;white-space: pre-line;vertical-align:top;border-bottom-width: 0px;border-left-width: 0px;color: #000;font-size:14px;'>" + Convert.ToString(v.Document_Name) + "</td><td width='27%' align='top' style='font-family:TNG Pro;border:1px solid #000000;white-space: pre-line;vertical-align:top;border-bottom-width: 0px;border-left-width: 0px;color: #000;font-size:14px;'>" + v.Document_No + " </span></td><td width='27%' align='top' style='font-family:TNG Pro;border:1px solid #000000;white-space: pre-line;vertical-align:top;border-bottom-width: 0px;border-left-width: 0px;color: #000;font-size:14px;'>" + v.VendorDocumentNumber + "</td><td width='27%' style='font-family:TNG Pro;border:1px solid #000000;white-space: pre-line;vertical-align:top;border-bottom-width: 0px;border-left-width: 0px;border-right-width: 1px;color: #000;font-size:14px;'>" + v.Approval_Status + "</td></tr>";

                    }
                    foreach (InspectionActivitiesModel v in InspectionDocuments)
                    {
                        K = K + 1;
                        // InspectionDocumentsContent += "<tr><td width='10%' align='center'> " + K + ')' + " </td><td width='90%' colspan='5'><span style='font-size: 14px;white-space: pre-line;'>" + Convert.ToString(v.Stages_Witnessed) + "</span></td></tr>";
                        InspectionDocumentsContent += "<tr><td style='font-family:TNG Pro;border:1px solid #000000;border-left-width: 0px;border-bottom-width: 0px;color: #000;vertical-align:top;font-size:14px;' width='5%' align='center'> " + K + " </td><td width='95%' colspan='5' style='font-family:TNG Pro;border:1px solid #000000;border-left-width: 0px;border-bottom-width: 0px;color: #000;font-size:14px;'><span style='font-size: 14px;white-space: pre-line;'>" + Convert.ToString(v.Stages_Witnessed) + "</span></td></tr>";
                    }
                    foreach (DocumentRevieweModel v in DocumentReview)
                    {
                        L = L + 1;
                        //DocumentreviewContent += "<tr><td width='10%' align='center'><span> " + L + ')' + " </span></td><td width='90%' colspan='5'><span style='font-size:14px;white-space: pre-line;'>" + Convert.ToString(v.Description) + "</span></td></tr>";
                        DocumentreviewContent += "<tr><td style='font-family:TNG Pro;border-left-width: 0px;border-bottom-width: 0px;color: #000;vertical-align:top;font-size:14px;' width='5%' align='center'><span> " + L + " </span></td><td style='font-family:TNG Pro;border:1px solid #000000;border-left-width: 0px;border-bottom-width: 0px;color: #000;font-size:14px;' width='95%' colspan='5'><span style='border-left-width: 0px;border-bottom-width: 0px;color: #000;font-size:14px;white-space: pre-line;'>" + Convert.ToString(v.Description) + "</span></td></tr>";
                    }


                    foreach (EquipmentDetailsModel v in EquipmentDetails)
                    {
                        if (v.NABLseenote1 == true)
                        {
                            // checkNABL = "<td > " + M + " </td> <td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + v.NABLseenote1 + " checked></span></td>";
                            checkNABL = "<td style='border:1px solid #000000;border-left-width: 0px;border-bottom-width: 0px;color: #000;vertical-align:top;font-size:14px;'> " + M + " </td> <td width='5%' align='center' style='border:1px solid #000000;border-left-width: 0px;border-bottom-width: 0px;color: #000;text-align:center;font-size:14px;'><span><input type='checkbox'  value=" + v.NABLseenote1 + " checked></span></td>";
                        }
                        else
                        {
                            //checkNABL = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + v.NABLseenote1 + "></span></td>";
                            checkNABL = "<td width='5%' align='center' style='border:1px solid #000000;border-left-width: 0px;border-bottom-width: 0px;color: #000;text-align:center;font-size:14px;'><span><input type='checkbox'  value=" + v.NABLseenote1 + "></span></td>";
                        }
                    }


                    dtAreasOfConcernOnPDF = objDalVisitReport.GetAreasOfConcernOnPDF(PK_CALL_ID);
                    if (dtAreasOfConcernOnPDF.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtAreasOfConcernOnPDF.Rows)
                        {
                            lstAreasOfConcernOnPDF.Add(
                                new InspectionvisitReportModel
                                {
                                    PDF_Type = Convert.ToString(dr["PDF_Type"]),
                                    PDF_Description = Convert.ToString(dr["PDF_Description"]),
                                    PDF_MitigatedBy = Convert.ToString(dr["PDF_MitigatedBy"]),
                                    PDF_MitigatedDate = Convert.ToString(dr["PDF_MitigatedDate"]),
                                    PDF_RaisedBy = Convert.ToString(dr["PDF_RaisedBy"]),
                                    PDF_ReportNo = Convert.ToString(dr["PDF_ReportNo"]),
                                    PDF_PreviousComment = Convert.ToString(dr["PDF_PreviousComment"]),
                                    PDF_Status = Convert.ToString(dr["PDF_Status"]),
                                }
                                );
                        }
                    }

                    if (ObjModelVisitReport.PDF_IfConcernsDisplayOfPDF == "Yes")
                    {
                        AreaOfConcernOnPDFHeading += " <tr><td colspan='7' style='border: 1px solid #000000;border-bottom-width: 0px;border-top-width: 0px;background-color: #D7DBDD;padding-top: -1em;padding-bottom: -1em;border-left-width: 0px;'><span style='font-size: 14px; color: #000; font-family: 'TNG Pro'; font-weight: bold;'>Concern:</span></td></tr>                <tr><td width='5 % ' style='border - left - width: 0px; '><span style='font - size: 14px; color: #000; font-family: 'TNG Pro';vertical-align:top;'><strong>Type </strong></span></td><td width='45%' style='border-left-width: 0px;'><span style='font-size: 14px; color: #000; font-family: 'TNG Pro';vertical-align:top;'><strong>Description </strong></span></td><td width='10%' style='border-left-width: 0px;'><span style='font-size: 14px; color: #000; font-family: 'TNG Pro';vertical-align:top;'><strong>MitigatedBy </strong></span></td><td width='10%' style='border-left-width: 0px;'><span style='font-size: 14px; color: #000; font-family: 'TNG Pro';vertical-align:top;'><strong>MitigatedDate </strong></span></td><td width='10%' style='border-left-width: 0px;'><span style='font-size: 14px; color: #000; font-family: 'TNG Pro';vertical-align:top;'><strong>RaisedBy </strong></span></td><td width='10%' style='border-left-width: 0px;'><span style='font-size: 14px; color: #000; font-family: 'TNG Pro';vertical-align:top;'><strong>ReportNo </strong></span></td><td width='10%' style='border-left-width: 0px;'><span style='font-size: 14px; color: #000; font-family: 'TNG Pro';vertical-align:top;'><strong>Status</strong></span></td></tr>   ";
                    }
                    else
                    {
                        AreaOfConcernOnPDFHeading += "";
                    }

                    if (ObjModelVisitReport.PDF_IfConcernsDisplayOfPDF == "Yes")
                    {
                        foreach (InspectionvisitReportModel ac in lstAreasOfConcernOnPDF)
                        {

                            //   i = i + 1;
                            //if (i == lstAreasOfConcernOnPDF.Count)
                            //AreaOfConcernOnPDF += "<tr><td style = 'font-family:TNG Pro; border:1px solid #000000;vertical-align:top; text-align:center;font-size:14px;border-left-width: 0px;border-top-width: 0px;' width = '5%' align = 'center' ><span> " + Convert.ToString(ac.PDF_Type) /*+ ''*/ + " </span></td><td style = 'font-family:TNG Pro; border:1px solid #000000;vertical-align:top; text-align:center;border-top-width: 0px;font-size:14px;border-left-width: 0px;' width = '45%' align = 'center' ><span> " + Convert.ToString(ac.PDF_Description) /*+ ''*/ + " </span></td><td style = 'font-family:TNG Pro; border:1px solid #000000;vertical-align:top; text-align:center;font-size:14px;border-left-width: 0px;border-top-width: 0px;' width = '10%' align = 'center' ><span> " + Convert.ToString(ac.PDF_MitigatedBy) /*+ ''*/ + " </span></td><td style = 'font-family:TNG Pro; border:1px solid #000000;vertical-align:top; text-align:center;font-size:14px;border-left-width: 0px;border-top-width: 0px;' width = '10%' align = 'center' ><span> " + Convert.ToString(ac.PDF_MitigatedDate) /*+ ''*/ + " </span></td><td style = 'font-family:TNG Pro; border:1px solid #000000;vertical-align:top; text-align:center;font-size:14px;border-left-width: 0px;border-top-width: 0px;' width = '10%' align = 'center' ><span> " + Convert.ToString(ac.PDF_RaisedBy) /*+ ''*/ + " </span></td><td style = 'font-family:TNG Pro; border:1px solid #000000;vertical-align:top; text-align:center;font-size:14px;border-left-width: 0px;border-top-width: 0px;' width = '10%' align = 'center' ><span> " + Convert.ToString(ac.PDF_ReportNo) /*+ ''*/ + " </span></td><td style = 'font-family:TNG Pro; border:1px solid #000000;vertical-align:top; text-align:center;font-size:14px;border-left-width: 0px;border-top-width: 0px;' width = '10%' align = 'center' ><span> " + Convert.ToString(ac.PDF_PreviousComment) /*+ ''*/ + " </span></td></tr>";

                            AreaOfConcernOnPDF += " <tr><td style = 'font-family:TNG Pro; border:1px solid #000000;vertical-align:top; text-align:center;font-size:14px;border-left-width: 0px;border-top-width: 0px;' width = '5%' align = 'center' ><span> " + Convert.ToString(ac.PDF_Type) /*+ ''*/ + " </span></td><td style = 'font-family:TNG Pro; border:1px solid #000000;vertical-align:top; text-align:center;border-top-width: 0px;font-size:14px;border-left-width: 0px;' width = '45%' align = 'center' ><span> " + Convert.ToString(ac.PDF_Description) /*+ ''*/ + " </span></td><td style = 'font-family:TNG Pro; border:1px solid #000000;vertical-align:top; text-align:center;font-size:14px;border-left-width: 0px;border-top-width: 0px;' width = '10%' align = 'center' ><span> " + Convert.ToString(ac.PDF_MitigatedBy) /*+ ''*/ + " </span></td><td style = 'font-family:TNG Pro; border:1px solid #000000;vertical-align:top; text-align:center;font-size:14px;border-left-width: 0px;border-top-width: 0px;' width = '10%' align = 'center' ><span> " + Convert.ToString(ac.PDF_MitigatedDate) /*+ ''*/ + " </span></td><td style = 'font-family:TNG Pro; border:1px solid #000000;vertical-align:top; text-align:center;font-size:14px;border-left-width: 0px;border-top-width: 0px;' width = '10%' align = 'center' ><span> " + Convert.ToString(ac.PDF_RaisedBy) /*+ ''*/ + " </span></td><td style = 'font-family:TNG Pro; border:1px solid #000000;vertical-align:top; text-align:center;font-size:14px;border-left-width: 0px;border-top-width: 0px;' width = '10%' align = 'center' ><span> " + Convert.ToString(ac.PDF_ReportNo) /*+ ''*/ + " </span></td><td style = 'font-family:TNG Pro; border:1px solid #000000;vertical-align:top; text-align:center;font-size:14px;border-left-width: 0px;border-top-width: 0px;' width = '10%' align = 'center' ><span> " + Convert.ToString(ac.PDF_Status) /*+ ''*/ + " </span></td></tr>";
                            //else
                            //    AreaOfConcernOnPDF += "<tr><td style = 'font-family:TNG Pro; border:1px solid #000000;border-bottom-width: 0px;vertical-align:top; text-align:center;font-size:14px;' width = '5%' align = 'center' ><span> " + Convert.ToString(v.Description) /*+ ''*/ + " </span></td><td style = 'font-family:TNG Pro;border-left-width: 0px;border:1px solid #000000;border-bottom-width: 0px;vertical-align:top; text-align:left;border-left-width: 0px;font-size:14px;' width = '10%' ><span> " + v.Item_Code + " </span></td><td style = 'font-family:TNG Pro;border-left-width: 0px;border:1px solid #000000;border-bottom-width: 0px;vertical-align:top; text-align:left;border-left-width: 0px;font-size:14px;white-space: pre-line;' width = '35%' ><span> " + v.ItemCode_Description + " </span></td><td style = 'font-family:TNG Pro;border:1px solid #000000;border-bottom-width: 0px;vertical-align:top; text-align:left;border-left-width: 0px;font-size:14px;' width = '10%' ><span> " + v.Unit + " </span></td><td style = 'font-family:TNG Pro;border:1px solid #000000;border-bottom-width: 0px;vertical-align:top; text-align:center;border-left-width: 0px;font-size:14px;' width = '10%' ><span> " + v.Po_Quantity + " </span></td><td style = 'font-family:TNG Pro;border:1px solid #000000;border-bottom-width: 0px;vertical-align:top; text-align:center;border-left-width: 0px;font-size:14px;' width = '10%' ><span> " + v.Offered_Quantity + " </span></td><td style = 'font-family:TNG Pro;border:1px solid #000000;border-bottom-width: 0px;vertical-align:top; text-align:center;border-left-width: 0px;font-size:14px;' width = '10%' ><span> " + v.Accepted_Quantity + " </span></td></tr>";

                        }
                    }
                    else
                    {
                        AreaOfConcernOnPDF += "";
                    }

                    //foreach (EquipmentDetailsModel v in EquipmentDetails)
                    //{
                    //    M = M + 1;
                    //    //   EquipmentDetailscontent += "<tr><td> " + M + " </td><td>" + Convert.ToString(v.Name_Of_Equipments) + "</td><td>" + v.Range + " </td><td>" + v.Id + "</td><td>" + v.CalibrationValid_Till_date + "</td><td>" + v.Certification_No_Date + "</td></tr>";
                    //    EquipmentDetailscontent += "<tr><td align='center'> " + M + ')' + " </td><td>" + Convert.ToString(v.Name_Of_Equipments) + "</td><td>" + v.Range + " </td><td>" + v.Id + "</td><td>" + v.CalibrationValid_Till_date + "</td><td>" + v.Certification_No_Date + "</td><td>" + v.SNABLseenote1 + "</td><td>" + v.SNonNABLseenote2 + "</td></tr>";

                    //}
                    foreach (EquipmentDetailsModel v in EquipmentDetails)
                    {
                        M = M + 1;
                        //   EquipmentDetailscontent += "<tr><td> " + M + " </td><td>" + Convert.ToString(v.Name_Of_Equipments) + "</td><td>" + v.Range + " </td><td>" + v.Id + "</td><td>" + v.CalibrationValid_Till_date + "</td><td>" + v.Certification_No_Date + "</td></tr>";
                        EquipmentDetailscontent += "<tr><td width='5%' align='center' style='font-family:TNG Pro;border:1px solid #000000;border-bottom-width: 0px;vertical-align:top;text-align:center;font-size:14px;'> " + M + " </td><td style='font-family:TNG Pro;border:1px solid #000000;vertical-align:top;border-bottom-width: 0px;border-left-width: 0px;font-size:14px;'><span style='font-size:14px;white-space: pre-line;vertical-align:top;'>" + Convert.ToString(v.Name_Of_Equipments) + "</td><td style='font-family:TNG Pro;border:1px solid #000000;vertical-align:top;border-bottom-width: 0px;border-left-width: 0px;font-size:14px;'><span style='font-size:14px;white-space: pre-line;vertical-align:top;'>" + v.Range + " </td><td style='font-family:TNG Pro;border:1px solid #000000;vertical-align:top;border-bottom-width: 0px;border-left-width: 0px;font-size:14px;'><span style='font-size:14px;white-space: pre-line;vertical-align:top;'>" + v.Id + "</td><td style='font-family:TNG Pro;border:1px solid #000000;vertical-align:top;border-bottom-width: 0px;border-left-width: 0px;font-size:14px;'><span style='font-size:14px;white-space: pre-line;vertical-align:top;'>" + v.CalibrationValid_Till_date + "</td><td style='font-family:TNG Pro;border:1px solid #000000;vertical-align:top;border-bottom-width: 0px;border-left-width: 0px;font-size:14px;'><span style='font-size:14px;white-space: pre-line;vertical-align:top;'>" + v.Certification_No_Date + "</td><td style='font-family:TNG Pro;vertical-align:top;border:1px solid #000000;border-left-width: 0px;border-bottom-width: 0px;text-align:center;font-size:14px;'><span style='font-size:14px;white-space: pre-line;vertical-align:top;text-align:center;'>" + v.SNABLseenote1 + "</td><td style='font-family:TNG Pro;border:1px solid #000000;vertical-align:top;border-left-width: 0px;border-bottom-width: 0px;text-align:center;font-size:14px;'><span style='font-size:14px;white-space: pre-line;vertical-align:top;text-align:center;'>" + v.SNonNABLseenote2 + "</td></tr>";

                    }

                    foreach (InspectionvisitReportModel v in lstAreasOfConcern)
                    {
                        A = A + 1;
                        //AreasOfConcernContent += "<tr><td style='font-family:TNG Pro;border:1px solid #fa3746;border-bottom-width: 0px;border-top-width: 0px;color: #fa3746;font-family: italic;font-size:14px;' width='90%' colspan='8'><span style='font-size: 14px;color: #fa3746;font-style: italic;font-family:TNG Pro;'>" + A + ". " + Convert.ToString(v.Areas_Of_Concerns) + "</span></td></tr>";
                        AreasOfConcernContent += "<tr><td style='font-family:TNG Pro;border:1px solid #000000;border-bottom-width: 0px;border-top-width: 0px;font-family: italic;font-size:14px;' width='90%' colspan='8'><span style='font-size: 14px;color: #fa3746;font-style: italic;font-family:TNG Pro;'>" + A + ". " + Convert.ToString(v.Areas_Of_Concerns) + "</span></td></tr>";
                    }
                    foreach (InspectionvisitReportModel v in lstPendingActivity)
                    {
                        PA = PA + 1;
                        PendingActivityContent += "<tr><td style='font-family:TNG Pro;border:1px solid #fa3746;border-bottom-width: 0px;border-top-width: 0px;color: #fa3746;font-size:14px;' width='90%' colspan='8'><span style='font-size:14px;'>" + PA + ". " + Convert.ToString(v.Pending_Activites) + "</span></td></tr>";
                    }


                    //body = body.Replace("[PendingActivites]", PendingActivityContent);
                    //body = body.Replace("[AreasOfConcerns]", AreasOfConcernContent);

                    if (AreasOfConcernContent == "" || AreasOfConcernContent == null)
                    {
                        // body = body.Replace("[AreasOfConcerns]", "<tr><td colspan='8' style = 'font-family:TNG Pro;border:1px solid ;white-space: pre-line;vertical-align:top;text-align:left;border-top-width: 0px;border-bottom-width: 0px;color: #fa3746;font-size:14px;' > " + "None" + " </td>");
                        body = body.Replace("[AreasOfConcerns]", "<tr><td colspan='8' style = 'font-family:TNG Pro;border:1px solid ;white-space: pre-line;vertical-align:top;text-align:left;border-top-width: 0px;border-bottom-width: 0px;font-size:14px;' > " + "None" + " </td>");
                    }
                    else
                    {
                        body = body.Replace("[AreasOfConcerns]", AreasOfConcernContent);
                    }
                    if (PendingActivityContent == "" || PendingActivityContent == null)
                    {
                        body = body.Replace("[PendingActivites]", "<tr><td colspan='8' style = 'border:1px solid ;white-space: pre-line;vertical-align:top;text-align:left;border-top-width: 0px;border-bottom-width: 0px;font-size:14px;' > " + "None" + " </td>");
                    }
                    else
                    {
                        body = body.Replace("[PendingActivites]", PendingActivityContent);
                    }

                    body = body.Replace("[ItemDescriptionContent]", ItemDescriptioncontent);
                    body = body.Replace("[ItemDescriptioncontentTotal]", ItemDescriptioncontentTotal);
                    

                    body = body.Replace("[AreaOfConcernOnPDF]", AreaOfConcernOnPDF);
                    body = body.Replace("[AreaOfConcernOnPDFHeading]", AreaOfConcernOnPDFHeading);

                    body = body.Replace("[ReferenceDocumentsContent]", ReferenceDocumentscontent);
                    body = body.Replace("[InspectionDocumentsContent]", InspectionDocumentsContent);
                    body = body.Replace("[DocumentreviewContent]", DocumentreviewContent);
                    body = body.Replace("[EquipmentDetailscontent]", EquipmentDetailscontent);
                    body = body.Replace("[InspectiobRecord_Remark]", ObjModelVisitReport.InspectiobRecord_Remark);//24
                    body = body.Replace("[OtherSpecifyRecords]", ObjModelVisitReport.OtherSpecifyRecords);

                   

                    int ExpenseCheckBox = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["ExpenseCheckBox"]);
                    ObjModelVisitReport.ExpenseCheckBox = Convert.ToBoolean(ExpenseCheckBox);

                    if (ObjModelVisitReport.ExpenseCheckBox == true)
                    {
                        string strE = "<tr><td align='left' style='font-family:TNG Pro;background-color: #efefef;border:1px solid #000000;border-top-width: 0px;font-size:14px;'><span><strong>Travel Expenses in INR :</strong></span> " + ObjModelVisitReport.Expenses + " </td></tr>";
                        body = body.Replace("[Expenses]", strE);
                    }
                    else
                    {
                        body = body.Replace("[Expenses]", "");
                    }

                    int TiimeCheckBox = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["TiimeCheckBox"]);
                    ObjModelVisitReport.TiimeCheckBox = Convert.ToBoolean(TiimeCheckBox);

                    //if (ObjModelVisitReport.TiimeCheckBox == true)
                    //{
                    //    string strT = "<tr><td align='left' style='background-color: #efefef;border:1px solid #000000;border-top-width: 0px;font-size:14px;'><span><strong>In Time: </span></strong> " + ObjModelVisitReport.Intime + "   <span><strong>Out Time :</span></strong> " + ObjModelVisitReport.Outtime + " </td></tr>";
                    //    body = body.Replace("[TiimeCheckBox]", strT);
                    //}
                    //else
                    //{
                    //    body = body.Replace("[TiimeCheckBox]", "");
                    //}
                    string strT = "";
                    if (ObjModelVisitReport.TiimeCheckBox == true)
                    {
                        VT = VT + 1;
                        foreach (InspectionvisitReportModel vt in lstVisitReportTime)
                        {
                            strT += "<tr><td align='left' style='font-family:TNG Pro;background-color: #efefef;border:1px solid #000000;border-top-width: 0px;font-size:14px;'><span><strong>Date: </span></strong> " + vt.DateSe + " <span><strong>In Time: </span></strong> " + vt.Intime + "   <span><strong>Out Time :</span></strong> " + vt.Outtime + " </td></tr>";
                        }

                        // body = body.Replace("[TiimeCheckBox]", strT);
                    }
                    //else
                    //{
                    //    body = body.Replace("[TiimeCheckBox]", "");
                    //}

                    if (strT == "" || strT == null)
                    {
                        body = body.Replace("[TiimeCheckBox]", "");
                    }
                    else
                    {
                        body = body.Replace("[TiimeCheckBox]", strT);
                    }



                    body = body.Replace("[Stamp]", "<img src = '" + ConfigurationManager.AppSettings["Web"].ToString() + "/Stamp.png' style='width:100px;height:50px; ' align='center'>");
                    // body = body.Replace("[Signature]", ConfigurationManager.AppSettings["Web"].ToString() + "/signature.jpg");
                    body = body.Replace("[Signature]", ConfigurationManager.AppSettings["Web"].ToString() + ObjModelVisitReport.Signatures);
                    string I = "<img src = '" + ConfigurationManager.AppSettings["Web"].ToString() + "/Content/sign/" + ObjModelVisitReport.Signatures + "' style='width:225px;height:125px; ' align='center'>";
                    //string I = "<img src = '" + ConfigurationManager.AppSettings["Web"].ToString() + "/Content/Uploads/Images/" + ObjModelVisitReport.Signatures + "' style='width:100px;height:50px; ' align='center'>";
                    //  string I = "<img src = '" + ConfigurationManager.AppSettings["Web"].ToString() + "/Sign/" + ObjModelVisitReport.Signatures + "' style='width:100px;height:50px; ' align='center'>";
                    if (ObjModelVisitReport.Signatures != null)
                    {
                        //  body = body.Replace("[Signature1]", ConfigurationManager.AppSettings["Web"].ToString()+ "/Content/Uploads/Images/" + ObjModelVisitReport.Signatures + "");
                        body = body.Replace("[Signature1]", I);

                    }
                    else
                    {

                    }
                    body = body.Replace("[Checkbox1]", check1);
                    body = body.Replace("[Checkbox2]", check2);
                    body = body.Replace("[Checkbox3]", check3);
                    body = body.Replace("[Checkbox4]", check4);
                    body = body.Replace("[Checkbox5]", check5);
                    body = body.Replace("[Checkbox6]", check6);
                    body = body.Replace("[Checkbox7]", check7);
                    body = body.Replace("[Checkbox8]", check8);
                    body = body.Replace("[Checkbox9]", check9);
                    body = body.Replace("[Checkbox10]", check10);
                    body = body.Replace("[Checkbox11]", check11);
                    body = body.Replace("[Checkbox12]", check12);
                    body = body.Replace("[Checkbox13]", check13);
                    //strs.Append(body);//24
                    PdfPageSize pageSize = PdfPageSize.A4;
                    PdfPageOrientation pdfOrientation = PdfPageOrientation.Portrait;
                    HtmlToPdf converter = new HtmlToPdf();




                    // set the page timeout (in seconds)
                    converter.Options.MaxPageLoadTime = 2400;  //=========================5-Aug-2019
                    converter.Options.PdfPageSize = pageSize;
                    converter.Options.PdfPageOrientation = pdfOrientation;
                    converter.Options.WebPageFixedSize = false;

                    #region Heder code
                    string _Header = string.Empty;
                    string _footer = string.Empty;

                    // for Report header by abel
                    StreamReader _readHeader_File = new StreamReader(Server.MapPath("~/IV_Report_Header.html"));
                    _Header = _readHeader_File.ReadToEnd();
                    _Header = _Header.Replace("[SapAndControle_No]", ObjModelVisitReport.SubJob_No);
                    _Header = _Header.Replace("[RevisionNo]", countNo);
                    /*_Header = _Header.Replace("[Logo]", "http://localhost:54895/AllJsAndCss/images/logo.png");*/ // change123 once pulished on server
                    _Header = _Header.Replace("[Logo]", ConfigurationManager.AppSettings["Web"].ToString() + "/AllJsAndCss/images/logo.svg");
                    _Header = _Header.Replace("[CustomerSpeReportNo]", ObjModelVisitReport.CustomerSpecificReportNumber);

                    #endregion


                    #region Generate no
                    if (RM.Report == null)
                    {

                        dtSrNo = objDalVisitReport.GetSrNo(ObjModelVisitReport.SubJob_No);
                        if (dtSrNo.Tables[0].Rows.Count > 0)
                        {
                            SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["SrNo"]);

                        }
                        RM.ReportNo = "IVR-" + ObjModelVisitReport.SubJob_No + "-" + SrNo + "-Rev." + countNo;
                        _Header = _Header.Replace("[ReportNo]", RM.ReportNo);

                    }
                    else
                    {
                        //dtSrNo = objDalVisitReport.GetReportNo(RM.Report);
                        dtSrNo = objDalVisitReport.GetReportNo(Convert.ToString(RM.PK_RM_ID));
                        if (dtSrNo.Tables[0].Rows.Count > 0)
                        {
                            SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["ReportNo"]);
                            RM.ReportNo = SrNo;
                        }

                        //_Header = _Header.Replace("[ReportNo]", SrNo);
                        if (ObjModelVisitReport.IsCustomerSpecificReportNumber == "Yes")
                        {
                            string strReportNo = "<span> Number: " + ObjModelVisitReport.CustomerSpecificReportNumber + "<Br />" + "( " + SrNo + " )";
                            _Header = _Header.Replace("[ReportNo]", strReportNo);
                        }
                        else
                        {
                            _Header = _Header.Replace("[ReportNo]", SrNo);

                        }
                    }
                    #endregion

                    #region Footer Code

                    StreamReader _readFooter_File = new StreamReader(Server.MapPath("~/IV_Report_Footer.html"));
                    _footer = _readFooter_File.ReadToEnd();
                    _footer = _footer.Replace("[LogoFooter]", ConfigurationManager.AppSettings["Web"].ToString() + "/AllJsAndCss/images/FTUEV-NORD-GROUP_Logo_Electric-Blue.svg");
                    // header settings
                    converter.Options.DisplayHeader = true || true || true;
                    converter.Header.DisplayOnFirstPage = true;
                    converter.Header.DisplayOnOddPages = true;
                    converter.Header.DisplayOnEvenPages = true;
                    //converter.Header.Height = 75;
                    converter.Header.Height = 65;

                    PdfHtmlSection headerHtml = new PdfHtmlSection(_Header, string.Empty);
                    headerHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
                    converter.Header.Add(headerHtml);

                    // footer settings
                    converter.Options.DisplayFooter = true || true || true;
                    converter.Footer.DisplayOnFirstPage = true;
                    converter.Footer.DisplayOnOddPages = true;
                    converter.Footer.DisplayOnEvenPages = true;

                    //converter.Footer.Height = 150;
                    converter.Footer.Height = 105;

                    PdfHtmlSection footerHtml = new PdfHtmlSection(_footer, string.Empty);
                    footerHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
                    converter.Footer.Add(footerHtml);

                    //end abel code


                    // page numbers can be added using a PdfTextSection object
                    //PdfTextSection text1 = new PdfTextSection(0, 145, "Page: {page_number} of {total_pages}  ", new System.Drawing.Font("Arial", 8));
                    //PdfTextSection text1 = new PdfTextSection(0, 135, "Page: {page_number} of {total_pages}  ", new System.Drawing.Font("Arial", 8));

                    //text1.HorizontalAlign = PdfTextHorizontalAlign.Right;
                    //converter.Footer.Add(text1);
                    #endregion

                    converter.Options.AutoFitWidth = HtmlToPdfPageFitMode.ShrinkOnly;
                    converter.Options.AutoFitHeight = HtmlToPdfPageFitMode.NoAdjustment;

                    #region test Total Page Count
                    //string path1 = Server.MapPath("~/IVRReport");

                    //string[] datafile1 = Directory.GetFiles(Server.MapPath("~/Content/" + ObjModelVisitReport.Call_No));
                    //dtSrNo = objDalVisitReport.GetSrNo(ObjModelVisitReport.SubJob_No);
                    //if (dtSrNo.Tables[0].Rows.Count > 0)
                    //{
                    //    SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["SrNo"]);

                    //}
                    //string finalReportName1 = "IVR-" + ObjModelVisitReport.SubJob_No.Replace('/', '_') + "-" + SrNo + "-Rev." + countNo.ToString() + ".pdf";
                    //PdfSharp.Pdf.PdfDocument FinalDoc1 = new PdfSharp.Pdf.PdfDocument();

                    //if (System.IO.File.Exists(path1 + "\\" + finalReportName1))
                    //{
                    //    // If file found, delete it    
                    //    System.IO.File.Delete(path1 + "\\" + finalReportName1);

                    //}
                    //// create a new pdf document
                    //foreach (string pdfFile in datafile1)
                    //{
                    //    if (pdfFile.Contains("Image_") || pdfFile.Contains("Data_"))
                    //    {
                    //        PdfSharp.Pdf.PdfDocument inputPDFDocument = PdfReader.Open(pdfFile, PdfDocumentOpenMode.Import);

                    //        FinalDoc1.Version = inputPDFDocument.Version;

                    //        foreach (PdfSharp.Pdf.PdfPage page in inputPDFDocument.Pages)
                    //        {
                    //            FinalDoc1.AddPage(page);
                    //        }

                    //    }
                    //}


                    // Create variable that store page count  

                    SelectPdf.PdfDocument doc1 = converter.ConvertHtmlString(body);

                    int P;
                    string ImagePageTotalCount1 = "";
                    if (imagecount == 0)
                    {
                        P = doc1.Pages.Count;
                        ImagePageTotalCount1 = "0";
                    }
                    else
                    {
                        P = doc1.Pages.Count + ImageC;
                        ImagePageTotalCount1 = Convert.ToString(ImageC);
                    }
                    string noPages1 = Convert.ToString(P);


                    #region get Image page no & Total Page no

                    string ImagePage1 = "";
                    string TotalPage1 = "";
                    //string ImagePageTotalCount1 = Convert.ToString(ImageC);
                    if (ImagePageTotalCount1 == "0")
                    {

                        ImagePage1 = "-";
                        TotalPage1 = noPages1;
                        //body = body.Replace("[InspectiobRecord_Remark]", TotalPage1);
                        body = body.Replace("[TempInspectionPhotosNo]", ImagePage1);

                    }
                    else if (ImagePageTotalCount1 == "1")
                    {
                        int ImagePageNo = doc1.Pages.Count + 1;
                        ImagePage1 = Convert.ToString(ImagePageNo);
                        TotalPage1 = noPages1;
                        //body = body.Replace("[InspectiobRecord_Remark]", TotalPage1);
                        body = body.Replace("[TempInspectionPhotosNo]", ImagePage1);

                    }
                    else
                    {
                        int ImagePageNo = doc1.Pages.Count + 1; //Convert.ToInt32(noPages1) - Convert.ToInt32(ImagePageTotalCount1);
                                                                //ImagePage1 = Convert.ToString(ImagePageNo);
                        ImagePage1 = Convert.ToString(ImagePageNo + " to " + noPages1);
                        TotalPage1 = noPages1;
                        //body = body.Replace("[InspectiobRecord_Remark]", TotalPage1);
                        body = body.Replace("[TempInspectionPhotosNo]", ImagePage1);
                    }

                    #endregion

                    strs.Append(body);
                    #endregion



                    SelectPdf.PdfDocument doc = converter.ConvertHtmlString(body);



                    //doc.CompressionLevel = (PdfCompressionLevel)Enum.Parse(
                    //typeof(PdfCompressionLevel),"",true);

                    string ReportName = RM.Report;
                    paths = Server.MapPath("~/Content/");

                    if (System.IO.File.Exists(paths + ObjModelVisitReport.Call_No + "/Data_" + countNo + ".pdf"))
                    {
                        // If file found, delete it    
                        System.IO.File.Delete(paths + ObjModelVisitReport.Call_No + "/Data_" + countNo + ".pdf");

                    }

                    if (ReportName == null)
                    {
                        ReportName = ObjModelVisitReport.Call_No + "/Data_" + countNo + ".pdf";
                        doc.Save(paths + '\\' + ReportName);
                        doc.Close();
                    }
                    else
                    {
                        ReportName = ObjModelVisitReport.Call_No + "/Data_" + countNo + ".pdf";
                        doc.Save(paths + '\\' + ReportName);
                        doc.Close();
                    }

                    string path = Server.MapPath("~/IVRReport");

                    string[] datafile = Directory.GetFiles(Server.MapPath("~/Content/" + ObjModelVisitReport.Call_No));
                    dtSrNo = objDalVisitReport.GetSrNo(ObjModelVisitReport.SubJob_No);
                    if (dtSrNo.Tables[0].Rows.Count > 0)
                    {
                        SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["SrNo"]);

                    }
                    //string finalReportName = "IVR-" + ObjModelVisitReport.SubJob_No + " - " + SrNo + "-Rev." + countNo.ToString() + ObjModelVisitReport.Call_No.ToString() + ".pdf";
                    // string finalReportName = "IVR-" + ObjModelVisitReport.SubJob_No.Replace('/', '_') + "-" + SrNo + "-Rev." + countNo.ToString() + ".pdf";
                    string finalReportName = RM.ReportNo.Replace('/', '_') + ".pdf"; //23 Feb 2022
                                                                                     //string finalReportName = RM.ReportNo + ".pdf";

                    PdfSharp.Pdf.PdfDocument FinalDoc = new PdfSharp.Pdf.PdfDocument();

                    if (System.IO.File.Exists(path + "\\" + finalReportName))
                    {
                        // If file found, delete it    
                        System.IO.File.Delete(path + "\\" + finalReportName);

                    }
                    // create a new pdf document
                    foreach (string pdfFile in datafile)
                    {
                        if (pdfFile.Contains("Image_") || pdfFile.Contains("Data_"))
                        {
                            PdfSharp.Pdf.PdfDocument inputPDFDocument = PdfReader.Open(pdfFile, PdfDocumentOpenMode.Import);

                            FinalDoc.Version = inputPDFDocument.Version;

                            foreach (PdfSharp.Pdf.PdfPage page in inputPDFDocument.Pages)
                            {
                                FinalDoc.AddPage(page);
                            }

                        }
                    }

                    XFont font = new XFont("Verdana", 9);
                    XBrush brush = XBrushes.Black;
                    // Create variable that store page count  
                    string noPages = FinalDoc.Pages.Count.ToString();




                    for (int c = 0; c < FinalDoc.Pages.Count; ++c)
                    {
                        PdfSharp.Pdf.PdfPage page = FinalDoc.Pages[c];
                        // Make a layout rectangle.  
                        //XRect layoutRectangle = new XRect(240 /*X*/ , page.Height - font.Height - 10 /*Y*/ , page.Width /*Width*/ , font.Height /*Height*/ );
                        //XRect layoutRectangle = new XRect(232 /*X*/ , page.Height - font.Height - 15 /*Y*/ , page.Width /*Width*/ , font.Height /*Height*/ );
                        XRect layoutRectangle = new XRect(33 /*X*/ , page.Height - font.Height - 7 /*Y*/ , page.Width /*Width*/ , font.Height /*Height*/ );
                        using (XGraphics gfx = XGraphics.FromPdfPage(page))
                        {
                            //gfx.DrawString("Page " + (c + 1).ToString() + " of " + noPages, font, brush, layoutRectangle, XStringFormats.Center);
                            gfx.DrawString("Page " + (c + 1).ToString() + " of " + noPages, font, brush, layoutRectangle, XStringFormats.BottomLeft);
                        }
                    }
                    FinalDoc.Save(path + "\\" + finalReportName);
                    FinalDoc.Close();


                    #endregion

                    if (RM.PK_RM_ID != 0)
                    {

                        RM.Type = "IVR";
                        RM.Status = "1";
                        RM.ImageReport = ReportNames;
                        RM.Report = finalReportName;
                        RM.ReportName = ReportName;
                        RM.PK_CALL_ID = PK_CALL_ID;
                        RM.SubJob_No = ObjModelVisitReport.SubJob_No;
                        RM.PK_SubJob_Id = ObjModelVisitReport.PK_SubJob_Id;
                        RM.ProjectName = ObjModelVisitReport.End_user_Name;
                        RM.Po_No = ObjModelVisitReport.Po_No;
                        RM.Report_No = ObjModelVisitReport.Report_No;
                        Result = objDalVisitReport.InsertUpdateReport(RM);
                        if (Result != "" && Result != null)
                        {
                            TempData["InsertCompany"] = Result;
                        }
                    }
                    else
                    {
                        RM.Type = "IVR";
                        RM.Status = "1";
                        RM.ImageReport = ReportNames;
                        RM.Report = finalReportName;
                        RM.ReportName = ReportName;
                        RM.PK_CALL_ID = PK_CALL_ID;
                        RM.SubJob_No = ObjModelVisitReport.SubJob_No;
                        RM.PK_SubJob_Id = ObjModelVisitReport.PK_SubJob_Id;
                        RM.ProjectName = ObjModelVisitReport.End_user_Name;
                        RM.Po_No = ObjModelVisitReport.Po_No;
                        RM.Report_No = ObjModelVisitReport.Report_No;

                        Result = objDalVisitReport.InsertUpdateReport(RM);

                        if (Result != "" && Result != null)
                        {
                            TempData["InsertCompany"] = Result;
                        }
                    }





                    #region
                    CostSheetDashBoard = objDalVisitReport.GetReportByCall_Id(PK_CALL_ID);
                    if (CostSheetDashBoard.Rows.Count > 0)
                    {
                        foreach (DataRow dr in CostSheetDashBoard.Rows)
                        {
                            ReportDashboard.Add(
                                new ReportModel
                                {
                                    ReportName = Convert.ToString(dr["ReportName"]),
                                    Report = Convert.ToString(dr["Report"]),
                                    CraetedDate = Convert.ToString(dr["CraetedDate"]),
                                    PK_RM_ID = Convert.ToInt32(dr["PK_RM_ID"]),
                                    PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"])
                                }
                                );
                        }
                    }
                    ViewData["CostSheet"] = ReportDashboard;
                    #endregion



                    string newpath = Server.MapPath("~/IVRReport/");

                    byte[] fileBytes = System.IO.File.ReadAllBytes(newpath + @"\" + finalReportName);


                    if (System.IO.Directory.Exists(paths + ObjModelVisitReport.Call_No))
                    {
                        System.IO.Directory.Delete(paths + ObjModelVisitReport.Call_No, true);
                    }

                    return File(fileBytes, System.Net.Mime.MediaTypeNames.Application.Octet, finalReportName);

                    return RedirectToAction("VisitReportForm", "VisitReport", new { PK_Call_ID = PK_CALL_ID });

                    return RedirectToAction("IvrReports", RMData);

                }

                else
                {
                    return RedirectToAction("IvrReports", RMData);
                }
            }
            catch (Exception ex)
            {
                string Error = ex.Message.ToString();
                return RedirectToAction("ErrorPage", "InspectionReleaseNote", new { @Error = Error });
            }

        }



        #region razor to pdf

        #endregion

        #region  generate pdf redirect General tab

        /*public ActionResult UpdateReportsRedirectGeneralTab(int? PK_CALL_ID)
        {
            RMData.PK_CALL_ID = Convert.ToInt32(PK_CALL_ID);
            DataTable ItemDescriptionDashBoard = new DataTable();
            DataTable RefranceDocumentsDashBoard = new DataTable();
            DataTable InspectionActivitesDashBoard = new DataTable();
            DataTable DocumentsReviewBoard = new DataTable();
            DataTable EquipmentDetailsBoard = new DataTable();
            DataSet DSJobMasterByQtId = new DataSet();
            DataTable ReportDashBoard = new DataTable();
            DataSet UpdateReport = new DataSet();
            DataTable CostSheetDashBoard = new DataTable();
            int count = 0;
            DataTable ImageReportDashBoard = new DataTable();
            List<ReportImageModel> ImageDashBoard = new List<ReportImageModel>();
            List<ItemDescriptionModel> lstCompanyDashBoard = new List<ItemDescriptionModel>();
            List<ReferenceDocumentsModel> RefranceDocuments = new List<ReferenceDocumentsModel>();
            List<InspectionActivitiesModel> InspectionDocuments = new List<InspectionActivitiesModel>();
            List<DocumentRevieweModel> DocumentReview = new List<DocumentRevieweModel>();
            List<EquipmentDetailsModel> EquipmentDetails = new List<EquipmentDetailsModel>();
            List<ReportModel> ReportDashboard = new List<ReportModel>();
            DataSet dtSrNo = new DataSet();
            string SrNo = "";


            ReportModel RM = new ReportModel();
            string Result = "";
            if (PK_CALL_ID != 0 || PK_CALL_ID != null)
            {
                int i = 0;
                int J = 0;
                int K = 0;
                int L = 0;
                int M = 0;
                int N = 0;
                #region 
                DSJobMasterByQtId = objDalVisitReport.EditInspectionVisitReportByPKCallID(PK_CALL_ID);

                if (DSJobMasterByQtId.Tables[0].Rows.Count > 0)
                {
                    ObjModelVisitReport.Branch = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Branch"]);
                    ObjModelVisitReport.Sap_And_Controle_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Sap_And_Controle_No"]);
                    ObjModelVisitReport.PK_IVR_ID = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["PK_IVR_ID"]);
                    ObjModelVisitReport.Project_Name_Location = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Project_Name_Location"]);
                    ObjModelVisitReport.Address_Of_Inspection = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Address_Of_Inspection"]);
                    ObjModelVisitReport.End_user_Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["End_user_Name"]);
                    ObjModelVisitReport.Vendor_Name_Location = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Vendor_Name_Location"]);
                    ObjModelVisitReport.PK_Call_ID = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["PK_Call_ID"]);
                    ObjModelVisitReport.Notification_Name_No_Date = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Notification_Name_No_Date"]);

                    ObjModelVisitReport.Date_Of_Inspection = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Date_Of_Inspection"]);
                    ObjModelVisitReport.Client_Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Client_Name"]);
                    ObjModelVisitReport.DEC_PMC_EPC_Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["DEC_PMC_EPC_Name"]);
                    ObjModelVisitReport.DEC_PMC_EPC_Assignment_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["DEC_PMC_EPC_Assignment_No"]);
                    ObjModelVisitReport.Po_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Po_No"]);
                    ObjModelVisitReport.Sub_Vendor_Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Sub_Vendor_Name"]);
                    ObjModelVisitReport.Po_No_SubVendor = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Po_No_SubVendor"]);
                    ObjModelVisitReport.SubJob_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["SubJob_No"]);

                    int kick = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Kick_Off_Pre_Inspection"]);
                    ObjModelVisitReport.Kick_Off_Pre_Inspection = Convert.ToBoolean(kick);

                    int Mi = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Material_identification"]);
                    ObjModelVisitReport.Material_identification = Convert.ToBoolean(Mi);

                    int Interim_Stages = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Interim_Stages"]);
                    ObjModelVisitReport.Interim_Stages = Convert.ToBoolean(Interim_Stages);

                    int Document_review = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Document_review"]);
                    ObjModelVisitReport.Document_review = Convert.ToBoolean(Document_review);

                    int Final_Inspection = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Final_Inspection"]);
                    ObjModelVisitReport.Final_Inspection = Convert.ToBoolean(Final_Inspection);

                    int Re_inspection = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Re_inspection"]);
                    ObjModelVisitReport.Re_inspection = Convert.ToBoolean(Re_inspection);

                    int MasterListOfcalibratedInstruments = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["MasterListOfcalibratedInstruments"]);
                    ObjModelVisitReport.MasterListOfcalibratedInstruments = Convert.ToBoolean(MasterListOfcalibratedInstruments);


                    ObjModelVisitReport.CanIRNbeissued = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["CanIRNbeissued"]);
                    ObjModelVisitReport.IssuedPOItemNumbers = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["IssuedPOItemNumbers"]);


                    ObjModelVisitReport.Conclusion = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Conclusion"]);
                    ObjModelVisitReport.Pending_Activites = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Pending_Activites"]);
                    ObjModelVisitReport.Identification_Of_Inspected = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Identification_Of_Inspected"]);
                    ObjModelVisitReport.Areas_Of_Concerns = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Areas_Of_Concerns"]);
                    ObjModelVisitReport.Non_Conformities_raised = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Non_Conformities_raised"]);
                    ObjModelVisitReport.Signatures = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Signatures"]);
                    ObjModelVisitReport.Type = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Type"]);
                    ObjModelVisitReport.Report_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Report_No"]);
                    ObjModelVisitReport.Call_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Call_No"]);
                    ObjModelVisitReport.Signatures = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Signature"]);
                    ObjModelVisitReport.Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["FirstName"]) + " " + Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["LastName"]);
                    ObjModelVisitReport.ReportCreatedDate = Convert.ToDateTime(DSJobMasterByQtId.Tables[0].Rows[0]["CreatedDate"]).ToString("dd/MMM/yyyy");




                    int Inspection_records = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Inspection_records"]);
                    ObjModelVisitReport.Inspection_records = Convert.ToBoolean(Inspection_records);

                    int Inspection_Photo = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Inspection_Photo"]);
                    ObjModelVisitReport.Inspection_Photo = Convert.ToBoolean(Inspection_Photo);

                    int Other_Specify = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Other_Specify"]);
                    ObjModelVisitReport.Other_Specify = Convert.ToBoolean(Other_Specify);

                    ObjModelVisitReport.SubJob_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["SubJob_No"]);
                    ObjModelVisitReport.PK_SubJob_Id = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["PK_SubJob_Id"]);


                    ObjModelVisitReport.Type = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Type"]);
                    ObjModelVisitReport.TempInspectionPhotosNo = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["TempInspectionPhotosNo"]);
                    ObjModelVisitReport.TempMaster_List_Of_calibrated_Instruments = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["TempMaster_List_Of_calibrated_Instruments"]);
                    int DTUVIndiaClientEndUser = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["DTUVIndiaClientEndUser"]);
                    ObjModelVisitReport.DTUVIndiaClientEndUser = Convert.ToBoolean(DTUVIndiaClientEndUser);
                    int DTUVIndiaExecuting_Originating_Branch = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["DTUVIndiaExecuting_Originating_Branch"]);
                    ObjModelVisitReport.DTUVIndiaExecuting_Originating_Branch = Convert.ToBoolean(DTUVIndiaExecuting_Originating_Branch);
                    int DVendor_Sub_Vendor = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["DVendor_Sub_Vendor"]);
                    ObjModelVisitReport.DVendor_Sub_Vendor = Convert.ToBoolean(DVendor_Sub_Vendor);
                    ObjModelVisitReport.ReviseReason = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["ReviseReason"]);
                    ObjModelVisitReport.ReviseReportNoForPDF = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["ReviseReportNoForPDF"]);
                    ObjModelVisitReport.Signatures = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Signature"]);
                }
                else
                {

                    InspectionvisitReportModel Abc = new InspectionvisitReportModel();
                    Abc.PK_Call_ID = PK_CALL_ID;
                    return RedirectToAction("VisitReportForm", Abc);
                }
                #endregion


                #region  item Description

                ItemDescriptionDashBoard = objDalVisitReport.GetitemDescription(PK_CALL_ID);
                if (ItemDescriptionDashBoard.Rows.Count > 0)
                {
                    foreach (DataRow dr in ItemDescriptionDashBoard.Rows)
                    {
                        lstCompanyDashBoard.Add(
                            new ItemDescriptionModel
                            {
                                PK_ItemD_Id = Convert.ToInt32(dr["PK_ItemD_Id"]),
                                Po_Item_No = Convert.ToString(dr["Po_Item_No"]),
                                ItemCode_Description = Convert.ToString(dr["ItemCode_Description"]),
                                Po_Quantity = Convert.ToString(dr["Po_Quantity"]),
                                Offered_Quantity = Convert.ToString(dr["Offered_Quantity"]),
                                PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"]),
                                Item_Code = Convert.ToString(dr["Item_Code"]),
                                Accepted_Quantity = Convert.ToString(dr["Accepted_Quantity"]),
                                Cumulative_Accepted_Qty = Convert.ToString(dr["Cumulative_Accepted_Qty"]),
                                Unit = Convert.ToString(dr["Unit"]),
                            }
                            );
                    }
                }
                #endregion


                #region Reference Documents

                RefranceDocumentsDashBoard = objDalVisitReport.GetReferenceDocuments(PK_CALL_ID);
                if (RefranceDocumentsDashBoard.Rows.Count > 0)
                {
                    foreach (DataRow dr in RefranceDocumentsDashBoard.Rows)
                    {
                        RefranceDocuments.Add(
                            new ReferenceDocumentsModel
                            {
                                Document_No = Convert.ToString(dr["Document_No"]),
                                Document_Name = Convert.ToString(dr["Document_Name"]),
                                Approval_Status = Convert.ToString(dr["Approval_Status"]),
                                PK_RD_ID = Convert.ToInt32(dr["PK_RD_ID"]),
                                PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"]),
                                VendorDocumentNumber = Convert.ToString(dr["VendorDocumentNumber"])
                            }
                            );
                    }
                }
                #endregion


                #region Inspection Activities
                InspectionActivitesDashBoard = objDalVisitReport.GetInspectionActivities(PK_CALL_ID);
                if (InspectionActivitesDashBoard.Rows.Count > 0)
                {
                    foreach (DataRow dr in InspectionActivitesDashBoard.Rows)
                    {
                        InspectionDocuments.Add(
                            new InspectionActivitiesModel
                            {
                                Stages_Witnessed = Convert.ToString(dr["Stages_Witnessed"]),
                                PK_IA_ID = Convert.ToInt32(dr["PK_IA_ID"]),
                                PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"])

                            }
                            );
                    }
                }
                #endregion

                #region Documents Review
                DocumentsReviewBoard = objDalVisitReport.GetDocumentRevieweModelByCall_Id(PK_CALL_ID);
                if (DocumentsReviewBoard.Rows.Count > 0)
                {
                    foreach (DataRow dr in DocumentsReviewBoard.Rows)
                    {
                        DocumentReview.Add(
                            new DocumentRevieweModel
                            {
                                Description = Convert.ToString(dr["Description"]),
                                PK_DR_ID = Convert.ToInt32(dr["PK_DR_ID"]),
                                PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"])

                            }
                            );
                    }
                }
                #endregion

                #region Equipments Details
                EquipmentDetailsBoard = objDalVisitReport.GetEquipmentDetailsModelByCall_Id(PK_CALL_ID);
                if (EquipmentDetailsBoard.Rows.Count > 0)
                {
                    foreach (DataRow dr in EquipmentDetailsBoard.Rows)
                    {
                        EquipmentDetails.Add(
                            new EquipmentDetailsModel
                            {
                                Name_Of_Equipments = Convert.ToString(dr["Name_Of_Equipments"]),
                                Range = Convert.ToString(dr["Range"]),
                                Id = Convert.ToString(dr["Id"]),
                                CalibrationValid_Till_date = Convert.ToString(dr["CalibrationValid_Till_date"]),
                                Certification_No_Date = Convert.ToString(dr["Certification_No_Date"]),
                                PK_DOE_Id = Convert.ToInt32(dr["PK_DOE_Id"]),
                                PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"]),
                                SNABLseenote1 = Convert.ToString(dr["NABLseenote1"]) == "True" ? "Yes" : "-",

                                SNonNABLseenote2 = Convert.ToString(dr["NonNABLseenote2"]) == "True" ? "Yes" : "-"
                            }
                            );
                    }
                }
                #endregion

                #region report Count
                UpdateReport = objDalVisitReport.GetReportByLastId(PK_CALL_ID);
                if (UpdateReport.Tables[0].Rows.Count > 0)
                {
                    RM.PK_RM_ID = Convert.ToInt32(UpdateReport.Tables[0].Rows[0]["PK_RM_ID"]);
                    RM.Report = Convert.ToString(UpdateReport.Tables[0].Rows[0]["Report"]);
                    //RM.ImageReport = Convert.ToString(UpdateReport.Tables[0].Rows[0]["ImageReport"]);
                }

                #region report Count
                ReportDashBoard = objDalVisitReport.GetReportByCall_Id(PK_CALL_ID);
                if (ReportDashBoard.Rows.Count > 0)
                {
                    int counts = ReportDashBoard.Rows.Count;
                    count = counts - 1;
                }
                string countNo = Convert.ToString(count);
                #endregion
                #endregion


                #region Report Image data
                ImageReportDashBoard = objDalVisitReport.GetReportImageByCall_Id(PK_CALL_ID);
                if (ImageReportDashBoard.Rows.Count > 0)
                {
                    foreach (DataRow dr in ImageReportDashBoard.Rows)
                    {
                        ImageDashBoard.Add(
                            new ReportImageModel
                            {
                                Image = Convert.ToString(dr["Image"]),
                                Heading = Convert.ToString(dr["Heading"]),
                            }
                            );
                    }
                }
                #endregion

                #region Image Save to pdf
                System.Text.StringBuilder strss = new System.Text.StringBuilder();
                string bodys = string.Empty;
                string ImageContent = "";
                string ImageContentname = "";
                string ImageContentnameTest = "";
                using (StreamReader reader = new StreamReader(Server.MapPath("~/inspection-visit-report-images.html")))
                {
                    bodys = reader.ReadToEnd();
                }

                int imgcount = 0;
                string previousValue = string.Empty;
                foreach (ReportImageModel v in ImageDashBoard)
                {
                    N = N + 1;
                    ImageContentname += "<tr><td style='padding: 10px; width: 50 %;'>" + v.Heading + "</td></tr>";

                    ImageContent += "<tr><td style='padding:10px;' valign='top'><img src='" + ConfigurationManager.AppSettings["Web"].ToString() + "/Content/Uploads/Images/" + v.Image + "' style='width:100px;height:100px;  ' alt=''></td></tr>";



                    ImageContentnameTest += "<tr><td style='padding: 10px; width: 50 %;'>" + v.Heading + "</td></tr>" + "<tr><td style='padding:10px;' valign='top'><img src='" + ConfigurationManager.AppSettings["Web"].ToString() + "/Content/Uploads/Images/" + v.Image + "' style='width:100px;height:100px; ' alt=''></td></tr>";

                    imgcount++;
                    if (imgcount == 2)
                    {
                        string[] t = previousValue.Split(';');

                        string header = "<tr width='50 %'><td>" + t[0] + "</td><td>" + v.Heading + "</td></tr>";
                        string image = "<tr width='50 %'><td>" + t[1] + "</td><td>" + v.Image + "</td></tr>";
                        imgcount = 0;
                        previousValue = string.Empty;
                    }
                    else
                    {
                        previousValue = v.Heading + ";" + v.Image;
                    }



                }

                bodys = bodys.Replace("[Image]", ImageContent);
                // bodys = bodys.Replace("[ImageName]", ImageContentname);
                bodys = bodys.Replace("[Logos]", "http://localhost:54895/AllJsAndCss/images/logo.png");

                strss.Append(bodys);
                PdfPageSize pageSizes = PdfPageSize.A4;
                PdfPageOrientation pdfOrientations = PdfPageOrientation.Portrait;
                HtmlToPdf converters = new HtmlToPdf();
                converters.Options.PdfPageSize = pageSizes;
                converters.Options.PdfPageOrientation = pdfOrientations;
                SelectPdf.PdfDocument docs = converters.ConvertHtmlString(bodys);
                string ReportNames = null;
                if (RM.ImageReport == null || RM.ImageReport == "")
                {
                    ReportNames = ObjModelVisitReport.Call_No + "/" + count + ".pdf";
                    string paths = Server.MapPath("~/Content");
                    docs.Save(paths + '\\' + ReportNames);
                    docs.Close();
                }
                else
                {
                    ReportNames = RM.ImageReport;
                    string paths = Server.MapPath("~/Content");
                    docs.Save(paths + '\\' + ReportNames);
                    docs.Close();
                }


                #endregion




                #region Save to Pdf Code 



                System.Text.StringBuilder strs = new System.Text.StringBuilder();
                string body = string.Empty;

                string ItemDescriptioncontent = "";
                string ReferenceDocumentscontent = "";
                string InspectionDocumentsContent = "";
                string DocumentreviewContent = "";
                string EquipmentDetailscontent = "";

                string check1 = "";
                string check2 = "";
                string check3 = "";
                string check4 = "";
                string check5 = "";
                string check6 = "";
                string check7 = "";
                string check8 = "";
                string check9 = "";
                string check10 = "";
                string checkNABL = "";
                string checkNonNABL = "";
                string check11 = "";
                string check12 = "";
                string check13 = "";


                using (StreamReader reader = new StreamReader(Server.MapPath("~/inspection-visit-report.html")))
                {
                    body = reader.ReadToEnd();
                }


                #region testImage
                body = body.Replace("[Image]", ImageContent);
                body = body.Replace("[ImageName]", ImageContentname);
                body = body.Replace("[ImageNameTest]", ImageContentnameTest);
                #endregion


                body = body.Replace("[SapAndControle_No]", ObjModelVisitReport.SubJob_No);
                body = body.Replace("[Branch]", ObjModelVisitReport.Branch);
                body = body.Replace("[NotificationNameNo_Date]", ObjModelVisitReport.Notification_Name_No_Date);
                body = body.Replace("[DateOfInspection]", ObjModelVisitReport.Date_Of_Inspection);
                body = body.Replace("[ProjectNameLocation]", ObjModelVisitReport.Project_Name_Location);
                body = body.Replace("[AddressOfInspection]", ObjModelVisitReport.Address_Of_Inspection);
                body = body.Replace("[ClientName]", ObjModelVisitReport.Client_Name);
                body = body.Replace("[Enduser_Name]", ObjModelVisitReport.End_user_Name);
                body = body.Replace("[DECPMCEPC_Name]", ObjModelVisitReport.DEC_PMC_EPC_Name);
                body = body.Replace("[DECPMCEPCAssignment_No]", ObjModelVisitReport.DEC_PMC_EPC_Assignment_No);
                body = body.Replace("[VendorNameLocation]", ObjModelVisitReport.Vendor_Name_Location);
                body = body.Replace("[PoNo]", ObjModelVisitReport.Po_No);
                body = body.Replace("[SubVendorName]", ObjModelVisitReport.Sub_Vendor_Name);
                body = body.Replace("[PoNoSubVendor]", ObjModelVisitReport.Po_No_SubVendor);
                body = body.Replace("[Conclusion]", ObjModelVisitReport.Conclusion);
                body = body.Replace("[CanIRNbeissued]", ObjModelVisitReport.CanIRNbeissued + ' ' + ObjModelVisitReport.IssuedPOItemNumbers);

                body = body.Replace("[PendingActivites]", ObjModelVisitReport.Pending_Activites);
                body = body.Replace("[IdentificationOfInspected]", ObjModelVisitReport.Identification_Of_Inspected);
                body = body.Replace("[AreasOfConcerns]", ObjModelVisitReport.Areas_Of_Concerns);
                body = body.Replace("[NonConformitiesraised]", ObjModelVisitReport.Non_Conformities_raised);
                body = body.Replace("[Name]", ObjModelVisitReport.Name);
                body = body.Replace("[date]", ObjModelVisitReport.ReportCreatedDate);

                body = body.Replace("[RevisionNo]", countNo);

                body = body.Replace("[TempInspectionPhotosNo]", ObjModelVisitReport.TempInspectionPhotosNo);
                body = body.Replace("[TempMaster_List_Of_calibrated_Instruments]", ObjModelVisitReport.TempMaster_List_Of_calibrated_Instruments);
                body = body.Replace("[ReviseReason]", ObjModelVisitReport.ReviseReason);
                body = body.Replace("[ReviseReportNoForPDF]", ObjModelVisitReport.ReviseReportNoForPDF);
                if (ObjModelVisitReport.DTUVIndiaClientEndUser == true)
                {
                    check11 = "<span><input type='checkbox'  value=" + ObjModelVisitReport.DTUVIndiaClientEndUser + " checked></span>";
                }
                else
                {
                    check11 = "<span><input type='checkbox'  value=" + ObjModelVisitReport.DTUVIndiaClientEndUser + " ></span>";
                }
                if (ObjModelVisitReport.DTUVIndiaExecuting_Originating_Branch == true)
                {
                    check12 = "<span><input type='checkbox'  value=" + ObjModelVisitReport.DTUVIndiaExecuting_Originating_Branch + " checked></span>";
                }
                else
                {
                    check12 = "<span><input type='checkbox'  value=" + ObjModelVisitReport.DTUVIndiaExecuting_Originating_Branch + " ></span>";
                }
                if (ObjModelVisitReport.DVendor_Sub_Vendor == true)
                {
                    check13 = "<span><input type='checkbox'  value=" + ObjModelVisitReport.DVendor_Sub_Vendor + " checked></span>";
                }
                else
                {
                    check13 = "<span><input type='checkbox'  value=" + ObjModelVisitReport.DVendor_Sub_Vendor + " ></span>";
                }


                if (ObjModelVisitReport.Kick_Off_Pre_Inspection == true)
                {
                    check1 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox' style='border:1px solid #000;' value=" + ObjModelVisitReport.Kick_Off_Pre_Inspection + " checked></span></td>";
                }
                else
                {
                    check1 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox' style='border:1px solid #000;' value=" + ObjModelVisitReport.Kick_Off_Pre_Inspection + "></span></td>";
                }
                if (ObjModelVisitReport.Material_identification == true)
                {
                    check2 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Material_identification + " checked></span></td>";
                }
                else
                {
                    check2 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Material_identification + " ></span></td>";
                }
                if (ObjModelVisitReport.Interim_Stages == true)
                {
                    check3 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Interim_Stages + " checked></span></td>";
                }
                else
                {
                    check3 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Interim_Stages + "></span></td>";
                }
                if (ObjModelVisitReport.Document_review == true)
                {
                    check4 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Document_review + " checked></span></td>";
                }
                else
                {
                    check4 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Document_review + "></span></td>";
                }
                if (ObjModelVisitReport.Final_Inspection == true)
                {
                    check5 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Final_Inspection + " checked></span></td>";
                }
                else
                {
                    check5 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Final_Inspection + " ></span></td>";
                }
                if (ObjModelVisitReport.Re_inspection == true)
                {
                    check6 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Re_inspection + " checked></span></td>";
                }
                else
                {
                    check6 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Re_inspection + " ></span></td>";
                }

                if (ObjModelVisitReport.Inspection_records == true)
                {
                    check7 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Inspection_records + " checked></span></td>";
                }
                else
                {
                    check7 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Inspection_records + " ></span></td>";
                }
                if (ObjModelVisitReport.Other_Specify == true)
                {
                    check8 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Other_Specify + " checked></span></td>";
                }
                else
                {
                    check8 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Other_Specify + " ></span></td>";
                }
                if (ObjModelVisitReport.Inspection_Photo == true)
                {
                    check9 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Inspection_Photo + " checked></span></td>";
                }
                else
                {
                    check9 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Inspection_Photo + "></span></td>";
                }

                if (ObjModelVisitReport.MasterListOfcalibratedInstruments == true)
                {
                    check10 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.MasterListOfcalibratedInstruments + " checked></span></td>";
                }
                else
                {
                    check10 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.MasterListOfcalibratedInstruments + "></span></td>";
                }
                foreach (ItemDescriptionModel v in lstCompanyDashBoard)
                {
                    i = i + 1;
                    ItemDescriptioncontent += "<tr><td width='10%' align='center' style='font - size: 14px; color: #000; font-family: Arial;'>" + Convert.ToString(v.Po_Item_No) + "</td><td width='10%' style='font - size: 14px; color: #000; font-family: Arial;'>" + v.Item_Code + " </td><td width='30%' style='font - size: 14px; color: #000; font-family: Arial;'>" + v.ItemCode_Description + "</td><td width='10%' style='font - size: 14px; color: #000; font-family: Arial;'>" + v.Unit + "</td><td width='10%'>" + v.Po_Quantity + "</td><td width='10%' style='font - size: 14px; color: #000; font-family: Arial;'>" + v.Offered_Quantity + "</td><td width='10%' style='font - size: 14px; color: #000; font-family: Arial;'>" + v.Accepted_Quantity + "</td></tr>";
                }

                foreach (ReferenceDocumentsModel v in RefranceDocuments)
                {
                    J = J + 1;
                    // ReferenceDocumentscontent += "<tr><td> " + J + " </td><td>" + Convert.ToString(v.Document_Name) + "</td><td>" + v.Document_No + " </td><td>" + v.Approval_Status + "</td></tr>";
                    ReferenceDocumentscontent += "<tr><td> " + J + ')' + " </td><td>" + Convert.ToString(v.Document_Name) + "</td><td>" + v.Document_No + " </td><td>" + v.VendorDocumentNumber + "</td><td>" + v.Approval_Status + "</td></tr>";
                }

                foreach (InspectionActivitiesModel v in InspectionDocuments)
                {
                    K = K + 1;
                    InspectionDocumentsContent += "<tr><td width='10%' align='center'> " + K + ')' + " </td><td width='90%' colspan='5'><span style='font-size: 14px;white-space: pre-line;'>" + Convert.ToString(v.Stages_Witnessed) + "</span></td></tr>";
                }
                foreach (DocumentRevieweModel v in DocumentReview)
                {
                    L = L + 1;
                    DocumentreviewContent += "<tr><td width='10%' align='center'><span> " + L + ')' + " </span></td><td width='90%' colspan='3'><span style='font-size:14px;white-space: pre-line;'>" + Convert.ToString(v.Description) + "</span></td></tr>";
                }


                foreach (EquipmentDetailsModel v in EquipmentDetails)
                {
                    if (v.NABLseenote1 == true)
                    {
                        checkNABL = "<td> " + M + " </td> <td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + v.NABLseenote1 + " checked></span></td>";
                    }
                    else
                    {
                        checkNABL = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + v.NABLseenote1 + "></span></td>";
                    }
                }




                foreach (EquipmentDetailsModel v in EquipmentDetails)
                {
                    M = M + 1;
                    //   EquipmentDetailscontent += "<tr><td> " + M + " </td><td>" + Convert.ToString(v.Name_Of_Equipments) + "</td><td>" + v.Range + " </td><td>" + v.Id + "</td><td>" + v.CalibrationValid_Till_date + "</td><td>" + v.Certification_No_Date + "</td></tr>";
                    EquipmentDetailscontent += "<tr><td> " + M + ')' + " </td><td>" + Convert.ToString(v.Name_Of_Equipments) + "</td><td>" + v.Range + " </td><td>" + v.Id + "</td><td>" + v.CalibrationValid_Till_date + "</td><td>" + v.Certification_No_Date + "</td><td>" + v.SNABLseenote1 + "</td><td>" + v.SNonNABLseenote2 + "</td></tr>";

                }

                body = body.Replace("[ItemDescriptionContent]", ItemDescriptioncontent);
                body = body.Replace("[ReferenceDocumentsContent]", ReferenceDocumentscontent);
                body = body.Replace("[InspectionDocumentsContent]", InspectionDocumentsContent);
                body = body.Replace("[DocumentreviewContent]", DocumentreviewContent);
                body = body.Replace("[EquipmentDetailscontent]", EquipmentDetailscontent);
                //  body = body.Replace("[Stamp]", "http://localhost:54895/Stamp.png");
                body = body.Replace("[Stamp]", ConfigurationManager.AppSettings["Web"].ToString() + "/Stamp.png");
                body = body.Replace("[Signature]", "http://localhost:54895/signature.jpg");
                if (ObjModelVisitReport.Signatures != null)
                {
                    body = body.Replace("[Signature1]", ConfigurationManager.AppSettings["Web"].ToString() + "/Content/Uploads/Images/" + ObjModelVisitReport.Signatures + "");
                }

                else
                {

                }
                body = body.Replace("[Checkbox1]", check1);
                body = body.Replace("[Checkbox2]", check2);
                body = body.Replace("[Checkbox3]", check3);
                body = body.Replace("[Checkbox4]", check4);
                body = body.Replace("[Checkbox5]", check5);
                body = body.Replace("[Checkbox6]", check6);
                body = body.Replace("[Checkbox7]", check7);
                body = body.Replace("[Checkbox8]", check8);
                body = body.Replace("[Checkbox9]", check9);
                body = body.Replace("[Checkbox10]", check10);
                body = body.Replace("[Checkbox11]", check11);
                body = body.Replace("[Checkbox12]", check12);
                body = body.Replace("[Checkbox13]", check13);

                strs.Append(body);
                PdfPageSize pageSize = PdfPageSize.A4;
                PdfPageOrientation pdfOrientation = PdfPageOrientation.Portrait;
                HtmlToPdf converter = new HtmlToPdf();




                // set the page timeout (in seconds)
                converter.Options.MaxPageLoadTime = 240;  //=========================5-Aug-2019
                converter.Options.PdfPageSize = pageSize;
                converter.Options.PdfPageOrientation = pdfOrientation;

                string _Header = string.Empty;
                string _footer = string.Empty;

                // for Report header by abel
                StreamReader _readHeader_File = new StreamReader(Server.MapPath("~/IV_Report_Header.html"));
                _Header = _readHeader_File.ReadToEnd();
                _Header = _Header.Replace("[SapAndControle_No]", ObjModelVisitReport.SubJob_No);
                _Header = _Header.Replace("[RevisionNo]", countNo);

                _Header = _Header.Replace("[Logo]", ConfigurationManager.AppSettings["Web"].ToString() + "/AllJsAndCss/images/logo.png");
                #region Generate no
                if (RM.Report == null)
                {

                    dtSrNo = objDalVisitReport.GetSrNo(ObjModelVisitReport.SubJob_No);
                    if (dtSrNo.Tables[0].Rows.Count > 0)
                    {
                        SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["SrNo"]);

                    }
                    RM.ReportNo = "IVR-" + ObjModelVisitReport.SubJob_No + "-" + SrNo + "-Rev." + countNo;
                    _Header = _Header.Replace("[ReportNo]", RM.ReportNo);

                }
                else
                {
                    dtSrNo = objDalVisitReport.GetReportNo(Convert.ToString(RM.PK_RM_ID));
                    if (dtSrNo.Tables[0].Rows.Count > 0)
                    {
                        SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["ReportNo"]);

                    }

                    _Header = _Header.Replace("[ReportNo]", SrNo);
                }
                #endregion


                StreamReader _readFooter_File = new StreamReader(Server.MapPath("~/IV_Report_Footer.html"));
                _footer = _readFooter_File.ReadToEnd();

                // header settings
                converter.Options.DisplayHeader = true ||
                    true || true;
                converter.Header.DisplayOnFirstPage = true;
                converter.Header.DisplayOnOddPages = true;
                converter.Header.DisplayOnEvenPages = true;
                converter.Header.Height = 75;

                PdfHtmlSection headerHtml = new PdfHtmlSection(_Header, string.Empty);
                headerHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
                converter.Header.Add(headerHtml);

                // footer settings
                converter.Options.DisplayFooter = true ||
                    true || true;
                converter.Footer.DisplayOnFirstPage = true;
                converter.Footer.DisplayOnOddPages = true;
                converter.Footer.DisplayOnEvenPages = true;
                converter.Footer.Height = 170;

                PdfHtmlSection footerHtml = new PdfHtmlSection(_footer, string.Empty);
                footerHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
                converter.Footer.Add(footerHtml);

                //end abel code

                #region Footer Code
                // page numbers can be added using a PdfTextSection object
                PdfTextSection text = new PdfTextSection(0, 145, "Page: {page_number} of {total_pages}  ", new System.Drawing.Font("Arial", 8));
                text.HorizontalAlign = PdfTextHorizontalAlign.Right;
                converter.Footer.Add(text);
                #endregion


                SelectPdf.PdfDocument doc = converter.ConvertHtmlString(body);
                string ReportName = RM.Report;
                //if (count == 0)
                //{
                //     ReportName = ObjModelVisitReport.Call_No + "/" +".pdf";
                //}
                //else
                //{
                //     ReportName = ObjModelVisitReport.Call_No + "/" + count + ".pdf";
                //}

                string path = Server.MapPath("~/IVRReport");
                if (ReportName == null)
                {



                    // ReportName = ObjModelVisitReport.Call_No + "/" + ".pdf";
                    ReportName = "IVR-" + ObjModelVisitReport.SubJob_No + "-" + SrNo + "-Rev." + countNo + ".pdf";
                    doc.Save(path + '\\' + ReportName);
                    doc.Close();
                }
                else
                {
                    doc.Save(path + '\\' + ReportName);
                    doc.Close();
                }

                #endregion

                if (RM.PK_RM_ID != 0)
                {




                    RM.Type = "IVR";
                    RM.Status = "1";
                    RM.ImageReport = ReportNames;
                    RM.Report = ReportName;
                    RM.ReportName = ReportName;
                    RM.PK_CALL_ID = PK_CALL_ID;
                    RM.SubJob_No = ObjModelVisitReport.SubJob_No;
                    RM.PK_SubJob_Id = ObjModelVisitReport.PK_SubJob_Id;
                    RM.ProjectName = ObjModelVisitReport.End_user_Name;
                    RM.Po_No = ObjModelVisitReport.Po_No;
                    Result = objDalVisitReport.InsertUpdateReport(RM);
                    if (Result != "" && Result != null)
                    {
                        TempData["InsertCompany"] = Result;
                    }
                }
                else
                {
                    RM.Type = "IVR";
                    RM.Status = "1";
                    RM.ImageReport = ReportNames;
                    RM.Report = ReportName;
                    RM.ReportName = ReportName;
                    RM.PK_CALL_ID = PK_CALL_ID;
                    RM.SubJob_No = ObjModelVisitReport.SubJob_No;
                    RM.PK_SubJob_Id = ObjModelVisitReport.PK_SubJob_Id;
                    RM.ProjectName = ObjModelVisitReport.End_user_Name;
                    RM.Po_No = ObjModelVisitReport.Po_No;



                    Result = objDalVisitReport.InsertUpdateReport(RM);

                    if (Result != "" && Result != null)
                    {
                        TempData["InsertCompany"] = Result;
                    }
                }

                #region
                CostSheetDashBoard = objDalVisitReport.GetReportByCall_Id(PK_CALL_ID);
                if (CostSheetDashBoard.Rows.Count > 0)
                {
                    foreach (DataRow dr in CostSheetDashBoard.Rows)
                    {
                        ReportDashboard.Add(
                            new ReportModel
                            {
                                ReportName = Convert.ToString(dr["ReportName"]),
                                Report = Convert.ToString(dr["Report"]),
                                CraetedDate = Convert.ToString(dr["CraetedDate"]),
                                PK_RM_ID = Convert.ToInt32(dr["PK_RM_ID"]),
                                PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"])
                            }
                            );
                    }
                }
                ViewData["CostSheet"] = ReportDashboard;
                #endregion

                //return RedirectToAction("IvrReports", RMData);
                return RedirectToAction("VisitReportForm", new { PK_Call_ID = PK_CALL_ID }); //12-3-2020

            }
            else
            {
                //return RedirectToAction("IvrReports", RMData);
                return RedirectToAction("VisitReportForm", new { PK_Call_ID = PK_CALL_ID });

            }
        }*/


        #region BAK 25 Nov 2021
        //public ActionResult UpdateReportsRedirectGeneralTab(int? PK_CALL_ID)
        //{
        //    RMData.PK_CALL_ID = Convert.ToInt32(PK_CALL_ID);
        //    DataTable ItemDescriptionDashBoard = new DataTable();
        //    DataTable RefranceDocumentsDashBoard = new DataTable();
        //    DataTable InspectionActivitesDashBoard = new DataTable();
        //    DataTable DocumentsReviewBoard = new DataTable();
        //    DataTable EquipmentDetailsBoard = new DataTable();
        //    DataSet DSJobMasterByQtId = new DataSet();
        //    DataTable ReportDashBoard = new DataTable();
        //    DataSet UpdateReport = new DataSet();
        //    DataTable CostSheetDashBoard = new DataTable();
        //    int count = 0;
        //    DataTable ImageReportDashBoard = new DataTable();
        //    List<ReportImageModel> ImageDashBoard = new List<ReportImageModel>();
        //    List<ItemDescriptionModel> lstCompanyDashBoard = new List<ItemDescriptionModel>();
        //    List<ReferenceDocumentsModel> RefranceDocuments = new List<ReferenceDocumentsModel>();
        //    List<InspectionActivitiesModel> InspectionDocuments = new List<InspectionActivitiesModel>();
        //    List<DocumentRevieweModel> DocumentReview = new List<DocumentRevieweModel>();
        //    List<EquipmentDetailsModel> EquipmentDetails = new List<EquipmentDetailsModel>();
        //    List<ReportModel> ReportDashboard = new List<ReportModel>();
        //    DataSet dtSrNo = new DataSet();
        //    string SrNo = "";
        //    string SubJobDate = string.Empty;

        //    ReportModel RM = new ReportModel();
        //    string Result = "";
        //    if (PK_CALL_ID != 0 || PK_CALL_ID != null)
        //    {
        //        int i = 0;
        //        int J = 0;
        //        int K = 0;
        //        int L = 0;
        //        int M = 0;
        //        int N = 0;

        //        #region 
        //        DSJobMasterByQtId = objDalVisitReport.EditInspectionVisitReportByPKCallID(PK_CALL_ID);

        //        //DSJobMasterByQtId = objDalVisitReport.PrintVisitReport(PK_CALL_ID);

        //        if (DSJobMasterByQtId.Tables[0].Rows.Count > 0)
        //        {
        //            ObjModelVisitReport.SAPNo = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["SAP_No"]);
        //            ObjModelVisitReport.Branch = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Branch"]);
        //            ObjModelVisitReport.Sap_And_Controle_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Sap_And_Controle_No"]);
        //            ObjModelVisitReport.PK_IVR_ID = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["PK_IVR_ID"]);
        //            ObjModelVisitReport.Project_Name_Location = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Project_Name_Location"]);
        //            ObjModelVisitReport.Address_Of_Inspection = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Address_Of_Inspection"]);
        //            ObjModelVisitReport.End_user_Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["End_user_Name"]);
        //            ObjModelVisitReport.Vendor_Name_Location = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Vendor_Name_Location"]);
        //            ObjModelVisitReport.PK_Call_ID = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["PK_Call_ID"]);
        //            ObjModelVisitReport.Notification_Name_No_Date = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Notification_Name_No_Date"]);

        //            ObjModelVisitReport.Date_Of_Inspection = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Date_Of_Inspection"]);
        //            ObjModelVisitReport.Client_Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Client_Name"]);
        //            ObjModelVisitReport.DEC_PMC_EPC_Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["DEC_PMC_EPC_Name"]);
        //            ObjModelVisitReport.DEC_PMC_EPC_Assignment_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["DEC_PMC_EPC_Assignment_No"]);
        //            ObjModelVisitReport.Po_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Po_No"]);
        //            ObjModelVisitReport.Sub_Vendor_Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Sub_Vendor_Name"]);
        //            ObjModelVisitReport.Po_No_SubVendor = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Po_No_SubVendor"]);
        //            ObjModelVisitReport.SubJob_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["SubJob_No"]);

        //            DataSet DsSubJobDate = new DataSet();
        //            DsSubJobDate = objDalVisitReport.getsubJobdate(ObjModelVisitReport.SubJob_No);


        //            if (DsSubJobDate.Tables[0].Rows.Count > 0)
        //            {
        //                SubJobDate = DsSubJobDate.Tables[0].Rows[0]["SubJobDate"].ToString();
        //            }


        //            int kick = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Kick_Off_Pre_Inspection"]);
        //            ObjModelVisitReport.Kick_Off_Pre_Inspection = Convert.ToBoolean(kick);

        //            int Mi = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Material_identification"]);
        //            ObjModelVisitReport.Material_identification = Convert.ToBoolean(Mi);

        //            int Interim_Stages = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Interim_Stages"]);
        //            ObjModelVisitReport.Interim_Stages = Convert.ToBoolean(Interim_Stages);

        //            int Document_review = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Document_review"]);
        //            ObjModelVisitReport.Document_review = Convert.ToBoolean(Document_review);

        //            int Final_Inspection = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Final_Inspection"]);
        //            ObjModelVisitReport.Final_Inspection = Convert.ToBoolean(Final_Inspection);

        //            int Re_inspection = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Re_inspection"]);
        //            ObjModelVisitReport.Re_inspection = Convert.ToBoolean(Re_inspection);

        //            int MasterListOfcalibratedInstruments = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["MasterListOfcalibratedInstruments"]);
        //            ObjModelVisitReport.MasterListOfcalibratedInstruments = Convert.ToBoolean(MasterListOfcalibratedInstruments);


        //            ObjModelVisitReport.CanIRNbeissued = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["CanIRNbeissued"]);

        //            if (ObjModelVisitReport.CanIRNbeissued == "Yes")
        //            {
        //                ObjModelVisitReport.CanIRNbeissued = "IRN can be issued for all items";
        //            }
        //            else if (ObjModelVisitReport.CanIRNbeissued == "Partially")
        //            {
        //                ObjModelVisitReport.CanIRNbeissued = "IRN can be issued for PO item Numbers";
        //            }
        //            else if (ObjModelVisitReport.CanIRNbeissued == "No")
        //            {
        //                ObjModelVisitReport.CanIRNbeissued = "IRN can not be issued for all items.";
        //            }
        //            else
        //            {
        //                ObjModelVisitReport.CanIRNbeissued = "";
        //            }

        //            ObjModelVisitReport.IssuedPOItemNumbers = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["IssuedPOItemNumbers"]);


        //            ObjModelVisitReport.Conclusion = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Conclusion"]);
        //            ObjModelVisitReport.Pending_Activites = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Pending_Activites"]);
        //            ObjModelVisitReport.Identification_Of_Inspected = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Identification_Of_Inspected"]);
        //            ObjModelVisitReport.Areas_Of_Concerns = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Areas_Of_Concerns"]);
        //            ObjModelVisitReport.Non_Conformities_raised = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Non_Conformities_raised"]);
        //            ObjModelVisitReport.Signatures = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Signatures"]);
        //            ObjModelVisitReport.Type = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Type"]);
        //            //ObjModelVisitReport.Report_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Report_No"]);
        //            ObjModelVisitReport.Report_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["ReportNo"]);
        //            ObjModelVisitReport.Call_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Call_No"]);
        //            ObjModelVisitReport.Signatures = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Signature"]);
        //            ObjModelVisitReport.Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["FirstName"]) + " " + Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["LastName"]);
        //            ObjModelVisitReport.ReportCreatedDate = Convert.ToDateTime(DSJobMasterByQtId.Tables[0].Rows[0]["CreatedDate"]).ToString("dd/MM/yyyy");

        //            int Inspection_records = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Inspection_records"]);
        //            ObjModelVisitReport.Inspection_records = Convert.ToBoolean(Inspection_records);

        //            int Inspection_Photo = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Inspection_Photo"]);
        //            ObjModelVisitReport.Inspection_Photo = Convert.ToBoolean(Inspection_Photo);

        //            int Other_Specify = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Other_Specify"]);
        //            ObjModelVisitReport.Other_Specify = Convert.ToBoolean(Other_Specify);
        //            ObjModelVisitReport.InspectiobRecord_Remark = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["InspectiobRecord_Remark"]);
        //            ObjModelVisitReport.OtherSpecifyRecords = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["OtherSpecifyRecords"]);


        //            ObjModelVisitReport.SubJob_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["SubJob_No"]);
        //            ObjModelVisitReport.PK_SubJob_Id = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["PK_SubJob_Id"]);


        //            ObjModelVisitReport.Type = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Type"]);


        //            ObjModelVisitReport.TempInspectionPhotosNo = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["TempInspectionPhotosNo"]);
        //            ObjModelVisitReport.TempMaster_List_Of_calibrated_Instruments = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["TempMaster_List_Of_calibrated_Instruments"]);
        //            int DTUVIndiaClientEndUser = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["DTUVIndiaClientEndUser"]);
        //            ObjModelVisitReport.DTUVIndiaClientEndUser = Convert.ToBoolean(DTUVIndiaClientEndUser);
        //            int DTUVIndiaExecuting_Originating_Branch = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["DTUVIndiaExecuting_Originating_Branch"]);
        //            ObjModelVisitReport.DTUVIndiaExecuting_Originating_Branch = Convert.ToBoolean(DTUVIndiaExecuting_Originating_Branch);
        //            int DVendor_Sub_Vendor = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["DVendor_Sub_Vendor"]);
        //            ObjModelVisitReport.DVendor_Sub_Vendor = Convert.ToBoolean(DVendor_Sub_Vendor);
        //            ObjModelVisitReport.ReviseReason = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["ReviseReason"]);
        //            ObjModelVisitReport.ReviseReportNoForPDF = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["ReviseReportNoForPDF"]);
        //            ObjModelVisitReport.ReportNoForPDF = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["ReportNoForPDF"]);
        //            ObjModelVisitReport.Date_of_PO = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Date_of_PO"]);

        //        }
        //        else
        //        {

        //            InspectionvisitReportModel Abc = new InspectionvisitReportModel();
        //            Abc.PK_Call_ID = PK_CALL_ID;
        //            return RedirectToAction("VisitReportForm", Abc);
        //        }
        //        #endregion


        //        #region  item Description

        //        ItemDescriptionDashBoard = objDalVisitReport.GetitemDescription(PK_CALL_ID);
        //        if (ItemDescriptionDashBoard.Rows.Count > 0)
        //        {
        //            foreach (DataRow dr in ItemDescriptionDashBoard.Rows)
        //            {
        //                lstCompanyDashBoard.Add(
        //                    new ItemDescriptionModel
        //                    {
        //                        PK_ItemD_Id = Convert.ToInt32(dr["PK_ItemD_Id"]),
        //                        Po_Item_No = Convert.ToString(dr["Po_Item_No"]),
        //                        ItemCode_Description = Convert.ToString(dr["ItemCode_Description"]),
        //                        Po_Quantity = Convert.ToString(dr["Po_Quantity"]),
        //                        Offered_Quantity = Convert.ToString(dr["Offered_Quantity"]),
        //                        PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"]),
        //                        Item_Code = Convert.ToString(dr["Item_Code"]),
        //                        Accepted_Quantity = Convert.ToString(dr["Accepted_Quantity"]),
        //                        Cumulative_Accepted_Qty = Convert.ToString(dr["Cumulative_Accepted_Qty"]),
        //                        Unit = Convert.ToString(dr["Unit"]),
        //                    }
        //                    );
        //            }
        //        }
        //        #endregion


        //        #region Reference Documents

        //        RefranceDocumentsDashBoard = objDalVisitReport.GetReferenceDocuments(PK_CALL_ID);
        //        if (RefranceDocumentsDashBoard.Rows.Count > 0)
        //        {
        //            foreach (DataRow dr in RefranceDocumentsDashBoard.Rows)
        //            {
        //                RefranceDocuments.Add(
        //                    new ReferenceDocumentsModel
        //                    {
        //                        Document_No = Convert.ToString(dr["Document_No"]),
        //                        Document_Name = Convert.ToString(dr["Document_Name"]),
        //                        Approval_Status = Convert.ToString(dr["Approval_Status"]),
        //                        PK_RD_ID = Convert.ToInt32(dr["PK_RD_ID"]),
        //                        PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"]),
        //                        VendorDocumentNumber = Convert.ToString(dr["VendorDocumentNumber"])
        //                    }
        //                    );
        //            }
        //        }
        //        #endregion


        //        #region Inspection Activities
        //        InspectionActivitesDashBoard = objDalVisitReport.GetInspectionActivities(PK_CALL_ID);
        //        if (InspectionActivitesDashBoard.Rows.Count > 0)
        //        {
        //            foreach (DataRow dr in InspectionActivitesDashBoard.Rows)
        //            {
        //                InspectionDocuments.Add(
        //                    new InspectionActivitiesModel
        //                    {
        //                        Stages_Witnessed = Convert.ToString(dr["Stages_Witnessed"]),
        //                        PK_IA_ID = Convert.ToInt32(dr["PK_IA_ID"]),
        //                        PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"])

        //                    }
        //                    );
        //            }
        //        }
        //        #endregion

        //        #region Documents Review
        //        DocumentsReviewBoard = objDalVisitReport.GetDocumentRevieweModelByCall_Id(PK_CALL_ID);
        //        if (DocumentsReviewBoard.Rows.Count > 0)
        //        {
        //            foreach (DataRow dr in DocumentsReviewBoard.Rows)
        //            {
        //                DocumentReview.Add(
        //                    new DocumentRevieweModel
        //                    {
        //                        Description = Convert.ToString(dr["Description"]),
        //                        PK_DR_ID = Convert.ToInt32(dr["PK_DR_ID"]),
        //                        PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"])

        //                    }
        //                    );
        //            }
        //        }
        //        #endregion

        //        #region Equipments Details
        //        EquipmentDetailsBoard = objDalVisitReport.GetEquipmentDetailsModelByCall_Id(PK_CALL_ID);
        //        if (EquipmentDetailsBoard.Rows.Count > 0)
        //        {
        //            foreach (DataRow dr in EquipmentDetailsBoard.Rows)
        //            {
        //                EquipmentDetails.Add(
        //                    new EquipmentDetailsModel
        //                    {
        //                        Name_Of_Equipments = Convert.ToString(dr["Name_Of_Equipments"]),
        //                        Range = Convert.ToString(dr["Range"]),
        //                        Id = Convert.ToString(dr["Id"]),
        //                        CalibrationValid_Till_date = Convert.ToString(dr["CalibrationValid_Till_date"]),
        //                        Certification_No_Date = Convert.ToString(dr["Certification_No_Date"]),
        //                        PK_DOE_Id = Convert.ToInt32(dr["PK_DOE_Id"]),
        //                        PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"]),
        //                        SNABLseenote1 = Convert.ToString(dr["NABLseenote1"]) == "True" ? "Yes" : "-",

        //                        SNonNABLseenote2 = Convert.ToString(dr["NonNABLseenote2"]) == "True" ? "Yes" : "-"
        //                    }
        //                    );
        //            }
        //        }
        //        #endregion

        //        #region report Count
        //        UpdateReport = objDalVisitReport.GetReportByLastId(PK_CALL_ID);
        //        if (UpdateReport.Tables[0].Rows.Count > 0)
        //        {
        //            RM.PK_RM_ID = Convert.ToInt32(UpdateReport.Tables[0].Rows[0]["PK_RM_ID"]);
        //            RM.Report = Convert.ToString(UpdateReport.Tables[0].Rows[0]["Report"]);
        //            //RM.ImageReport = Convert.ToString(UpdateReport.Tables[0].Rows[0]["ImageReport"]);
        //        }

        //        #region report Count
        //        ReportDashBoard = objDalVisitReport.GetReportByCall_Id(PK_CALL_ID);
        //        if (ReportDashBoard.Rows.Count > 0)
        //        {
        //            int counts = ReportDashBoard.Rows.Count;
        //            count = counts - 1;
        //        }
        //        string countNo = Convert.ToString(count);
        //        #endregion
        //        #endregion


        //        #region Report Image data
        //        ImageReportDashBoard = objDalVisitReport.GetReportImageByCall_Id(PK_CALL_ID);
        //        if (ImageReportDashBoard.Rows.Count > 0)
        //        {
        //            foreach (DataRow dr in ImageReportDashBoard.Rows)
        //            {
        //                ImageDashBoard.Add(
        //                    new ReportImageModel
        //                    {
        //                        Image = Convert.ToString(dr["Image"]),
        //                        Heading = Convert.ToString(dr["Heading"]),
        //                    }
        //                    );
        //            }
        //        }
        //        #endregion

        //        #region Image Save to pdf
        //        SelectPdf.GlobalProperties.LicenseKey = "uZKImYuMiJmImYuIl4mZioiXiIuXgICAgA==";
        //        System.Text.StringBuilder strss = new System.Text.StringBuilder();

        //        string bodys = string.Empty;
        //        string ImageContent = string.Empty;
        //        string ReportNames = string.Empty;
        //        string paths = string.Empty;
        //        int img = 0;
        //        int imagecount = ImageReportDashBoard.Rows.Count;
        //        int rows = imagecount / 2;
        //        int imageposted = 0;
        //        int reminder = (imagecount % 2);
        //        int iteration = 1;
        //        StreamReader reader;

        //        //using (reader = new StreamReader(Server.MapPath("~/inspection-visit-report-images.html")))
        //        //{
        //        //    bodys = reader.ReadToEnd();
        //        //}


        //        ///First File start
        //        PdfPageSize pageSizes = PdfPageSize.A4;
        //        PdfPageOrientation pdfOrientations = PdfPageOrientation.Portrait;

        //        HtmlToPdf converters = new HtmlToPdf();

        //        #endregion

        //        #region Comment 11 June

        //        converters.Options.DisplayFooter = true || true || true;

        //        if (Directory.Exists(Server.MapPath("~/Content/" + ObjModelVisitReport.Call_No)))
        //        {
        //            string[] files = Directory.GetFiles(Server.MapPath("~/Content/" + ObjModelVisitReport.Call_No));
        //            foreach (string file in files)
        //            {
        //                System.IO.File.Delete(file);

        //            }

        //            Directory.Delete(Server.MapPath("~/Content/" + ObjModelVisitReport.Call_No));
        //        }

        //        Directory.CreateDirectory(Server.MapPath("~/Content/" + ObjModelVisitReport.Call_No));

        //        #region Vaibhav If Images count less than 6

        //        if (imagecount <= 6)
        //        {
        //            for (int ic = 0; ic < rows; ic++)
        //            {
        //                if (imageposted > 0)
        //                {
        //                    if ((imageposted % 6) == 0)
        //                    {
        //                        using (reader = new StreamReader(Server.MapPath("~/inspection-visit-report-images.html")))
        //                        {
        //                            bodys = reader.ReadToEnd();
        //                        }

        //                        bodys = bodys.Replace("[Image]", ImageContent);
        //                        bodys = bodys.Replace("[Logos]", "http://localhost:54895/AllJsAndCss/images/logo.png");

        //                        #region Initial setting vaibhav
        //                        //strs.Append(body);
        //                        PdfPageSize vpageSize = PdfPageSize.A4;
        //                        PdfPageOrientation vpdfOrientation = PdfPageOrientation.Portrait;
        //                        HtmlToPdf Vconverter = new HtmlToPdf();

        //                        // set the page timeout (in seconds)
        //                        Vconverter.Options.MaxPageLoadTime = 240;  //=========================5-Aug-2019
        //                        Vconverter.Options.PdfPageSize = vpageSize;
        //                        Vconverter.Options.PdfPageOrientation = vpdfOrientation;
        //                        #endregion


        //                        #region Header and Footer Vaibhav
        //                        #region Heder code
        //                        string _VHeader = string.Empty;
        //                        string _Vfooter = string.Empty;

        //                        // for Report header by abel
        //                        StreamReader _VreadHeader_File = new StreamReader(Server.MapPath("~/IV_Report_Header.html"));
        //                        _VHeader = _VreadHeader_File.ReadToEnd();
        //                        _VHeader = _VHeader.Replace("[SapAndControle_No]", ObjModelVisitReport.SubJob_No);
        //                        _VHeader = _VHeader.Replace("[RevisionNo]", countNo);
        //                        /*_Header = _Header.Replace("[Logo]", "http://localhost:54895/AllJsAndCss/images/logo.png");*/ // change123 once pulished on server
        //                        _VHeader = _VHeader.Replace("[Logo]", ConfigurationManager.AppSettings["Web"].ToString() + "/AllJsAndCss/images/logo.png");


        //                        #endregion


        //                        #region Generate no
        //                        if (RM.Report == null)
        //                        {

        //                            dtSrNo = objDalVisitReport.GetSrNo(ObjModelVisitReport.SubJob_No);
        //                            if (dtSrNo.Tables[0].Rows.Count > 0)
        //                            {
        //                                SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["SrNo"]);

        //                            }
        //                            RM.ReportNo = "IVR-" + ObjModelVisitReport.SubJob_No + "-" + SrNo + "-Rev." + countNo;
        //                            _VHeader = _VHeader.Replace("[ReportNo]", RM.ReportNo);

        //                        }
        //                        else
        //                        {
        //                            //dtSrNo = objDalVisitReport.GetReportNo(RM.Report);
        //                            dtSrNo = objDalVisitReport.GetReportNo(Convert.ToString(RM.PK_RM_ID));
        //                            if (dtSrNo.Tables[0].Rows.Count > 0)
        //                            {
        //                                SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["ReportNo"]);

        //                            }

        //                            _VHeader = _VHeader.Replace("[ReportNo]", SrNo);
        //                        }
        //                        #endregion

        //                        #region Footer Code

        //                        StreamReader _VreadFooter_File = new StreamReader(Server.MapPath("~/IV_Report_Footer.html"));
        //                        _Vfooter = _VreadFooter_File.ReadToEnd();

        //                        // header settings
        //                        Vconverter.Options.DisplayHeader = true || true || true;
        //                        Vconverter.Header.DisplayOnFirstPage = true;
        //                        Vconverter.Header.DisplayOnOddPages = true;
        //                        Vconverter.Header.DisplayOnEvenPages = true;
        //                        Vconverter.Header.Height = 75;

        //                        PdfHtmlSection VheaderHtml = new PdfHtmlSection(_VHeader, string.Empty);
        //                        VheaderHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
        //                        Vconverter.Header.Add(VheaderHtml);

        //                        // footer settings
        //                        Vconverter.Options.DisplayFooter = true || true || true;
        //                        Vconverter.Footer.DisplayOnFirstPage = true;
        //                        Vconverter.Footer.DisplayOnOddPages = true;
        //                        Vconverter.Footer.DisplayOnEvenPages = true;

        //                        Vconverter.Footer.Height = 150;
        //                        //converter.Footer.Height = 120;

        //                        PdfHtmlSection VfooterHtml = new PdfHtmlSection(_Vfooter, string.Empty);
        //                        VfooterHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
        //                        Vconverter.Footer.Add(VfooterHtml);

        //                        //end abel code


        //                        //// page numbers can be added using a PdfTextSection object
        //                        //PdfTextSection Vtext1 = new PdfTextSection(0, 145, "Page: {page_number} of {total_pages}  ", new System.Drawing.Font("Arial", 8));
        //                        //Vtext1.HorizontalAlign = PdfTextHorizontalAlign.Right;
        //                        //Vconverter.Footer.Add(Vtext1);
        //                        #endregion
        //                        #endregion

        //                        SelectPdf.PdfDocument docs = Vconverter.ConvertHtmlString(bodys);
        //                        ReportNames = ObjModelVisitReport.Call_No + "_Img_" + iteration + ".pdf";



        //                        paths = Server.MapPath("~/Content/" + ObjModelVisitReport.Call_No);
        //                        docs.Save(paths + '\\' + ReportNames);
        //                        docs.Close();
        //                        bodys = string.Empty;
        //                        ImageContent = string.Empty;
        //                        iteration = iteration + 1;
        //                        ViewBag.Reminder = "1";
        //                    }
        //                }

        //                ImageContent += "<tr><td style='padding: 10px; width: 50 %;' align='center'>" + ImageReportDashBoard.Rows[img]["Heading"].ToString() + "</td>";
        //                ImageContent += "<td style='padding: 10px; width: 50 %;' align='center'>" + ImageReportDashBoard.Rows[img + 1]["Heading"].ToString() + "</td></tr>";

        //                ImageContent += "<tr><td style='padding:10px;' align='center'><img src='" + ConfigurationManager.AppSettings["Web"].ToString() + "/CompressFiles/" + ImageReportDashBoard.Rows[img]["Image"].ToString() + "' style='width:400px;height:200px; ' align='center' alt=''></td>";
        //                ImageContent += "<td style='padding:10px;' align='center'><img src='" + ConfigurationManager.AppSettings["Web"].ToString() + "/CompressFiles/" + ImageReportDashBoard.Rows[img + 1]["Image"].ToString() + "' style='width:400px;height:200px; ' align='center' alt=''></td></tr>";

        //                img = img + 2;
        //                imageposted = imageposted + 2;
        //            }



        //            #region Reminder = 1

        //            if (reminder == 1)
        //            {
        //                if (ImageContent != string.Empty)
        //                {
        //                    ImageContent += "<tr><td style='padding: 10px; width: 50 %;' align='center'>" + ImageReportDashBoard.Rows[imagecount - 1]["Heading"].ToString() + "</td></tr>";
        //                    ImageContent += "<tr><td style='padding:10px;' align='center'><img src='" + ConfigurationManager.AppSettings["Web"].ToString() + "/CompressFiles/" + ImageReportDashBoard.Rows[imagecount - 1]["Image"].ToString() + "' style='width:400px;height:200px; ' align='center' alt=''></td></tr>";
        //                }
        //                else
        //                {
        //                    ImageContent = "<tr><td style='padding: 10px; width: 50 %;' align='center'>" + ImageReportDashBoard.Rows[imagecount - 1]["Heading"].ToString() + "</td></tr>";
        //                    ImageContent += "<tr><td style='padding:10px;' align='center'><img src='" + ConfigurationManager.AppSettings["Web"].ToString() + "/CompressFiles/" + ImageReportDashBoard.Rows[imagecount - 1]["Image"].ToString() + "' style='width:400px;height:200px; ' align='center' alt=''></td></tr>";
        //                }


        //                using (reader = new StreamReader(Server.MapPath("~/inspection-visit-report-images.html")))
        //                {
        //                    bodys = reader.ReadToEnd();
        //                }
        //                bodys = bodys.Replace("[Image]", ImageContent);
        //                bodys = bodys.Replace("[Logos]", "http://localhost:54895/AllJsAndCss/images/logo.png");

        //                #region Initial setting vaibhav
        //                //strs.Append(body);
        //                PdfPageSize vpageSize = PdfPageSize.A4;
        //                PdfPageOrientation vpdfOrientation = PdfPageOrientation.Portrait;
        //                HtmlToPdf Vconverter = new HtmlToPdf();

        //                // set the page timeout (in seconds)
        //                Vconverter.Options.MaxPageLoadTime = 240;  //=========================5-Aug-2019
        //                Vconverter.Options.PdfPageSize = vpageSize;
        //                Vconverter.Options.PdfPageOrientation = vpdfOrientation;
        //                #endregion


        //                #region Header and Footer Vaibhav
        //                #region Heder code
        //                string _VHeader = string.Empty;
        //                string _Vfooter = string.Empty;

        //                // for Report header by abel
        //                StreamReader _VreadHeader_File = new StreamReader(Server.MapPath("~/IV_Report_Header.html"));
        //                _VHeader = _VreadHeader_File.ReadToEnd();
        //                _VHeader = _VHeader.Replace("[SapAndControle_No]", ObjModelVisitReport.SubJob_No);
        //                _VHeader = _VHeader.Replace("[RevisionNo]", countNo);
        //                /*_Header = _Header.Replace("[Logo]", "http://localhost:54895/AllJsAndCss/images/logo.png");*/ // change123 once pulished on server
        //                _VHeader = _VHeader.Replace("[Logo]", ConfigurationManager.AppSettings["Web"].ToString() + "/AllJsAndCss/images/logo.png");


        //                #endregion


        //                #region Generate no
        //                if (RM.Report == null)
        //                {

        //                    dtSrNo = objDalVisitReport.GetSrNo(ObjModelVisitReport.SubJob_No);
        //                    if (dtSrNo.Tables[0].Rows.Count > 0)
        //                    {
        //                        SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["SrNo"]);

        //                    }
        //                    RM.ReportNo = "IVR-" + ObjModelVisitReport.SubJob_No + "-" + SrNo + "-Rev." + countNo;
        //                    _VHeader = _VHeader.Replace("[ReportNo]", RM.ReportNo);

        //                }
        //                else
        //                {
        //                    //dtSrNo = objDalVisitReport.GetReportNo(RM.Report);
        //                    dtSrNo = objDalVisitReport.GetReportNo(Convert.ToString(RM.PK_RM_ID));
        //                    if (dtSrNo.Tables[0].Rows.Count > 0)
        //                    {
        //                        SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["ReportNo"]);

        //                    }

        //                    _VHeader = _VHeader.Replace("[ReportNo]", SrNo);
        //                }
        //                #endregion

        //                #region Footer Code

        //                StreamReader _VreadFooter_File = new StreamReader(Server.MapPath("~/IV_Report_Footer.html"));
        //                _Vfooter = _VreadFooter_File.ReadToEnd();

        //                // header settings
        //                Vconverter.Options.DisplayHeader = true || true || true;
        //                Vconverter.Header.DisplayOnFirstPage = true;
        //                Vconverter.Header.DisplayOnOddPages = true;
        //                Vconverter.Header.DisplayOnEvenPages = true;
        //                Vconverter.Header.Height = 75;

        //                PdfHtmlSection VheaderHtml = new PdfHtmlSection(_VHeader, string.Empty);
        //                VheaderHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
        //                Vconverter.Header.Add(VheaderHtml);

        //                // footer settings
        //                Vconverter.Options.DisplayFooter = true || true || true;
        //                Vconverter.Footer.DisplayOnFirstPage = true;
        //                Vconverter.Footer.DisplayOnOddPages = true;
        //                Vconverter.Footer.DisplayOnEvenPages = true;

        //                Vconverter.Footer.Height = 150;
        //                //converter.Footer.Height = 120;

        //                PdfHtmlSection VfooterHtml = new PdfHtmlSection(_Vfooter, string.Empty);
        //                VfooterHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
        //                Vconverter.Footer.Add(VfooterHtml);

        //                //end abel code


        //                //// page numbers can be added using a PdfTextSection object
        //                //PdfTextSection Vtext1 = new PdfTextSection(0, 145, "Page: {page_number} of {total_pages}  ", new System.Drawing.Font("Arial", 8));
        //                //Vtext1.HorizontalAlign = PdfTextHorizontalAlign.Right;
        //                //Vconverter.Footer.Add(Vtext1);
        //                #endregion
        //                #endregion



        //                SelectPdf.PdfDocument docs = Vconverter.ConvertHtmlString(bodys);
        //                ReportNames = ObjModelVisitReport.Call_No + "_Img_" + iteration + ".pdf";

        //                paths = Server.MapPath("~/Content/" + ObjModelVisitReport.Call_No);
        //                docs.Save(paths + '\\' + ReportNames);
        //                docs.Close();
        //                bodys = string.Empty;
        //                ImageContent = string.Empty;
        //                ViewBag.Reminder = "1";
        //            }

        //            #region 4 Image If not reminder =0
        //            if (imageposted <= imagecount)
        //            {
        //                if (reminder == 0)
        //                {
        //                    ViewBag.Reminder = "2";
        //                    using (reader = new StreamReader(Server.MapPath("~/inspection-visit-report-images.html")))
        //                    {
        //                        bodys = reader.ReadToEnd();
        //                    }
        //                    bodys = bodys.Replace("[Image]", ImageContent);
        //                    bodys = bodys.Replace("[Logos]", "http://localhost:54895/AllJsAndCss/images/logo.png");



        //                    #region Initial setting vaibhav
        //                    //strs.Append(body);
        //                    PdfPageSize vpageSize = PdfPageSize.A4;
        //                    PdfPageOrientation vpdfOrientation = PdfPageOrientation.Portrait;
        //                    HtmlToPdf Vconverter = new HtmlToPdf();

        //                    // set the page timeout (in seconds)
        //                    Vconverter.Options.MaxPageLoadTime = 240;  //=========================5-Aug-2019
        //                    Vconverter.Options.PdfPageSize = vpageSize;
        //                    Vconverter.Options.PdfPageOrientation = vpdfOrientation;
        //                    #endregion


        //                    #region Header and Footer Vaibhav
        //                    #region Heder code
        //                    string _VHeader = string.Empty;
        //                    string _Vfooter = string.Empty;

        //                    // for Report header by abel
        //                    StreamReader _VreadHeader_File = new StreamReader(Server.MapPath("~/IV_Report_Header.html"));
        //                    _VHeader = _VreadHeader_File.ReadToEnd();
        //                    _VHeader = _VHeader.Replace("[SapAndControle_No]", ObjModelVisitReport.SubJob_No);
        //                    _VHeader = _VHeader.Replace("[RevisionNo]", countNo);
        //                    /*_Header = _Header.Replace("[Logo]", "http://localhost:54895/AllJsAndCss/images/logo.png");*/ // change123 once pulished on server
        //                    _VHeader = _VHeader.Replace("[Logo]", ConfigurationManager.AppSettings["Web"].ToString() + "/AllJsAndCss/images/logo.png");


        //                    #endregion


        //                    #region Generate no
        //                    if (RM.Report == null)
        //                    {

        //                        dtSrNo = objDalVisitReport.GetSrNo(ObjModelVisitReport.SubJob_No);
        //                        if (dtSrNo.Tables[0].Rows.Count > 0)
        //                        {
        //                            SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["SrNo"]);

        //                        }
        //                        RM.ReportNo = "IVR-" + ObjModelVisitReport.SubJob_No + "-" + SrNo + "- Rev." + countNo;
        //                        _VHeader = _VHeader.Replace("[ReportNo]", RM.ReportNo);

        //                    }
        //                    else
        //                    {
        //                        //dtSrNo = objDalVisitReport.GetReportNo(RM.Report);
        //                        dtSrNo = objDalVisitReport.GetReportNo(Convert.ToString(RM.PK_RM_ID));
        //                        if (dtSrNo.Tables[0].Rows.Count > 0)
        //                        {
        //                            SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["ReportNo"]);

        //                        }

        //                        _VHeader = _VHeader.Replace("[ReportNo]", SrNo);
        //                    }
        //                    #endregion

        //                    #region Footer Code

        //                    StreamReader _VreadFooter_File = new StreamReader(Server.MapPath("~/IV_Report_Footer.html"));
        //                    _Vfooter = _VreadFooter_File.ReadToEnd();

        //                    // header settings
        //                    Vconverter.Options.DisplayHeader = true || true || true;
        //                    Vconverter.Header.DisplayOnFirstPage = true;
        //                    Vconverter.Header.DisplayOnOddPages = true;
        //                    Vconverter.Header.DisplayOnEvenPages = true;
        //                    Vconverter.Header.Height = 75;

        //                    PdfHtmlSection VheaderHtml = new PdfHtmlSection(_VHeader, string.Empty);
        //                    VheaderHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
        //                    Vconverter.Header.Add(VheaderHtml);

        //                    // footer settings
        //                    Vconverter.Options.DisplayFooter = true || true || true;
        //                    Vconverter.Footer.DisplayOnFirstPage = true;
        //                    Vconverter.Footer.DisplayOnOddPages = true;
        //                    Vconverter.Footer.DisplayOnEvenPages = true;

        //                    Vconverter.Footer.Height = 150;
        //                    //converter.Footer.Height = 120;

        //                    PdfHtmlSection VfooterHtml = new PdfHtmlSection(_Vfooter, string.Empty);
        //                    VfooterHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
        //                    Vconverter.Footer.Add(VfooterHtml);

        //                    //end abel code


        //                    //// page numbers can be added using a PdfTextSection object
        //                    //PdfTextSection Vtext1 = new PdfTextSection(0, 145, "Page: {page_number} of {total_pages}  ", new System.Drawing.Font("Arial", 8));
        //                    //Vtext1.HorizontalAlign = PdfTextHorizontalAlign.Right;
        //                    //Vconverter.Footer.Add(Vtext1);
        //                    #endregion
        //                    #endregion

        //                    Vconverter.Options.AutoFitWidth = HtmlToPdfPageFitMode.ShrinkOnly;
        //                    Vconverter.Options.AutoFitHeight = HtmlToPdfPageFitMode.NoAdjustment;



        //                    // SelectPdf.PdfDocument docs = converters.ConvertHtmlString(bodys);
        //                    SelectPdf.PdfDocument docs = Vconverter.ConvertHtmlString(bodys);

        //                    ReportNames = ObjModelVisitReport.Call_No + "_Img_" + iteration + ".pdf";
        //                    paths = Server.MapPath("~/Content/" + ObjModelVisitReport.Call_No);
        //                    docs.Save(paths + '\\' + ReportNames);
        //                    docs.Close();
        //                    bodys = string.Empty;
        //                    ImageContent = string.Empty;
        //                    iteration = iteration + 1;
        //                }
        //            }

        //            #endregion


        //            #region 6 Images
        //            if (((imageposted % 6) == 0) && imageposted > 0)
        //            {
        //                ViewBag.Reminder = "2";
        //                using (reader = new StreamReader(Server.MapPath("~/inspection-visit-report-images.html")))
        //                {
        //                    bodys = reader.ReadToEnd();
        //                }
        //                bodys = bodys.Replace("[Image]", ImageContent);
        //                bodys = bodys.Replace("[Logos]", "http://localhost:54895/AllJsAndCss/images/logo.png");



        //                #region Initial setting vaibhav
        //                //strs.Append(body);
        //                PdfPageSize vpageSize = PdfPageSize.A4;
        //                PdfPageOrientation vpdfOrientation = PdfPageOrientation.Portrait;
        //                HtmlToPdf Vconverter = new HtmlToPdf();

        //                // set the page timeout (in seconds)
        //                Vconverter.Options.MaxPageLoadTime = 240;  //=========================5-Aug-2019
        //                Vconverter.Options.PdfPageSize = vpageSize;
        //                Vconverter.Options.PdfPageOrientation = vpdfOrientation;
        //                #endregion


        //                #region Header and Footer Vaibhav
        //                #region Heder code
        //                string _VHeader = string.Empty;
        //                string _Vfooter = string.Empty;

        //                // for Report header by abel
        //                StreamReader _VreadHeader_File = new StreamReader(Server.MapPath("~/IV_Report_Header.html"));
        //                _VHeader = _VreadHeader_File.ReadToEnd();
        //                _VHeader = _VHeader.Replace("[SapAndControle_No]", ObjModelVisitReport.SubJob_No);
        //                _VHeader = _VHeader.Replace("[RevisionNo]", countNo);
        //                /*_Header = _Header.Replace("[Logo]", "http://localhost:54895/AllJsAndCss/images/logo.png");*/ // change123 once pulished on server
        //                _VHeader = _VHeader.Replace("[Logo]", ConfigurationManager.AppSettings["Web"].ToString() + "/AllJsAndCss/images/logo.png");


        //                #endregion


        //                #region Generate no
        //                if (RM.Report == null)
        //                {

        //                    dtSrNo = objDalVisitReport.GetSrNo(ObjModelVisitReport.SubJob_No);
        //                    if (dtSrNo.Tables[0].Rows.Count > 0)
        //                    {
        //                        SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["SrNo"]);

        //                    }
        //                    RM.ReportNo = "IVR-" + ObjModelVisitReport.SubJob_No + "-" + SrNo + "-Rev." + countNo;
        //                    _VHeader = _VHeader.Replace("[ReportNo]", RM.ReportNo);

        //                }
        //                else
        //                {
        //                    //dtSrNo = objDalVisitReport.GetReportNo(RM.Report);
        //                    dtSrNo = objDalVisitReport.GetReportNo(Convert.ToString(RM.PK_RM_ID));
        //                    if (dtSrNo.Tables[0].Rows.Count > 0)
        //                    {
        //                        SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["ReportNo"]);

        //                    }

        //                    _VHeader = _VHeader.Replace("[ReportNo]", SrNo);
        //                }
        //                #endregion

        //                #region Footer Code

        //                StreamReader _VreadFooter_File = new StreamReader(Server.MapPath("~/IV_Report_Footer.html"));
        //                _Vfooter = _VreadFooter_File.ReadToEnd();

        //                // header settings
        //                Vconverter.Options.DisplayHeader = true || true || true;
        //                Vconverter.Header.DisplayOnFirstPage = true;
        //                Vconverter.Header.DisplayOnOddPages = true;
        //                Vconverter.Header.DisplayOnEvenPages = true;
        //                Vconverter.Header.Height = 75;

        //                PdfHtmlSection VheaderHtml = new PdfHtmlSection(_VHeader, string.Empty);
        //                VheaderHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
        //                Vconverter.Header.Add(VheaderHtml);

        //                // footer settings
        //                Vconverter.Options.DisplayFooter = true || true || true;
        //                Vconverter.Footer.DisplayOnFirstPage = true;
        //                Vconverter.Footer.DisplayOnOddPages = true;
        //                Vconverter.Footer.DisplayOnEvenPages = true;

        //                Vconverter.Footer.Height = 150;
        //                //converter.Footer.Height = 120;

        //                PdfHtmlSection VfooterHtml = new PdfHtmlSection(_Vfooter, string.Empty);
        //                VfooterHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
        //                Vconverter.Footer.Add(VfooterHtml);

        //                //end abel code


        //                // page numbers can be added using a PdfTextSection object
        //                //PdfTextSection Vtext1 = new PdfTextSection(0, 145, "Page: {page_number} of {total_pages}  ", new System.Drawing.Font("Arial", 8));
        //                //Vtext1.HorizontalAlign = PdfTextHorizontalAlign.Right;
        //                //Vconverter.Footer.Add(Vtext1);
        //                #endregion
        //                #endregion





        //                // SelectPdf.PdfDocument docs = converters.ConvertHtmlString(bodys);
        //                SelectPdf.PdfDocument docs = Vconverter.ConvertHtmlString(bodys);

        //                ReportNames = ObjModelVisitReport.Call_No + "_Img_" + iteration + ".pdf";
        //                paths = Server.MapPath("~/Content/" + ObjModelVisitReport.Call_No);
        //                docs.Save(paths + '\\' + ReportNames);
        //                docs.Close();
        //                bodys = string.Empty;
        //                ImageContent = string.Empty;
        //                iteration = iteration + 1;
        //            }
        //            #endregion


        //        }
        //        #endregion






        //        #endregion


        //        #region Vaibhav If Images count more than 6
        //        else
        //        {
        //            for (int ic = 0; ic < rows; ic++)
        //            {
        //                if (imageposted > 0)
        //                {
        //                    if ((imageposted % 6) == 0)
        //                    {
        //                        using (reader = new StreamReader(Server.MapPath("~/inspection-visit-report-images.html")))
        //                        {
        //                            bodys = reader.ReadToEnd();
        //                        }

        //                        bodys = bodys.Replace("[Image]", ImageContent);
        //                        bodys = bodys.Replace("[Logos]", "http://localhost:54895/AllJsAndCss/images/logo.png");

        //                        #region Initial setting vaibhav
        //                        //strs.Append(body);
        //                        PdfPageSize vpageSize = PdfPageSize.A4;
        //                        PdfPageOrientation vpdfOrientation = PdfPageOrientation.Portrait;
        //                        HtmlToPdf Vconverter = new HtmlToPdf();

        //                        // set the page timeout (in seconds)
        //                        Vconverter.Options.MaxPageLoadTime = 240;  //=========================5-Aug-2019
        //                        Vconverter.Options.PdfPageSize = vpageSize;
        //                        Vconverter.Options.PdfPageOrientation = vpdfOrientation;
        //                        #endregion


        //                        #region Header and Footer Vaibhav
        //                        #region Heder code
        //                        string _VHeader = string.Empty;
        //                        string _Vfooter = string.Empty;

        //                        // for Report header by abel
        //                        StreamReader _VreadHeader_File = new StreamReader(Server.MapPath("~/IV_Report_Header.html"));
        //                        _VHeader = _VreadHeader_File.ReadToEnd();
        //                        _VHeader = _VHeader.Replace("[SapAndControle_No]", ObjModelVisitReport.SubJob_No);
        //                        _VHeader = _VHeader.Replace("[RevisionNo]", countNo);
        //                        /*_Header = _Header.Replace("[Logo]", "http://localhost:54895/AllJsAndCss/images/logo.png");*/ // change123 once pulished on server
        //                        _VHeader = _VHeader.Replace("[Logo]", ConfigurationManager.AppSettings["Web"].ToString() + "/AllJsAndCss/images/logo.png");


        //                        #endregion


        //                        #region Generate no
        //                        if (RM.Report == null)
        //                        {

        //                            dtSrNo = objDalVisitReport.GetSrNo(ObjModelVisitReport.SubJob_No);
        //                            if (dtSrNo.Tables[0].Rows.Count > 0)
        //                            {
        //                                SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["SrNo"]);

        //                            }
        //                            RM.ReportNo = "IVR-" + ObjModelVisitReport.SubJob_No + "-" + SrNo + "-Rev." + countNo;
        //                            _VHeader = _VHeader.Replace("[ReportNo]", RM.ReportNo);

        //                        }
        //                        else
        //                        {
        //                            //dtSrNo = objDalVisitReport.GetReportNo(RM.Report);
        //                            dtSrNo = objDalVisitReport.GetReportNo(Convert.ToString(RM.PK_RM_ID));
        //                            if (dtSrNo.Tables[0].Rows.Count > 0)
        //                            {
        //                                SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["ReportNo"]);

        //                            }

        //                            _VHeader = _VHeader.Replace("[ReportNo]", SrNo);
        //                        }
        //                        #endregion

        //                        #region Footer Code

        //                        StreamReader _VreadFooter_File = new StreamReader(Server.MapPath("~/IV_Report_Footer.html"));
        //                        _Vfooter = _VreadFooter_File.ReadToEnd();

        //                        // header settings
        //                        Vconverter.Options.DisplayHeader = true || true || true;
        //                        Vconverter.Header.DisplayOnFirstPage = true;
        //                        Vconverter.Header.DisplayOnOddPages = true;
        //                        Vconverter.Header.DisplayOnEvenPages = true;
        //                        Vconverter.Header.Height = 75;

        //                        PdfHtmlSection VheaderHtml = new PdfHtmlSection(_VHeader, string.Empty);
        //                        VheaderHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
        //                        Vconverter.Header.Add(VheaderHtml);

        //                        // footer settings
        //                        Vconverter.Options.DisplayFooter = true || true || true;
        //                        Vconverter.Footer.DisplayOnFirstPage = true;
        //                        Vconverter.Footer.DisplayOnOddPages = true;
        //                        Vconverter.Footer.DisplayOnEvenPages = true;

        //                        Vconverter.Footer.Height = 150;
        //                        //converter.Footer.Height = 120;

        //                        PdfHtmlSection VfooterHtml = new PdfHtmlSection(_Vfooter, string.Empty);
        //                        VfooterHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
        //                        Vconverter.Footer.Add(VfooterHtml);

        //                        //end abel code


        //                        // page numbers can be added using a PdfTextSection object
        //                        //PdfTextSection Vtext1 = new PdfTextSection(0, 145, "Page: {page_number} of {total_pages}  ", new System.Drawing.Font("Arial", 8));
        //                        //Vtext1.HorizontalAlign = PdfTextHorizontalAlign.Right;
        //                        //Vconverter.Footer.Add(Vtext1);
        //                        #endregion
        //                        #endregion




        //                        SelectPdf.PdfDocument docs = Vconverter.ConvertHtmlString(bodys);
        //                        ReportNames = ObjModelVisitReport.Call_No + "_Img_" + iteration + ".pdf";



        //                        paths = Server.MapPath("~/Content/" + ObjModelVisitReport.Call_No);
        //                        docs.Save(paths + '\\' + ReportNames);
        //                        docs.Close();
        //                        bodys = string.Empty;
        //                        ImageContent = string.Empty;
        //                        iteration = iteration + 1;
        //                    }
        //                }

        //                ImageContent += "<tr><td style='padding: 10px; width: 50 %;' align='center'>" + ImageReportDashBoard.Rows[img]["Heading"].ToString() + "</td>";
        //                ImageContent += "<td style='padding: 10px; width: 50 %;' align='center'>" + ImageReportDashBoard.Rows[img + 1]["Heading"].ToString() + "</td></tr>";

        //                ImageContent += "<tr><td style='padding:10px;' align='center'><img src='" + ConfigurationManager.AppSettings["Web"].ToString() + "/CompressFiles/" + ImageReportDashBoard.Rows[img]["Image"].ToString() + "' style='width:400px;height:200px; ' align='center' alt=''></td>";
        //                ImageContent += "<td style='padding:10px;' align='center'><img src='" + ConfigurationManager.AppSettings["Web"].ToString() + "/CompressFiles/" + ImageReportDashBoard.Rows[img + 1]["Image"].ToString() + "' style='width:400px;height:200px; ' align='center' alt=''></td></tr>";

        //                img = img + 2;
        //                imageposted = imageposted + 2;
        //            }

        //            #region Head Cond If
        //            if (((imageposted % 6) == 0) && imageposted > 0)
        //            //if (((imageposted % 6) == 0) || imageposted > 0) //31 July
        //            {

        //                using (reader = new StreamReader(Server.MapPath("~/inspection-visit-report-images.html")))
        //                {
        //                    bodys = reader.ReadToEnd();
        //                }
        //                bodys = bodys.Replace("[Image]", ImageContent);
        //                bodys = bodys.Replace("[Logos]", "http://localhost:54895/AllJsAndCss/images/logo.png");



        //                #region Initial setting vaibhav
        //                //strs.Append(body);
        //                PdfPageSize vpageSize = PdfPageSize.A4;
        //                PdfPageOrientation vpdfOrientation = PdfPageOrientation.Portrait;
        //                HtmlToPdf Vconverter = new HtmlToPdf();

        //                // set the page timeout (in seconds)
        //                Vconverter.Options.MaxPageLoadTime = 240;  //=========================5-Aug-2019
        //                Vconverter.Options.PdfPageSize = vpageSize;
        //                Vconverter.Options.PdfPageOrientation = vpdfOrientation;
        //                #endregion


        //                #region Header and Footer Vaibhav
        //                #region Heder code
        //                string _VHeader = string.Empty;
        //                string _Vfooter = string.Empty;

        //                // for Report header by abel
        //                StreamReader _VreadHeader_File = new StreamReader(Server.MapPath("~/IV_Report_Header.html"));
        //                _VHeader = _VreadHeader_File.ReadToEnd();
        //                _VHeader = _VHeader.Replace("[SapAndControle_No]", ObjModelVisitReport.SubJob_No);
        //                _VHeader = _VHeader.Replace("[RevisionNo]", countNo);
        //                /*_Header = _Header.Replace("[Logo]", "http://localhost:54895/AllJsAndCss/images/logo.png");*/ // change123 once pulished on server
        //                _VHeader = _VHeader.Replace("[Logo]", ConfigurationManager.AppSettings["Web"].ToString() + "/AllJsAndCss/images/logo.png");


        //                #endregion


        //                #region Generate no
        //                if (RM.Report == null)
        //                {

        //                    dtSrNo = objDalVisitReport.GetSrNo(ObjModelVisitReport.SubJob_No);
        //                    if (dtSrNo.Tables[0].Rows.Count > 0)
        //                    {
        //                        SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["SrNo"]);

        //                    }
        //                    RM.ReportNo = "IVR-" + ObjModelVisitReport.SubJob_No + "-" + SrNo + "-Rev." + countNo;
        //                    _VHeader = _VHeader.Replace("[ReportNo]", RM.ReportNo);

        //                }
        //                else
        //                {
        //                    //dtSrNo = objDalVisitReport.GetReportNo(RM.Report);
        //                    dtSrNo = objDalVisitReport.GetReportNo(Convert.ToString(RM.PK_RM_ID));
        //                    if (dtSrNo.Tables[0].Rows.Count > 0)
        //                    {
        //                        SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["ReportNo"]);

        //                    }

        //                    _VHeader = _VHeader.Replace("[ReportNo]", SrNo);
        //                }
        //                #endregion

        //                #region Footer Code

        //                StreamReader _VreadFooter_File = new StreamReader(Server.MapPath("~/IV_Report_Footer.html"));
        //                _Vfooter = _VreadFooter_File.ReadToEnd();

        //                // header settings
        //                Vconverter.Options.DisplayHeader = true || true || true;
        //                Vconverter.Header.DisplayOnFirstPage = true;
        //                Vconverter.Header.DisplayOnOddPages = true;
        //                Vconverter.Header.DisplayOnEvenPages = true;
        //                Vconverter.Header.Height = 75;

        //                PdfHtmlSection VheaderHtml = new PdfHtmlSection(_VHeader, string.Empty);
        //                VheaderHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
        //                Vconverter.Header.Add(VheaderHtml);

        //                // footer settings
        //                Vconverter.Options.DisplayFooter = true || true || true;
        //                Vconverter.Footer.DisplayOnFirstPage = true;
        //                Vconverter.Footer.DisplayOnOddPages = true;
        //                Vconverter.Footer.DisplayOnEvenPages = true;

        //                Vconverter.Footer.Height = 150;
        //                //converter.Footer.Height = 120;

        //                PdfHtmlSection VfooterHtml = new PdfHtmlSection(_Vfooter, string.Empty);
        //                VfooterHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
        //                Vconverter.Footer.Add(VfooterHtml);

        //                //end abel code


        //                //// page numbers can be added using a PdfTextSection object
        //                //PdfTextSection Vtext1 = new PdfTextSection(0, 145, "Page: {page_number} of {total_pages}  ", new System.Drawing.Font("Arial", 8));
        //                //Vtext1.HorizontalAlign = PdfTextHorizontalAlign.Right;
        //                //Vconverter.Footer.Add(Vtext1);
        //                #endregion
        //                #endregion





        //                // SelectPdf.PdfDocument docs = converters.ConvertHtmlString(bodys);
        //                SelectPdf.PdfDocument docs = Vconverter.ConvertHtmlString(bodys);

        //                ReportNames = ObjModelVisitReport.Call_No + "_Img_" + iteration + ".pdf";
        //                paths = Server.MapPath("~/Content/" + ObjModelVisitReport.Call_No);
        //                docs.Save(paths + '\\' + ReportNames);
        //                docs.Close();
        //                bodys = string.Empty;
        //                ImageContent = string.Empty;
        //                iteration = iteration + 1;
        //            }
        //            #endregion





        //            ViewBag.Reminder = "2";

        //            #region  reminder
        //            if (reminder == 1)
        //            {
        //                if (ImageContent != string.Empty)
        //                {
        //                    ImageContent += "<tr><td style='padding: 10px; width: 50 %;' align='center'>" + ImageReportDashBoard.Rows[imagecount - 1]["Heading"].ToString() + "</td></tr>";
        //                    ImageContent += "<tr><td style='padding:10px;' align='center'><img src='" + ConfigurationManager.AppSettings["Web"].ToString() + "/CompressFiles/" + ImageReportDashBoard.Rows[imagecount - 1]["Image"].ToString() + "' style='width:400px;height:200px; ' align='center' alt=''></td></tr>";
        //                }
        //                else
        //                {
        //                    ImageContent = "<tr><td style='padding: 10px; width: 50 %;' align='center'>" + ImageReportDashBoard.Rows[imagecount - 1]["Heading"].ToString() + "</td></tr>";
        //                    ImageContent += "<tr><td style='padding:10px;' align='center'><img src='" + ConfigurationManager.AppSettings["Web"].ToString() + "/CompressFiles/" + ImageReportDashBoard.Rows[imagecount - 1]["Image"].ToString() + "' style='width:400px;height:200px; ' align='center' alt=''></td></tr>";
        //                }


        //                using (reader = new StreamReader(Server.MapPath("~/inspection-visit-report-images.html")))
        //                {
        //                    bodys = reader.ReadToEnd();
        //                }
        //                bodys = bodys.Replace("[Image]", ImageContent);
        //                bodys = bodys.Replace("[Logos]", "http://localhost:54895/AllJsAndCss/images/logo.png");

        //                #region Initial setting vaibhav
        //                //strs.Append(body);
        //                PdfPageSize vpageSize = PdfPageSize.A4;
        //                PdfPageOrientation vpdfOrientation = PdfPageOrientation.Portrait;
        //                HtmlToPdf Vconverter = new HtmlToPdf();

        //                // set the page timeout (in seconds)
        //                Vconverter.Options.MaxPageLoadTime = 240;  //=========================5-Aug-2019
        //                Vconverter.Options.PdfPageSize = vpageSize;
        //                Vconverter.Options.PdfPageOrientation = vpdfOrientation;
        //                #endregion


        //                #region Header and Footer Vaibhav
        //                #region Heder code
        //                string _VHeader = string.Empty;
        //                string _Vfooter = string.Empty;

        //                // for Report header by abel
        //                StreamReader _VreadHeader_File = new StreamReader(Server.MapPath("~/IV_Report_Header.html"));
        //                _VHeader = _VreadHeader_File.ReadToEnd();
        //                _VHeader = _VHeader.Replace("[SapAndControle_No]", ObjModelVisitReport.SubJob_No);
        //                _VHeader = _VHeader.Replace("[RevisionNo]", countNo);
        //                /*_Header = _Header.Replace("[Logo]", "http://localhost:54895/AllJsAndCss/images/logo.png");*/ // change123 once pulished on server
        //                _VHeader = _VHeader.Replace("[Logo]", ConfigurationManager.AppSettings["Web"].ToString() + "/AllJsAndCss/images/logo.png");


        //                #endregion


        //                #region Generate no
        //                if (RM.Report == null)
        //                {

        //                    dtSrNo = objDalVisitReport.GetSrNo(ObjModelVisitReport.SubJob_No);
        //                    if (dtSrNo.Tables[0].Rows.Count > 0)
        //                    {
        //                        SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["SrNo"]);

        //                    }
        //                    RM.ReportNo = "IVR-" + ObjModelVisitReport.SubJob_No + "-" + SrNo + "- Rev." + countNo;
        //                    _VHeader = _VHeader.Replace("[ReportNo]", RM.ReportNo);

        //                }
        //                else
        //                {
        //                    //dtSrNo = objDalVisitReport.GetReportNo(RM.Report);
        //                    dtSrNo = objDalVisitReport.GetReportNo(Convert.ToString(RM.PK_RM_ID));
        //                    if (dtSrNo.Tables[0].Rows.Count > 0)
        //                    {
        //                        SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["ReportNo"]);

        //                    }

        //                    _VHeader = _VHeader.Replace("[ReportNo]", SrNo);
        //                }
        //                #endregion

        //                #region Footer Code

        //                StreamReader _VreadFooter_File = new StreamReader(Server.MapPath("~/IV_Report_Footer.html"));
        //                _Vfooter = _VreadFooter_File.ReadToEnd();

        //                // header settings
        //                Vconverter.Options.DisplayHeader = true || true || true;
        //                Vconverter.Header.DisplayOnFirstPage = true;
        //                Vconverter.Header.DisplayOnOddPages = true;
        //                Vconverter.Header.DisplayOnEvenPages = true;
        //                Vconverter.Header.Height = 75;

        //                PdfHtmlSection VheaderHtml = new PdfHtmlSection(_VHeader, string.Empty);
        //                VheaderHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
        //                Vconverter.Header.Add(VheaderHtml);

        //                // footer settings
        //                Vconverter.Options.DisplayFooter = true || true || true;
        //                Vconverter.Footer.DisplayOnFirstPage = true;
        //                Vconverter.Footer.DisplayOnOddPages = true;
        //                Vconverter.Footer.DisplayOnEvenPages = true;

        //                Vconverter.Footer.Height = 150;
        //                //converter.Footer.Height = 120;

        //                PdfHtmlSection VfooterHtml = new PdfHtmlSection(_Vfooter, string.Empty);
        //                VfooterHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
        //                Vconverter.Footer.Add(VfooterHtml);

        //                //end abel code


        //                // page numbers can be added using a PdfTextSection object
        //                //PdfTextSection Vtext1 = new PdfTextSection(0, 145, "Page: {page_number} of {total_pages}  ", new System.Drawing.Font("Arial", 8));
        //                //Vtext1.HorizontalAlign = PdfTextHorizontalAlign.Right;
        //                //Vconverter.Footer.Add(Vtext1);
        //                #endregion
        //                #endregion



        //                SelectPdf.PdfDocument docs = Vconverter.ConvertHtmlString(bodys);
        //                ReportNames = ObjModelVisitReport.Call_No + "_Img_" + iteration + ".pdf";

        //                paths = Server.MapPath("~/Content/" + ObjModelVisitReport.Call_No);
        //                docs.Save(paths + '\\' + ReportNames);
        //                docs.Close();
        //                bodys = string.Empty;
        //                ImageContent = string.Empty;
        //                ViewBag.Reminder = "1";
        //            }
        //            #endregion

        //            #region If ImageContent not null
        //            // if (ImageContent != null || ImageContent != "" && ViewBag.Reminder!="1")


        //            if (/*ImageContent != null || ImageContent != "" &&*/ ViewBag.Reminder != "1")
        //            {
        //                ViewBag.Reminder = "2";
        //                using (reader = new StreamReader(Server.MapPath("~/inspection-visit-report-images.html")))
        //                {
        //                    bodys = reader.ReadToEnd();
        //                }
        //                bodys = bodys.Replace("[Image]", ImageContent);
        //                bodys = bodys.Replace("[Logos]", "http://localhost:54895/AllJsAndCss/images/logo.png");



        //                #region Initial setting vaibhav
        //                //strs.Append(body);
        //                PdfPageSize vpageSize = PdfPageSize.A4;
        //                PdfPageOrientation vpdfOrientation = PdfPageOrientation.Portrait;
        //                HtmlToPdf Vconverter = new HtmlToPdf();

        //                // set the page timeout (in seconds)
        //                Vconverter.Options.MaxPageLoadTime = 240;  //=========================5-Aug-2019
        //                Vconverter.Options.PdfPageSize = vpageSize;
        //                Vconverter.Options.PdfPageOrientation = vpdfOrientation;
        //                #endregion


        //                #region Header and Footer Vaibhav
        //                #region Heder code
        //                string _VHeader = string.Empty;
        //                string _Vfooter = string.Empty;

        //                // for Report header by abel
        //                StreamReader _VreadHeader_File = new StreamReader(Server.MapPath("~/IV_Report_Header.html"));
        //                _VHeader = _VreadHeader_File.ReadToEnd();
        //                _VHeader = _VHeader.Replace("[SapAndControle_No]", ObjModelVisitReport.SubJob_No);
        //                _VHeader = _VHeader.Replace("[RevisionNo]", countNo);
        //                /*_Header = _Header.Replace("[Logo]", "http://localhost:54895/AllJsAndCss/images/logo.png");*/ // change123 once pulished on server
        //                _VHeader = _VHeader.Replace("[Logo]", ConfigurationManager.AppSettings["Web"].ToString() + "/AllJsAndCss/images/logo.png");


        //                #endregion


        //                #region Generate no
        //                if (RM.Report == null)
        //                {

        //                    dtSrNo = objDalVisitReport.GetSrNo(ObjModelVisitReport.SubJob_No);
        //                    if (dtSrNo.Tables[0].Rows.Count > 0)
        //                    {
        //                        SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["SrNo"]);

        //                    }
        //                    RM.ReportNo = "IVR-" + ObjModelVisitReport.SubJob_No + "-" + SrNo + "-Rev." + countNo;
        //                    _VHeader = _VHeader.Replace("[ReportNo]", RM.ReportNo);

        //                }
        //                else
        //                {
        //                    //dtSrNo = objDalVisitReport.GetReportNo(RM.Report);
        //                    dtSrNo = objDalVisitReport.GetReportNo(Convert.ToString(RM.PK_RM_ID));
        //                    if (dtSrNo.Tables[0].Rows.Count > 0)
        //                    {
        //                        SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["ReportNo"]);

        //                    }

        //                    _VHeader = _VHeader.Replace("[ReportNo]", SrNo);
        //                }
        //                #endregion

        //                #region Footer Code

        //                StreamReader _VreadFooter_File = new StreamReader(Server.MapPath("~/IV_Report_Footer.html"));
        //                _Vfooter = _VreadFooter_File.ReadToEnd();

        //                // header settings
        //                Vconverter.Options.DisplayHeader = true || true || true;
        //                Vconverter.Header.DisplayOnFirstPage = true;
        //                Vconverter.Header.DisplayOnOddPages = true;
        //                Vconverter.Header.DisplayOnEvenPages = true;
        //                Vconverter.Header.Height = 75;

        //                PdfHtmlSection VheaderHtml = new PdfHtmlSection(_VHeader, string.Empty);
        //                VheaderHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
        //                Vconverter.Header.Add(VheaderHtml);

        //                // footer settings
        //                Vconverter.Options.DisplayFooter = true || true || true;
        //                Vconverter.Footer.DisplayOnFirstPage = true;
        //                Vconverter.Footer.DisplayOnOddPages = true;
        //                Vconverter.Footer.DisplayOnEvenPages = true;

        //                Vconverter.Footer.Height = 150;
        //                //converter.Footer.Height = 120;

        //                PdfHtmlSection VfooterHtml = new PdfHtmlSection(_Vfooter, string.Empty);
        //                VfooterHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
        //                Vconverter.Footer.Add(VfooterHtml);

        //                //end abel code


        //                //// page numbers can be added using a PdfTextSection object
        //                //PdfTextSection Vtext1 = new PdfTextSection(0, 145, "Page: {page_number} of {total_pages}  ", new System.Drawing.Font("Arial", 8));
        //                //Vtext1.HorizontalAlign = PdfTextHorizontalAlign.Right;
        //                //Vconverter.Footer.Add(Vtext1);
        //                #endregion
        //                #endregion





        //                // SelectPdf.PdfDocument docs = converters.ConvertHtmlString(bodys);
        //                SelectPdf.PdfDocument docs = Vconverter.ConvertHtmlString(bodys);

        //                ReportNames = ObjModelVisitReport.Call_No + "_Img_" + iteration + ".pdf";
        //                paths = Server.MapPath("~/Content/" + ObjModelVisitReport.Call_No);
        //                docs.Save(paths + '\\' + ReportNames);
        //                docs.Close();
        //                bodys = string.Empty;
        //                ImageContent = string.Empty;
        //                iteration = iteration + 1;
        //            }
        //            #endregion

        //        }
        //        #endregion



        //        string[] pdfs = Directory.GetFiles(Server.MapPath("~/Content/" + ObjModelVisitReport.Call_No));

        //        PdfSharp.Pdf.PdfDocument ImageDoc = new PdfSharp.Pdf.PdfDocument();




        //        foreach (string pdfFile in pdfs)
        //        {
        //            if (pdfFile.Contains("Img_"))
        //            {
        //                #region Initial setting vaibhav
        //                //strs.Append(body);
        //                PdfPageSize vpageSize = PdfPageSize.A4;
        //                PdfPageOrientation vpdfOrientation = PdfPageOrientation.Portrait;
        //                HtmlToPdf Vconverter = new HtmlToPdf();

        //                // set the page timeout (in seconds)
        //                Vconverter.Options.MaxPageLoadTime = 240;  //=========================5-Aug-2019
        //                Vconverter.Options.PdfPageSize = vpageSize;
        //                Vconverter.Options.PdfPageOrientation = vpdfOrientation;
        //                #endregion
        //                #region Header footer Vaibhav Test 28-07-2020
        //                #region Header and Footer Vaibhav
        //                #region Heder code
        //                string _VHeader = string.Empty;
        //                string _Vfooter = string.Empty;

        //                // for Report header by abel
        //                StreamReader _VreadHeader_File = new StreamReader(Server.MapPath("~/IV_Report_Header.html"));
        //                _VHeader = _VreadHeader_File.ReadToEnd();
        //                _VHeader = _VHeader.Replace("[SapAndControle_No]", ObjModelVisitReport.SubJob_No);
        //                _VHeader = _VHeader.Replace("[RevisionNo]", countNo);
        //                /*_Header = _Header.Replace("[Logo]", "http://localhost:54895/AllJsAndCss/images/logo.png");*/ // change123 once pulished on server
        //                _VHeader = _VHeader.Replace("[Logo]", ConfigurationManager.AppSettings["Web"].ToString() + "/AllJsAndCss/images/logo.png");


        //                #endregion


        //                #region Generate no
        //                if (RM.Report == null)
        //                {

        //                    dtSrNo = objDalVisitReport.GetSrNo(ObjModelVisitReport.SubJob_No);
        //                    if (dtSrNo.Tables[0].Rows.Count > 0)
        //                    {
        //                        SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["SrNo"]);

        //                    }
        //                    RM.ReportNo = "IVR-" + ObjModelVisitReport.SubJob_No + "-" + SrNo + "-Rev." + countNo;
        //                    _VHeader = _VHeader.Replace("[ReportNo]", RM.ReportNo);

        //                }
        //                else
        //                {
        //                    //dtSrNo = objDalVisitReport.GetReportNo(RM.Report);
        //                    dtSrNo = objDalVisitReport.GetReportNo(Convert.ToString(RM.PK_RM_ID));
        //                    if (dtSrNo.Tables[0].Rows.Count > 0)
        //                    {
        //                        SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["ReportNo"]);

        //                    }

        //                    _VHeader = _VHeader.Replace("[ReportNo]", SrNo);
        //                }
        //                #endregion

        //                #region Footer Code

        //                StreamReader _VreadFooter_File = new StreamReader(Server.MapPath("~/IV_Report_Footer.html"));
        //                _Vfooter = _VreadFooter_File.ReadToEnd();

        //                // header settings
        //                Vconverter.Options.DisplayHeader = true || true || true;
        //                Vconverter.Header.DisplayOnFirstPage = true;
        //                Vconverter.Header.DisplayOnOddPages = true;
        //                Vconverter.Header.DisplayOnEvenPages = true;
        //                Vconverter.Header.Height = 75;

        //                PdfHtmlSection VheaderHtml = new PdfHtmlSection(_VHeader, string.Empty);
        //                VheaderHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
        //                Vconverter.Header.Add(VheaderHtml);

        //                // footer settings
        //                Vconverter.Options.DisplayFooter = true || true || true;
        //                Vconverter.Footer.DisplayOnFirstPage = true;
        //                Vconverter.Footer.DisplayOnOddPages = true;
        //                Vconverter.Footer.DisplayOnEvenPages = true;

        //                Vconverter.Footer.Height = 150;
        //                //converter.Footer.Height = 120;

        //                PdfHtmlSection VfooterHtml = new PdfHtmlSection(_Vfooter, string.Empty);
        //                VfooterHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
        //                Vconverter.Footer.Add(VfooterHtml);

        //                //end abel code


        //                // page numbers can be added using a PdfTextSection object
        //                //PdfTextSection Vtext1 = new PdfTextSection(0, 145, "Page: {page_number} of {total_pages}  ", new System.Drawing.Font("Arial", 8));
        //                //Vtext1.HorizontalAlign = PdfTextHorizontalAlign.Right;
        //                //Vconverter.Footer.Add(Vtext1);
        //                SelectPdf.PdfDocument docs = converters.ConvertHtmlString(bodys);
        //                #endregion
        //                #endregion
        //                #endregion
        //                PdfSharp.Pdf.PdfDocument ImagePDFDocument = PdfReader.Open(pdfFile, PdfDocumentOpenMode.Import);
        //                ImageDoc.Version = ImagePDFDocument.Version;

        //                foreach (PdfSharp.Pdf.PdfPage page in ImagePDFDocument.Pages)
        //                {
        //                    ImageDoc.AddPage(page);
        //                }
        //            }
        //        }
        //        int ImageC = ImageDoc.PageCount;
        //        if (System.IO.File.Exists(paths + "/Image_" + countNo + ".pdf"))
        //        {
        //            // If file found, delete it    
        //            System.IO.File.Delete(paths + "/Image_" + countNo + ".pdf");

        //        }


        //        //PdfDocument docs = converters.ConvertHtmlString(bodys);


        //        /****Final Report Saving ****/
        //        if (ImageReportDashBoard.Rows.Count > 0)
        //        {
        //            if (RM.ImageReport == null || RM.ImageReport == "")
        //            {
        //                paths = Server.MapPath("~/Content/");

        //                ImageDoc.Save(paths + ObjModelVisitReport.Call_No + "/Image_" + countNo + ".pdf");
        //                ImageDoc.Close();

        //            }
        //            else
        //            {
        //                ReportNames = RM.ImageReport;
        //                paths = Server.MapPath("~/Content/");

        //                ImageDoc.Save(paths + ReportNames);
        //                ImageDoc.Close();
        //            }
        //        }



        //        #endregion

        //        #region Save to Pdf Code 
        //        SelectPdf.GlobalProperties.LicenseKey = "uZKImYuMiJmImYuIl4mZioiXiIuXgICAgA==";
        //        System.Text.StringBuilder strs = new System.Text.StringBuilder();
        //        string body = string.Empty;

        //        string ItemDescriptioncontent = "";
        //        string ReferenceDocumentscontent = "";
        //        string InspectionDocumentsContent = "";
        //        string DocumentreviewContent = "";
        //        string EquipmentDetailscontent = "";

        //        string check1 = "";
        //        string check2 = "";
        //        string check3 = "";
        //        string check4 = "";
        //        string check5 = "";
        //        string check6 = "";
        //        string check7 = "";
        //        string check8 = "";
        //        string check9 = "";
        //        string check10 = "";
        //        string checkNABL = "";

        //        string check11 = "";
        //        string check12 = "";
        //        string check13 = "";
        //        int intSrNo = 0;
        //        using (StreamReader reader1 = new StreamReader(Server.MapPath("~/inspection-visit-report.html")))
        //        {
        //            body = reader1.ReadToEnd();
        //        }




        //        body = body.Replace("[SapAndControle_No]", ObjModelVisitReport.SubJob_No);
        //        body = body.Replace("[SAPNo]", ObjModelVisitReport.SAPNo);
        //        body = body.Replace("[Branch]", ObjModelVisitReport.Branch);
        //        body = body.Replace("[NotificationNameNo_Date]", ObjModelVisitReport.Notification_Name_No_Date);
        //        body = body.Replace("[DateOfInspection]", ObjModelVisitReport.Date_Of_Inspection);
        //        body = body.Replace("[ProjectNameLocation]", ObjModelVisitReport.Project_Name_Location);
        //        body = body.Replace("[AddressOfInspection]", ObjModelVisitReport.Address_Of_Inspection);
        //        body = body.Replace("[ClientName]", ObjModelVisitReport.Client_Name);
        //        body = body.Replace("[Enduser_Name]", ObjModelVisitReport.End_user_Name);
        //        body = body.Replace("[DECPMCEPC_Name]", ObjModelVisitReport.DEC_PMC_EPC_Name);
        //        body = body.Replace("[DECPMCEPCAssignment_No]", ObjModelVisitReport.DEC_PMC_EPC_Assignment_No);
        //        body = body.Replace("[VendorNameLocation]", ObjModelVisitReport.Vendor_Name_Location);
        //        body = body.Replace("[PoNo]", ObjModelVisitReport.Po_No + " Dated " + SubJobDate);
        //        body = body.Replace("[SubVendorName]", ObjModelVisitReport.Sub_Vendor_Name);
        //        if (ObjModelVisitReport.Po_No_SubVendor != string.Empty)
        //        {
        //            body = body.Replace("[PoNoSubVendor]", ObjModelVisitReport.Po_No_SubVendor + " Dated " + ObjModelVisitReport.SubSubVendorDate_of_PO);
        //        }
        //        else
        //        {
        //            body = body.Replace("[PoNoSubVendor]", ObjModelVisitReport.Po_No_SubVendor);
        //        }
        //        body = body.Replace("[Conclusion]", ObjModelVisitReport.Conclusion);
        //        body = body.Replace("[CanIRNbeissued]", ObjModelVisitReport.CanIRNbeissued + ' ' + ObjModelVisitReport.IssuedPOItemNumbers);


        //        body = body.Replace("[PendingActivites]", ObjModelVisitReport.Pending_Activites);
        //        body = body.Replace("[IdentificationOfInspected]", ObjModelVisitReport.Identification_Of_Inspected);
        //        body = body.Replace("[AreasOfConcerns]", ObjModelVisitReport.Areas_Of_Concerns);
        //        body = body.Replace("[NonConformitiesraised]", ObjModelVisitReport.Non_Conformities_raised);
        //        body = body.Replace("[Name]", ObjModelVisitReport.Name);
        //        body = body.Replace("[date]", ObjModelVisitReport.ReportCreatedDate);

        //        body = body.Replace("[RevisionNo]", countNo);

        //        //body = body.Replace("[TempInspectionPhotosNo]", ObjModelVisitReport.TempInspectionPhotosNo);//24
        //        body = body.Replace("[TempMaster_List_Of_calibrated_Instruments]", ObjModelVisitReport.TempMaster_List_Of_calibrated_Instruments);
        //        body = body.Replace("[ReviseReason]", ObjModelVisitReport.ReviseReason);
        //        body = body.Replace("[ReviseReportNoForPDF]", ObjModelVisitReport.ReviseReportNoForPDF);
        //        body = body.Replace("[ReportNo]", ObjModelVisitReport.Report_No);
        //        body = body.Replace("[ReportNoForPDF]", ObjModelVisitReport.ReportNoForPDF);





        //        if (ObjModelVisitReport.DTUVIndiaClientEndUser == true)
        //        {
        //            check11 = "<span><input type='checkbox'  value=" + ObjModelVisitReport.DTUVIndiaClientEndUser + " checked></span>";
        //        }
        //        else
        //        {
        //            check11 = "<span><input type='checkbox'  value=" + ObjModelVisitReport.DTUVIndiaClientEndUser + " ></span>";
        //        }
        //        if (ObjModelVisitReport.DTUVIndiaExecuting_Originating_Branch == true)
        //        {
        //            check12 = "<span><input type='checkbox'  value=" + ObjModelVisitReport.DTUVIndiaExecuting_Originating_Branch + " checked></span>";
        //        }
        //        else
        //        {
        //            check12 = "<span><input type='checkbox'  value=" + ObjModelVisitReport.DTUVIndiaExecuting_Originating_Branch + " ></span>";
        //        }
        //        if (ObjModelVisitReport.DVendor_Sub_Vendor == true)
        //        {
        //            check13 = "<span><input type='checkbox'  value=" + ObjModelVisitReport.DVendor_Sub_Vendor + " checked></span>";
        //        }
        //        else
        //        {
        //            check13 = "<span><input type='checkbox'  value=" + ObjModelVisitReport.DVendor_Sub_Vendor + " ></span>";
        //        }


        //        if (ObjModelVisitReport.Kick_Off_Pre_Inspection == true)
        //        {
        //            check1 = "<span><input type='checkbox'  value=" + ObjModelVisitReport.Kick_Off_Pre_Inspection + " checked></span>";
        //        }
        //        else
        //        {
        //            check1 = "<span><input type='checkbox'  value=" + ObjModelVisitReport.Kick_Off_Pre_Inspection + "></span>";
        //        }
        //        if (ObjModelVisitReport.Material_identification == true)
        //        {
        //            check2 = "<span><input type='checkbox'  value=" + ObjModelVisitReport.Material_identification + " checked></span>";
        //        }
        //        else
        //        {
        //            check2 = "<span><input type='checkbox'  value=" + ObjModelVisitReport.Material_identification + " ></span>";
        //        }
        //        if (ObjModelVisitReport.Interim_Stages == true)
        //        {
        //            check3 = "<span><input type='checkbox'  value=" + ObjModelVisitReport.Interim_Stages + " checked></span>";
        //        }
        //        else
        //        {
        //            check3 = "<span><input type='checkbox'  value=" + ObjModelVisitReport.Interim_Stages + "></span>";
        //        }
        //        if (ObjModelVisitReport.Document_review == true)
        //        {
        //            check4 = "<span><input type='checkbox'  value=" + ObjModelVisitReport.Document_review + " checked></span>";
        //        }
        //        else
        //        {
        //            check4 = "<span><input type='checkbox'  value=" + ObjModelVisitReport.Document_review + "></span>";
        //        }
        //        if (ObjModelVisitReport.Final_Inspection == true)
        //        {
        //            check5 = "<span><input type='checkbox'  value=" + ObjModelVisitReport.Final_Inspection + " checked></span>";
        //        }
        //        else
        //        {
        //            check5 = "<span><input type='checkbox'  value=" + ObjModelVisitReport.Final_Inspection + " ></span>";
        //        }
        //        if (ObjModelVisitReport.Re_inspection == true)
        //        {
        //            check6 = "<span><input type='checkbox'  value=" + ObjModelVisitReport.Re_inspection + " checked></span>";
        //        }
        //        else
        //        {
        //            check6 = "<span><input type='checkbox'  value=" + ObjModelVisitReport.Re_inspection + " ></span>";
        //        }

        //        if (ObjModelVisitReport.Inspection_records == true)
        //        {
        //            check7 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Inspection_records + " checked></span></td>";
        //        }
        //        else
        //        {
        //            check7 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Inspection_records + " ></span></td>";
        //        }
        //        if (ObjModelVisitReport.Other_Specify == true)
        //        {
        //            check8 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Other_Specify + " checked></span></td>";
        //        }
        //        else
        //        {
        //            check8 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Other_Specify + " ></span></td>";
        //        }
        //        if (ObjModelVisitReport.Inspection_Photo == true)
        //        {
        //            check9 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Inspection_Photo + " checked></span></td>";
        //        }
        //        else
        //        {
        //            check9 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.Inspection_Photo + "></span></td>";
        //        }
        //        if (ObjModelVisitReport.MasterListOfcalibratedInstruments == true)
        //        {
        //            check10 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.MasterListOfcalibratedInstruments + " checked></span></td>";
        //        }
        //        else
        //        {
        //            check10 = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + ObjModelVisitReport.MasterListOfcalibratedInstruments + "></span></td>";
        //        }

        //        foreach (ItemDescriptionModel v in lstCompanyDashBoard)
        //        {
        //            i = i + 1;
        //            ItemDescriptioncontent += "<tr><td width='10%' align='center' style='font - size: 14px; color: #000; font-family: Arial;'>" + Convert.ToString(v.Po_Item_No) + "</td><td width='10%' style='font - size: 14px; color: #000; font-family: Arial;'>" + v.Item_Code + " </td><td width='30%' style='font - size: 14px; color: #000; font-family: Arial;'>" + v.ItemCode_Description + "</td><td width='10%' style='font - size: 14px; color: #000; font-family: Arial;'>" + v.Unit + "</td><td width='10%'>" + v.Po_Quantity + "</td><td width='10%' style='font - size: 14px; color: #000; font-family: Arial;'>" + v.Offered_Quantity + "</td><td width='10%' style='font - size: 14px; color: #000; font-family: Arial;'>" + v.Accepted_Quantity + "</td></tr>";
        //        }

        //        foreach (ReferenceDocumentsModel v in RefranceDocuments)
        //        {
        //            J = J + 1;
        //            // ReferenceDocumentscontent += "<tr><td> " + J + " </td><td>" + Convert.ToString(v.Document_Name) + "</td><td>" + v.Document_No + " </td><td>" + v.Approval_Status + "</td></tr>";
        //            ReferenceDocumentscontent += "<tr><td align='center'> " + J + ')' + " </td><td>" + Convert.ToString(v.Document_Name) + "</td><td>" + v.Document_No + " </td><td>" + v.VendorDocumentNumber + "</td><td>" + v.Approval_Status + "</td></tr>";
        //        }

        //        foreach (InspectionActivitiesModel v in InspectionDocuments)
        //        {
        //            K = K + 1;
        //            InspectionDocumentsContent += "<tr><td width='10%' align='center'> " + K + ')' + " </td><td width='90%' colspan='5'><span style='font-size: 14px;white-space: pre-line;'>" + Convert.ToString(v.Stages_Witnessed) + "</span></td></tr>";
        //        }
        //        foreach (DocumentRevieweModel v in DocumentReview)
        //        {
        //            L = L + 1;
        //            DocumentreviewContent += "<tr><td width='10%' align='center'><span> " + L + ')' + " </span></td><td width='90%' colspan='5'><span style='font-size:14px;'>" + Convert.ToString(v.Description) + "</span></td></tr>";
        //        }


        //        foreach (EquipmentDetailsModel v in EquipmentDetails)
        //        {
        //            if (v.NABLseenote1 == true)
        //            {
        //                checkNABL = "<td> " + M + " </td> <td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + v.NABLseenote1 + " checked></span></td>";
        //            }
        //            else
        //            {
        //                checkNABL = "<td width='5%' align='center' style='border-right-width: 0px;'><span><input type='checkbox'  value=" + v.NABLseenote1 + "></span></td>";
        //            }
        //        }




        //        foreach (EquipmentDetailsModel v in EquipmentDetails)
        //        {
        //            M = M + 1;
        //            //   EquipmentDetailscontent += "<tr><td> " + M + " </td><td>" + Convert.ToString(v.Name_Of_Equipments) + "</td><td>" + v.Range + " </td><td>" + v.Id + "</td><td>" + v.CalibrationValid_Till_date + "</td><td>" + v.Certification_No_Date + "</td></tr>";
        //            EquipmentDetailscontent += "<tr><td align='center'> " + M + ')' + " </td><td>" + Convert.ToString(v.Name_Of_Equipments) + "</td><td>" + v.Range + " </td><td>" + v.Id + "</td><td>" + v.CalibrationValid_Till_date + "</td><td>" + v.Certification_No_Date + "</td><td>" + v.SNABLseenote1 + "</td><td>" + v.SNonNABLseenote2 + "</td></tr>";

        //        }

        //        body = body.Replace("[ItemDescriptionContent]", ItemDescriptioncontent);

        //        body = body.Replace("[ReferenceDocumentsContent]", ReferenceDocumentscontent);
        //        body = body.Replace("[InspectionDocumentsContent]", InspectionDocumentsContent);
        //        body = body.Replace("[DocumentreviewContent]", DocumentreviewContent);
        //        body = body.Replace("[EquipmentDetailscontent]", EquipmentDetailscontent);
        //        body = body.Replace("[InspectiobRecord_Remark]", ObjModelVisitReport.InspectiobRecord_Remark);//24
        //        body = body.Replace("[OtherSpecifyRecords]", ObjModelVisitReport.OtherSpecifyRecords);


        //        body = body.Replace("[Stamp]", "<img src = '" + ConfigurationManager.AppSettings["Web"].ToString() + "/Stamp.png' style='width:100px;height:50px; ' align='center'>");
        //        // body = body.Replace("[Signature]", ConfigurationManager.AppSettings["Web"].ToString() + "/signature.jpg");
        //        body = body.Replace("[Signature]", ConfigurationManager.AppSettings["Web"].ToString() + ObjModelVisitReport.Signatures);
        //        string I = "<img src = '" + ConfigurationManager.AppSettings["Web"].ToString() + "/Content/Uploads/Images/" + ObjModelVisitReport.Signatures + "' style='width:225px;height:125px; ' align='center'>";
        //        //string I = "<img src = '" + ConfigurationManager.AppSettings["Web"].ToString() + "/Content/Uploads/Images/" + ObjModelVisitReport.Signatures + "' style='width:100px;height:50px; ' align='center'>";
        //        //  string I = "<img src = '" + ConfigurationManager.AppSettings["Web"].ToString() + "/Sign/" + ObjModelVisitReport.Signatures + "' style='width:100px;height:50px; ' align='center'>";
        //        if (ObjModelVisitReport.Signatures != null)
        //        {
        //            //  body = body.Replace("[Signature1]", ConfigurationManager.AppSettings["Web"].ToString()+ "/Content/Uploads/Images/" + ObjModelVisitReport.Signatures + "");
        //            body = body.Replace("[Signature1]", I);

        //        }
        //        else
        //        {

        //        }
        //        body = body.Replace("[Checkbox1]", check1);
        //        body = body.Replace("[Checkbox2]", check2);
        //        body = body.Replace("[Checkbox3]", check3);
        //        body = body.Replace("[Checkbox4]", check4);
        //        body = body.Replace("[Checkbox5]", check5);
        //        body = body.Replace("[Checkbox6]", check6);
        //        body = body.Replace("[Checkbox7]", check7);
        //        body = body.Replace("[Checkbox8]", check8);
        //        body = body.Replace("[Checkbox9]", check9);
        //        body = body.Replace("[Checkbox10]", check10);
        //        body = body.Replace("[Checkbox11]", check11);
        //        body = body.Replace("[Checkbox12]", check12);
        //        body = body.Replace("[Checkbox13]", check13);
        //        //strs.Append(body);//24
        //        PdfPageSize pageSize = PdfPageSize.A4;
        //        PdfPageOrientation pdfOrientation = PdfPageOrientation.Portrait;
        //        HtmlToPdf converter = new HtmlToPdf();




        //        // set the page timeout (in seconds)
        //        converter.Options.MaxPageLoadTime = 2400;  //=========================5-Aug-2019
        //        converter.Options.PdfPageSize = pageSize;
        //        converter.Options.PdfPageOrientation = pdfOrientation;
        //        converter.Options.WebPageFixedSize = false;

        //        #region Heder code
        //        string _Header = string.Empty;
        //        string _footer = string.Empty;

        //        // for Report header by abel
        //        StreamReader _readHeader_File = new StreamReader(Server.MapPath("~/IV_Report_Header.html"));
        //        _Header = _readHeader_File.ReadToEnd();
        //        _Header = _Header.Replace("[SapAndControle_No]", ObjModelVisitReport.SubJob_No);
        //        _Header = _Header.Replace("[RevisionNo]", countNo);
        //        /*_Header = _Header.Replace("[Logo]", "http://localhost:54895/AllJsAndCss/images/logo.png");*/ // change123 once pulished on server
        //        _Header = _Header.Replace("[Logo]", ConfigurationManager.AppSettings["Web"].ToString() + "/AllJsAndCss/images/logo.png");


        //        #endregion


        //        #region Generate no
        //        if (RM.Report == null)
        //        {

        //            dtSrNo = objDalVisitReport.GetSrNo(ObjModelVisitReport.SubJob_No);
        //            if (dtSrNo.Tables[0].Rows.Count > 0)
        //            {
        //                SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["SrNo"]);
        //                intSrNo = Convert.ToInt32(SrNo) + 1;
        //            }
        //            else
        //            {
        //                intSrNo = 1;
        //            }
        //            //RM.ReportNo = "IVR-" + ObjModelVisitReport.SubJob_No + "-" + SrNo + "-Rev." + countNo;
        //            RM.ReportNo = "IVR-" + ObjModelVisitReport.SubJob_No + "-" + intSrNo + "-Rev." + countNo;
        //            _Header = _Header.Replace("[ReportNo]", RM.ReportNo);

        //        }
        //        else
        //        {
        //            //dtSrNo = objDalVisitReport.GetReportNo(RM.Report);
        //            dtSrNo = objDalVisitReport.GetReportNo(Convert.ToString(RM.PK_RM_ID));
        //            if (dtSrNo.Tables[0].Rows.Count > 0)
        //            {
        //                SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["ReportNo"]);
        //                RM.ReportNo = SrNo;
        //            }

        //            _Header = _Header.Replace("[ReportNo]", SrNo);
        //        }
        //        #endregion

        //        #region Footer Code

        //        StreamReader _readFooter_File = new StreamReader(Server.MapPath("~/IV_Report_Footer.html"));
        //        _footer = _readFooter_File.ReadToEnd();

        //        // header settings
        //        converter.Options.DisplayHeader = true || true || true;
        //        converter.Header.DisplayOnFirstPage = true;
        //        converter.Header.DisplayOnOddPages = true;
        //        converter.Header.DisplayOnEvenPages = true;
        //        converter.Header.Height = 75;

        //        PdfHtmlSection headerHtml = new PdfHtmlSection(_Header, string.Empty);
        //        headerHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
        //        converter.Header.Add(headerHtml);

        //        // footer settings
        //        converter.Options.DisplayFooter = true || true || true;
        //        converter.Footer.DisplayOnFirstPage = true;
        //        converter.Footer.DisplayOnOddPages = true;
        //        converter.Footer.DisplayOnEvenPages = true;

        //        //converter.Footer.Height = 150;
        //        converter.Footer.Height = 105;

        //        PdfHtmlSection footerHtml = new PdfHtmlSection(_footer, string.Empty);
        //        footerHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
        //        converter.Footer.Add(footerHtml);


        //        #endregion

        //        converter.Options.AutoFitWidth = HtmlToPdfPageFitMode.ShrinkOnly;
        //        converter.Options.AutoFitHeight = HtmlToPdfPageFitMode.NoAdjustment;

        //        #region test Total Page Count


        //        SelectPdf.PdfDocument doc1 = converter.ConvertHtmlString(body);

        //        int P;
        //        string ImagePageTotalCount1 = "";
        //        if (imagecount == 0)
        //        {
        //            P = doc1.Pages.Count;
        //            ImagePageTotalCount1 = "0";
        //        }
        //        else
        //        {
        //            P = doc1.Pages.Count + ImageC;
        //            ImagePageTotalCount1 = Convert.ToString(ImageC);
        //        }
        //        string noPages1 = Convert.ToString(P);


        //        #region get Image page no & Total Page no

        //        string ImagePage1 = "";
        //        string TotalPage1 = "";
        //        //string ImagePageTotalCount1 = Convert.ToString(ImageC);
        //        if (ImagePageTotalCount1 == "0")
        //        {

        //            ImagePage1 = "-";
        //            TotalPage1 = noPages1;
        //            //body = body.Replace("[InspectiobRecord_Remark]", TotalPage1);
        //            body = body.Replace("[TempInspectionPhotosNo]", ImagePage1);

        //        }
        //        else
        //        {
        //            int ImagePageNo = doc1.Pages.Count + 1; //Convert.ToInt32(noPages1) - Convert.ToInt32(ImagePageTotalCount1);
        //            ImagePage1 = Convert.ToString(ImagePageNo);
        //            TotalPage1 = noPages1;
        //            //body = body.Replace("[InspectiobRecord_Remark]", TotalPage1);
        //            body = body.Replace("[TempInspectionPhotosNo]", ImagePage1);
        //        }

        //        #endregion

        //        strs.Append(body);
        //        #endregion



        //        SelectPdf.PdfDocument doc = converter.ConvertHtmlString(body);



        //        string ReportName = RM.Report;
        //        paths = Server.MapPath("~/Content/");

        //        if (System.IO.File.Exists(paths + ObjModelVisitReport.Call_No + "/Data_" + countNo + ".pdf"))
        //        {
        //            // If file found, delete it    
        //            System.IO.File.Delete(paths + ObjModelVisitReport.Call_No + "/Data_" + countNo + ".pdf");

        //        }

        //        if (ReportName == null)
        //        {

        //            ReportName = ObjModelVisitReport.Call_No + "/Data_" + countNo + ".pdf";
        //            //ReportName = RM.ReportNo + ".pdf";

        //            doc.Save(paths + '\\' + ReportName);
        //            doc.Close();
        //        }
        //        else
        //        {
        //            ReportName = ObjModelVisitReport.Call_No + "/Data_" + countNo + ".pdf";
        //            //ReportName = RM.ReportNo + ".pdf";
        //            doc.Save(paths + '\\' + ReportName);
        //            doc.Close();
        //        }

        //        string path = Server.MapPath("~/IVRReport");

        //        string[] datafile = Directory.GetFiles(Server.MapPath("~/Content/" + ObjModelVisitReport.Call_No));
        //        dtSrNo = objDalVisitReport.GetSrNo(ObjModelVisitReport.SubJob_No);
        //        if (dtSrNo.Tables[0].Rows.Count > 0)
        //        {
        //            SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["SrNo"]);

        //        }

        //        string finalReportName = "IVR-" + ObjModelVisitReport.SubJob_No.Replace('/', '_') + "-" + SrNo + "-Rev." + countNo.ToString() + ".pdf";
        //        //string finalReportName = RM.ReportNo + ".pdf";

        //        PdfSharp.Pdf.PdfDocument FinalDoc = new PdfSharp.Pdf.PdfDocument();

        //        if (System.IO.File.Exists(path + "\\" + finalReportName))
        //        {
        //            // If file found, delete it    
        //            System.IO.File.Delete(path + "\\" + finalReportName);

        //        }
        //        // create a new pdf document
        //        foreach (string pdfFile in datafile)
        //        {
        //            if (pdfFile.Contains("Image_") || pdfFile.Contains("Data_"))
        //            {
        //                PdfSharp.Pdf.PdfDocument inputPDFDocument = PdfReader.Open(pdfFile, PdfDocumentOpenMode.Import);

        //                FinalDoc.Version = inputPDFDocument.Version;

        //                foreach (PdfSharp.Pdf.PdfPage page in inputPDFDocument.Pages)
        //                {
        //                    FinalDoc.AddPage(page);
        //                }

        //            }
        //        }

        //        XFont font = new XFont("Verdana", 9);
        //        XBrush brush = XBrushes.Black;
        //        // Create variable that store page count  
        //        string noPages = FinalDoc.Pages.Count.ToString();




        //        for (int c = 0; c < FinalDoc.Pages.Count; ++c)
        //        {
        //            PdfSharp.Pdf.PdfPage page = FinalDoc.Pages[c];
        //            // Make a layout rectangle.  
        //            XRect layoutRectangle = new XRect(240 /*X*/ , page.Height - font.Height - 10 /*Y*/ , page.Width /*Width*/ , font.Height /*Height*/ );
        //            using (XGraphics gfx = XGraphics.FromPdfPage(page))
        //            {
        //                gfx.DrawString("Page " + (c + 1).ToString() + " of " + noPages, font, brush, layoutRectangle, XStringFormats.Center);
        //            }
        //        }
        //        FinalDoc.Save(path + "\\" + finalReportName);
        //        FinalDoc.Close();


        //        #endregion

        //        if (RM.PK_RM_ID != 0)
        //        {

        //            RM.Type = "IVR";
        //            RM.Status = "1";
        //            RM.ImageReport = ReportNames;
        //            RM.Report = finalReportName;
        //            RM.ReportName = ReportName;
        //            RM.PK_CALL_ID = PK_CALL_ID;
        //            RM.SubJob_No = ObjModelVisitReport.SubJob_No;
        //            RM.PK_SubJob_Id = ObjModelVisitReport.PK_SubJob_Id;
        //            RM.ProjectName = ObjModelVisitReport.End_user_Name;
        //            RM.Po_No = ObjModelVisitReport.Po_No;
        //            RM.Report_No = ObjModelVisitReport.Report_No;
        //            Result = objDalVisitReport.InsertUpdateReport(RM);
        //            if (Result != "" && Result != null)
        //            {
        //                TempData["InsertCompany"] = Result;
        //            }
        //        }
        //        else
        //        {
        //            RM.Type = "IVR";
        //            RM.Status = "1";
        //            RM.ImageReport = ReportNames;
        //            RM.Report = finalReportName;
        //            RM.ReportName = ReportName;
        //            RM.PK_CALL_ID = PK_CALL_ID;
        //            RM.SubJob_No = ObjModelVisitReport.SubJob_No;
        //            RM.PK_SubJob_Id = ObjModelVisitReport.PK_SubJob_Id;
        //            RM.ProjectName = ObjModelVisitReport.End_user_Name;
        //            RM.Po_No = ObjModelVisitReport.Po_No;
        //            RM.Report_No = ObjModelVisitReport.Report_No;

        //            Result = objDalVisitReport.InsertUpdateReport(RM);

        //            if (Result != "" && Result != null)
        //            {
        //                TempData["InsertCompany"] = Result;
        //            }
        //        }

        //        #region
        //        CostSheetDashBoard = objDalVisitReport.GetReportByCall_Id(PK_CALL_ID);
        //        if (CostSheetDashBoard.Rows.Count > 0)
        //        {
        //            foreach (DataRow dr in CostSheetDashBoard.Rows)
        //            {
        //                ReportDashboard.Add(
        //                    new ReportModel
        //                    {
        //                        ReportName = Convert.ToString(dr["ReportName"]),
        //                        Report = Convert.ToString(dr["Report"]),
        //                        CraetedDate = Convert.ToString(dr["CraetedDate"]),
        //                        PK_RM_ID = Convert.ToInt32(dr["PK_RM_ID"]),
        //                        PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"])
        //                    }
        //                    );
        //            }
        //        }
        //        ViewData["CostSheet"] = ReportDashboard;
        //        #endregion

        //        return RedirectToAction("VisitReportForm", RMData);

        //    }
        //    else
        //    {
        //        return RedirectToAction("VisitReportForm", RMData);
        //    }
        //}
        #endregion

        #region comment on 28 Nov 2021 
        //public ActionResult UpdateReportsRedirectGeneralTab(int? PK_CALL_ID)
        //{
        //    RMData.PK_CALL_ID = Convert.ToInt32(PK_CALL_ID);
        //    DataTable ItemDescriptionDashBoard = new DataTable();
        //    DataTable RefranceDocumentsDashBoard = new DataTable();
        //    DataTable InspectionActivitesDashBoard = new DataTable();
        //    DataTable DocumentsReviewBoard = new DataTable();
        //    DataTable EquipmentDetailsBoard = new DataTable();
        //    DataSet DSJobMasterByQtId = new DataSet();
        //    DataTable ReportDashBoard = new DataTable();
        //    DataSet UpdateReport = new DataSet();
        //    DataTable CostSheetDashBoard = new DataTable();
        //    int count = 0;
        //    DataTable ImageReportDashBoard = new DataTable();
        //    List<ReportImageModel> ImageDashBoard = new List<ReportImageModel>();
        //    List<ItemDescriptionModel> lstCompanyDashBoard = new List<ItemDescriptionModel>();
        //    List<ReferenceDocumentsModel> RefranceDocuments = new List<ReferenceDocumentsModel>();
        //    List<InspectionActivitiesModel> InspectionDocuments = new List<InspectionActivitiesModel>();
        //    List<DocumentRevieweModel> DocumentReview = new List<DocumentRevieweModel>();
        //    List<EquipmentDetailsModel> EquipmentDetails = new List<EquipmentDetailsModel>();
        //    List<ReportModel> ReportDashboard = new List<ReportModel>();
        //    DataSet dtSrNo = new DataSet();
        //    string SrNo = "";
        //    string SubJobDate = string.Empty;

        //    ReportModel RM = new ReportModel();
        //    string Result = "";
        //    if (PK_CALL_ID != 0 || PK_CALL_ID != null)
        //    {
        //        int i = 0;
        //        int J = 0;
        //        int K = 0;
        //        int L = 0;
        //        int M = 0;
        //        int N = 0;

        //        #region 
        //        DSJobMasterByQtId = objDalVisitReport.EditInspectionVisitReportByPKCallID(PK_CALL_ID);

        //        //DSJobMasterByQtId = objDalVisitReport.PrintVisitReport(PK_CALL_ID);

        //        if (DSJobMasterByQtId.Tables[0].Rows.Count > 0)
        //        {
        //            ObjModelVisitReport.SAPNo = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["SAP_No"]);
        //            ObjModelVisitReport.Branch = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Branch"]);
        //            ObjModelVisitReport.Sap_And_Controle_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Sap_And_Controle_No"]);
        //            ObjModelVisitReport.PK_IVR_ID = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["PK_IVR_ID"]);
        //            ObjModelVisitReport.Project_Name_Location = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Project_Name_Location"]);
        //            ObjModelVisitReport.Address_Of_Inspection = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Address_Of_Inspection"]);
        //            ObjModelVisitReport.End_user_Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["End_user_Name"]);
        //            ObjModelVisitReport.Vendor_Name_Location = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Vendor_Name_Location"]);
        //            ObjModelVisitReport.PK_Call_ID = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["PK_Call_ID"]);
        //            ObjModelVisitReport.Notification_Name_No_Date = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Notification_Name_No_Date"]);

        //            ObjModelVisitReport.Date_Of_Inspection = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Date_Of_Inspection"]);
        //            ObjModelVisitReport.Client_Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Client_Name"]);
        //            ObjModelVisitReport.DEC_PMC_EPC_Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["DEC_PMC_EPC_Name"]);
        //            ObjModelVisitReport.DEC_PMC_EPC_Assignment_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["DEC_PMC_EPC_Assignment_No"]);
        //            ObjModelVisitReport.Po_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Po_No"]);
        //            ObjModelVisitReport.Sub_Vendor_Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Sub_Vendor_Name"]);
        //            ObjModelVisitReport.Po_No_SubVendor = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Po_No_SubVendor"]);
        //            ObjModelVisitReport.SubJob_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["SubJob_No"]);

        //            DataSet DsSubJobDate = new DataSet();
        //            DsSubJobDate = objDalVisitReport.getsubJobdate(ObjModelVisitReport.SubJob_No);


        //            if (DsSubJobDate.Tables[0].Rows.Count > 0)
        //            {
        //                SubJobDate = DsSubJobDate.Tables[0].Rows[0]["SubJobDate"].ToString();
        //            }


        //            int kick = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Kick_Off_Pre_Inspection"]);
        //            ObjModelVisitReport.Kick_Off_Pre_Inspection = Convert.ToBoolean(kick);

        //            int Mi = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Material_identification"]);
        //            ObjModelVisitReport.Material_identification = Convert.ToBoolean(Mi);

        //            int Interim_Stages = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Interim_Stages"]);
        //            ObjModelVisitReport.Interim_Stages = Convert.ToBoolean(Interim_Stages);

        //            int Document_review = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Document_review"]);
        //            ObjModelVisitReport.Document_review = Convert.ToBoolean(Document_review);

        //            int Final_Inspection = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Final_Inspection"]);
        //            ObjModelVisitReport.Final_Inspection = Convert.ToBoolean(Final_Inspection);

        //            int Re_inspection = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Re_inspection"]);
        //            ObjModelVisitReport.Re_inspection = Convert.ToBoolean(Re_inspection);

        //            int MasterListOfcalibratedInstruments = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["MasterListOfcalibratedInstruments"]);
        //            ObjModelVisitReport.MasterListOfcalibratedInstruments = Convert.ToBoolean(MasterListOfcalibratedInstruments);


        //            ObjModelVisitReport.CanIRNbeissued = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["CanIRNbeissued"]);

        //            if (ObjModelVisitReport.CanIRNbeissued == "Yes")
        //            {
        //                ObjModelVisitReport.CanIRNbeissued = "IRN can be issued for all items";
        //            }
        //            else if (ObjModelVisitReport.CanIRNbeissued == "Partially")
        //            {
        //                ObjModelVisitReport.CanIRNbeissued = "IRN can be issued for PO item Numbers";
        //            }
        //            else if (ObjModelVisitReport.CanIRNbeissued == "No")
        //            {
        //                ObjModelVisitReport.CanIRNbeissued = "IRN can not be issued for all items.";
        //            }
        //            else
        //            {
        //                ObjModelVisitReport.CanIRNbeissued = "";
        //            }

        //            ObjModelVisitReport.IssuedPOItemNumbers = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["IssuedPOItemNumbers"]);


        //            ObjModelVisitReport.Conclusion = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Conclusion"]);
        //            ObjModelVisitReport.Pending_Activites = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Pending_Activites"]);
        //            ObjModelVisitReport.Identification_Of_Inspected = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Identification_Of_Inspected"]);
        //            ObjModelVisitReport.Areas_Of_Concerns = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Areas_Of_Concerns"]);
        //            ObjModelVisitReport.Non_Conformities_raised = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Non_Conformities_raised"]);
        //            ObjModelVisitReport.Signatures = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Signatures"]);
        //            ObjModelVisitReport.Type = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Type"]);
        //            //ObjModelVisitReport.Report_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Report_No"]);
        //            ObjModelVisitReport.Report_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["ReportNo"]);
        //            ObjModelVisitReport.Call_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Call_No"]);
        //            ObjModelVisitReport.Signatures = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Signature"]);
        //            ObjModelVisitReport.Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["FirstName"]) + " " + Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["LastName"]);
        //            ObjModelVisitReport.ReportCreatedDate = Convert.ToDateTime(DSJobMasterByQtId.Tables[0].Rows[0]["CreatedDate"]).ToString("dd/MM/yyyy");

        //            int Inspection_records = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Inspection_records"]);
        //            ObjModelVisitReport.Inspection_records = Convert.ToBoolean(Inspection_records);

        //            int Inspection_Photo = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Inspection_Photo"]);
        //            ObjModelVisitReport.Inspection_Photo = Convert.ToBoolean(Inspection_Photo);

        //            int Other_Specify = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Other_Specify"]);
        //            ObjModelVisitReport.Other_Specify = Convert.ToBoolean(Other_Specify);
        //            ObjModelVisitReport.InspectiobRecord_Remark = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["InspectiobRecord_Remark"]);
        //            ObjModelVisitReport.OtherSpecifyRecords = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["OtherSpecifyRecords"]);


        //            ObjModelVisitReport.SubJob_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["SubJob_No"]);
        //            ObjModelVisitReport.PK_SubJob_Id = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["PK_SubJob_Id"]);


        //            ObjModelVisitReport.Type = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Type"]);


        //            ObjModelVisitReport.TempInspectionPhotosNo = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["TempInspectionPhotosNo"]);
        //            ObjModelVisitReport.TempMaster_List_Of_calibrated_Instruments = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["TempMaster_List_Of_calibrated_Instruments"]);
        //            int DTUVIndiaClientEndUser = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["DTUVIndiaClientEndUser"]);
        //            ObjModelVisitReport.DTUVIndiaClientEndUser = Convert.ToBoolean(DTUVIndiaClientEndUser);
        //            int DTUVIndiaExecuting_Originating_Branch = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["DTUVIndiaExecuting_Originating_Branch"]);
        //            ObjModelVisitReport.DTUVIndiaExecuting_Originating_Branch = Convert.ToBoolean(DTUVIndiaExecuting_Originating_Branch);
        //            int DVendor_Sub_Vendor = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["DVendor_Sub_Vendor"]);
        //            ObjModelVisitReport.DVendor_Sub_Vendor = Convert.ToBoolean(DVendor_Sub_Vendor);
        //            ObjModelVisitReport.ReviseReason = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["ReviseReason"]);
        //            ObjModelVisitReport.ReviseReportNoForPDF = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["ReviseReportNoForPDF"]);
        //            ObjModelVisitReport.ReportNoForPDF = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["ReportNoForPDF"]);
        //            ObjModelVisitReport.Date_of_PO = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Date_of_PO"]);

        //        }
        //        else
        //        {

        //            InspectionvisitReportModel Abc = new InspectionvisitReportModel();
        //            Abc.PK_Call_ID = PK_CALL_ID;
        //            return RedirectToAction("VisitReportForm", Abc);
        //        }
        //        #endregion




        //        #region report Count
        //        UpdateReport = objDalVisitReport.GetReportByLastId(PK_CALL_ID);
        //        if (UpdateReport.Tables[0].Rows.Count > 0)
        //        {
        //            RM.PK_RM_ID = Convert.ToInt32(UpdateReport.Tables[0].Rows[0]["PK_RM_ID"]);
        //            RM.Report = Convert.ToString(UpdateReport.Tables[0].Rows[0]["Report"]);
        //            //RM.ImageReport = Convert.ToString(UpdateReport.Tables[0].Rows[0]["ImageReport"]);
        //        }

        //        #region report Count
        //        ReportDashBoard = objDalVisitReport.GetReportByCall_Id(PK_CALL_ID);
        //        if (ReportDashBoard.Rows.Count > 0)
        //        {
        //            int counts = ReportDashBoard.Rows.Count;
        //            count = counts - 1;
        //        }
        //        string countNo = Convert.ToString(count);
        //        #endregion
        //        #endregion


        //        #region Report Image data
        //        ImageReportDashBoard = objDalVisitReport.GetReportImageByCall_Id(PK_CALL_ID);
        //        if (ImageReportDashBoard.Rows.Count > 0)
        //        {
        //            foreach (DataRow dr in ImageReportDashBoard.Rows)
        //            {
        //                ImageDashBoard.Add(
        //                    new ReportImageModel
        //                    {
        //                        Image = Convert.ToString(dr["Image"]),
        //                        Heading = Convert.ToString(dr["Heading"]),
        //                    }
        //                    );
        //            }
        //        }
        //        #endregion

        //        #region Image Save to pdf
        //        SelectPdf.GlobalProperties.LicenseKey = "uZKImYuMiJmImYuIl4mZioiXiIuXgICAgA==";
        //        System.Text.StringBuilder strss = new System.Text.StringBuilder();

        //        string bodys = string.Empty;
        //        string ImageContent = string.Empty;
        //        string ReportNames = string.Empty;
        //        string paths = string.Empty;
        //        int img = 0;
        //        int imagecount = ImageReportDashBoard.Rows.Count;
        //        int rows = imagecount / 2;
        //        int imageposted = 0;
        //        int reminder = (imagecount % 2);
        //        int iteration = 1;
        //        StreamReader reader;

        //        //using (reader = new StreamReader(Server.MapPath("~/inspection-visit-report-images.html")))
        //        //{
        //        //    bodys = reader.ReadToEnd();
        //        //}


        //        ///First File start
        //        PdfPageSize pageSizes = PdfPageSize.A4;
        //        PdfPageOrientation pdfOrientations = PdfPageOrientation.Portrait;

        //        HtmlToPdf converters = new HtmlToPdf();

        //        #endregion

        //        #region Comment 11 June

        //        converters.Options.DisplayFooter = true || true || true;

        //        if (Directory.Exists(Server.MapPath("~/Content/" + ObjModelVisitReport.Call_No)))
        //        {
        //            string[] files = Directory.GetFiles(Server.MapPath("~/Content/" + ObjModelVisitReport.Call_No));
        //            foreach (string file in files)
        //            {
        //                System.IO.File.Delete(file);

        //            }

        //            Directory.Delete(Server.MapPath("~/Content/" + ObjModelVisitReport.Call_No));
        //        }

        //        Directory.CreateDirectory(Server.MapPath("~/Content/" + ObjModelVisitReport.Call_No));

        //        #region Vaibhav If Images count less than 6

        //        if (imagecount <= 6)
        //        {
        //            for (int ic = 0; ic < rows; ic++)
        //            {
        //                if (imageposted > 0)
        //                {
        //                    if ((imageposted % 6) == 0)
        //                    {
        //                        using (reader = new StreamReader(Server.MapPath("~/inspection-visit-report-images.html")))
        //                        {
        //                            bodys = reader.ReadToEnd();
        //                        }

        //                        bodys = bodys.Replace("[Image]", ImageContent);
        //                        bodys = bodys.Replace("[Logos]", "http://localhost:54895/AllJsAndCss/images/logo.png");

        //                        #region Initial setting vaibhav
        //                        //strs.Append(body);
        //                        PdfPageSize vpageSize = PdfPageSize.A4;
        //                        PdfPageOrientation vpdfOrientation = PdfPageOrientation.Portrait;
        //                        HtmlToPdf Vconverter = new HtmlToPdf();

        //                        // set the page timeout (in seconds)
        //                        Vconverter.Options.MaxPageLoadTime = 240;  //=========================5-Aug-2019
        //                        Vconverter.Options.PdfPageSize = vpageSize;
        //                        Vconverter.Options.PdfPageOrientation = vpdfOrientation;
        //                        #endregion


        //                        #region Header and Footer Vaibhav
        //                        #region Heder code
        //                        string _VHeader = string.Empty;
        //                        string _Vfooter = string.Empty;

        //                        // for Report header by abel
        //                        StreamReader _VreadHeader_File = new StreamReader(Server.MapPath("~/IV_Report_Header.html"));
        //                        _VHeader = _VreadHeader_File.ReadToEnd();
        //                        _VHeader = _VHeader.Replace("[SapAndControle_No]", ObjModelVisitReport.SubJob_No);
        //                        _VHeader = _VHeader.Replace("[RevisionNo]", countNo);
        //                        /*_Header = _Header.Replace("[Logo]", "http://localhost:54895/AllJsAndCss/images/logo.png");*/ // change123 once pulished on server
        //                        _VHeader = _VHeader.Replace("[Logo]", ConfigurationManager.AppSettings["Web"].ToString() + "/AllJsAndCss/images/logo.png");


        //                        #endregion


        //                        #region Generate no
        //                        if (RM.Report == null)
        //                        {

        //                            dtSrNo = objDalVisitReport.GetSrNo(ObjModelVisitReport.SubJob_No);
        //                            if (dtSrNo.Tables[0].Rows.Count > 0)
        //                            {
        //                                SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["SrNo"]);

        //                            }
        //                            RM.ReportNo = "IVR-" + ObjModelVisitReport.SubJob_No + "-" + SrNo + "-Rev." + countNo;
        //                            _VHeader = _VHeader.Replace("[ReportNo]", RM.ReportNo);

        //                        }
        //                        else
        //                        {
        //                            //dtSrNo = objDalVisitReport.GetReportNo(RM.Report);
        //                            dtSrNo = objDalVisitReport.GetReportNo(Convert.ToString(RM.PK_RM_ID));
        //                            if (dtSrNo.Tables[0].Rows.Count > 0)
        //                            {
        //                                SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["ReportNo"]);

        //                            }

        //                            _VHeader = _VHeader.Replace("[ReportNo]", SrNo);
        //                        }
        //                        #endregion

        //                        #region Footer Code

        //                        StreamReader _VreadFooter_File = new StreamReader(Server.MapPath("~/IV_Report_Footer.html"));
        //                        _Vfooter = _VreadFooter_File.ReadToEnd();

        //                        // header settings
        //                        Vconverter.Options.DisplayHeader = true || true || true;
        //                        Vconverter.Header.DisplayOnFirstPage = true;
        //                        Vconverter.Header.DisplayOnOddPages = true;
        //                        Vconverter.Header.DisplayOnEvenPages = true;
        //                        Vconverter.Header.Height = 75;

        //                        PdfHtmlSection VheaderHtml = new PdfHtmlSection(_VHeader, string.Empty);
        //                        VheaderHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
        //                        Vconverter.Header.Add(VheaderHtml);

        //                        // footer settings
        //                        Vconverter.Options.DisplayFooter = true || true || true;
        //                        Vconverter.Footer.DisplayOnFirstPage = true;
        //                        Vconverter.Footer.DisplayOnOddPages = true;
        //                        Vconverter.Footer.DisplayOnEvenPages = true;

        //                        Vconverter.Footer.Height = 150;
        //                        //converter.Footer.Height = 120;

        //                        PdfHtmlSection VfooterHtml = new PdfHtmlSection(_Vfooter, string.Empty);
        //                        VfooterHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
        //                        Vconverter.Footer.Add(VfooterHtml);

        //                        //end abel code


        //                        //// page numbers can be added using a PdfTextSection object
        //                        //PdfTextSection Vtext1 = new PdfTextSection(0, 145, "Page: {page_number} of {total_pages}  ", new System.Drawing.Font("Arial", 8));
        //                        //Vtext1.HorizontalAlign = PdfTextHorizontalAlign.Right;
        //                        //Vconverter.Footer.Add(Vtext1);
        //                        #endregion
        //                        #endregion

        //                        SelectPdf.PdfDocument docs = Vconverter.ConvertHtmlString(bodys);
        //                        ReportNames = ObjModelVisitReport.Call_No + "_Img_" + iteration + ".pdf";



        //                        paths = Server.MapPath("~/Content/" + ObjModelVisitReport.Call_No);
        //                        docs.Save(paths + '\\' + ReportNames);
        //                        docs.Close();
        //                        bodys = string.Empty;
        //                        ImageContent = string.Empty;
        //                        iteration = iteration + 1;
        //                        ViewBag.Reminder = "1";
        //                    }
        //                }

        //                ImageContent += "<tr><td style='padding: 10px; width: 50 %;' align='center'>" + ImageReportDashBoard.Rows[img]["Heading"].ToString() + "</td>";
        //                ImageContent += "<td style='padding: 10px; width: 50 %;' align='center'>" + ImageReportDashBoard.Rows[img + 1]["Heading"].ToString() + "</td></tr>";

        //                ImageContent += "<tr><td style='padding:10px;' align='center'><img src='" + ConfigurationManager.AppSettings["Web"].ToString() + "/CompressFiles/" + ImageReportDashBoard.Rows[img]["Image"].ToString() + "' style='width:400px;height:200px; ' align='center' alt=''></td>";
        //                ImageContent += "<td style='padding:10px;' align='center'><img src='" + ConfigurationManager.AppSettings["Web"].ToString() + "/CompressFiles/" + ImageReportDashBoard.Rows[img + 1]["Image"].ToString() + "' style='width:400px;height:200px; ' align='center' alt=''></td></tr>";

        //                img = img + 2;
        //                imageposted = imageposted + 2;
        //            }



        //            #region Reminder = 1

        //            if (reminder == 1)
        //            {
        //                if (ImageContent != string.Empty)
        //                {
        //                    ImageContent += "<tr><td style='padding: 10px; width: 50 %;' align='center'>" + ImageReportDashBoard.Rows[imagecount - 1]["Heading"].ToString() + "</td></tr>";
        //                    ImageContent += "<tr><td style='padding:10px;' align='center'><img src='" + ConfigurationManager.AppSettings["Web"].ToString() + "/CompressFiles/" + ImageReportDashBoard.Rows[imagecount - 1]["Image"].ToString() + "' style='width:400px;height:200px; ' align='center' alt=''></td></tr>";
        //                }
        //                else
        //                {
        //                    ImageContent = "<tr><td style='padding: 10px; width: 50 %;' align='center'>" + ImageReportDashBoard.Rows[imagecount - 1]["Heading"].ToString() + "</td></tr>";
        //                    ImageContent += "<tr><td style='padding:10px;' align='center'><img src='" + ConfigurationManager.AppSettings["Web"].ToString() + "/CompressFiles/" + ImageReportDashBoard.Rows[imagecount - 1]["Image"].ToString() + "' style='width:400px;height:200px; ' align='center' alt=''></td></tr>";
        //                }


        //                using (reader = new StreamReader(Server.MapPath("~/inspection-visit-report-images.html")))
        //                {
        //                    bodys = reader.ReadToEnd();
        //                }
        //                bodys = bodys.Replace("[Image]", ImageContent);
        //                bodys = bodys.Replace("[Logos]", "http://localhost:54895/AllJsAndCss/images/logo.png");

        //                #region Initial setting vaibhav
        //                //strs.Append(body);
        //                PdfPageSize vpageSize = PdfPageSize.A4;
        //                PdfPageOrientation vpdfOrientation = PdfPageOrientation.Portrait;
        //                HtmlToPdf Vconverter = new HtmlToPdf();

        //                // set the page timeout (in seconds)
        //                Vconverter.Options.MaxPageLoadTime = 240;  //=========================5-Aug-2019
        //                Vconverter.Options.PdfPageSize = vpageSize;
        //                Vconverter.Options.PdfPageOrientation = vpdfOrientation;
        //                #endregion


        //                #region Header and Footer Vaibhav
        //                #region Heder code
        //                string _VHeader = string.Empty;
        //                string _Vfooter = string.Empty;

        //                // for Report header by abel
        //                StreamReader _VreadHeader_File = new StreamReader(Server.MapPath("~/IV_Report_Header.html"));
        //                _VHeader = _VreadHeader_File.ReadToEnd();
        //                _VHeader = _VHeader.Replace("[SapAndControle_No]", ObjModelVisitReport.SubJob_No);
        //                _VHeader = _VHeader.Replace("[RevisionNo]", countNo);
        //                /*_Header = _Header.Replace("[Logo]", "http://localhost:54895/AllJsAndCss/images/logo.png");*/ // change123 once pulished on server
        //                _VHeader = _VHeader.Replace("[Logo]", ConfigurationManager.AppSettings["Web"].ToString() + "/AllJsAndCss/images/logo.png");


        //                #endregion


        //                #region Generate no
        //                if (RM.Report == null)
        //                {

        //                    dtSrNo = objDalVisitReport.GetSrNo(ObjModelVisitReport.SubJob_No);
        //                    if (dtSrNo.Tables[0].Rows.Count > 0)
        //                    {
        //                        SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["SrNo"]);

        //                    }
        //                    RM.ReportNo = "IVR-" + ObjModelVisitReport.SubJob_No + "-" + SrNo + "-Rev." + countNo;
        //                    _VHeader = _VHeader.Replace("[ReportNo]", RM.ReportNo);

        //                }
        //                else
        //                {
        //                    //dtSrNo = objDalVisitReport.GetReportNo(RM.Report);
        //                    dtSrNo = objDalVisitReport.GetReportNo(Convert.ToString(RM.PK_RM_ID));
        //                    if (dtSrNo.Tables[0].Rows.Count > 0)
        //                    {
        //                        SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["ReportNo"]);

        //                    }

        //                    _VHeader = _VHeader.Replace("[ReportNo]", SrNo);
        //                }
        //                #endregion

        //                #region Footer Code

        //                StreamReader _VreadFooter_File = new StreamReader(Server.MapPath("~/IV_Report_Footer.html"));
        //                _Vfooter = _VreadFooter_File.ReadToEnd();

        //                // header settings
        //                Vconverter.Options.DisplayHeader = true || true || true;
        //                Vconverter.Header.DisplayOnFirstPage = true;
        //                Vconverter.Header.DisplayOnOddPages = true;
        //                Vconverter.Header.DisplayOnEvenPages = true;
        //                Vconverter.Header.Height = 75;

        //                PdfHtmlSection VheaderHtml = new PdfHtmlSection(_VHeader, string.Empty);
        //                VheaderHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
        //                Vconverter.Header.Add(VheaderHtml);

        //                // footer settings
        //                Vconverter.Options.DisplayFooter = true || true || true;
        //                Vconverter.Footer.DisplayOnFirstPage = true;
        //                Vconverter.Footer.DisplayOnOddPages = true;
        //                Vconverter.Footer.DisplayOnEvenPages = true;

        //                Vconverter.Footer.Height = 150;
        //                //converter.Footer.Height = 120;

        //                PdfHtmlSection VfooterHtml = new PdfHtmlSection(_Vfooter, string.Empty);
        //                VfooterHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
        //                Vconverter.Footer.Add(VfooterHtml);

        //                //end abel code


        //                //// page numbers can be added using a PdfTextSection object
        //                //PdfTextSection Vtext1 = new PdfTextSection(0, 145, "Page: {page_number} of {total_pages}  ", new System.Drawing.Font("Arial", 8));
        //                //Vtext1.HorizontalAlign = PdfTextHorizontalAlign.Right;
        //                //Vconverter.Footer.Add(Vtext1);
        //                #endregion
        //                #endregion



        //                SelectPdf.PdfDocument docs = Vconverter.ConvertHtmlString(bodys);
        //                ReportNames = ObjModelVisitReport.Call_No + "_Img_" + iteration + ".pdf";

        //                paths = Server.MapPath("~/Content/" + ObjModelVisitReport.Call_No);
        //                docs.Save(paths + '\\' + ReportNames);
        //                docs.Close();
        //                bodys = string.Empty;
        //                ImageContent = string.Empty;
        //                ViewBag.Reminder = "1";
        //            }

        //            #region 4 Image If not reminder =0
        //            if (imageposted <= imagecount)
        //            {
        //                if (reminder == 0)
        //                {
        //                    ViewBag.Reminder = "2";
        //                    using (reader = new StreamReader(Server.MapPath("~/inspection-visit-report-images.html")))
        //                    {
        //                        bodys = reader.ReadToEnd();
        //                    }
        //                    bodys = bodys.Replace("[Image]", ImageContent);
        //                    bodys = bodys.Replace("[Logos]", "http://localhost:54895/AllJsAndCss/images/logo.png");



        //                    #region Initial setting vaibhav
        //                    //strs.Append(body);
        //                    PdfPageSize vpageSize = PdfPageSize.A4;
        //                    PdfPageOrientation vpdfOrientation = PdfPageOrientation.Portrait;
        //                    HtmlToPdf Vconverter = new HtmlToPdf();

        //                    // set the page timeout (in seconds)
        //                    Vconverter.Options.MaxPageLoadTime = 240;  //=========================5-Aug-2019
        //                    Vconverter.Options.PdfPageSize = vpageSize;
        //                    Vconverter.Options.PdfPageOrientation = vpdfOrientation;
        //                    #endregion


        //                    #region Header and Footer Vaibhav
        //                    #region Heder code
        //                    string _VHeader = string.Empty;
        //                    string _Vfooter = string.Empty;

        //                    // for Report header by abel
        //                    StreamReader _VreadHeader_File = new StreamReader(Server.MapPath("~/IV_Report_Header.html"));
        //                    _VHeader = _VreadHeader_File.ReadToEnd();
        //                    _VHeader = _VHeader.Replace("[SapAndControle_No]", ObjModelVisitReport.SubJob_No);
        //                    _VHeader = _VHeader.Replace("[RevisionNo]", countNo);
        //                    /*_Header = _Header.Replace("[Logo]", "http://localhost:54895/AllJsAndCss/images/logo.png");*/ // change123 once pulished on server
        //                    _VHeader = _VHeader.Replace("[Logo]", ConfigurationManager.AppSettings["Web"].ToString() + "/AllJsAndCss/images/logo.png");


        //                    #endregion


        //                    #region Generate no
        //                    if (RM.Report == null)
        //                    {

        //                        dtSrNo = objDalVisitReport.GetSrNo(ObjModelVisitReport.SubJob_No);
        //                        if (dtSrNo.Tables[0].Rows.Count > 0)
        //                        {
        //                            SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["SrNo"]);

        //                        }
        //                        RM.ReportNo = "IVR-" + ObjModelVisitReport.SubJob_No + "-" + SrNo + "- Rev." + countNo;
        //                        _VHeader = _VHeader.Replace("[ReportNo]", RM.ReportNo);

        //                    }
        //                    else
        //                    {
        //                        //dtSrNo = objDalVisitReport.GetReportNo(RM.Report);
        //                        dtSrNo = objDalVisitReport.GetReportNo(Convert.ToString(RM.PK_RM_ID));
        //                        if (dtSrNo.Tables[0].Rows.Count > 0)
        //                        {
        //                            SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["ReportNo"]);

        //                        }

        //                        _VHeader = _VHeader.Replace("[ReportNo]", SrNo);
        //                    }
        //                    #endregion

        //                    #region Footer Code

        //                    StreamReader _VreadFooter_File = new StreamReader(Server.MapPath("~/IV_Report_Footer.html"));
        //                    _Vfooter = _VreadFooter_File.ReadToEnd();

        //                    // header settings
        //                    Vconverter.Options.DisplayHeader = true || true || true;
        //                    Vconverter.Header.DisplayOnFirstPage = true;
        //                    Vconverter.Header.DisplayOnOddPages = true;
        //                    Vconverter.Header.DisplayOnEvenPages = true;
        //                    Vconverter.Header.Height = 75;

        //                    PdfHtmlSection VheaderHtml = new PdfHtmlSection(_VHeader, string.Empty);
        //                    VheaderHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
        //                    Vconverter.Header.Add(VheaderHtml);

        //                    // footer settings
        //                    Vconverter.Options.DisplayFooter = true || true || true;
        //                    Vconverter.Footer.DisplayOnFirstPage = true;
        //                    Vconverter.Footer.DisplayOnOddPages = true;
        //                    Vconverter.Footer.DisplayOnEvenPages = true;

        //                    Vconverter.Footer.Height = 150;
        //                    //converter.Footer.Height = 120;

        //                    PdfHtmlSection VfooterHtml = new PdfHtmlSection(_Vfooter, string.Empty);
        //                    VfooterHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
        //                    Vconverter.Footer.Add(VfooterHtml);

        //                    //end abel code


        //                    //// page numbers can be added using a PdfTextSection object
        //                    //PdfTextSection Vtext1 = new PdfTextSection(0, 145, "Page: {page_number} of {total_pages}  ", new System.Drawing.Font("Arial", 8));
        //                    //Vtext1.HorizontalAlign = PdfTextHorizontalAlign.Right;
        //                    //Vconverter.Footer.Add(Vtext1);
        //                    #endregion
        //                    #endregion

        //                    Vconverter.Options.AutoFitWidth = HtmlToPdfPageFitMode.ShrinkOnly;
        //                    Vconverter.Options.AutoFitHeight = HtmlToPdfPageFitMode.NoAdjustment;



        //                    // SelectPdf.PdfDocument docs = converters.ConvertHtmlString(bodys);
        //                    SelectPdf.PdfDocument docs = Vconverter.ConvertHtmlString(bodys);

        //                    ReportNames = ObjModelVisitReport.Call_No + "_Img_" + iteration + ".pdf";
        //                    paths = Server.MapPath("~/Content/" + ObjModelVisitReport.Call_No);
        //                    docs.Save(paths + '\\' + ReportNames);
        //                    docs.Close();
        //                    bodys = string.Empty;
        //                    ImageContent = string.Empty;
        //                    iteration = iteration + 1;
        //                }
        //            }

        //            #endregion


        //            #region 6 Images
        //            if (((imageposted % 6) == 0) && imageposted > 0)
        //            {
        //                ViewBag.Reminder = "2";
        //                using (reader = new StreamReader(Server.MapPath("~/inspection-visit-report-images.html")))
        //                {
        //                    bodys = reader.ReadToEnd();
        //                }
        //                bodys = bodys.Replace("[Image]", ImageContent);
        //                bodys = bodys.Replace("[Logos]", "http://localhost:54895/AllJsAndCss/images/logo.png");



        //                #region Initial setting vaibhav
        //                //strs.Append(body);
        //                PdfPageSize vpageSize = PdfPageSize.A4;
        //                PdfPageOrientation vpdfOrientation = PdfPageOrientation.Portrait;
        //                HtmlToPdf Vconverter = new HtmlToPdf();

        //                // set the page timeout (in seconds)
        //                Vconverter.Options.MaxPageLoadTime = 240;  //=========================5-Aug-2019
        //                Vconverter.Options.PdfPageSize = vpageSize;
        //                Vconverter.Options.PdfPageOrientation = vpdfOrientation;
        //                #endregion


        //                #region Header and Footer Vaibhav
        //                #region Heder code
        //                string _VHeader = string.Empty;
        //                string _Vfooter = string.Empty;

        //                // for Report header by abel
        //                StreamReader _VreadHeader_File = new StreamReader(Server.MapPath("~/IV_Report_Header.html"));
        //                _VHeader = _VreadHeader_File.ReadToEnd();
        //                _VHeader = _VHeader.Replace("[SapAndControle_No]", ObjModelVisitReport.SubJob_No);
        //                _VHeader = _VHeader.Replace("[RevisionNo]", countNo);
        //                /*_Header = _Header.Replace("[Logo]", "http://localhost:54895/AllJsAndCss/images/logo.png");*/ // change123 once pulished on server
        //                _VHeader = _VHeader.Replace("[Logo]", ConfigurationManager.AppSettings["Web"].ToString() + "/AllJsAndCss/images/logo.png");


        //                #endregion


        //                #region Generate no
        //                if (RM.Report == null)
        //                {

        //                    dtSrNo = objDalVisitReport.GetSrNo(ObjModelVisitReport.SubJob_No);
        //                    if (dtSrNo.Tables[0].Rows.Count > 0)
        //                    {
        //                        SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["SrNo"]);

        //                    }
        //                    RM.ReportNo = "IVR-" + ObjModelVisitReport.SubJob_No + "-" + SrNo + "-Rev." + countNo;
        //                    _VHeader = _VHeader.Replace("[ReportNo]", RM.ReportNo);

        //                }
        //                else
        //                {
        //                    //dtSrNo = objDalVisitReport.GetReportNo(RM.Report);
        //                    dtSrNo = objDalVisitReport.GetReportNo(Convert.ToString(RM.PK_RM_ID));
        //                    if (dtSrNo.Tables[0].Rows.Count > 0)
        //                    {
        //                        SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["ReportNo"]);

        //                    }

        //                    _VHeader = _VHeader.Replace("[ReportNo]", SrNo);
        //                }
        //                #endregion

        //                #region Footer Code

        //                StreamReader _VreadFooter_File = new StreamReader(Server.MapPath("~/IV_Report_Footer.html"));
        //                _Vfooter = _VreadFooter_File.ReadToEnd();

        //                // header settings
        //                Vconverter.Options.DisplayHeader = true || true || true;
        //                Vconverter.Header.DisplayOnFirstPage = true;
        //                Vconverter.Header.DisplayOnOddPages = true;
        //                Vconverter.Header.DisplayOnEvenPages = true;
        //                Vconverter.Header.Height = 75;

        //                PdfHtmlSection VheaderHtml = new PdfHtmlSection(_VHeader, string.Empty);
        //                VheaderHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
        //                Vconverter.Header.Add(VheaderHtml);

        //                // footer settings
        //                Vconverter.Options.DisplayFooter = true || true || true;
        //                Vconverter.Footer.DisplayOnFirstPage = true;
        //                Vconverter.Footer.DisplayOnOddPages = true;
        //                Vconverter.Footer.DisplayOnEvenPages = true;

        //                Vconverter.Footer.Height = 150;
        //                //converter.Footer.Height = 120;

        //                PdfHtmlSection VfooterHtml = new PdfHtmlSection(_Vfooter, string.Empty);
        //                VfooterHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
        //                Vconverter.Footer.Add(VfooterHtml);

        //                //end abel code


        //                // page numbers can be added using a PdfTextSection object
        //                //PdfTextSection Vtext1 = new PdfTextSection(0, 145, "Page: {page_number} of {total_pages}  ", new System.Drawing.Font("Arial", 8));
        //                //Vtext1.HorizontalAlign = PdfTextHorizontalAlign.Right;
        //                //Vconverter.Footer.Add(Vtext1);
        //                #endregion
        //                #endregion





        //                // SelectPdf.PdfDocument docs = converters.ConvertHtmlString(bodys);
        //                SelectPdf.PdfDocument docs = Vconverter.ConvertHtmlString(bodys);

        //                ReportNames = ObjModelVisitReport.Call_No + "_Img_" + iteration + ".pdf";
        //                paths = Server.MapPath("~/Content/" + ObjModelVisitReport.Call_No);
        //                docs.Save(paths + '\\' + ReportNames);
        //                docs.Close();
        //                bodys = string.Empty;
        //                ImageContent = string.Empty;
        //                iteration = iteration + 1;
        //            }
        //            #endregion


        //        }
        //        #endregion






        //        #endregion


        //        #region Vaibhav If Images count more than 6
        //        else
        //        {
        //            for (int ic = 0; ic < rows; ic++)
        //            {
        //                if (imageposted > 0)
        //                {
        //                    if ((imageposted % 6) == 0)
        //                    {
        //                        using (reader = new StreamReader(Server.MapPath("~/inspection-visit-report-images.html")))
        //                        {
        //                            bodys = reader.ReadToEnd();
        //                        }

        //                        bodys = bodys.Replace("[Image]", ImageContent);
        //                        bodys = bodys.Replace("[Logos]", "http://localhost:54895/AllJsAndCss/images/logo.png");

        //                        #region Initial setting vaibhav
        //                        //strs.Append(body);
        //                        PdfPageSize vpageSize = PdfPageSize.A4;
        //                        PdfPageOrientation vpdfOrientation = PdfPageOrientation.Portrait;
        //                        HtmlToPdf Vconverter = new HtmlToPdf();

        //                        // set the page timeout (in seconds)
        //                        Vconverter.Options.MaxPageLoadTime = 240;  //=========================5-Aug-2019
        //                        Vconverter.Options.PdfPageSize = vpageSize;
        //                        Vconverter.Options.PdfPageOrientation = vpdfOrientation;
        //                        #endregion


        //                        #region Header and Footer Vaibhav
        //                        #region Heder code
        //                        string _VHeader = string.Empty;
        //                        string _Vfooter = string.Empty;

        //                        // for Report header by abel
        //                        StreamReader _VreadHeader_File = new StreamReader(Server.MapPath("~/IV_Report_Header.html"));
        //                        _VHeader = _VreadHeader_File.ReadToEnd();
        //                        _VHeader = _VHeader.Replace("[SapAndControle_No]", ObjModelVisitReport.SubJob_No);
        //                        _VHeader = _VHeader.Replace("[RevisionNo]", countNo);
        //                        /*_Header = _Header.Replace("[Logo]", "http://localhost:54895/AllJsAndCss/images/logo.png");*/ // change123 once pulished on server
        //                        _VHeader = _VHeader.Replace("[Logo]", ConfigurationManager.AppSettings["Web"].ToString() + "/AllJsAndCss/images/logo.png");


        //                        #endregion


        //                        #region Generate no
        //                        if (RM.Report == null)
        //                        {

        //                            dtSrNo = objDalVisitReport.GetSrNo(ObjModelVisitReport.SubJob_No);
        //                            if (dtSrNo.Tables[0].Rows.Count > 0)
        //                            {
        //                                SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["SrNo"]);

        //                            }
        //                            RM.ReportNo = "IVR-" + ObjModelVisitReport.SubJob_No + "-" + SrNo + "-Rev." + countNo;
        //                            _VHeader = _VHeader.Replace("[ReportNo]", RM.ReportNo);

        //                        }
        //                        else
        //                        {
        //                            //dtSrNo = objDalVisitReport.GetReportNo(RM.Report);
        //                            dtSrNo = objDalVisitReport.GetReportNo(Convert.ToString(RM.PK_RM_ID));
        //                            if (dtSrNo.Tables[0].Rows.Count > 0)
        //                            {
        //                                SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["ReportNo"]);

        //                            }

        //                            _VHeader = _VHeader.Replace("[ReportNo]", SrNo);
        //                        }
        //                        #endregion

        //                        #region Footer Code

        //                        StreamReader _VreadFooter_File = new StreamReader(Server.MapPath("~/IV_Report_Footer.html"));
        //                        _Vfooter = _VreadFooter_File.ReadToEnd();

        //                        // header settings
        //                        Vconverter.Options.DisplayHeader = true || true || true;
        //                        Vconverter.Header.DisplayOnFirstPage = true;
        //                        Vconverter.Header.DisplayOnOddPages = true;
        //                        Vconverter.Header.DisplayOnEvenPages = true;
        //                        Vconverter.Header.Height = 75;

        //                        PdfHtmlSection VheaderHtml = new PdfHtmlSection(_VHeader, string.Empty);
        //                        VheaderHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
        //                        Vconverter.Header.Add(VheaderHtml);

        //                        // footer settings
        //                        Vconverter.Options.DisplayFooter = true || true || true;
        //                        Vconverter.Footer.DisplayOnFirstPage = true;
        //                        Vconverter.Footer.DisplayOnOddPages = true;
        //                        Vconverter.Footer.DisplayOnEvenPages = true;

        //                        Vconverter.Footer.Height = 150;
        //                        //converter.Footer.Height = 120;

        //                        PdfHtmlSection VfooterHtml = new PdfHtmlSection(_Vfooter, string.Empty);
        //                        VfooterHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
        //                        Vconverter.Footer.Add(VfooterHtml);

        //                        //end abel code


        //                        // page numbers can be added using a PdfTextSection object
        //                        //PdfTextSection Vtext1 = new PdfTextSection(0, 145, "Page: {page_number} of {total_pages}  ", new System.Drawing.Font("Arial", 8));
        //                        //Vtext1.HorizontalAlign = PdfTextHorizontalAlign.Right;
        //                        //Vconverter.Footer.Add(Vtext1);
        //                        #endregion
        //                        #endregion




        //                        SelectPdf.PdfDocument docs = Vconverter.ConvertHtmlString(bodys);
        //                        ReportNames = ObjModelVisitReport.Call_No + "_Img_" + iteration + ".pdf";



        //                        paths = Server.MapPath("~/Content/" + ObjModelVisitReport.Call_No);
        //                        docs.Save(paths + '\\' + ReportNames);
        //                        docs.Close();
        //                        bodys = string.Empty;
        //                        ImageContent = string.Empty;
        //                        iteration = iteration + 1;
        //                    }
        //                }

        //                ImageContent += "<tr><td style='padding: 10px; width: 50 %;' align='center'>" + ImageReportDashBoard.Rows[img]["Heading"].ToString() + "</td>";
        //                ImageContent += "<td style='padding: 10px; width: 50 %;' align='center'>" + ImageReportDashBoard.Rows[img + 1]["Heading"].ToString() + "</td></tr>";

        //                ImageContent += "<tr><td style='padding:10px;' align='center'><img src='" + ConfigurationManager.AppSettings["Web"].ToString() + "/CompressFiles/" + ImageReportDashBoard.Rows[img]["Image"].ToString() + "' style='width:400px;height:200px; ' align='center' alt=''></td>";
        //                ImageContent += "<td style='padding:10px;' align='center'><img src='" + ConfigurationManager.AppSettings["Web"].ToString() + "/CompressFiles/" + ImageReportDashBoard.Rows[img + 1]["Image"].ToString() + "' style='width:400px;height:200px; ' align='center' alt=''></td></tr>";

        //                img = img + 2;
        //                imageposted = imageposted + 2;
        //            }

        //            #region Head Cond If
        //            if (((imageposted % 6) == 0) && imageposted > 0)
        //            //if (((imageposted % 6) == 0) || imageposted > 0) //31 July
        //            {

        //                using (reader = new StreamReader(Server.MapPath("~/inspection-visit-report-images.html")))
        //                {
        //                    bodys = reader.ReadToEnd();
        //                }
        //                bodys = bodys.Replace("[Image]", ImageContent);
        //                bodys = bodys.Replace("[Logos]", "http://localhost:54895/AllJsAndCss/images/logo.png");



        //                #region Initial setting vaibhav
        //                //strs.Append(body);
        //                PdfPageSize vpageSize = PdfPageSize.A4;
        //                PdfPageOrientation vpdfOrientation = PdfPageOrientation.Portrait;
        //                HtmlToPdf Vconverter = new HtmlToPdf();

        //                // set the page timeout (in seconds)
        //                Vconverter.Options.MaxPageLoadTime = 240;  //=========================5-Aug-2019
        //                Vconverter.Options.PdfPageSize = vpageSize;
        //                Vconverter.Options.PdfPageOrientation = vpdfOrientation;
        //                #endregion


        //                #region Header and Footer Vaibhav
        //                #region Heder code
        //                string _VHeader = string.Empty;
        //                string _Vfooter = string.Empty;

        //                // for Report header by abel
        //                StreamReader _VreadHeader_File = new StreamReader(Server.MapPath("~/IV_Report_Header.html"));
        //                _VHeader = _VreadHeader_File.ReadToEnd();
        //                _VHeader = _VHeader.Replace("[SapAndControle_No]", ObjModelVisitReport.SubJob_No);
        //                _VHeader = _VHeader.Replace("[RevisionNo]", countNo);
        //                /*_Header = _Header.Replace("[Logo]", "http://localhost:54895/AllJsAndCss/images/logo.png");*/ // change123 once pulished on server
        //                _VHeader = _VHeader.Replace("[Logo]", ConfigurationManager.AppSettings["Web"].ToString() + "/AllJsAndCss/images/logo.png");


        //                #endregion


        //                #region Generate no
        //                if (RM.Report == null)
        //                {

        //                    dtSrNo = objDalVisitReport.GetSrNo(ObjModelVisitReport.SubJob_No);
        //                    if (dtSrNo.Tables[0].Rows.Count > 0)
        //                    {
        //                        SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["SrNo"]);

        //                    }
        //                    RM.ReportNo = "IVR-" + ObjModelVisitReport.SubJob_No + "-" + SrNo + "-Rev." + countNo;
        //                    _VHeader = _VHeader.Replace("[ReportNo]", RM.ReportNo);

        //                }
        //                else
        //                {
        //                    //dtSrNo = objDalVisitReport.GetReportNo(RM.Report);
        //                    dtSrNo = objDalVisitReport.GetReportNo(Convert.ToString(RM.PK_RM_ID));
        //                    if (dtSrNo.Tables[0].Rows.Count > 0)
        //                    {
        //                        SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["ReportNo"]);

        //                    }

        //                    _VHeader = _VHeader.Replace("[ReportNo]", SrNo);
        //                }
        //                #endregion

        //                #region Footer Code

        //                StreamReader _VreadFooter_File = new StreamReader(Server.MapPath("~/IV_Report_Footer.html"));
        //                _Vfooter = _VreadFooter_File.ReadToEnd();

        //                // header settings
        //                Vconverter.Options.DisplayHeader = true || true || true;
        //                Vconverter.Header.DisplayOnFirstPage = true;
        //                Vconverter.Header.DisplayOnOddPages = true;
        //                Vconverter.Header.DisplayOnEvenPages = true;
        //                Vconverter.Header.Height = 75;

        //                PdfHtmlSection VheaderHtml = new PdfHtmlSection(_VHeader, string.Empty);
        //                VheaderHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
        //                Vconverter.Header.Add(VheaderHtml);

        //                // footer settings
        //                Vconverter.Options.DisplayFooter = true || true || true;
        //                Vconverter.Footer.DisplayOnFirstPage = true;
        //                Vconverter.Footer.DisplayOnOddPages = true;
        //                Vconverter.Footer.DisplayOnEvenPages = true;

        //                Vconverter.Footer.Height = 150;
        //                //converter.Footer.Height = 120;

        //                PdfHtmlSection VfooterHtml = new PdfHtmlSection(_Vfooter, string.Empty);
        //                VfooterHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
        //                Vconverter.Footer.Add(VfooterHtml);

        //                //end abel code


        //                //// page numbers can be added using a PdfTextSection object
        //                //PdfTextSection Vtext1 = new PdfTextSection(0, 145, "Page: {page_number} of {total_pages}  ", new System.Drawing.Font("Arial", 8));
        //                //Vtext1.HorizontalAlign = PdfTextHorizontalAlign.Right;
        //                //Vconverter.Footer.Add(Vtext1);
        //                #endregion
        //                #endregion





        //                // SelectPdf.PdfDocument docs = converters.ConvertHtmlString(bodys);
        //                SelectPdf.PdfDocument docs = Vconverter.ConvertHtmlString(bodys);

        //                ReportNames = ObjModelVisitReport.Call_No + "_Img_" + iteration + ".pdf";
        //                paths = Server.MapPath("~/Content/" + ObjModelVisitReport.Call_No);
        //                docs.Save(paths + '\\' + ReportNames);
        //                docs.Close();
        //                bodys = string.Empty;
        //                ImageContent = string.Empty;
        //                iteration = iteration + 1;
        //            }
        //            #endregion





        //            ViewBag.Reminder = "2";

        //            #region  reminder
        //            if (reminder == 1)
        //            {
        //                if (ImageContent != string.Empty)
        //                {
        //                    ImageContent += "<tr><td style='padding: 10px; width: 50 %;' align='center'>" + ImageReportDashBoard.Rows[imagecount - 1]["Heading"].ToString() + "</td></tr>";
        //                    ImageContent += "<tr><td style='padding:10px;' align='center'><img src='" + ConfigurationManager.AppSettings["Web"].ToString() + "/CompressFiles/" + ImageReportDashBoard.Rows[imagecount - 1]["Image"].ToString() + "' style='width:400px;height:200px; ' align='center' alt=''></td></tr>";
        //                }
        //                else
        //                {
        //                    ImageContent = "<tr><td style='padding: 10px; width: 50 %;' align='center'>" + ImageReportDashBoard.Rows[imagecount - 1]["Heading"].ToString() + "</td></tr>";
        //                    ImageContent += "<tr><td style='padding:10px;' align='center'><img src='" + ConfigurationManager.AppSettings["Web"].ToString() + "/CompressFiles/" + ImageReportDashBoard.Rows[imagecount - 1]["Image"].ToString() + "' style='width:400px;height:200px; ' align='center' alt=''></td></tr>";
        //                }


        //                using (reader = new StreamReader(Server.MapPath("~/inspection-visit-report-images.html")))
        //                {
        //                    bodys = reader.ReadToEnd();
        //                }
        //                bodys = bodys.Replace("[Image]", ImageContent);
        //                bodys = bodys.Replace("[Logos]", "http://localhost:54895/AllJsAndCss/images/logo.png");

        //                #region Initial setting vaibhav
        //                //strs.Append(body);
        //                PdfPageSize vpageSize = PdfPageSize.A4;
        //                PdfPageOrientation vpdfOrientation = PdfPageOrientation.Portrait;
        //                HtmlToPdf Vconverter = new HtmlToPdf();

        //                // set the page timeout (in seconds)
        //                Vconverter.Options.MaxPageLoadTime = 240;  //=========================5-Aug-2019
        //                Vconverter.Options.PdfPageSize = vpageSize;
        //                Vconverter.Options.PdfPageOrientation = vpdfOrientation;
        //                #endregion


        //                #region Header and Footer Vaibhav
        //                #region Heder code
        //                string _VHeader = string.Empty;
        //                string _Vfooter = string.Empty;

        //                // for Report header by abel
        //                StreamReader _VreadHeader_File = new StreamReader(Server.MapPath("~/IV_Report_Header.html"));
        //                _VHeader = _VreadHeader_File.ReadToEnd();
        //                _VHeader = _VHeader.Replace("[SapAndControle_No]", ObjModelVisitReport.SubJob_No);
        //                _VHeader = _VHeader.Replace("[RevisionNo]", countNo);
        //                /*_Header = _Header.Replace("[Logo]", "http://localhost:54895/AllJsAndCss/images/logo.png");*/ // change123 once pulished on server
        //                _VHeader = _VHeader.Replace("[Logo]", ConfigurationManager.AppSettings["Web"].ToString() + "/AllJsAndCss/images/logo.png");


        //                #endregion


        //                #region Generate no
        //                if (RM.Report == null)
        //                {

        //                    dtSrNo = objDalVisitReport.GetSrNo(ObjModelVisitReport.SubJob_No);
        //                    if (dtSrNo.Tables[0].Rows.Count > 0)
        //                    {
        //                        SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["SrNo"]);

        //                    }
        //                    RM.ReportNo = "IVR-" + ObjModelVisitReport.SubJob_No + "-" + SrNo + "- Rev." + countNo;
        //                    _VHeader = _VHeader.Replace("[ReportNo]", RM.ReportNo);

        //                }
        //                else
        //                {
        //                    //dtSrNo = objDalVisitReport.GetReportNo(RM.Report);
        //                    dtSrNo = objDalVisitReport.GetReportNo(Convert.ToString(RM.PK_RM_ID));
        //                    if (dtSrNo.Tables[0].Rows.Count > 0)
        //                    {
        //                        SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["ReportNo"]);

        //                    }

        //                    _VHeader = _VHeader.Replace("[ReportNo]", SrNo);
        //                }
        //                #endregion

        //                #region Footer Code

        //                StreamReader _VreadFooter_File = new StreamReader(Server.MapPath("~/IV_Report_Footer.html"));
        //                _Vfooter = _VreadFooter_File.ReadToEnd();

        //                // header settings
        //                Vconverter.Options.DisplayHeader = true || true || true;
        //                Vconverter.Header.DisplayOnFirstPage = true;
        //                Vconverter.Header.DisplayOnOddPages = true;
        //                Vconverter.Header.DisplayOnEvenPages = true;
        //                Vconverter.Header.Height = 75;

        //                PdfHtmlSection VheaderHtml = new PdfHtmlSection(_VHeader, string.Empty);
        //                VheaderHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
        //                Vconverter.Header.Add(VheaderHtml);

        //                // footer settings
        //                Vconverter.Options.DisplayFooter = true || true || true;
        //                Vconverter.Footer.DisplayOnFirstPage = true;
        //                Vconverter.Footer.DisplayOnOddPages = true;
        //                Vconverter.Footer.DisplayOnEvenPages = true;

        //                Vconverter.Footer.Height = 150;
        //                //converter.Footer.Height = 120;

        //                PdfHtmlSection VfooterHtml = new PdfHtmlSection(_Vfooter, string.Empty);
        //                VfooterHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
        //                Vconverter.Footer.Add(VfooterHtml);

        //                //end abel code


        //                // page numbers can be added using a PdfTextSection object
        //                //PdfTextSection Vtext1 = new PdfTextSection(0, 145, "Page: {page_number} of {total_pages}  ", new System.Drawing.Font("Arial", 8));
        //                //Vtext1.HorizontalAlign = PdfTextHorizontalAlign.Right;
        //                //Vconverter.Footer.Add(Vtext1);
        //                #endregion
        //                #endregion



        //                SelectPdf.PdfDocument docs = Vconverter.ConvertHtmlString(bodys);
        //                ReportNames = ObjModelVisitReport.Call_No + "_Img_" + iteration + ".pdf";

        //                paths = Server.MapPath("~/Content/" + ObjModelVisitReport.Call_No);
        //                docs.Save(paths + '\\' + ReportNames);
        //                docs.Close();
        //                bodys = string.Empty;
        //                ImageContent = string.Empty;
        //                ViewBag.Reminder = "1";
        //            }
        //            #endregion

        //            #region If ImageContent not null
        //            // if (ImageContent != null || ImageContent != "" && ViewBag.Reminder!="1")


        //            if (/*ImageContent != null || ImageContent != "" &&*/ ViewBag.Reminder != "1")
        //            {
        //                ViewBag.Reminder = "2";
        //                using (reader = new StreamReader(Server.MapPath("~/inspection-visit-report-images.html")))
        //                {
        //                    bodys = reader.ReadToEnd();
        //                }
        //                bodys = bodys.Replace("[Image]", ImageContent);
        //                bodys = bodys.Replace("[Logos]", "http://localhost:54895/AllJsAndCss/images/logo.png");



        //                #region Initial setting vaibhav
        //                //strs.Append(body);
        //                PdfPageSize vpageSize = PdfPageSize.A4;
        //                PdfPageOrientation vpdfOrientation = PdfPageOrientation.Portrait;
        //                HtmlToPdf Vconverter = new HtmlToPdf();

        //                // set the page timeout (in seconds)
        //                Vconverter.Options.MaxPageLoadTime = 240;  //=========================5-Aug-2019
        //                Vconverter.Options.PdfPageSize = vpageSize;
        //                Vconverter.Options.PdfPageOrientation = vpdfOrientation;
        //                #endregion


        //                #region Header and Footer Vaibhav
        //                #region Heder code
        //                string _VHeader = string.Empty;
        //                string _Vfooter = string.Empty;

        //                // for Report header by abel
        //                StreamReader _VreadHeader_File = new StreamReader(Server.MapPath("~/IV_Report_Header.html"));
        //                _VHeader = _VreadHeader_File.ReadToEnd();
        //                _VHeader = _VHeader.Replace("[SapAndControle_No]", ObjModelVisitReport.SubJob_No);
        //                _VHeader = _VHeader.Replace("[RevisionNo]", countNo);
        //                /*_Header = _Header.Replace("[Logo]", "http://localhost:54895/AllJsAndCss/images/logo.png");*/ // change123 once pulished on server
        //                _VHeader = _VHeader.Replace("[Logo]", ConfigurationManager.AppSettings["Web"].ToString() + "/AllJsAndCss/images/logo.png");


        //                #endregion


        //                #region Generate no
        //                if (RM.Report == null)
        //                {

        //                    dtSrNo = objDalVisitReport.GetSrNo(ObjModelVisitReport.SubJob_No);
        //                    if (dtSrNo.Tables[0].Rows.Count > 0)
        //                    {
        //                        SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["SrNo"]);

        //                    }
        //                    RM.ReportNo = "IVR-" + ObjModelVisitReport.SubJob_No + "-" + SrNo + "-Rev." + countNo;
        //                    _VHeader = _VHeader.Replace("[ReportNo]", RM.ReportNo);

        //                }
        //                else
        //                {
        //                    //dtSrNo = objDalVisitReport.GetReportNo(RM.Report);
        //                    dtSrNo = objDalVisitReport.GetReportNo(Convert.ToString(RM.PK_RM_ID));
        //                    if (dtSrNo.Tables[0].Rows.Count > 0)
        //                    {
        //                        SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["ReportNo"]);

        //                    }

        //                    _VHeader = _VHeader.Replace("[ReportNo]", SrNo);
        //                }
        //                #endregion

        //                #region Footer Code

        //                StreamReader _VreadFooter_File = new StreamReader(Server.MapPath("~/IV_Report_Footer.html"));
        //                _Vfooter = _VreadFooter_File.ReadToEnd();

        //                // header settings
        //                Vconverter.Options.DisplayHeader = true || true || true;
        //                Vconverter.Header.DisplayOnFirstPage = true;
        //                Vconverter.Header.DisplayOnOddPages = true;
        //                Vconverter.Header.DisplayOnEvenPages = true;
        //                Vconverter.Header.Height = 75;

        //                PdfHtmlSection VheaderHtml = new PdfHtmlSection(_VHeader, string.Empty);
        //                VheaderHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
        //                Vconverter.Header.Add(VheaderHtml);

        //                // footer settings
        //                Vconverter.Options.DisplayFooter = true || true || true;
        //                Vconverter.Footer.DisplayOnFirstPage = true;
        //                Vconverter.Footer.DisplayOnOddPages = true;
        //                Vconverter.Footer.DisplayOnEvenPages = true;

        //                Vconverter.Footer.Height = 150;
        //                //converter.Footer.Height = 120;

        //                PdfHtmlSection VfooterHtml = new PdfHtmlSection(_Vfooter, string.Empty);
        //                VfooterHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
        //                Vconverter.Footer.Add(VfooterHtml);

        //                //end abel code


        //                //// page numbers can be added using a PdfTextSection object
        //                //PdfTextSection Vtext1 = new PdfTextSection(0, 145, "Page: {page_number} of {total_pages}  ", new System.Drawing.Font("Arial", 8));
        //                //Vtext1.HorizontalAlign = PdfTextHorizontalAlign.Right;
        //                //Vconverter.Footer.Add(Vtext1);
        //                #endregion
        //                #endregion





        //                // SelectPdf.PdfDocument docs = converters.ConvertHtmlString(bodys);
        //                SelectPdf.PdfDocument docs = Vconverter.ConvertHtmlString(bodys);

        //                ReportNames = ObjModelVisitReport.Call_No + "_Img_" + iteration + ".pdf";
        //                paths = Server.MapPath("~/Content/" + ObjModelVisitReport.Call_No);
        //                docs.Save(paths + '\\' + ReportNames);
        //                docs.Close();
        //                bodys = string.Empty;
        //                ImageContent = string.Empty;
        //                iteration = iteration + 1;
        //            }
        //            #endregion

        //        }
        //        #endregion



        //        string[] pdfs = Directory.GetFiles(Server.MapPath("~/Content/" + ObjModelVisitReport.Call_No));

        //        PdfSharp.Pdf.PdfDocument ImageDoc = new PdfSharp.Pdf.PdfDocument();




        //        foreach (string pdfFile in pdfs)
        //        {
        //            if (pdfFile.Contains("Img_"))
        //            {
        //                #region Initial setting vaibhav
        //                //strs.Append(body);
        //                PdfPageSize vpageSize = PdfPageSize.A4;
        //                PdfPageOrientation vpdfOrientation = PdfPageOrientation.Portrait;
        //                HtmlToPdf Vconverter = new HtmlToPdf();

        //                // set the page timeout (in seconds)
        //                Vconverter.Options.MaxPageLoadTime = 240;  //=========================5-Aug-2019
        //                Vconverter.Options.PdfPageSize = vpageSize;
        //                Vconverter.Options.PdfPageOrientation = vpdfOrientation;
        //                #endregion
        //                #region Header footer Vaibhav Test 28-07-2020
        //                #region Header and Footer Vaibhav
        //                #region Heder code
        //                string _VHeader = string.Empty;
        //                string _Vfooter = string.Empty;

        //                // for Report header by abel
        //                StreamReader _VreadHeader_File = new StreamReader(Server.MapPath("~/IV_Report_Header.html"));
        //                _VHeader = _VreadHeader_File.ReadToEnd();
        //                _VHeader = _VHeader.Replace("[SapAndControle_No]", ObjModelVisitReport.SubJob_No);
        //                _VHeader = _VHeader.Replace("[RevisionNo]", countNo);
        //                /*_Header = _Header.Replace("[Logo]", "http://localhost:54895/AllJsAndCss/images/logo.png");*/ // change123 once pulished on server
        //                _VHeader = _VHeader.Replace("[Logo]", ConfigurationManager.AppSettings["Web"].ToString() + "/AllJsAndCss/images/logo.png");


        //                #endregion


        //                #region Generate no
        //                if (RM.Report == null)
        //                {

        //                    dtSrNo = objDalVisitReport.GetSrNo(ObjModelVisitReport.SubJob_No);
        //                    if (dtSrNo.Tables[0].Rows.Count > 0)
        //                    {
        //                        SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["SrNo"]);

        //                    }
        //                    RM.ReportNo = "IVR-" + ObjModelVisitReport.SubJob_No + "-" + SrNo + "-Rev." + countNo;
        //                    _VHeader = _VHeader.Replace("[ReportNo]", RM.ReportNo);

        //                }
        //                else
        //                {
        //                    //dtSrNo = objDalVisitReport.GetReportNo(RM.Report);
        //                    dtSrNo = objDalVisitReport.GetReportNo(Convert.ToString(RM.PK_RM_ID));
        //                    if (dtSrNo.Tables[0].Rows.Count > 0)
        //                    {
        //                        SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["ReportNo"]);

        //                    }

        //                    _VHeader = _VHeader.Replace("[ReportNo]", SrNo);
        //                }
        //                #endregion

        //                #region Footer Code

        //                StreamReader _VreadFooter_File = new StreamReader(Server.MapPath("~/IV_Report_Footer.html"));
        //                _Vfooter = _VreadFooter_File.ReadToEnd();

        //                // header settings
        //                Vconverter.Options.DisplayHeader = true || true || true;
        //                Vconverter.Header.DisplayOnFirstPage = true;
        //                Vconverter.Header.DisplayOnOddPages = true;
        //                Vconverter.Header.DisplayOnEvenPages = true;
        //                Vconverter.Header.Height = 75;

        //                PdfHtmlSection VheaderHtml = new PdfHtmlSection(_VHeader, string.Empty);
        //                VheaderHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
        //                Vconverter.Header.Add(VheaderHtml);

        //                // footer settings
        //                Vconverter.Options.DisplayFooter = true || true || true;
        //                Vconverter.Footer.DisplayOnFirstPage = true;
        //                Vconverter.Footer.DisplayOnOddPages = true;
        //                Vconverter.Footer.DisplayOnEvenPages = true;

        //                Vconverter.Footer.Height = 150;
        //                //converter.Footer.Height = 120;

        //                PdfHtmlSection VfooterHtml = new PdfHtmlSection(_Vfooter, string.Empty);
        //                VfooterHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
        //                Vconverter.Footer.Add(VfooterHtml);

        //                //end abel code


        //                // page numbers can be added using a PdfTextSection object
        //                //PdfTextSection Vtext1 = new PdfTextSection(0, 145, "Page: {page_number} of {total_pages}  ", new System.Drawing.Font("Arial", 8));
        //                //Vtext1.HorizontalAlign = PdfTextHorizontalAlign.Right;
        //                //Vconverter.Footer.Add(Vtext1);
        //                SelectPdf.PdfDocument docs = converters.ConvertHtmlString(bodys);
        //                #endregion
        //                #endregion
        //                #endregion
        //                PdfSharp.Pdf.PdfDocument ImagePDFDocument = PdfReader.Open(pdfFile, PdfDocumentOpenMode.Import);
        //                ImageDoc.Version = ImagePDFDocument.Version;

        //                foreach (PdfSharp.Pdf.PdfPage page in ImagePDFDocument.Pages)
        //                {
        //                    ImageDoc.AddPage(page);
        //                }
        //            }
        //        }
        //        int ImageC = ImageDoc.PageCount;
        //        if (System.IO.File.Exists(paths + "/Image_" + countNo + ".pdf"))
        //        {
        //            // If file found, delete it    
        //            System.IO.File.Delete(paths + "/Image_" + countNo + ".pdf");

        //        }


        //        //PdfDocument docs = converters.ConvertHtmlString(bodys);


        //        /****Final Report Saving ****/
        //        if (ImageReportDashBoard.Rows.Count > 0)
        //        {
        //            if (RM.ImageReport == null || RM.ImageReport == "")
        //            {
        //                paths = Server.MapPath("~/Content/");

        //                ImageDoc.Save(paths + ObjModelVisitReport.Call_No + "/Image_" + countNo + ".pdf");
        //                ImageDoc.Close();

        //            }
        //            else
        //            {
        //                ReportNames = RM.ImageReport;
        //                paths = Server.MapPath("~/Content/");

        //                ImageDoc.Save(paths + ReportNames);
        //                ImageDoc.Close();
        //            }
        //        }



        //        #endregion

        //        #region Save to Pdf Code 
        //        SelectPdf.GlobalProperties.LicenseKey = "uZKImYuMiJmImYuIl4mZioiXiIuXgICAgA==";
        //        System.Text.StringBuilder strs = new System.Text.StringBuilder();
        //        string body = string.Empty;

        //        string ItemDescriptioncontent = "";
        //        string ReferenceDocumentscontent = "";
        //        string InspectionDocumentsContent = "";
        //        string DocumentreviewContent = "";
        //        string EquipmentDetailscontent = "";

        //        string check1 = "";
        //        string check2 = "";
        //        string check3 = "";
        //        string check4 = "";
        //        string check5 = "";
        //        string check6 = "";
        //        string check7 = "";
        //        string check8 = "";
        //        string check9 = "";
        //        string check10 = "";
        //        string checkNABL = "";

        //        string check11 = "";
        //        string check12 = "";
        //        string check13 = "";
        //        int intSrNo = 0;
        //        using (StreamReader reader1 = new StreamReader(Server.MapPath("~/inspection-visit-report.html")))
        //        {
        //            body = reader1.ReadToEnd();
        //        }




        //        body = body.Replace("[SapAndControle_No]", ObjModelVisitReport.SubJob_No);
        //        body = body.Replace("[SAPNo]", ObjModelVisitReport.SAPNo);
        //        body = body.Replace("[Branch]", ObjModelVisitReport.Branch);
        //        body = body.Replace("[NotificationNameNo_Date]", ObjModelVisitReport.Notification_Name_No_Date);
        //        body = body.Replace("[DateOfInspection]", ObjModelVisitReport.Date_Of_Inspection);
        //        body = body.Replace("[ProjectNameLocation]", ObjModelVisitReport.Project_Name_Location);
        //        body = body.Replace("[AddressOfInspection]", ObjModelVisitReport.Address_Of_Inspection);
        //        body = body.Replace("[ClientName]", ObjModelVisitReport.Client_Name);
        //        body = body.Replace("[Enduser_Name]", ObjModelVisitReport.End_user_Name);
        //        body = body.Replace("[DECPMCEPC_Name]", ObjModelVisitReport.DEC_PMC_EPC_Name);
        //        body = body.Replace("[DECPMCEPCAssignment_No]", ObjModelVisitReport.DEC_PMC_EPC_Assignment_No);
        //        body = body.Replace("[VendorNameLocation]", ObjModelVisitReport.Vendor_Name_Location);
        //        body = body.Replace("[PoNo]", ObjModelVisitReport.Po_No + " Dated " + SubJobDate);
        //        body = body.Replace("[SubVendorName]", ObjModelVisitReport.Sub_Vendor_Name);
        //        if (ObjModelVisitReport.Po_No_SubVendor != string.Empty)
        //        {
        //            body = body.Replace("[PoNoSubVendor]", ObjModelVisitReport.Po_No_SubVendor + " Dated " + ObjModelVisitReport.SubSubVendorDate_of_PO);
        //        }
        //        else
        //        {
        //            body = body.Replace("[PoNoSubVendor]", ObjModelVisitReport.Po_No_SubVendor);
        //        }
        //        body = body.Replace("[Conclusion]", ObjModelVisitReport.Conclusion);
        //        body = body.Replace("[CanIRNbeissued]", ObjModelVisitReport.CanIRNbeissued + ' ' + ObjModelVisitReport.IssuedPOItemNumbers);


        //        body = body.Replace("[PendingActivites]", ObjModelVisitReport.Pending_Activites);
        //        body = body.Replace("[IdentificationOfInspected]", ObjModelVisitReport.Identification_Of_Inspected);
        //        body = body.Replace("[AreasOfConcerns]", ObjModelVisitReport.Areas_Of_Concerns);
        //        body = body.Replace("[NonConformitiesraised]", ObjModelVisitReport.Non_Conformities_raised);
        //        body = body.Replace("[Name]", ObjModelVisitReport.Name);
        //        body = body.Replace("[date]", ObjModelVisitReport.ReportCreatedDate);

        //        body = body.Replace("[RevisionNo]", countNo);

        //        //body = body.Replace("[TempInspectionPhotosNo]", ObjModelVisitReport.TempInspectionPhotosNo);//24
        //        body = body.Replace("[TempMaster_List_Of_calibrated_Instruments]", ObjModelVisitReport.TempMaster_List_Of_calibrated_Instruments);
        //        body = body.Replace("[ReviseReason]", ObjModelVisitReport.ReviseReason);
        //        body = body.Replace("[ReviseReportNoForPDF]", ObjModelVisitReport.ReviseReportNoForPDF);
        //        body = body.Replace("[ReportNo]", ObjModelVisitReport.Report_No);
        //        body = body.Replace("[ReportNoForPDF]", ObjModelVisitReport.ReportNoForPDF);











        //        body = body.Replace("[Stamp]", "<img src = '" + ConfigurationManager.AppSettings["Web"].ToString() + "/Stamp.png' style='width:100px;height:50px; ' align='center'>");
        //        // body = body.Replace("[Signature]", ConfigurationManager.AppSettings["Web"].ToString() + "/signature.jpg");
        //        body = body.Replace("[Signature]", ConfigurationManager.AppSettings["Web"].ToString() + ObjModelVisitReport.Signatures);
        //        string I = "<img src = '" + ConfigurationManager.AppSettings["Web"].ToString() + "/Content/Uploads/Images/" + ObjModelVisitReport.Signatures + "' style='width:225px;height:125px; ' align='center'>";
        //        //string I = "<img src = '" + ConfigurationManager.AppSettings["Web"].ToString() + "/Content/Uploads/Images/" + ObjModelVisitReport.Signatures + "' style='width:100px;height:50px; ' align='center'>";
        //        //  string I = "<img src = '" + ConfigurationManager.AppSettings["Web"].ToString() + "/Sign/" + ObjModelVisitReport.Signatures + "' style='width:100px;height:50px; ' align='center'>";
        //        if (ObjModelVisitReport.Signatures != null)
        //        {
        //            //  body = body.Replace("[Signature1]", ConfigurationManager.AppSettings["Web"].ToString()+ "/Content/Uploads/Images/" + ObjModelVisitReport.Signatures + "");
        //            body = body.Replace("[Signature1]", I);

        //        }
        //        else
        //        {

        //        }

        //        //strs.Append(body);//24
        //        PdfPageSize pageSize = PdfPageSize.A4;
        //        PdfPageOrientation pdfOrientation = PdfPageOrientation.Portrait;
        //        HtmlToPdf converter = new HtmlToPdf();




        //        // set the page timeout (in seconds)
        //        converter.Options.MaxPageLoadTime = 2400;  //=========================5-Aug-2019
        //        converter.Options.PdfPageSize = pageSize;
        //        converter.Options.PdfPageOrientation = pdfOrientation;
        //        converter.Options.WebPageFixedSize = false;

        //        #region Heder code
        //        string _Header = string.Empty;
        //        string _footer = string.Empty;

        //        // for Report header by abel
        //        StreamReader _readHeader_File = new StreamReader(Server.MapPath("~/IV_Report_Header.html"));
        //        _Header = _readHeader_File.ReadToEnd();
        //        _Header = _Header.Replace("[SapAndControle_No]", ObjModelVisitReport.SubJob_No);
        //        _Header = _Header.Replace("[RevisionNo]", countNo);
        //        /*_Header = _Header.Replace("[Logo]", "http://localhost:54895/AllJsAndCss/images/logo.png");*/ // change123 once pulished on server
        //        _Header = _Header.Replace("[Logo]", ConfigurationManager.AppSettings["Web"].ToString() + "/AllJsAndCss/images/logo.png");


        //        #endregion


        //        #region Generate no
        //        if (RM.Report == null)
        //        {

        //            dtSrNo = objDalVisitReport.GetSrNo(ObjModelVisitReport.SubJob_No);
        //            if (dtSrNo.Tables[0].Rows.Count > 0)
        //            {
        //                SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["SrNo"]);
        //                intSrNo = Convert.ToInt32(SrNo) + 1;
        //            }
        //            else
        //            {
        //                intSrNo = 1;
        //            }
        //            //RM.ReportNo = "IVR-" + ObjModelVisitReport.SubJob_No + "-" + SrNo + "-Rev." + countNo;
        //            RM.ReportNo = "IVR-" + ObjModelVisitReport.SubJob_No + "-" + intSrNo + "-Rev." + countNo;
        //            _Header = _Header.Replace("[ReportNo]", RM.ReportNo);

        //        }
        //        else
        //        {
        //            //dtSrNo = objDalVisitReport.GetReportNo(RM.Report);
        //            dtSrNo = objDalVisitReport.GetReportNo(Convert.ToString(RM.PK_RM_ID));
        //            if (dtSrNo.Tables[0].Rows.Count > 0)
        //            {
        //                SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["ReportNo"]);
        //                RM.ReportNo = SrNo;
        //            }

        //            _Header = _Header.Replace("[ReportNo]", SrNo);
        //        }
        //        #endregion

        //        #region Footer Code

        //        StreamReader _readFooter_File = new StreamReader(Server.MapPath("~/IV_Report_Footer.html"));
        //        _footer = _readFooter_File.ReadToEnd();

        //        // header settings
        //        converter.Options.DisplayHeader = true || true || true;
        //        converter.Header.DisplayOnFirstPage = true;
        //        converter.Header.DisplayOnOddPages = true;
        //        converter.Header.DisplayOnEvenPages = true;
        //        converter.Header.Height = 75;

        //        PdfHtmlSection headerHtml = new PdfHtmlSection(_Header, string.Empty);
        //        headerHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
        //        converter.Header.Add(headerHtml);

        //        // footer settings
        //        converter.Options.DisplayFooter = true || true || true;
        //        converter.Footer.DisplayOnFirstPage = true;
        //        converter.Footer.DisplayOnOddPages = true;
        //        converter.Footer.DisplayOnEvenPages = true;

        //        //converter.Footer.Height = 150;
        //        converter.Footer.Height = 105;

        //        PdfHtmlSection footerHtml = new PdfHtmlSection(_footer, string.Empty);
        //        footerHtml.AutoFitHeight = HtmlToPdfPageFitMode.AutoFit;
        //        converter.Footer.Add(footerHtml);


        //        #endregion

        //        converter.Options.AutoFitWidth = HtmlToPdfPageFitMode.ShrinkOnly;
        //        converter.Options.AutoFitHeight = HtmlToPdfPageFitMode.NoAdjustment;

        //        #region test Total Page Count


        //        SelectPdf.PdfDocument doc1 = converter.ConvertHtmlString(body);

        //        int P;
        //        string ImagePageTotalCount1 = "";
        //        if (imagecount == 0)
        //        {
        //            P = doc1.Pages.Count;
        //            ImagePageTotalCount1 = "0";
        //        }
        //        else
        //        {
        //            P = doc1.Pages.Count + ImageC;
        //            ImagePageTotalCount1 = Convert.ToString(ImageC);
        //        }
        //        string noPages1 = Convert.ToString(P);


        //        #region get Image page no & Total Page no

        //        string ImagePage1 = "";
        //        string TotalPage1 = "";
        //        //string ImagePageTotalCount1 = Convert.ToString(ImageC);
        //        if (ImagePageTotalCount1 == "0")
        //        {

        //            ImagePage1 = "-";
        //            TotalPage1 = noPages1;
        //            //body = body.Replace("[InspectiobRecord_Remark]", TotalPage1);
        //            body = body.Replace("[TempInspectionPhotosNo]", ImagePage1);

        //        }
        //        else
        //        {
        //            int ImagePageNo = doc1.Pages.Count + 1; //Convert.ToInt32(noPages1) - Convert.ToInt32(ImagePageTotalCount1);
        //            ImagePage1 = Convert.ToString(ImagePageNo);
        //            TotalPage1 = noPages1;
        //            //body = body.Replace("[InspectiobRecord_Remark]", TotalPage1);
        //            body = body.Replace("[TempInspectionPhotosNo]", ImagePage1);
        //        }

        //        #endregion

        //        strs.Append(body);
        //        #endregion



        //        SelectPdf.PdfDocument doc = converter.ConvertHtmlString(body);



        //        string ReportName = RM.Report;
        //        paths = Server.MapPath("~/Content/");

        //        if (System.IO.File.Exists(paths + ObjModelVisitReport.Call_No + "/Data_" + countNo + ".pdf"))
        //        {
        //            // If file found, delete it    
        //            System.IO.File.Delete(paths + ObjModelVisitReport.Call_No + "/Data_" + countNo + ".pdf");

        //        }

        //        if (ReportName == null)
        //        {

        //            ReportName = ObjModelVisitReport.Call_No + "/Data_" + countNo + ".pdf";
        //            //ReportName = RM.ReportNo + ".pdf";

        //            doc.Save(paths + '\\' + ReportName);
        //            doc.Close();
        //        }
        //        else
        //        {
        //            ReportName = ObjModelVisitReport.Call_No + "/Data_" + countNo + ".pdf";
        //            //ReportName = RM.ReportNo + ".pdf";
        //            doc.Save(paths + '\\' + ReportName);
        //            doc.Close();
        //        }

        //        string path = Server.MapPath("~/IVRReport");

        //        string[] datafile = Directory.GetFiles(Server.MapPath("~/Content/" + ObjModelVisitReport.Call_No));
        //        dtSrNo = objDalVisitReport.GetSrNo(ObjModelVisitReport.SubJob_No);
        //        if (dtSrNo.Tables[0].Rows.Count > 0)
        //        {
        //            SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["SrNo"]);

        //        }

        //        string finalReportName = "IVR-" + ObjModelVisitReport.SubJob_No.Replace('/', '_') + "-" + SrNo + "-Rev." + countNo.ToString() + ".pdf";
        //        //string finalReportName = RM.ReportNo + ".pdf";

        //        PdfSharp.Pdf.PdfDocument FinalDoc = new PdfSharp.Pdf.PdfDocument();

        //        if (System.IO.File.Exists(path + "\\" + finalReportName))
        //        {
        //            // If file found, delete it    
        //            System.IO.File.Delete(path + "\\" + finalReportName);

        //        }
        //        // create a new pdf document
        //        foreach (string pdfFile in datafile)
        //        {
        //            if (pdfFile.Contains("Image_") || pdfFile.Contains("Data_"))
        //            {
        //                PdfSharp.Pdf.PdfDocument inputPDFDocument = PdfReader.Open(pdfFile, PdfDocumentOpenMode.Import);

        //                FinalDoc.Version = inputPDFDocument.Version;

        //                foreach (PdfSharp.Pdf.PdfPage page in inputPDFDocument.Pages)
        //                {
        //                    FinalDoc.AddPage(page);
        //                }

        //            }
        //        }

        //        XFont font = new XFont("Verdana", 9);
        //        XBrush brush = XBrushes.Black;
        //        // Create variable that store page count  
        //        string noPages = FinalDoc.Pages.Count.ToString();




        //        for (int c = 0; c < FinalDoc.Pages.Count; ++c)
        //        {
        //            PdfSharp.Pdf.PdfPage page = FinalDoc.Pages[c];
        //            // Make a layout rectangle.  
        //            XRect layoutRectangle = new XRect(240 /*X*/ , page.Height - font.Height - 10 /*Y*/ , page.Width /*Width*/ , font.Height /*Height*/ );
        //            using (XGraphics gfx = XGraphics.FromPdfPage(page))
        //            {
        //                gfx.DrawString("Page " + (c + 1).ToString() + " of " + noPages, font, brush, layoutRectangle, XStringFormats.Center);
        //            }
        //        }
        //        FinalDoc.Save(path + "\\" + finalReportName);
        //        FinalDoc.Close();


        //        #endregion

        //        if (RM.PK_RM_ID != 0)
        //        {

        //            RM.Type = "IVR";
        //            RM.Status = "1";
        //            RM.ImageReport = ReportNames;
        //            RM.Report = finalReportName;
        //            RM.ReportName = ReportName;
        //            RM.PK_CALL_ID = PK_CALL_ID;
        //            RM.SubJob_No = ObjModelVisitReport.SubJob_No;
        //            RM.PK_SubJob_Id = ObjModelVisitReport.PK_SubJob_Id;
        //            RM.ProjectName = ObjModelVisitReport.End_user_Name;
        //            RM.Po_No = ObjModelVisitReport.Po_No;
        //            RM.Report_No = ObjModelVisitReport.Report_No;
        //            Result = objDalVisitReport.InsertUpdateReport(RM);
        //            if (Result != "" && Result != null)
        //            {
        //                TempData["InsertCompany"] = Result;
        //            }
        //        }
        //        else
        //        {
        //            RM.Type = "IVR";
        //            RM.Status = "1";
        //            RM.ImageReport = ReportNames;
        //            RM.Report = finalReportName;
        //            RM.ReportName = ReportName;
        //            RM.PK_CALL_ID = PK_CALL_ID;
        //            RM.SubJob_No = ObjModelVisitReport.SubJob_No;
        //            RM.PK_SubJob_Id = ObjModelVisitReport.PK_SubJob_Id;
        //            RM.ProjectName = ObjModelVisitReport.End_user_Name;
        //            RM.Po_No = ObjModelVisitReport.Po_No;
        //            RM.Report_No = ObjModelVisitReport.Report_No;

        //            Result = objDalVisitReport.InsertUpdateReport(RM);

        //            if (Result != "" && Result != null)
        //            {
        //                TempData["InsertCompany"] = Result;
        //            }
        //        }

        //        #region
        //        CostSheetDashBoard = objDalVisitReport.GetReportByCall_Id(PK_CALL_ID);
        //        if (CostSheetDashBoard.Rows.Count > 0)
        //        {
        //            foreach (DataRow dr in CostSheetDashBoard.Rows)
        //            {
        //                ReportDashboard.Add(
        //                    new ReportModel
        //                    {
        //                        ReportName = Convert.ToString(dr["ReportName"]),
        //                        Report = Convert.ToString(dr["Report"]),
        //                        CraetedDate = Convert.ToString(dr["CraetedDate"]),
        //                        PK_RM_ID = Convert.ToInt32(dr["PK_RM_ID"]),
        //                        PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"])
        //                    }
        //                    );
        //            }
        //        }
        //        ViewData["CostSheet"] = ReportDashboard;
        //        #endregion

        //        return RedirectToAction("VisitReportForm", RMData);

        //    }
        //    else
        //    {
        //        return RedirectToAction("VisitReportForm", RMData);
        //    }
        //}
        #endregion


        #region 29 Nov 2021 Working speed
        public ActionResult UpdateReportsRedirectGeneralTab(int? PK_CALL_ID)
        {
            RMData.PK_CALL_ID = Convert.ToInt32(PK_CALL_ID);
            DataTable ItemDescriptionDashBoard = new DataTable();
            DataTable RefranceDocumentsDashBoard = new DataTable();
            DataTable InspectionActivitesDashBoard = new DataTable();
            DataTable DocumentsReviewBoard = new DataTable();
            DataTable EquipmentDetailsBoard = new DataTable();
            DataSet DSJobMasterByQtId = new DataSet();
            DataTable ReportDashBoard = new DataTable();
            DataSet UpdateReport = new DataSet();
            DataTable CostSheetDashBoard = new DataTable();
            int count = 0;
            DataTable ImageReportDashBoard = new DataTable();
            List<ReportImageModel> ImageDashBoard = new List<ReportImageModel>();
            List<ItemDescriptionModel> lstCompanyDashBoard = new List<ItemDescriptionModel>();
            List<ReferenceDocumentsModel> RefranceDocuments = new List<ReferenceDocumentsModel>();
            List<InspectionActivitiesModel> InspectionDocuments = new List<InspectionActivitiesModel>();
            List<DocumentRevieweModel> DocumentReview = new List<DocumentRevieweModel>();
            List<EquipmentDetailsModel> EquipmentDetails = new List<EquipmentDetailsModel>();
            List<ReportModel> ReportDashboard = new List<ReportModel>();
            DataSet dtSrNo = new DataSet();
            string SrNo = "";
            string SubJobDate = string.Empty;

            ReportModel RM = new ReportModel();
            string Result = "";
            if (PK_CALL_ID != 0 || PK_CALL_ID != null)
            {
                int i = 0;
                int J = 0;
                int K = 0;
                int L = 0;
                int M = 0;
                int N = 0;

                #region 
                DSJobMasterByQtId = objDalVisitReport.EditInspectionVisitReportByPKCallID(PK_CALL_ID);

                //DSJobMasterByQtId = objDalVisitReport.PrintVisitReport(PK_CALL_ID);

                if (DSJobMasterByQtId.Tables[0].Rows.Count > 0)
                {
                    ObjModelVisitReport.SAPNo = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["SAP_No"]);
                    ObjModelVisitReport.Branch = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Branch"]);
                    ObjModelVisitReport.Sap_And_Controle_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Sap_And_Controle_No"]);
                    ObjModelVisitReport.PK_IVR_ID = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["PK_IVR_ID"]);
                    ObjModelVisitReport.Project_Name_Location = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Project_Name_Location"]);
                    ObjModelVisitReport.Address_Of_Inspection = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Address_Of_Inspection"]);
                    ObjModelVisitReport.End_user_Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["End_user_Name"]);
                    ObjModelVisitReport.Vendor_Name_Location = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Vendor_Name_Location"]);
                    ObjModelVisitReport.PK_Call_ID = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["PK_Call_ID"]);
                    ObjModelVisitReport.Notification_Name_No_Date = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Notification_Name_No_Date"]);


                    ObjModelVisitReport.ReviseReason = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["ReviseReason"]);
                    ObjModelVisitReport.ReviseReportNoForPDF = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["ReviseReportNoForPDF"]);
                    ObjModelVisitReport.ReportNoForPDF = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["ReportNoForPDF"]);
                    ObjModelVisitReport.Date_of_PO = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Date_of_PO"]);
                    ObjModelVisitReport.SubJob_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["SubJob_No"]);

                }
                else
                {

                    InspectionvisitReportModel Abc = new InspectionvisitReportModel();
                    Abc.PK_Call_ID = PK_CALL_ID;
                    return RedirectToAction("VisitReportForm", Abc);
                }
                #endregion




                #region report Count
                UpdateReport = objDalVisitReport.GetReportByLastId(PK_CALL_ID);
                if (UpdateReport.Tables[0].Rows.Count > 0)
                {
                    RM.PK_RM_ID = Convert.ToInt32(UpdateReport.Tables[0].Rows[0]["PK_RM_ID"]);
                    RM.Report = Convert.ToString(UpdateReport.Tables[0].Rows[0]["Report"]);
                    //RM.ImageReport = Convert.ToString(UpdateReport.Tables[0].Rows[0]["ImageReport"]);
                }

                #region report Count
                ReportDashBoard = objDalVisitReport.GetReportByCall_Id(PK_CALL_ID);
                if (ReportDashBoard.Rows.Count > 0)
                {
                    int counts = ReportDashBoard.Rows.Count;
                    count = counts - 1;
                }
                string countNo = Convert.ToString(count);
                #endregion
                #endregion




                #region Image Save to pdf
                SelectPdf.GlobalProperties.LicenseKey = "uZKImYuMiJmImYuIl4mZioiXiIuXgICAgA==";
                System.Text.StringBuilder strss = new System.Text.StringBuilder();

                string bodys = string.Empty;
                string ImageContent = string.Empty;
                string ReportNames = string.Empty;
                string paths = string.Empty;
                int img = 0;
                int imagecount = ImageReportDashBoard.Rows.Count;
                int rows = imagecount / 2;
                int imageposted = 0;
                int reminder = (imagecount % 2);
                int iteration = 1;
                StreamReader reader;

                //using (reader = new StreamReader(Server.MapPath("~/inspection-visit-report-images.html")))
                //{
                //    bodys = reader.ReadToEnd();
                //}


                ///First File start
                PdfPageSize pageSizes = PdfPageSize.A4;
                PdfPageOrientation pdfOrientations = PdfPageOrientation.Portrait;

                HtmlToPdf converters = new HtmlToPdf();

                #endregion



                #region Save to Pdf Code 
                SelectPdf.GlobalProperties.LicenseKey = "uZKImYuMiJmImYuIl4mZioiXiIuXgICAgA==";
                System.Text.StringBuilder strs = new System.Text.StringBuilder();
                string body = string.Empty;

                string ItemDescriptioncontent = "";
                string ReferenceDocumentscontent = "";
                string InspectionDocumentsContent = "";
                string DocumentreviewContent = "";
                string EquipmentDetailscontent = "";

                string check1 = "";
                string check2 = "";
                string check3 = "";
                string check4 = "";
                string check5 = "";
                string check6 = "";
                string check7 = "";
                string check8 = "";
                string check9 = "";
                string check10 = "";
                string checkNABL = "";

                string check11 = "";
                string check12 = "";
                string check13 = "";
                int intSrNo = 0;
                using (StreamReader reader1 = new StreamReader(Server.MapPath("~/inspection-visit-report.html")))
                {
                    body = reader1.ReadToEnd();
                }




                body = body.Replace("[SapAndControle_No]", ObjModelVisitReport.SubJob_No);
                body = body.Replace("[SAPNo]", ObjModelVisitReport.SAPNo);

                body = body.Replace("[Name]", ObjModelVisitReport.Name);
                body = body.Replace("[date]", ObjModelVisitReport.ReportCreatedDate);

                body = body.Replace("[RevisionNo]", countNo);

                //body = body.Replace("[TempInspectionPhotosNo]", ObjModelVisitReport.TempInspectionPhotosNo);//24
                body = body.Replace("[TempMaster_List_Of_calibrated_Instruments]", ObjModelVisitReport.TempMaster_List_Of_calibrated_Instruments);
                if (ObjModelVisitReport.ReviseReason != "-" && ObjModelVisitReport.ReviseReason != "")
                {
                    body = body.Replace("[ReviseReason]", "Reason for Revision - " + Convert.ToString(ObjModelVisitReport.ReviseReason));
                }
                else
                {
                    body = body.Replace("[ReviseReason]", "-");
                }
                body = body.Replace("[ReviseReportNoForPDF]", ObjModelVisitReport.ReviseReportNoForPDF);
                body = body.Replace("[ReportNo]", ObjModelVisitReport.Report_No);
                body = body.Replace("[ReportNoForPDF]", ObjModelVisitReport.ReportNoForPDF);











                body = body.Replace("[Stamp]", "<img src = '" + ConfigurationManager.AppSettings["Web"].ToString() + "/Stamp.png' style='width:100px;height:50px; ' align='center'>");
                // body = body.Replace("[Signature]", ConfigurationManager.AppSettings["Web"].ToString() + "/signature.jpg");
                body = body.Replace("[Signature]", ConfigurationManager.AppSettings["Web"].ToString() + ObjModelVisitReport.Signatures);
                string I = "<img src = '" + ConfigurationManager.AppSettings["Web"].ToString() + "/Content/Uploads/Images/" + ObjModelVisitReport.Signatures + "' style='width:225px;height:125px; ' align='center'>";
                //string I = "<img src = '" + ConfigurationManager.AppSettings["Web"].ToString() + "/Content/Uploads/Images/" + ObjModelVisitReport.Signatures + "' style='width:100px;height:50px; ' align='center'>";
                //  string I = "<img src = '" + ConfigurationManager.AppSettings["Web"].ToString() + "/Sign/" + ObjModelVisitReport.Signatures + "' style='width:100px;height:50px; ' align='center'>";
                if (ObjModelVisitReport.Signatures != null)
                {
                    //  body = body.Replace("[Signature1]", ConfigurationManager.AppSettings["Web"].ToString()+ "/Content/Uploads/Images/" + ObjModelVisitReport.Signatures + "");
                    body = body.Replace("[Signature1]", I);

                }
                else
                {

                }

                //strs.Append(body);//24
                PdfPageSize pageSize = PdfPageSize.A4;
                PdfPageOrientation pdfOrientation = PdfPageOrientation.Portrait;
                HtmlToPdf converter = new HtmlToPdf();




                // set the page timeout (in seconds)
                converter.Options.MaxPageLoadTime = 2400;  //=========================5-Aug-2019
                converter.Options.PdfPageSize = pageSize;
                converter.Options.PdfPageOrientation = pdfOrientation;
                converter.Options.WebPageFixedSize = false;




                #region Generate no
                if (RM.Report == null)
                {

                    dtSrNo = objDalVisitReport.GetSrNo(ObjModelVisitReport.SubJob_No);
                    if (dtSrNo.Tables[0].Rows.Count > 0)
                    {
                        SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["SrNo"]);
                        intSrNo = Convert.ToInt32(SrNo) + 1;
                    }
                    else
                    {
                        intSrNo = 1;
                    }
                    //RM.ReportNo = "IVR-" + ObjModelVisitReport.SubJob_No + "-" + SrNo + "-Rev." + countNo;
                    RM.ReportNo = "IVR-" + ObjModelVisitReport.SubJob_No + "-" + intSrNo + "-Rev." + countNo;


                }
                else
                {
                    //dtSrNo = objDalVisitReport.GetReportNo(RM.Report);
                    dtSrNo = objDalVisitReport.GetReportNo(Convert.ToString(RM.PK_RM_ID));
                    if (dtSrNo.Tables[0].Rows.Count > 0)
                    {
                        SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["ReportNo"]);
                        RM.ReportNo = SrNo;
                    }


                }
                #endregion


                converter.Options.AutoFitWidth = HtmlToPdfPageFitMode.ShrinkOnly;
                converter.Options.AutoFitHeight = HtmlToPdfPageFitMode.NoAdjustment;



                string[] datafile = Directory.GetFiles(Server.MapPath("~/Content/" + ObjModelVisitReport.Call_No));
                dtSrNo = objDalVisitReport.GetSrNo(ObjModelVisitReport.SubJob_No);
                if (dtSrNo.Tables[0].Rows.Count > 0)
                {
                    SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["SrNo"]);

                }

               // string finalReportName = "IVR-" + ObjModelVisitReport.SubJob_No.Replace('/', '_') + "-" + SrNo + "-Rev." + countNo.ToString() + ".pdf";
                //string finalReportName = RM.ReportNo + ".pdf";
                string finalReportName = RM.ReportNo.Replace('/', '_') + ".pdf"; //23 Feb 2022




                #endregion
                string ReportName = RM.Report;
                if (RM.PK_RM_ID != 0)
                {

                    RM.Type = "IVR";
                    RM.Status = "1";
                    RM.ImageReport = ReportNames;
                    RM.Report = finalReportName;
                    RM.ReportName = ReportName;
                    RM.PK_CALL_ID = PK_CALL_ID;
                    RM.SubJob_No = ObjModelVisitReport.SubJob_No;
                    RM.PK_SubJob_Id = ObjModelVisitReport.PK_SubJob_Id;
                    RM.ProjectName = ObjModelVisitReport.End_user_Name;
                    RM.Po_No = ObjModelVisitReport.Po_No;
                    RM.Report_No = ObjModelVisitReport.Report_No;
                    Result = objDalVisitReport.InsertUpdateReport(RM);
                    if (Result != "" && Result != null)
                    {
                        TempData["InsertCompany"] = Result;
                    }
                }
                else
                {
                    RM.Type = "IVR";
                    RM.Status = "1";
                    RM.ImageReport = ReportNames;
                    RM.Report = finalReportName;
                    RM.ReportName = ReportName;
                    RM.PK_CALL_ID = PK_CALL_ID;
                    RM.SubJob_No = ObjModelVisitReport.SubJob_No;
                    RM.PK_SubJob_Id = ObjModelVisitReport.PK_SubJob_Id;
                    RM.ProjectName = ObjModelVisitReport.End_user_Name;
                    RM.Po_No = ObjModelVisitReport.Po_No;
                    RM.Report_No = ObjModelVisitReport.Report_No;

                    Result = objDalVisitReport.InsertUpdateReport(RM);

                    if (Result != "" && Result != null)
                    {
                        TempData["InsertCompany"] = Result;
                    }
                }

                #region
                CostSheetDashBoard = objDalVisitReport.GetReportByCall_Id(PK_CALL_ID);
                if (CostSheetDashBoard.Rows.Count > 0)
                {
                    foreach (DataRow dr in CostSheetDashBoard.Rows)
                    {
                        ReportDashboard.Add(
                            new ReportModel
                            {
                                ReportName = Convert.ToString(dr["ReportName"]),
                                Report = Convert.ToString(dr["Report"]),
                                CraetedDate = Convert.ToString(dr["CraetedDate"]),
                                PK_RM_ID = Convert.ToInt32(dr["PK_RM_ID"]),
                                PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"])
                            }
                            );
                    }
                }
                ViewData["CostSheet"] = ReportDashboard;
                #endregion

                return RedirectToAction("VisitReportForm", RMData);

            }
            else
            {
                return RedirectToAction("VisitReportForm", RMData);
            }
        }
        #endregion
        #endregion


        #region Code by  Rahul 
        //[HttpPost]
        //public JsonResult GetSubSubSectionType(string CompanyName ,string Type)
        //{
        //    var Data = objDalVisitReport.GetReportList(CompanyName, Type);
        //   // ViewBag.SubCatlist = new SelectList(Data, "PK_CALL_ID", "ReportName");
        //   // var Data = objDalEnquiryMaster.GetInspectorList(Convert.ToString(CompanyName));
        //    return Json(Data, JsonRequestBehavior.AllowGet);
        //}
        [HttpPost]
        public JsonResult GetSubSubSectionType(string VisitReport, string SubJobNo, string ProjectName, string Vendor, string Client)
        {
            int id = 0;
            string i = "";
            // var Data="";


            // DataSet DSJobMasterByQtId = new DataSet();
            DataTable DSJobMasterByQtId = new DataTable();

            // DSJobMasterByQtId = objDalVisitReport.GetCallId(SubJobNo, ProjectName, Vendor, Client);

            DSJobMasterByQtId = objDalVisitReport.DtGetCallId(SubJobNo, ProjectName, Vendor, Client);

            if (DSJobMasterByQtId.Rows.Count > 0)
            {
                //foreach (DataRow dr in DSJobMasterByQtId.Rows) // loop for adding add from dataset to list<modeldata>  
                //{
                //id = Convert.ToInt32(dr["PK_Call_ID"]);
                i = String.Join(",", DSJobMasterByQtId.AsEnumerable().Select(x => x.Field<string>("PK_Call_ID").ToString()).ToArray());

                // }
            }


            var Data = objDalVisitReport.StringGetReportList(i);

            // List<int> TagIds = i.Split(',').Select(int.Parse).ToList();
            //  var Data1 = objDalVisitReport.StringGetReportList(TagIds);



            // ViewBag.SubCatlist = new SelectList(Data, "PK_CALL_ID", "ReportName");
            // var Data = objDalEnquiryMaster.GetInspectorList(Convert.ToString(CompanyName));
            return Json(Data, JsonRequestBehavior.AllowGet);
        }


        [HttpPost]
        public JsonResult GetIVRById(string IVR)
        {

            DataSet DSJobMasterByQtId = new DataSet();

            DSJobMasterByQtId = objDalVisitReport.IVRByCallID(IVR);
            if (DSJobMasterByQtId.Tables[0].Rows.Count > 0)
            {
                ObjModelVisitReport.PK_Call_ID = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["PK_Call_ID"]);


            }

            return Json(ObjModelVisitReport, JsonRequestBehavior.AllowGet);
        }
        #endregion

        
        List<NonInspectionActivity> lmd = new List<NonInspectionActivity>();
        DataSet ds = new DataSet();
        #region  inspection Activity
        [HttpGet]
        public ActionResult Activity(int? sid, int? kid)
        {
            #region edit
            if (sid != null)
            {
                ViewBag.DataEntryView = "Yes";
                ObjModel.Id = Convert.ToInt32(sid);
                ObjModel.PK_Call_ID = Convert.ToInt32(kid);
                DataTable DTActivity = new DataTable();
                DTActivity = ObjActivity.GetActivity(Convert.ToInt32(ObjModel.Id), Convert.ToInt32(ObjModel.PK_Call_ID));
                #region comment
                //if (DTActivity.Rows.Count > 0)
                //{
                //    ObjModel.Id = Convert.ToInt32(DTActivity.Rows[0]["Id"]);
                //    ObjModel.PK_Call_ID = Convert.ToInt32(DTActivity.Rows[0]["PK_Call_ID"]);
                //    ObjModel.DateSE = Convert.ToString(DTActivity.Rows[0]["DateSE"]);
                //    ObjModel.EndDate = Convert.ToString(DTActivity.Rows[0]["EndDate"]);
                //    ObjModel.StartTime = Convert.ToDouble(DTActivity.Rows[0]["StartTime"]);
                //    ObjModel.EndTime = Convert.ToDouble(DTActivity.Rows[0]["EndTime"]);
                //    ObjModel.Attachment = Convert.ToString(DTActivity.Rows[0]["Attachment"]);
                //    ObjModel.Description = Convert.ToString(DTActivity.Rows[0]["Description"]);
                //    ObjModel.TravelTime = Convert.ToDouble(DTActivity.Rows[0]["TravelTime"]);
                //}
                #endregion
                if (DTActivity.Rows.Count != 0)
                {
                    foreach (DataRow dr in DTActivity.Rows) // loop for adding add from dataset to list<modeldata>  
                    {
                        lmd.Add(new NonInspectionActivity
                        {
                            Id = Convert.ToInt32(dr["Id"]),
                            ActivityType = Convert.ToString(dr["ActivityType"]),
                            Location = Convert.ToString(dr["Location"]),
                            DateSE = Convert.ToString(dr["DateSE"]),
                            //EndDate = Convert.ToString(dr["enddate"]),
                            //StartDate = Convert.ToString(dr["StartDate"]),
                            //EndDate = Convert.ToString(dr["EndDate"]),
                            ServiceCode = Convert.ToString(dr["ServiceCode"]),
                            Vendor_Name = Convert.ToString(dr["Description"]),
                            //StartTime = Convert.ToDouble(dr["StartTime"]),
                            EstimatedTime = Convert.ToString(dr["StartTime"]),
                            EndTime = Convert.ToDouble(dr["EndTime"]),
                            Attachment = Convert.ToString(dr["Attachment"]),
                            TravelTime = Convert.ToDouble(dr["TravelTime"])

                        });
                    }
                    ObjModel.PK_Call_ID = Convert.ToInt32(kid);
                    //ViewData["NonInspectionActivityList"] = lmd;
                    ViewBag.Dates = lmd;


                }
            }
            #endregion

            else
            {
                #region Get All data by PKId

                ObjModel.PK_Call_ID = Convert.ToInt32(kid);
                ds = ObjActivity.GetData(Convert.ToInt32(kid)); // Get data from callid

                if (ds.Tables[0].Rows.Count != 0)
                {
                    foreach (DataRow dr in ds.Tables[0].Rows) // loop for adding add from dataset to list<modeldata>  
                    {
                        lmd.Add(new NonInspectionActivity
                        {
                            Id = Convert.ToInt32(dr["Id"]),
                            ActivityType = Convert.ToString(dr["ActivityType"]),
                            Location = Convert.ToString(dr["Location"]),
                            DateSE = Convert.ToString(dr["DateSE"]),
                            //EndDate = Convert.ToString(dr["enddate"]),
                            //StartDate = Convert.ToString(dr["StartDate"]),
                            //EndDate = Convert.ToString(dr["EndDate"]),
                            ServiceCode = Convert.ToString(dr["ServiceCode"]),
                            Description = Convert.ToString(dr["Description"]),
                            StartTime = Convert.ToDouble(dr["StartTime"]),
                            EndTime = Convert.ToDouble(dr["EndTime"]),
                            Attachment = Convert.ToString(dr["Attachment"]),
                            TravelTime = Convert.ToDouble(dr["TravelTime"])

                        });
                    }
                    ObjModel.PK_Call_ID = Convert.ToInt32(kid);
                    ViewData["NonInspectionActivityList"] = lmd;
                    ViewBag.DataEntryView = "No";
                }
                #endregion
                else
                {
                    #region  22-01-2021 get dates from visit report 

                    DataSet dtGateDate = new DataSet();
                    string Date = "";
                    string Dates;
                    dtGateDate = ObjActivity.GetDate(kid);  //if data is null Get dates from visit report
                    if (dtGateDate.Tables[0].Rows.Count > 0)
                    {
                        Date = dtGateDate.Tables[0].Rows[0]["Date_Of_Inspection"].ToString();

                    }

                    Dates = Date.Trim().TrimStart(','); // to remove just the first comma

                    string[] ArrDates = Dates.Split(',');

                    foreach (var dr in ArrDates) // loop for adding add from dataset to list<modeldata>  
                    {
                        lmd.Add(new NonInspectionActivity
                        {
                            DateSE = dr,
                            Vendor_Name = dtGateDate.Tables[0].Rows[0]["Vendor_Name_Location"].ToString(),
                            EstimatedTime = dtGateDate.Tables[0].Rows[0]["EstimatedHours"].ToString(),
                        });
                    }

                    ViewData["Dates"] = ArrDates;
                    // ViewBag.Dates = ArrDates;
                    ViewBag.Dates = lmd;
                    ViewBag.DataEntryView = "Yes";
                    #endregion
                }

            }






            //ViewData["Dates"] = lmd;
            return View(ObjModel);
        }

        [HttpPost]
        public ActionResult Activity(NonInspectionActivity R, HttpPostedFileBase File, HttpPostedFileBase[] Image, int? sid, int? kid, List<NonInspectionActivity> LN)
        {
            string Result = string.Empty;
            try
            {
                #region Document upload code
                //if (Image.Count() > 0)
                //{
                //    foreach (HttpPostedFileBase item in Image)
                //    {
                //        HttpPostedFileBase image = item;
                //        if (image != null && image.ContentLength > 0)
                //        {
                //            string filePath = AppDomain.CurrentDomain.BaseDirectory + "NonInspectionActivityDocument\\" + image.FileName;
                //            const string ImageDirectoryFP = "NonInspectionActivityDocument\\";
                //            const string ImageDirectory = "~/NonInspectionActivityDocument/";
                //            string ImagePath = "~/NonInspectionActivityDocument/" + image.FileName;
                //            string fileNameWithExtension = System.IO.Path.GetExtension(image.FileName);
                //            string fileNameWithoutExtension = System.IO.Path.GetFileNameWithoutExtension(image.FileName);
                //            string ImageName = image.FileName;

                //            int iteration = 1;

                //            while (System.IO.File.Exists(Server.MapPath(ImagePath)))
                //            {
                //                ImagePath = string.Concat(ImageDirectory, fileNameWithoutExtension, "-", iteration, fileNameWithExtension);
                //                filePath = string.Concat(ImageDirectoryFP, fileNameWithoutExtension, "-", iteration, fileNameWithExtension);
                //                ImageName = string.Concat(fileNameWithoutExtension, "-", iteration, fileNameWithExtension);
                //                iteration += 1;
                //            }
                //            if (iteration == 1)
                //            {
                //                image.SaveAs(filePath);
                //            }
                //            else
                //            {
                //                image.SaveAs(AppDomain.CurrentDomain.BaseDirectory + filePath);
                //            }
                //            R.Attachment += ImageName + ",";
                //        }
                //    }
                //}
                #endregion




                //DateTime Start = DateTime.ParseExact(R.StartDate, "dd/MM/yyyy", null);
                //DateTime End = DateTime.ParseExact(R.EndDate, "dd/MM/yyyy", null);


                #region 22 Jan Start vaibhav Activity


                foreach (var item in R.Activity)
                {
                    int total = Convert.ToInt32(item.StartTime);
                    R.TotalTime = total;
                    DateTime StDt = Convert.ToDateTime(item.StartDate);
                    R.DateSE = StDt.ToString("dd/MM/yyyy");
                    R.StartTime = item.StartTime;
                    R.EndTime = item.EndTime;
                    R.TravelTime = item.TravelTime;
                    R.Description = item.Description;
                    R.PK_Call_ID = R.PK_Call_ID;

                    Result = ObjActivity.InsertUpdateActivity(R);

                    if (Convert.ToInt16(Result) > 0)
                    {
                        //ModelState.Clear();
                        TempData["message"] = "Record Added Successfully...";
                    }
                    else
                    {
                        TempData["message"] = "Something went Wrong! Please try Again";
                    }
                }
                #endregion


                #region old
                //for (DateTime date = Start; date.Date <= End; date = date.AddDays(1))
                //{
                //    DateTime StDt = date;

                //    R.DateSE = StDt.ToString("dd/MM/yyyy");

                //    Result = ObjActivity.InsertUpdateActivity(R);

                //    if (Convert.ToInt16(Result) > 0)
                //    {
                //        ModelState.Clear();
                //        TempData["message"] = "Record Added Successfully...";
                //    }
                //    else
                //    {
                //        TempData["message"] = "Something went Wrong! Please try Again";
                //    }
                //}
                #endregion







                if (Convert.ToInt16(Result) > 0)
                {
                    ModelState.Clear();
                    TempData["message"] = "Record Added Successfully...";
                }
                else
                {
                    TempData["message"] = "Something went Wrong! Please try Again";
                }

            }
            catch (Exception ex)
            {
                string Error = ex.Message.ToString();
            }
            R.Id = Convert.ToInt32(0);
            return RedirectToAction("Activity", new { kid = Convert.ToInt32(R.PK_Call_ID) });
        }


        public ActionResult DeleteActivity(int? aid, int? kid)
        {
            ObjModel.PK_Call_ID = Convert.ToInt32(kid);
            try
            {
                if (ObjActivity.DeleteActivity(Convert.ToInt32(aid)))
                {
                    TempData["Deleted"] = "Activity Details Deleted Successfully ..!";
                }
                return RedirectToAction("Activity", new { kid = Convert.ToInt32(ObjModel.PK_Call_ID) });
            }
            catch (Exception)
            {
                return View();
            }
        }
        #endregion

        public ActionResult Report(string Report)
        {
            string filename = Report;
            string filepath = AppDomain.CurrentDomain.BaseDirectory + "IVRReport/" + filename;
            byte[] filedata = System.IO.File.ReadAllBytes(filepath);
            string contentType = MimeMapping.GetMimeMapping(filepath);

            var cd = new System.Net.Mime.ContentDisposition
            {
                FileName = filename,
                Inline = true,
            };

            Response.AppendHeader("Content-Disposition", cd.ToString());

            return File(filedata, contentType);





        }


        #region Export to Excel
        [HttpGet]
        public ActionResult ExportIndex(ReportModel IVR)
        {
            // Using EPPlus from nuget
            using (ExcelPackage package = new ExcelPackage())
            {
                Int32 row = 2;
                Int32 col = 1;

                package.Workbook.Worksheets.Add("Data");
                IGrid<ReportModel> grid = CreateExportableGrid(IVR);
                ExcelWorksheet sheet = package.Workbook.Worksheets["Data"];

                foreach (IGridColumn column in grid.Columns)
                {
                    sheet.Cells[1, col].Value = column.Title;
                    sheet.Column(col++).Width = 18;

                    column.IsEncoded = false;
                }

                foreach (IGridRow<ReportModel> gridRow in grid.Rows)
                {
                    col = 1;
                    foreach (IGridColumn column in grid.Columns)
                        sheet.Cells[row, col++].Value = column.ValueFor(gridRow);

                    row++;
                }

                //aaded by nikita on 06092023

                DateTime currentDateTime = DateTime.Now;
                string formattedDateTime = currentDateTime.ToString("dd-MM-yyyy HH:mm:ss");
                string filename = "InspectionVisitReport-" + formattedDateTime + ".xlsx";
                return File(package.GetAsByteArray(), "application/unknown", filename);
            }
        }
        private IGrid<ReportModel> CreateExportableGrid(ReportModel IVR)
        {
            //IGrid<SubJobs> grid = new Grid<SubJobs>(repository.GetData());
            IGrid<ReportModel> grid = new Grid<ReportModel>(GetData(IVR));
            grid.ViewContext = new ViewContext { HttpContext = HttpContext };



            //grid.Columns.Add(model => model.Call_No).Titled("Call No");

            //grid.Columns.Add(model => model.Report).Titled("Report");
            //grid.Columns.Add(model => model.Report).Titled("Report No");
            //grid.Columns.Add(model => model.SubJob_No).Titled("Sub Job No");
            //grid.Columns.Add(model => model.Sap_And_Controle_No).Titled("SAP");
            //grid.Columns.Add(model => model.Project_Name_Location).Titled("Project Name");
            //grid.Columns.Add(model => model.Client_Name).Titled("Client");
            //grid.Columns.Add(model => model.Vendor_Name_Location).Titled("Vendor Name");
            //grid.Columns.Add(model => model.Po_No).Titled("Po No");
            //grid.Columns.Add(model => model.Inspector).Titled("Inspector");
            //grid.Columns.Add(model => model.inspectionDate).Titled("Inspection Date");
            //grid.Columns.Add(model => model.ReportDate).Titled("Report Date");
            //grid.Columns.Add(model => model.Product_item).Titled("Product item");
            //grid.Columns.Add(model => model.Originating_Branch).Titled("Originating Branch");
            //grid.Columns.Add(model => model.Excuting_Branch).Titled("Excuting Branch");

            //grid.Columns.Add(model => model.CanIRNbeissued).Titled("Can IRN be issued");
            //grid.Columns.Add(model => model.IssuedPOItemNumbers).Titled("Issued PO Item Numbers");

            //aaded by nikita on 06092023
            grid.Columns.Add(model => model.Report).Titled("Report No");
            grid.Columns.Add(model => model.Report).Titled("Download File");
            grid.Columns.Add(model => model.Call_No).Titled("Call No");
            grid.Columns.Add(model => model.SubJob_No).Titled("Sub Job No");
            grid.Columns.Add(model => model.Sap_And_Controle_No).Titled("Job No");
            grid.Columns.Add(model => model.Project_Name_Location).Titled("Project Name");
            grid.Columns.Add(model => model.Client_Name).Titled("Customer Name");
            grid.Columns.Add(model => model.Vendor_Name_Location).Titled("Vendor Name");
            grid.Columns.Add(model => model.Po_No).Titled("Po No");
            grid.Columns.Add(model => model.Inspector).Titled("Inspector Name");
            grid.Columns.Add(model => model.inspectionDate).Titled("Inspection Date");
            grid.Columns.Add(model => model.ReportDate).Titled("Report Date");
            grid.Columns.Add(model => model.Product_item).Titled("Item to be inspected");
            grid.Columns.Add(model => model.Originating_Branch).Titled("Originating Branch");
            grid.Columns.Add(model => model.Excuting_Branch).Titled("Executing Branch");
            grid.Columns.Add(model => model.CanIRNbeissued).Titled("Can IRN be issued");
            grid.Columns.Add(model => model.IssuedPOItemNumbers).Titled("Issued PO Item Numbers");
            grid.Columns.Add(model => model.Conclusion).Titled("Conclusion");
            grid.Columns.Add(model => model.Areas_Of_Concerns).Titled("Areas Of Concerns");
            grid.Columns.Add(model => model.PK_RM_ID).Titled("PK_RM_ID");
            grid.Columns.Add(model => model.checkIFCustomer).Titled("Customer Specific Format");
            grid.Columns.Add(model => model.IVRDownloadDate).Titled("IVR Download Date");


            grid.Pager = new GridPager<ReportModel>(grid);
            grid.Processors.Add(grid.Pager);
            grid.Pager.RowsPerPage = RMData.lst1.Count;

            foreach (IGridColumn column in grid.Columns)
            {
                column.Filter.IsEnabled = true;
                column.Sort.IsEnabled = true;
            }

            return grid;
        }

        public List<ReportModel> GetData(ReportModel IVR)
        {
            Session["PK_Call_ID"] = null;
            DataTable CostSheetDashBoard = new DataTable();
            DataSet ItemDescriptionData = new DataSet();
            List<ReportModel> lstCompanyDashBoard = new List<ReportModel>();



            if (IVR.PK_RM_ID != 0)
            {
                ItemDescriptionData = objDalVisitReport.GetReportById(IVR.PK_RM_ID);
                if (ItemDescriptionData.Tables[0].Rows.Count > 0)
                {
                    IVR.ReportName = Convert.ToString(ItemDescriptionData.Tables[0].Rows[0]["ReportName"]);
                    IVR.Report = Convert.ToString(ItemDescriptionData.Tables[0].Rows[0]["Report"]);
                    IVR.PK_RM_ID = Convert.ToInt32(ItemDescriptionData.Tables[0].Rows[0]["PK_RM_ID"]);
                    IVR.PK_CALL_ID = Convert.ToInt32(ItemDescriptionData.Tables[0].Rows[0]["PK_CALL_ID"]);


                    CostSheetDashBoard = objDalVisitReport.GetReportByCall_Id(IVR.PK_CALL_ID);
                    if (CostSheetDashBoard.Rows.Count > 0)
                    {
                        foreach (DataRow dr in CostSheetDashBoard.Rows)
                        {
                            lstCompanyDashBoard.Add(
                                new ReportModel
                                {
                                    Count = CostSheetDashBoard.Rows.Count,
                                    ReportName = Convert.ToString(dr["ReportName"]),
                                    Report = Convert.ToString(dr["Report"]),
                                    CraetedDate = Convert.ToString(dr["CraetedDate"]),
                                    PK_RM_ID = Convert.ToInt32(dr["PK_RM_ID"]),
                                    PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"])

                                }
                                );
                        }
                    }

                }

            }
            else if (IVR.PK_CALL_ID != null && IVR.PK_CALL_ID != 0)
            {
                try
                {
                    CostSheetDashBoard = objDalVisitReport.GetReportByCall_Id(IVR.PK_CALL_ID);
                    if (CostSheetDashBoard.Rows.Count > 0)
                    {
                        foreach (DataRow dr in CostSheetDashBoard.Rows)
                        {
                            lstCompanyDashBoard.Add(
                                new ReportModel
                                {
                                    Count = CostSheetDashBoard.Rows.Count,
                                    ReportName = Convert.ToString(dr["ReportName"]),
                                    Report = Convert.ToString(dr["Report"]),
                                    CraetedDate = Convert.ToString(dr["CraetedDate"]),
                                    PK_RM_ID = Convert.ToInt32(dr["PK_RM_ID"]),
                                    PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"]),


                                    SubJob_No = Convert.ToString(dr["SubJob_No"]),
                                    Sap_And_Controle_No = Convert.ToString(dr["Sap_And_Controle_No"]),
                                    Project_Name_Location = Convert.ToString(dr["Project_Name_Location"]),
                                    Client_Name = Convert.ToString(dr["Client_Name"]),
                                    Vendor_Name_Location = Convert.ToString(dr["Vendor_Name_Location"]),
                                    Po_No = Convert.ToString(dr["Po_No"]),
                                    Inspector = Convert.ToString(dr["Inspector"]),
                                    inspectionDate = Convert.ToString(dr["InspectionDate"]),
                                    ReportDate = Convert.ToString(dr["ReportDate"]),
                                    Product_item = Convert.ToString(dr["Product_item"]),
                                    Originating_Branch = Convert.ToString(dr["Originating_Branch"]),
                                    Excuting_Branch = Convert.ToString(dr["Excuting_Branch"]),
                                    //NCR = Convert.ToString(dr["NCR"]),
                                    Call_No = Convert.ToString(dr["Call_No"]),
                                    CanIRNbeissued = Convert.ToString(dr["CanIRNbeissued"]),
                                    IssuedPOItemNumbers = Convert.ToString(dr["IssuedPOItemNumbers"])
                                }
                                );
                        }
                    }
                }
                catch (Exception ex)
                {
                    string Error = ex.Message.ToString();
                    
                }
            }
            else
            {
                 CostSheetDashBoard = objDalVisitReport.GetReportByUser();
                //CostSheetDashBoard = objDalVisitReport.GetAllReportByUser();
                if (CostSheetDashBoard.Rows.Count > 0)
                {
                    foreach (DataRow dr in CostSheetDashBoard.Rows)
                    {
                        lstCompanyDashBoard.Add(
                            new ReportModel
                            {
                                Count = CostSheetDashBoard.Rows.Count,
                                ReportName = Convert.ToString(dr["ReportName"]),
                                ReportNo = Convert.ToString(dr["ReportNo"]),
                                Report = Convert.ToString(dr["Report"]),

                                CraetedDate = Convert.ToString(dr["CraetedDate"]),
                                PK_RM_ID = Convert.ToInt32(dr["PK_RM_ID"]),
                                PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"]),

                                Call_No = Convert.ToString(dr["Call_No"]),
                                SubJob_No = Convert.ToString(dr["SubJob_No"]),
                                Sap_And_Controle_No = Convert.ToString(dr["Sap_And_Controle_No"]),
                                Project_Name_Location = Convert.ToString(dr["Project_Name_Location"]),
                                Client_Name = Convert.ToString(dr["Client_Name"]),
                                Vendor_Name_Location = Convert.ToString(dr["Vendor_Name_Location"]),
                                Po_No = Convert.ToString(dr["Po_No"]),
                                Inspector = Convert.ToString(dr["Inspector"]),
                                inspectionDate = Convert.ToString(dr["InspectionDate"]),
                                ReportDate = Convert.ToString(dr["ReportDate"]),
                                Product_item = Convert.ToString(dr["Product_item"]),
                                Originating_Branch = Convert.ToString(dr["Originating_Branch"]),
                                Excuting_Branch = Convert.ToString(dr["Excuting_Branch"]),
                                CanIRNbeissued = Convert.ToString(dr["CanIRNbeissued"]),
                                IssuedPOItemNumbers = Convert.ToString(dr["IssuedPOItemNumbers"]),
                                // NCR = Convert.ToString(dr["NCR"])
                                //added by shrutika salve 041012023
                                checkIFCustomer = Convert.ToString(dr["checkIFCustomerSpecific"]),
                                IVRDownloadDate = Convert.ToString(dr["IVRDownloadDate"]),
                                //ReportpreparesinTiimes = Convert.ToString(dr["ReportprepareinTiimes"]),
                            }
                            );
                    }


                }
            }

            ViewData["CostSheet"] = lstCompanyDashBoard;
            ViewBag.ExportToExcel = lstCompanyDashBoard;
            // IVR.lst1 = lstCompanyDashBoard;

            RMData.lst1 = lstCompanyDashBoard;
            return RMData.lst1;
        }

        #endregion


        #region Insert Areas of concern Old
        [HttpPost]
        public JsonResult InsertConcernOld(InspectionvisitReportModel Conclusion, string Areas_Of_Concerns)
        {
            string Result = "";
            Result = objDalVisitReport.InsertAreasOfConcern(Conclusion);
            if (Result != "")
            {
                DataTable GetAreasOfConcern = new DataTable();

                GetAreasOfConcern = objDalVisitReport.GetAreasOfConcern(Conclusion);
                try
                {
                    if (GetAreasOfConcern.Rows.Count > 0)
                    {
                        // int abc = subJobDashBoard.Rows.Count;
                        // int data = 1 + abc;
                        foreach (DataRow dr in GetAreasOfConcern.Rows)
                        {
                            lstAreasOfConcern.Add(
                                new InspectionvisitReportModel
                                {
                                    #region
                                    PK_Call_ID = Convert.ToInt32(dr["PK_Call_ID"]),

                                    Type = Convert.ToString(dr["Type"]),
                                    PkId = Convert.ToString(dr["PkId"]),
                                    Areas_Of_Concerns = Convert.ToString(dr["AreasOfConcern"]),
                                    #endregion


                                }
                                );
                        }
                    }
                }
                catch (Exception ex)
                {
                    string Error = ex.Message.ToString();
                }
                ViewData["AreasOfConcern"] = lstAreasOfConcern;
            }
            //return Json(Conclusion);
            return Json(lstAreasOfConcern, JsonRequestBehavior.AllowGet);
            //return Json(new { success = 4, responseText = "Code mathched" }, JsonRequestBehavior.AllowGet);
        }

        #endregion

        [HttpPost]

        public ActionResult InsertConcern(FormCollection F, InspectionvisitReportModel Conclusion, string Areas_Of_Concerns, string[] a, string PK_CallId)
        {
            string Result = string.Empty;
            string Result1 = string.Empty;

            if (Result != null || Result != "")
            {

                TempData["Insert"] = Result;
                TempData.Keep();

                //P.FK_Cust_Detail_Id = Result;
                string[] StrAreasOfConcern = a;


                //string[] StrAreasOfConcern = F["AreasOfConcern"].Split(char.Parse(","));


                for (int i = 0; i < StrAreasOfConcern.Length; i++)
                {
                    Conclusion.Areas_Of_Concerns = StrAreasOfConcern[i];
                    Result1 = objDalVisitReport.InsertAreasOfConcern(Conclusion);
                }
                if (Result1 != null || Result1 != "")
                {
                    ModelState.Clear();
                }
                else
                {

                }
            }
            else
            {

            }





            return View();
        }






        #region Final Areas Of Concern
        [HttpPost]
        public JsonResult InsertConcern1(InspectionvisitReportModel Conclusion, string Areas_Of_Concerns)
        {
            string Result = "";
            Result = objDalVisitReport.InsertAreasOfConcern(Conclusion);
            if (Result != "")
            {
                DataTable GetAreasOfConcern = new DataTable();

                GetAreasOfConcern = objDalVisitReport.GetTop1AreasOfConcern(Conclusion);
                try
                {
                    if (GetAreasOfConcern.Rows.Count > 0)
                    {

                        //foreach (DataRow dr in GetAreasOfConcern.Rows)
                        //{
                        //    lstAreasOfConcern.Add(
                        //        new InspectionvisitReportModel
                        //        {
                        //            #region
                        //            PK_Call_ID = Convert.ToInt32(dr["PK_Call_ID"]),

                        //            Type = Convert.ToString(dr["Type"]),
                        //            PkId = Convert.ToString(dr["PkId"]),
                        //            Areas_Of_Concerns = Convert.ToString(dr["AreasOfConcern"]),
                        //            #endregion


                        //        }
                        //        );
                        //}ItemDescriptionData.Tables[0].Rows[0]["ReportName"]
                        Conclusion.PkId = GetAreasOfConcern.Rows[0]["PkId"].ToString();
                        Conclusion.Areas_Of_Concerns = GetAreasOfConcern.Rows[0]["AreasOfConcern"].ToString();

                    }
                }

                catch (Exception ex)
                {
                    string Error = ex.Message.ToString();
                    
                }
                ViewData["AreasOfConcern"] = lstAreasOfConcern;
            }
            return Json(Conclusion, JsonRequestBehavior.AllowGet);
            //return Json(new { success = 4, responseText = "Code mathched" }, JsonRequestBehavior.AllowGet);
        }


        [HttpPost]
        public ActionResult UpdateConcern(InspectionvisitReportModel Conclusion)
        {
            string Result = "";
            Result = objDalVisitReport.InsertAreasOfConcern(Conclusion);



            return new EmptyResult();
        }

        [HttpPost]
        public ActionResult DeleteConcern(InspectionvisitReportModel Conclusion)
        {
            string Result = "";
            Result = objDalVisitReport.DeleteConcern(Conclusion);



            return new EmptyResult();
        }

        #endregion



        #region Pending Activities
        [HttpPost]
        public JsonResult PendingActivities(InspectionvisitReportModel Conclusion, string Areas_Of_Concerns)
        {
            string Result = "";
            Result = objDalVisitReport.InsertPendingActivities(Conclusion);
            if (Result != "")
            {
                DataTable GetAreasOfConcern = new DataTable();

                GetAreasOfConcern = objDalVisitReport.GetTop1GetPendingActivity(Conclusion);
                try
                {
                    if (GetAreasOfConcern.Rows.Count > 0)
                    {

                        Conclusion.PkId = GetAreasOfConcern.Rows[0]["PkId"].ToString();
                        Conclusion.Pending_Activites = GetAreasOfConcern.Rows[0]["AreasOfConcern"].ToString();

                    }
                }

                catch (Exception ex)
                {
                    string Error = ex.Message.ToString();
                    
                }
                ViewData["AreasOfConcern"] = lstAreasOfConcern;
            }
            return Json(Conclusion, JsonRequestBehavior.AllowGet);
            //return Json(new { success = 4, responseText = "Code mathched" }, JsonRequestBehavior.AllowGet);
        }

        #endregion



        [HttpPost]
        public ActionResult CancelForm(InspectionvisitReportModel Conclusion, FormCollection F)
        {

            string[] StrAreasOfConcern = F["AreasOfConcern"].Split(char.Parse(","));

            return View();
        }


        [HttpGet]
        public ActionResult AllConcern(int? PK_Call_ID, InspectionvisitReportModel objModel,string Type )
        {
            #region  All Previous Concerns
            objModel.PK_Call_ID = PK_Call_ID;
            objModel.Type = Type;
            DataSet AllPreviousConcern = new DataSet();
            List<InspectionvisitReportModel> lstAllConvern = new List<InspectionvisitReportModel>();
            AllPreviousConcern = objDalVisitReport.AllPreviousConcern(PK_Call_ID);



            if (AllPreviousConcern.Tables.Count > 0)
            {
                if (AllPreviousConcern.Tables[0].Rows.Count > 0)
                {
                    foreach (DataRow dr in AllPreviousConcern.Tables[0].Rows)
                    {
                        lstAllConvern.Add(
                            new InspectionvisitReportModel
                            {
                                #region
                                Areas_Of_Concerns = Convert.ToString(dr["AreasOfConcern"]),
                                //Pending_Activites = Convert.ToString(dr["Pending_Activites"]),
                                //Non_Conformities_raised = Convert.ToString(dr["Non_Conformities_raised"]),
                                //Date_Of_Inspection = Convert.ToString(dr["Date_Of_Inspection"]),
                                Report_No = Convert.ToString(dr["ReportNo"]),
                                Name = Convert.ToString(dr["Name"]),
                                PkId = Convert.ToString(dr["PkId"]),
                                Type = Convert.ToString(dr["Type"]),
                                ReopenBy = Convert.ToString(dr["ReopenBy"]),
                                #endregion


                            }
                            );
                    }

                }
            }

            ViewData["AllConcerns"] = lstAllConvern;
            ViewBag.AllConcerns = lstAllConvern;

            #endregion

            #region All Closed Concerns
            DataSet AllPreviousCloseConcern = new DataSet();
            List<InspectionvisitReportModel> lstAllCloseConvern = new List<InspectionvisitReportModel>();
            AllPreviousCloseConcern = objDalVisitReport.AllPreviousCloseConcern(PK_Call_ID);
            if (AllPreviousCloseConcern.Tables.Count > 0)
            {
                if (AllPreviousCloseConcern.Tables[0].Rows.Count > 0)
                {
                    foreach (DataRow dr in AllPreviousCloseConcern.Tables[0].Rows)
                    {
                        lstAllCloseConvern.Add(
                            new InspectionvisitReportModel
                            {
                                #region
                                Areas_Of_Concerns = Convert.ToString(dr["AreasOfConcern"]),
                                //Pending_Activites = Convert.ToString(dr["Pending_Activites"]),
                                //Non_Conformities_raised = Convert.ToString(dr["Non_Conformities_raised"]),
                                //Date_Of_Inspection = Convert.ToString(dr["Date_Of_Inspection"]),
                                Report_No = Convert.ToString(dr["ReportNo"]),
                                CreatedBy = Convert.ToString(dr["Name"]),
                                Name = Convert.ToString(dr["CloseBy"]),
                                PkId = Convert.ToString(dr["PkId"]),
                                Type = Convert.ToString(dr["Type"]),
                                Reason = Convert.ToString(dr["Reason"]),
                                Mitigateddate = Convert.ToString(dr["mitigateddate"])
                                #endregion


                            }
                            );
                    }

                }
            }

            ViewData["AllCloseConcerns"] = lstAllCloseConvern;

            #endregion


            #region NCR

            DataSet NCR = new DataSet();
            List<InspectionvisitReportModel> lstNCR = new List<InspectionvisitReportModel>();
            NCR = objDalVisitReport.NCR(PK_Call_ID);
            if (NCR.Tables.Count > 0)
            {
                if (NCR.Tables[0].Rows.Count > 0)
                {
                    foreach (DataRow dr in NCR.Tables[0].Rows)
                    {
                        lstNCR.Add(
                            new InspectionvisitReportModel
                            {
                                #region
                                Non_Conformities_raised = Convert.ToString(dr["NCRNo"]),
                                NCRNo = Convert.ToString(dr["Pdf"]),
                                Status = Convert.ToString(dr["Status"]),
                                NCRID = Convert.ToString(dr["Id"]),
                                CreatedBy = Convert.ToString(dr["NcrRaisedBy"]),
                                #endregion


                            }
                            );
                    }

                }
            }

            ViewData["NCR"] = lstNCR;

            #endregion


            return View(objModel);
        }

        [HttpPost]
        public ActionResult AllConcern(int? PK_Call_ID, InspectionvisitReportModel objModel, FormCollection F)
        {
            String Result = "";

            //string[] StrAreasOfConcern = F["POTotalCheckBox"].Split(new char[] { ',' }); 
            //string[] strReason = F["Reason"].Split(new char[] { ',' });

            if (objModel.Concern != null)
            {

                foreach (var item in objModel.Concern)
                {
                    objModel.PkId = item.PkId;
                    //objModel.POTotalCheckBox = item.POTotalCheckBox;
                    objModel.Reason = item.Reason;
                    objModel.Mitigateddate = item.Mitigateddate;
                    
                    if (objModel.Reason != null && objModel.Mitigateddate != null)
                    {
                        Result = objDalVisitReport.CloseConcern(objModel);
                    }

                }
            }


            //for (int i = 0; i < StrAreasOfConcern.Length; i++)
            //{
            //    if(StrAreasOfConcern[i]!="false")
            //    {
            //        objModel.PkId = StrAreasOfConcern[i];
            //        objModel.Reason = strReason[i];
            //        Result = objDalVisitReport.CloseConcern(objModel);
            //    }

            //}



            #region  All Previous Concerns
            objModel.PK_Call_ID = PK_Call_ID;
            DataSet AllPreviousConcern = new DataSet();
            List<InspectionvisitReportModel> lstAllConvern = new List<InspectionvisitReportModel>();
            AllPreviousConcern = objDalVisitReport.AllPreviousConcern(PK_Call_ID);
            if (AllPreviousConcern.Tables.Count > 0)
            {
                if (AllPreviousConcern.Tables[0].Rows.Count > 0)
                {
                    foreach (DataRow dr in AllPreviousConcern.Tables[0].Rows)
                    {
                        lstAllConvern.Add(
                            new InspectionvisitReportModel
                            {
                                #region
                                Areas_Of_Concerns = Convert.ToString(dr["AreasOfConcern"]),
                                //Pending_Activites = Convert.ToString(dr["Pending_Activites"]),
                                //Non_Conformities_raised = Convert.ToString(dr["Non_Conformities_raised"]),
                                //Date_Of_Inspection = Convert.ToString(dr["Date_Of_Inspection"]),
                                //Report_No = Convert.ToString(dr["ReportNo"]),
                                //Name = Convert.ToString(dr["Name"]),
                                PkId = Convert.ToString(dr["PkId"]),
                                Type = Convert.ToString(dr["Type"]),
                                #endregion


                            }
                            );
                    }

                }
            }

            ViewData["AllConcerns"] = lstAllConvern;
            ViewBag.AllConcerns = lstAllConvern;
            #endregion



            #region All Closed Concerns
            DataSet AllPreviousCloseConcern = new DataSet();
            List<InspectionvisitReportModel> lstAllCloseConvern = new List<InspectionvisitReportModel>();
            AllPreviousCloseConcern = objDalVisitReport.AllPreviousCloseConcern(PK_Call_ID);
            if (AllPreviousCloseConcern.Tables.Count > 0)
            {
                if (AllPreviousCloseConcern.Tables[0].Rows.Count > 0)
                {
                    foreach (DataRow dr in AllPreviousCloseConcern.Tables[0].Rows)
                    {
                        lstAllCloseConvern.Add(
                            new InspectionvisitReportModel
                            {
                                #region
                                Areas_Of_Concerns = Convert.ToString(dr["AreasOfConcern"]),
                                //Pending_Activites = Convert.ToString(dr["Pending_Activites"]),
                                //Non_Conformities_raised = Convert.ToString(dr["Non_Conformities_raised"]),
                                //Date_Of_Inspection = Convert.ToString(dr["Date_Of_Inspection"]),
                                //Report_No = Convert.ToString(dr["ReportNo"]),
                                Name = Convert.ToString(dr["CloseBy"]),
                                PkId = Convert.ToString(dr["PkId"]),
                                Type = Convert.ToString(dr["Type"]),
                                Reason = Convert.ToString(dr["Reason"]),
                                Mitigateddate = Convert.ToString(dr["mitigateddate"]),
                                #endregion


                            }
                            );
                    }

                }
            }

            ViewData["AllCloseConcerns"] = lstAllCloseConvern;

            #endregion

            // int? PK_Call_ID = ObjModel.PK_Call_ID;
            objModel.Type = objModel.Type;
            return RedirectToAction("AllConcern", new { PK_Call_ID = objModel.PK_Call_ID,Type = objModel.Type });

        }


        public ActionResult OpenConcern(int? PK_Call_ID,  string Type,string PkId, InspectionvisitReportModel objModel, FormCollection F)
        {
            string Result = "";
            objModel.PK_Call_ID = PK_Call_ID;
            objModel.Type = Type;
            objModel.PkId = PkId;
            if (PkId != null || PkId != "")
            {
                Result = objDalVisitReport.ReopenConcern(objModel);
            }

            return RedirectToAction("AllConcern", new { PK_Call_ID = objModel.PK_Call_ID, Type = objModel.Type });
        }


        #region Copy New 
        [HttpPost]
        public JsonResult CopyNew(InspectionvisitReportModel CopyNew, string Areas_Of_Concerns)
        {
            string Result = "";

            if (CopyNew.ReportNoName == null)
            {
                return Json(new { success = 2, responseText = "Code mathched" }, JsonRequestBehavior.AllowGet);
            }
            else
            {
                Result = objDalVisitReport.CopyInsert(CopyNew);
                if (Result != "")
                {
                    return Json(new { success = 1, responseText = "Code mathched" }, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    return Json(new { success = 2, responseText = "Code mathched" }, JsonRequestBehavior.AllowGet);
                }
            }

            //return Json(CopyNew, JsonRequestBehavior.AllowGet);
            //return Json(new { success = 4, responseText = "Code mathched" }, JsonRequestBehavior.AllowGet);
        }
        #endregion

        #region Clear
        [HttpPost]
        public JsonResult Clear(InspectionvisitReportModel ClearNew)
        {
            string Result = "";

            Result = objDalVisitReport.Clear(ClearNew);
            if (Result != "")
            {
                return Json(new { success = 1, responseText = "Code mathched" }, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(new { success = 2, responseText = "Code mathched" }, JsonRequestBehavior.AllowGet);
            }
            //return Json(CopyNew, JsonRequestBehavior.AllowGet);
            //return Json(new { success = 4, responseText = "Code mathched" }, JsonRequestBehavior.AllowGet);
        }
        #endregion


        #region Search And Copy IRN New
        [HttpPost]
        public JsonResult GetReportNoForCopy(string VisitReport, string SubJobNo, string ProjectName, string Vendor, string Client, string Type)
        {
            int id = 0;
            string i = "";
            // var Data="";


            DataTable DSJobMasterByQtId = new DataTable();


            //DSJobMasterByQtId = objDalVisitReport.GetReportNoIRN(SubJobNo, VisitReport, Type);

            //if (DSJobMasterByQtId.Rows.Count > 0)
            //{

            //    i = String.Join(",", DSJobMasterByQtId.AsEnumerable().Select(x => x.Field<string>("PK_Call_ID").ToString()).ToArray());

            //}


            var Data = objDalVisitReport.StringGetReportListForIRNNew(SubJobNo, VisitReport, Type);


            return Json(Data, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public JsonResult CopyIRNNew(InspectionvisitReportModel CopyIRNNew, string Areas_Of_Concerns)
        {
            string Result = "";

            if (CopyIRNNew.ReportNoName == null)
            {
                return Json(new { success = 2, responseText = "Code mathched" }, JsonRequestBehavior.AllowGet);
            }
            else
            {
                Result = objDalVisitReport.CopyIRNInsert(CopyIRNNew);
                if (Result != "")
                {
                    return Json(new { success = 1, responseText = "Code mathched" }, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    return Json(new { success = 2, responseText = "Code mathched" }, JsonRequestBehavior.AllowGet);
                }
            }

            //return Json(CopyNew, JsonRequestBehavior.AllowGet);
            //return Json(new { success = 4, responseText = "Code mathched" }, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public JsonResult ClearIRN(InspectionvisitReportModel ClearNew)
        {
            string Result = "";

            Result = objDalVisitReport.ClearIRN(ClearNew);
            if (Result != "")
            {
                return Json(new { success = 1, responseText = "Code mathched" }, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(new { success = 2, responseText = "Code mathched" }, JsonRequestBehavior.AllowGet);
            }
            //return Json(CopyNew, JsonRequestBehavior.AllowGet);
            //return Json(new { success = 4, responseText = "Code mathched" }, JsonRequestBehavior.AllowGet);
        }
        #endregion


        #region Can IRN Issue Logic
        [HttpGet]
        public JsonResult GetItemPONo(InspectionvisitReportModel CopyNew, string PK_Call_Id)
        {
            var address = objDalVisitReport.GetPONo(PK_Call_Id);
            return Json(address, JsonRequestBehavior.AllowGet);
        }


        #endregion

        public JsonResult GetEquipments(string Prefix)
        {
            DataTable DTResult = new DataTable();
            List<EnquiryMaster> lstAutoComplete = new List<EnquiryMaster>();

            if (Prefix != null && Prefix != "")
            {
                DTResult = objDalVisitReport.GetEquipmentName(Prefix);
                if (DTResult.Rows.Count > 0)
                {
                    foreach (DataRow dr in DTResult.Rows)
                    {
                        lstAutoComplete.Add(
                           new EnquiryMaster
                           {
                               CompanyName = Convert.ToString(dr["CompanyName"]),
                               CompanyNames = Convert.ToString(dr["CompanyNames"]),
                               //PreviousClosing = Convert.ToDecimal(dr["BseCurrprice"]),
                           }
                         );
                    }

                    return Json(lstAutoComplete, JsonRequestBehavior.AllowGet);
                }
            }
            return Json("Failed", JsonRequestBehavior.AllowGet);
        }

        #region Export All to Excel
        [HttpGet]
        public ActionResult ExportAllIndex(ReportModel IVR)
        {
            // Using EPPlus from nuget
            using (ExcelPackage package = new ExcelPackage())
            {
                Int32 row = 2;
                Int32 col = 1;

                package.Workbook.Worksheets.Add("Data");
                IGrid<ReportModel> grid = CreateAllExportableGrid(IVR);
                ExcelWorksheet sheet = package.Workbook.Worksheets["Data"];

                foreach (IGridColumn column in grid.Columns)
                {
                    sheet.Cells[1, col].Value = column.Title;
                    sheet.Column(col++).Width = 18;

                    column.IsEncoded = false;
                }

                foreach (IGridRow<ReportModel> gridRow in grid.Rows)
                {
                    col = 1;
                    foreach (IGridColumn column in grid.Columns)
                        sheet.Cells[row, col++].Value = column.ValueFor(gridRow);

                    row++;
                }

                //added by nikita on 04102023
                DateTime currentDateTime = DateTime.Now;

                string formattedDateTime = currentDateTime.ToString("dd-MM-yyyy HH:mm:ss");

                string filename = "InspectionVisitReport-" + formattedDateTime + ".xlsx";

                return File(package.GetAsByteArray(), "application/unknown", filename);
            }
        }
        private IGrid<ReportModel> CreateAllExportableGrid(ReportModel IVR)
        {
            //IGrid<SubJobs> grid = new Grid<SubJobs>(repository.GetData());
            IGrid<ReportModel> grid = new Grid<ReportModel>(GetAllData(IVR));
            grid.ViewContext = new ViewContext { HttpContext = HttpContext };



            grid.Columns.Add(model => model.Call_No).Titled("Call No");

            grid.Columns.Add(model => model.Report).Titled("Report");
            grid.Columns.Add(model => model.Report).Titled("Report No");
            grid.Columns.Add(model => model.SubJob_No).Titled("Sub Job No");
            grid.Columns.Add(model => model.Sap_And_Controle_No).Titled("SAP");
            grid.Columns.Add(model => model.Project_Name_Location).Titled("Project Name");
            grid.Columns.Add(model => model.Client_Name).Titled("Client");
            grid.Columns.Add(model => model.Vendor_Name_Location).Titled("Vendor Name");
            grid.Columns.Add(model => model.Po_No).Titled("Po No");
            grid.Columns.Add(model => model.Inspector).Titled("Inspector");
            //grid.Columns.Add(model => model.mitigateddate).Titled("Mitigated Date");

            //added by nikita on 04102023 start
            grid.Columns.Add(model => model.IVRDownloadDate).Titled("Last Download Date");
            grid.Columns.Add(model => model.inspectionDate).Titled("Inspection Date");
            grid.Columns.Add(model => model.Date_Of_Inspection).Titled("Last Inspection Date");
            grid.Columns.Add(model => model.checkIFCustomerSpecific).Titled("Customer Specific format");
            grid.Columns.Add(model => model.ReportprepareinTiimes).Titled("Report Prepared In Tiimes");
            //end       
            grid.Columns.Add(model => model.ReportDate).Titled("Report Date");
            grid.Columns.Add(model => model.Product_item).Titled("Product item");
            grid.Columns.Add(model => model.Originating_Branch).Titled("Originating Branch");
            grid.Columns.Add(model => model.Excuting_Branch).Titled("Excuting Branch");

            grid.Columns.Add(model => model.CanIRNbeissued).Titled("Can IRN be issued");
            grid.Columns.Add(model => model.IssuedPOItemNumbers).Titled("Issued PO Item Numbers");

            grid.Pager = new GridPager<ReportModel>(grid);
            grid.Processors.Add(grid.Pager);
            grid.Pager.RowsPerPage = RMData.lst1.Count;

            foreach (IGridColumn column in grid.Columns)
            {
                column.Filter.IsEnabled = true;
                column.Sort.IsEnabled = true;
            }

            return grid;
        }

        public List<ReportModel> GetAllData(ReportModel IVR)
        {
            Session["PK_Call_ID"] = null;
            DataTable CostSheetDashBoard = new DataTable();
            DataSet ItemDescriptionData = new DataSet();
            List<ReportModel> lstCompanyDashBoard = new List<ReportModel>();



            if (IVR.PK_RM_ID != 0)
            {
                ItemDescriptionData = objDalVisitReport.GetReportById(IVR.PK_RM_ID);
                if (ItemDescriptionData.Tables[0].Rows.Count > 0)
                {
                    IVR.ReportName = Convert.ToString(ItemDescriptionData.Tables[0].Rows[0]["ReportName"]);
                    IVR.Report = Convert.ToString(ItemDescriptionData.Tables[0].Rows[0]["Report"]);
                    IVR.PK_RM_ID = Convert.ToInt32(ItemDescriptionData.Tables[0].Rows[0]["PK_RM_ID"]);
                    IVR.PK_CALL_ID = Convert.ToInt32(ItemDescriptionData.Tables[0].Rows[0]["PK_CALL_ID"]);


                    CostSheetDashBoard = objDalVisitReport.GetReportByCall_Id(IVR.PK_CALL_ID);
                    if (CostSheetDashBoard.Rows.Count > 0)
                    {
                        foreach (DataRow dr in CostSheetDashBoard.Rows)
                        {
                            lstCompanyDashBoard.Add(
                                new ReportModel
                                {
                                    Count = CostSheetDashBoard.Rows.Count,
                                    ReportName = Convert.ToString(dr["ReportName"]),
                                    Report = Convert.ToString(dr["Report"]),
                                    CraetedDate = Convert.ToString(dr["CraetedDate"]),
                                    PK_RM_ID = Convert.ToInt32(dr["PK_RM_ID"]),
                                    PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"])

                                }
                                );
                        }
                    }

                }

            }
            else if (IVR.PK_CALL_ID != null && IVR.PK_CALL_ID != 0)
            {
                try
                {
                    CostSheetDashBoard = objDalVisitReport.GetReportByCall_Id(IVR.PK_CALL_ID);
                    if (CostSheetDashBoard.Rows.Count > 0)
                    {
                        foreach (DataRow dr in CostSheetDashBoard.Rows)
                        {
                            lstCompanyDashBoard.Add(
                                new ReportModel
                                {
                                    Count = CostSheetDashBoard.Rows.Count,
                                    ReportName = Convert.ToString(dr["ReportName"]),
                                    Report = Convert.ToString(dr["Report"]),
                                    CraetedDate = Convert.ToString(dr["CraetedDate"]),
                                    PK_RM_ID = Convert.ToInt32(dr["PK_RM_ID"]),
                                    PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"]),


                                    SubJob_No = Convert.ToString(dr["SubJob_No"]),
                                    Sap_And_Controle_No = Convert.ToString(dr["Sap_And_Controle_No"]),
                                    Project_Name_Location = Convert.ToString(dr["Project_Name_Location"]),
                                    Client_Name = Convert.ToString(dr["Client_Name"]),
                                    Vendor_Name_Location = Convert.ToString(dr["Vendor_Name_Location"]),
                                    Po_No = Convert.ToString(dr["Po_No"]),
                                    Inspector = Convert.ToString(dr["Inspector"]),
                                    inspectionDate = Convert.ToString(dr["InspectionDate"]),
                                    ReportDate = Convert.ToString(dr["ReportDate"]),
                                    Product_item = Convert.ToString(dr["Product_item"]),
                                    Originating_Branch = Convert.ToString(dr["Originating_Branch"]),
                                    Excuting_Branch = Convert.ToString(dr["Excuting_Branch"]),
                                    //NCR = Convert.ToString(dr["NCR"]),
                                    Call_No = Convert.ToString(dr["Call_No"]),
                                    CanIRNbeissued = Convert.ToString(dr["CanIRNbeissued"]),
                                    IssuedPOItemNumbers = Convert.ToString(dr["IssuedPOItemNumbers"])
                                }
                                );
                        }
                    }
                }
                catch (Exception ex)
                {
                    string Error = ex.Message.ToString();
                   
                }
            }
            else
            {
                // CostSheetDashBoard = objDalVisitReport.GetReportByUser();
                CostSheetDashBoard = objDalVisitReport.GetAllReportByUser();
                if (CostSheetDashBoard.Rows.Count > 0)
                {
                    foreach (DataRow dr in CostSheetDashBoard.Rows)
                    {
                        lstCompanyDashBoard.Add(
                            new ReportModel
                            {
                                Count = CostSheetDashBoard.Rows.Count,
                                ReportName = Convert.ToString(dr["ReportName"]),
                                ReportNo = Convert.ToString(dr["ReportNo"]),
                                Report = Convert.ToString(dr["Report"]),

                                CraetedDate = Convert.ToString(dr["CraetedDate"]),
                                PK_RM_ID = Convert.ToInt32(dr["PK_RM_ID"]),
                                PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"]),

                                Call_No = Convert.ToString(dr["Call_No"]),
                                SubJob_No = Convert.ToString(dr["SubJob_No"]),
                                Sap_And_Controle_No = Convert.ToString(dr["Sap_And_Controle_No"]),
                                Project_Name_Location = Convert.ToString(dr["Project_Name_Location"]),
                                Client_Name = Convert.ToString(dr["Client_Name"]),
                                Vendor_Name_Location = Convert.ToString(dr["Vendor_Name_Location"]),
                                Po_No = Convert.ToString(dr["Po_No"]),
                                Inspector = Convert.ToString(dr["Inspector"]),
                                inspectionDate = Convert.ToString(dr["InspectionDate"]),
                                ReportDate = Convert.ToString(dr["ReportDate"]),
                                Product_item = Convert.ToString(dr["Product_item"]),
                                Originating_Branch = Convert.ToString(dr["Originating_Branch"]),
                                Excuting_Branch = Convert.ToString(dr["Excuting_Branch"]),
                                CanIRNbeissued = Convert.ToString(dr["CanIRNbeissued"]),
                                IssuedPOItemNumbers = Convert.ToString(dr["IssuedPOItemNumbers"]),
                                Date_Of_Inspection = Convert.ToString(dr["Date_of_Inspection"]), //added by nikita on 04102023
                                IVRDownloadDate = Convert.ToString(dr["IVRDownloadDate"]),//added by nikita on 04102023
                                checkIFCustomerSpecific = Convert.ToInt32(dr["checkIFCustomerSpecific"]),//added by nikita on 04102023
                               // ReportprepareinTiimes = Convert.ToString(dr["ReportprepareinTiimes"]),//added by nikita on 04102023
                                //mitigateddate = Convert.ToString(dr["mitigateddate"]),//added by nikita on 04102023

                                // NCR = Convert.ToString(dr["NCR"])
                            }
                            );
                    }


                }
            }

            ViewData["CostSheet"] = lstCompanyDashBoard;
            ViewBag.ExportToExcel = lstCompanyDashBoard;
            // IVR.lst1 = lstCompanyDashBoard;

            RMData.lst1 = lstCompanyDashBoard;
            return RMData.lst1;
        }

        #endregion

        #region Export to Excel All Concerns
        [HttpGet]
        public ActionResult ExportIndex1(int? PK_Call_ID)
        {
            // Using EPPlus from nuget
            using (ExcelPackage package = new ExcelPackage())
            {
                Int32 row = 2;
                Int32 col = 1;

                package.Workbook.Worksheets.Add("Data");
                IGrid<InspectionvisitReportModel> grid = CreateExportableGrid1(PK_Call_ID);
                ExcelWorksheet sheet = package.Workbook.Worksheets["Data"];

                foreach (IGridColumn column in grid.Columns)
                {
                    sheet.Cells[1, col].Value = column.Title;
                    sheet.Column(col++).Width = 18;

                    column.IsEncoded = false;
                }

                foreach (IGridRow<InspectionvisitReportModel> gridRow in grid.Rows)
                {
                    col = 1;
                    foreach (IGridColumn column in grid.Columns)
                        sheet.Cells[row, col++].Value = column.ValueFor(gridRow);

                    row++;
                }

                return File(package.GetAsByteArray(), "application/unknown", "Export.xlsx");
            }
        }

        private IGrid<InspectionvisitReportModel> CreateExportableGrid1(int? PK_Call_ID)
        {
            //IGrid<SubJobs> grid = new Grid<SubJobs>(repository.GetData());
            IGrid<InspectionvisitReportModel> grid = new Grid<InspectionvisitReportModel>(GetData1(PK_Call_ID));
            grid.ViewContext = new ViewContext { HttpContext = HttpContext };



            grid.Columns.Add(model => model.Type).Titled("Type");
            grid.Columns.Add(model => model.Areas_Of_Concerns).Titled("Areas_Of_Concerns");
            grid.Columns.Add(model => model.Name).Titled("Name");
            grid.Columns.Add(model => model.ReopenBy).Titled("ReopenBy");
            grid.Columns.Add(model => model.Report_No).Titled("ReportNo");
            grid.Columns.Add(model => model.Status).Titled("Status");
            grid.Columns.Add(model => model.Reason).Titled("Mitigrated By");
            grid.Columns.Add(model => model.ClosedBy).Titled("Closed By");


            grid.Pager = new GridPager<InspectionvisitReportModel>(grid);
            grid.Processors.Add(grid.Pager);
            grid.Pager.RowsPerPage = ObjModelVisitReport.lst1.Count;

            foreach (IGridColumn column in grid.Columns)
            {
                column.Filter.IsEnabled = true;
                column.Sort.IsEnabled = true;
            }

            return grid;
        }

        public List<InspectionvisitReportModel> GetData1(int? PK_Call_ID)
        {
            Session["PK_Call_ID"] = null;
            DataTable CostSheetDashBoard = new DataTable();
            DataSet ItemDescriptionData = new DataSet();
            List<InspectionvisitReportModel> lstCompanyDashBoard = new List<InspectionvisitReportModel>();







            CostSheetDashBoard = objDalVisitReport.GetDataForExportToExcelAllConcern(PK_Call_ID);
            if (CostSheetDashBoard.Rows.Count > 0)
            {
                foreach (DataRow dr in CostSheetDashBoard.Rows)
                {
                    lstCompanyDashBoard.Add(
                        new InspectionvisitReportModel
                        {

                            Type = Convert.ToString(dr["Type"]),
                            Areas_Of_Concerns = Convert.ToString(dr["AreasOfConcern"]),
                            Name = Convert.ToString(dr["Name"]),
                            ReopenBy = Convert.ToString(dr["ReopenBy"]),
                            Report_No = Convert.ToString(dr["ReportNo"]),
                            Status = Convert.ToString(dr["Status"]),
                            Reason = Convert.ToString(dr["Reason"]),
                            ClosedBy = Convert.ToString(dr["ClosedbyName"]),

                        }
                        );
                }
            }







            ViewData["CostSheet"] = lstCompanyDashBoard;
            ViewBag.ExportToExcel = lstCompanyDashBoard;
            // IVR.lst1 = lstCompanyDashBoard;

            ObjModelVisitReport.lst1 = lstCompanyDashBoard;
            return ObjModelVisitReport.lst1;
        }
        #endregion



        public void SaveFileToPhysicalLocation(List<FileDetails> lstFileDtls, int ID)
        {
            foreach (var item in lstFileDtls)
            {
                string CurrentYear = DateTime.Now.Year.ToString();
                string CurrentMonth = DateTime.Now.Month.ToString();

                string pathYear = "~/Content/" + CurrentYear;
                string pathMonth = "~/Content/" + CurrentMonth;
                string FinalPath = "~/Content/" + CurrentYear + '/' + CurrentMonth;
                string FinalPath1 = "~/Content/" + CurrentYear + '/' + CurrentMonth + '/';

                if (!Directory.Exists(pathYear))
                {
                    //Directory.CreateDirectory(CurrentYear);
                     Directory.CreateDirectory(Server.MapPath("~/Content/" + CurrentYear));
                    //Directory.CreateDirectory(System.Web.HttpContext.Current.Server.MapPath("~/Content/" + CurrentYear));


                    if (!Directory.Exists(FinalPath))
                    {
                        //Create Final Path
                        Directory.CreateDirectory(Server.MapPath(FinalPath));
                        //Directory.CreateDirectory(System.Web.HttpContext.Current.Server.MapPath(FinalPath));


                        //Save File
                        string savePath = (FinalPath1 + ID + '_' + item.FileName);
                        System.IO.File.WriteAllBytes(savePath, item.FileContent);
                    }
                    else
                    {
                        string savePath = (FinalPath1 + ID + '_' + item.FileName);
                        System.IO.File.WriteAllBytes(savePath, item.FileContent);
                    }
                }
                else
                {
                    if (!Directory.Exists(FinalPath))
                    {
                        Directory.CreateDirectory(pathYear);
                    }
                    else
                    {
                        string savePath = (FinalPath + ID + '_' + item.FileName);
                        System.IO.File.WriteAllBytes(savePath, item.FileContent);
                    }

                }

                
            }
        }

        [HttpPost]
        public JsonResult GetdownloadData()
        {

            DataTable data = objDalVisitReport.checksign();

            var Test = Convert.ToString(data.Rows[0][0]);
            //return Json(Test, JsonRequestBehavior.AllowGet);
            return Json(new { Test = Test, responseText = "Code mathched" }, JsonRequestBehavior.AllowGet);
        }



        //added by shrutika salve 01/09/2023

        public FileResult Download3(string d)
        {

            string FileName = "";
            string Date = "";
            string ID = string.Empty;
            DataTable DTDownloadFile = new DataTable();
            List<FileDetails> lstEditFileDetails = new List<FileDetails>();
            DTDownloadFile = objDalVisitReport.GetFileContentdetails(Convert.ToInt32(d));

            if (DTDownloadFile.Rows.Count > 0)
            {
                ID = DTDownloadFile.Rows[0]["ID"].ToString();
                FileName = DTDownloadFile.Rows[0]["FileName"].ToString();
                Date = DTDownloadFile.Rows[0]["CreatedDate"].ToString();
            }

            //string myDate = "05/11/2010";
            DateTime date = Convert.ToDateTime(Date);
            int year = date.Year;
            int Month = date.Month;
            string path = string.Empty;

            int intC = Convert.ToInt32(Month);
            string CurrentMonth = CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedMonthName(intC);


            //Build the File Path.
            //string path = Server.MapPath("~/Content/JobDocument/") + d;
            //var savePath = Path.Combine(Server.MapPath("~/IVRIRNSupportDocs/"), a + item.FileName);

            path = Server.MapPath("~/Content/" + year + "/" + CurrentMonth + "/") + FileName;
            // string path = Server.MapPath("~/Content/") + d;
            if (!System.IO.File.Exists(path))
            {
                path = Server.MapPath("~/Content/" + year + "/" + CurrentMonth + "/") + ID + "_" + FileName;
            }
            //Read the File data into Byte Array.
            byte[] bytes = System.IO.File.ReadAllBytes(path);

            //Send the File to Download.
            return File(bytes, "application/octet-stream", FileName);
        }


        public JsonResult DeleteConFile3(string id)
        {
            string Results = string.Empty;
            FileDetails fileDetails = new FileDetails();
            DataTable DTGetDeleteFile = new DataTable();
            if (String.IsNullOrEmpty(id))
            {
                Response.StatusCode = (int)HttpStatusCode.BadRequest;
                return Json(new { Result = "Error" });
            }
            try
            {
                //  Guid guid = new Guid(id);
                DTGetDeleteFile = objDalVisitReport.GetConFileExtdetails(id);
                if (DTGetDeleteFile.Rows.Count > 0)
                {
                    fileDetails.Extension = Convert.ToString(DTGetDeleteFile.Rows[0]["Extenstion"]);
                    fileDetails.FileName = Convert.ToString(DTGetDeleteFile.Rows[0]["FileName"]);
                }
                if (id != null && id != "")
                {
                    Results = objDalVisitReport.DeleteConUploadedFiledetails(id);
                    //var path = Path.Combine(Server.MapPath("~/Content/"), fileDetails.FileName);
                    //if (System.IO.File.Exists(path))
                    //{
                    //    System.IO.File.Delete(path);
                    //}
                    return Json(new { Result = "OK" });
                }
            }
            catch (Exception ex)
            {
                return Json(new { Result = "ERROR", Message = ex.Message });
            }
            return Json(new { Result = "ERROR" });
        }
        //added by nikita on 05112023

        [HttpGet]
        public ActionResult RevisedIvrReports(ReportModel IVR)
        {


            Session["PK_Call_ID"] = null;
            DataTable CostSheetDashBoard = new DataTable();
            DataSet ItemDescriptionData = new DataSet();
            List<ReportModel> lstCompanyDashBoard = new List<ReportModel>();



            if (IVR.PK_RM_ID != 0)
            {
                ItemDescriptionData = objDalVisitReport.GetReportById(IVR.PK_RM_ID);
                if (ItemDescriptionData.Tables[0].Rows.Count > 0)
                {
                    IVR.ReportName = Convert.ToString(ItemDescriptionData.Tables[0].Rows[0]["ReportName"]);
                    IVR.Report = Convert.ToString(ItemDescriptionData.Tables[0].Rows[0]["Report"]);
                    IVR.PK_RM_ID = Convert.ToInt32(ItemDescriptionData.Tables[0].Rows[0]["PK_RM_ID"]);
                    IVR.PK_CALL_ID = Convert.ToInt32(ItemDescriptionData.Tables[0].Rows[0]["PK_CALL_ID"]);


                    CostSheetDashBoard = objDalVisitReport.GetReportByCall_Id(IVR.PK_CALL_ID);
                    if (CostSheetDashBoard.Rows.Count > 0)
                    {
                        foreach (DataRow dr in CostSheetDashBoard.Rows)
                        {
                            lstCompanyDashBoard.Add(
                                new ReportModel
                                {
                                    Count = CostSheetDashBoard.Rows.Count,
                                    ReportName = Convert.ToString(dr["ReportName"]),
                                    Report = Convert.ToString(dr["Report"]),
                                    CraetedDate = Convert.ToString(dr["CraetedDate"]),
                                    PK_RM_ID = Convert.ToInt32(dr["PK_RM_ID"]),
                                    PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"])

                                }
                                );
                        }
                    }

                }

            }
            else if (IVR.PK_CALL_ID != null && IVR.PK_CALL_ID != 0)
            {
                try
                {
                    CostSheetDashBoard = objDalVisitReport.GetReportByCall_Id(IVR.PK_CALL_ID);
                    if (CostSheetDashBoard.Rows.Count > 0)
                    {
                        foreach (DataRow dr in CostSheetDashBoard.Rows)
                        {
                            lstCompanyDashBoard.Add(
                                new ReportModel
                                {
                                    Count = CostSheetDashBoard.Rows.Count,
                                    ReportName = Convert.ToString(dr["ReportName"]),
                                    ReportNo = Convert.ToString(dr["ReportNo"]),
                                    Report = Convert.ToString(dr["Report"]),
                                    CraetedDate = Convert.ToString(dr["CraetedDate"]),
                                    PK_RM_ID = Convert.ToInt32(dr["PK_RM_ID"]),
                                    PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"]),

                                    SubJob_No = Convert.ToString(dr["SubJob_No"]),
                                    Sap_And_Controle_No = Convert.ToString(dr["Sap_And_Controle_No"]),
                                    Project_Name_Location = Convert.ToString(dr["Project_Name_Location"]),
                                    Client_Name = Convert.ToString(dr["Client_Name"]),
                                    Vendor_Name_Location = Convert.ToString(dr["Vendor_Name_Location"]),
                                    Po_No = Convert.ToString(dr["Po_No"]),
                                    Inspector = Convert.ToString(dr["Inspector"]),
                                    inspectionDate = Convert.ToString(dr["InspectionDate"]),
                                    ReportDate = Convert.ToString(dr["ReportDate"]),
                                    Product_item = Convert.ToString(dr["Product_item"]),
                                    Originating_Branch = Convert.ToString(dr["Originating_Branch"]),
                                    Excuting_Branch = Convert.ToString(dr["Excuting_Branch"]),
                                    // NCR = Convert.ToString(dr["NCR"]),
                                    Call_No = Convert.ToString(dr["Call_No"]),
                                    CanIRNbeissued = Convert.ToString(dr["CanIRNbeissued"]),
                                    IssuedPOItemNumbers = Convert.ToString(dr["IssuedPOItemNumbers"])

                                }
                                );
                        }
                    }
                }
                catch (Exception ex)
                {
                    string Error = ex.Message.ToString();
                    return RedirectToAction("ErrorPage", "InspectionReleaseNote", new { @Error = Error });
                }
            }
            else
            {
                CostSheetDashBoard = objDalVisitReport.GetReportByUser_();
                if (CostSheetDashBoard.Rows.Count > 0)
                {
                    foreach (DataRow dr in CostSheetDashBoard.Rows)
                    {
                        lstCompanyDashBoard.Add(
                            new ReportModel
                            {
                                Count = CostSheetDashBoard.Rows.Count,
                                ReportName = Convert.ToString(dr["ReportName"]),
                                Report = Convert.ToString(dr["Report"]),
                                ReportNo = Convert.ToString(dr["ReportNo"]),
                                CraetedDate = Convert.ToString(dr["CraetedDate"]),
                                PK_RM_ID = Convert.ToInt32(dr["PK_RM_ID"]),
                                PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"]),

                                SubJob_No = Convert.ToString(dr["SubJob_No"]),
                                Sap_And_Controle_No = Convert.ToString(dr["Sap_And_Controle_No"]),
                                Project_Name_Location = Convert.ToString(dr["Project_Name_Location"]),
                                Client_Name = Convert.ToString(dr["Client_Name"]),
                                Vendor_Name_Location = Convert.ToString(dr["Vendor_Name_Location"]),
                                Po_No = Convert.ToString(dr["Po_No"]),
                                Inspector = Convert.ToString(dr["Inspector"]),
                                inspectionDate = Convert.ToString(dr["InspectionDate"]),
                                ReportDate = Convert.ToString(dr["ReportDate"]),
                                Product_item = Convert.ToString(dr["Product_item"]),
                                Originating_Branch = Convert.ToString(dr["Originating_Branch"]),
                                Excuting_Branch = Convert.ToString(dr["Excuting_Branch"]),
                                //NCR = Convert.ToString(dr["NCR"]),
                                Call_No = Convert.ToString(dr["Call_No"]),
                                CanIRNbeissued = Convert.ToString(dr["CanIRNbeissued"]),
                                IssuedPOItemNumbers = Convert.ToString(dr["IssuedPOItemNumbers"]),
                                Conclusion = Convert.ToString(dr["Conclusion"]),
                                Areas_Of_Concerns = Convert.ToString(dr["Areas_Of_Concerns"]),
                                Edit = Convert.ToString(dr["Edit"]),
                                //added by shrutika salve 041012023
                                checkIFCustomer = Convert.ToString(dr["checkIFCustomerSpecific"]),
                                IVRDownloadDate = Convert.ToString(dr["IVRDownloadDate"]),
                                Date_Of_Inspection = Convert.ToString(dr["Date_Of_Inspection"]),
                                ddlReviseReason = Convert.ToString(dr["ddlReviseReason"]),
                                ReviseReason = Convert.ToString(dr["ReviseReason"]),



                            }
                            );
                    }


                }
            }

            ViewData["CostSheet"] = lstCompanyDashBoard;
            ViewBag.ExportToExcel = lstCompanyDashBoard;
            IVR.lst1 = lstCompanyDashBoard;

            return View(IVR);
        }

        [HttpGet]
        public ActionResult ExportIndexRevisedIVr(ReportModel IVR)
        {
            // Using EPPlus from nuget
            using (ExcelPackage package = new ExcelPackage())
            {
                Int32 row = 2;
                Int32 col = 1;

                package.Workbook.Worksheets.Add("Data");
                IGrid<ReportModel> grid = CreateExportableGrid_Revised(IVR);
                ExcelWorksheet sheet = package.Workbook.Worksheets["Data"];

                foreach (IGridColumn column in grid.Columns)
                {
                    sheet.Cells[1, col].Value = column.Title;
                    sheet.Column(col++).Width = 18;

                    column.IsEncoded = false;
                }

                foreach (IGridRow<ReportModel> gridRow in grid.Rows)
                {
                    col = 1;
                    foreach (IGridColumn column in grid.Columns)
                        sheet.Cells[row, col++].Value = column.ValueFor(gridRow);

                    row++;
                }

                //aaded by nikita on 06092023

                DateTime currentDateTime = DateTime.Now;
                string formattedDateTime = currentDateTime.ToString("dd-MM-yyyy HH:mm:ss");
                string filename = "RevisedInspectionVisitReport-" + formattedDateTime + ".xlsx";
                return File(package.GetAsByteArray(), "application/unknown", filename);
            }
        }
        private IGrid<ReportModel> CreateExportableGrid_Revised(ReportModel IVR)
        {
            //IGrid<SubJobs> grid = new Grid<SubJobs>(repository.GetData());
            IGrid<ReportModel> grid = new Grid<ReportModel>(GetDataRevised(IVR));
            grid.ViewContext = new ViewContext { HttpContext = HttpContext };
            grid.Columns.Add(model => model.Report).Titled("Report No");
            grid.Columns.Add(model => model.Report).Titled("Download File");
            grid.Columns.Add(model => model.Call_No).Titled("Call No");
            grid.Columns.Add(model => model.SubJob_No).Titled("Sub Job No");
            grid.Columns.Add(model => model.Sap_And_Controle_No).Titled("Job No");
            grid.Columns.Add(model => model.Project_Name_Location).Titled("Project Name");
            grid.Columns.Add(model => model.Client_Name).Titled("Customer Name");
            grid.Columns.Add(model => model.Vendor_Name_Location).Titled("Vendor Name");
            grid.Columns.Add(model => model.Po_No).Titled("Po No");
            grid.Columns.Add(model => model.Inspector).Titled("Inspector Name");
            grid.Columns.Add(model => model.Date_Of_Inspection).Titled("Inspection Date");
            grid.Columns.Add(model => model.inspectionDate).Titled("Last Inspection Date");
            grid.Columns.Add(model => model.ddlReviseReason).Titled("Revise Reason");
            grid.Columns.Add(model => model.ReviseReason).Titled("Revise Reason Description");
            grid.Columns.Add(model => model.ReportDate).Titled("Report Date");
            grid.Columns.Add(model => model.Product_item).Titled("Item to be inspected");
            grid.Columns.Add(model => model.Originating_Branch).Titled("Originating Branch");
            grid.Columns.Add(model => model.Excuting_Branch).Titled("Executing Branch");
            grid.Columns.Add(model => model.CanIRNbeissued).Titled("Can IRN be issued");
            grid.Columns.Add(model => model.IssuedPOItemNumbers).Titled("Issued PO Item Numbers");
            grid.Columns.Add(model => model.Conclusion).Titled("Conclusion");
            grid.Columns.Add(model => model.Areas_Of_Concerns).Titled("Areas Of Concerns");
            grid.Columns.Add(model => model.PK_RM_ID).Titled("PK_RM_ID");
            grid.Columns.Add(model => model.checkIFCustomer).Titled("Customer Specific Format");
            grid.Columns.Add(model => model.IVRDownloadDate).Titled("IVR Download Date");
            grid.Pager = new GridPager<ReportModel>(grid);
            grid.Processors.Add(grid.Pager);
            grid.Pager.RowsPerPage = RMData.lst1.Count;

            foreach (IGridColumn column in grid.Columns)
            {
                column.Filter.IsEnabled = true;
                column.Sort.IsEnabled = true;
            }

            return grid;
        }

        public List<ReportModel> GetDataRevised(ReportModel IVR)
        {
            Session["PK_Call_ID"] = null;
            DataTable CostSheetDashBoard = new DataTable();
            DataSet ItemDescriptionData = new DataSet();
            List<ReportModel> lstCompanyDashBoard = new List<ReportModel>();



            if (IVR.PK_RM_ID != 0)
            {
                ItemDescriptionData = objDalVisitReport.GetReportById(IVR.PK_RM_ID);
                if (ItemDescriptionData.Tables[0].Rows.Count > 0)
                {
                    IVR.ReportName = Convert.ToString(ItemDescriptionData.Tables[0].Rows[0]["ReportName"]);
                    IVR.Report = Convert.ToString(ItemDescriptionData.Tables[0].Rows[0]["Report"]);
                    IVR.PK_RM_ID = Convert.ToInt32(ItemDescriptionData.Tables[0].Rows[0]["PK_RM_ID"]);
                    IVR.PK_CALL_ID = Convert.ToInt32(ItemDescriptionData.Tables[0].Rows[0]["PK_CALL_ID"]);


                    CostSheetDashBoard = objDalVisitReport.GetReportByCall_Id(IVR.PK_CALL_ID);
                    if (CostSheetDashBoard.Rows.Count > 0)
                    {
                        foreach (DataRow dr in CostSheetDashBoard.Rows)
                        {
                            lstCompanyDashBoard.Add(
                                new ReportModel
                                {
                                    Count = CostSheetDashBoard.Rows.Count,
                                    ReportName = Convert.ToString(dr["ReportName"]),
                                    Report = Convert.ToString(dr["Report"]),
                                    CraetedDate = Convert.ToString(dr["CraetedDate"]),
                                    PK_RM_ID = Convert.ToInt32(dr["PK_RM_ID"]),
                                    PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"])

                                }
                                );
                        }
                    }

                }

            }
            else if (IVR.PK_CALL_ID != null && IVR.PK_CALL_ID != 0)
            {
                try
                {
                    CostSheetDashBoard = objDalVisitReport.GetReportByCall_Id(IVR.PK_CALL_ID);
                    if (CostSheetDashBoard.Rows.Count > 0)
                    {
                        foreach (DataRow dr in CostSheetDashBoard.Rows)
                        {
                            lstCompanyDashBoard.Add(
                                new ReportModel
                                {
                                    Count = CostSheetDashBoard.Rows.Count,
                                    ReportName = Convert.ToString(dr["ReportName"]),
                                    Report = Convert.ToString(dr["Report"]),
                                    CraetedDate = Convert.ToString(dr["CraetedDate"]),
                                    PK_RM_ID = Convert.ToInt32(dr["PK_RM_ID"]),
                                    PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"]),
                                    SubJob_No = Convert.ToString(dr["SubJob_No"]),
                                    Sap_And_Controle_No = Convert.ToString(dr["Sap_And_Controle_No"]),
                                    Project_Name_Location = Convert.ToString(dr["Project_Name_Location"]),
                                    Client_Name = Convert.ToString(dr["Client_Name"]),
                                    Vendor_Name_Location = Convert.ToString(dr["Vendor_Name_Location"]),
                                    Po_No = Convert.ToString(dr["Po_No"]),
                                    Inspector = Convert.ToString(dr["Inspector"]),
                                    inspectionDate = Convert.ToString(dr["InspectionDate"]),
                                    ReportDate = Convert.ToString(dr["ReportDate"]),
                                    Product_item = Convert.ToString(dr["Product_item"]),
                                    Originating_Branch = Convert.ToString(dr["Originating_Branch"]),
                                    Excuting_Branch = Convert.ToString(dr["Excuting_Branch"]),
                                    //NCR = Convert.ToString(dr["NCR"]),
                                    Call_No = Convert.ToString(dr["Call_No"]),
                                    CanIRNbeissued = Convert.ToString(dr["CanIRNbeissued"]),
                                    IssuedPOItemNumbers = Convert.ToString(dr["IssuedPOItemNumbers"])
                                }
                                );
                        }
                    }
                }
                catch (Exception ex)
                {
                    string Error = ex.Message.ToString();

                }
            }
            else
            {
                CostSheetDashBoard = objDalVisitReport.GetReportByUser_();
                //CostSheetDashBoard = objDalVisitReport.GetAllReportByUser();
                if (CostSheetDashBoard.Rows.Count > 0)
                {
                    foreach (DataRow dr in CostSheetDashBoard.Rows)
                    {
                        lstCompanyDashBoard.Add(
                            new ReportModel
                            {
                                Count = CostSheetDashBoard.Rows.Count,
                                ReportName = Convert.ToString(dr["ReportName"]),
                                ReportNo = Convert.ToString(dr["ReportNo"]),
                                Report = Convert.ToString(dr["Report"]),

                                CraetedDate = Convert.ToString(dr["CraetedDate"]),
                                PK_RM_ID = Convert.ToInt32(dr["PK_RM_ID"]),
                                PK_CALL_ID = Convert.ToInt32(dr["PK_CALL_ID"]),

                                Call_No = Convert.ToString(dr["Call_No"]),
                                SubJob_No = Convert.ToString(dr["SubJob_No"]),
                                Sap_And_Controle_No = Convert.ToString(dr["Sap_And_Controle_No"]),
                                Project_Name_Location = Convert.ToString(dr["Project_Name_Location"]),
                                Client_Name = Convert.ToString(dr["Client_Name"]),
                                Vendor_Name_Location = Convert.ToString(dr["Vendor_Name_Location"]),
                                Po_No = Convert.ToString(dr["Po_No"]),
                                Inspector = Convert.ToString(dr["Inspector"]),
                                inspectionDate = Convert.ToString(dr["InspectionDate"]),
                                ReportDate = Convert.ToString(dr["ReportDate"]),
                                Product_item = Convert.ToString(dr["Product_item"]),
                                Originating_Branch = Convert.ToString(dr["Originating_Branch"]),
                                Excuting_Branch = Convert.ToString(dr["Excuting_Branch"]),
                                CanIRNbeissued = Convert.ToString(dr["CanIRNbeissued"]),
                                IssuedPOItemNumbers = Convert.ToString(dr["IssuedPOItemNumbers"]),
                                // NCR = Convert.ToString(dr["NCR"])
                                //added by shrutika salve 041012023
                                checkIFCustomer = Convert.ToString(dr["checkIFCustomerSpecific"]),
                                IVRDownloadDate = Convert.ToString(dr["IVRDownloadDate"]),
                                //ReportpreparesinTiimes = Convert.ToString(dr["ReportprepareinTiimes"]),
                                Date_Of_Inspection = Convert.ToString(dr["Date_Of_Inspection"]),
                                ddlReviseReason = Convert.ToString(dr["ddlReviseReason"]),
                                ReviseReason = Convert.ToString(dr["ReviseReason"]),
                            }
                            );
                    }


                }
            }

            ViewData["CostSheet"] = lstCompanyDashBoard;
            ViewBag.ExportToExcel = lstCompanyDashBoard;
            // IVR.lst1 = lstCompanyDashBoard;

            RMData.lst1 = lstCompanyDashBoard;
            return RMData.lst1;
        }

        //end of code nikita
        //added by nikita on 1602024
        public ActionResult CheckSendForApproval(string pkcallid)
        {
            DataTable ds = new DataTable();
            string result;
            try
            {
                ds = objDalVisitReport.CheckData(pkcallid);
                result = JsonConvert.SerializeObject(ds);
                return Json(result, JsonRequestBehavior.AllowGet);
            }
            catch (Exception Ex)
            {
                return Json("Something went wrong", JsonRequestBehavior.AllowGet);

            }
        }


        //added by satish yadav for common validation travel time,start and enddate
        [HttpPost]
        public JsonResult CheckCondition(List<MatchingData> matchingData)
        {
            // Process the matchingData array as needed
            OnSiteMonitoring objDAM = new OnSiteMonitoring();
            SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["TuvConnection"].ConnectionString);
            DataTable dt = new DataTable();
            string UserId = Convert.ToString(Session["UserIDs"]);
            string checkcondition = string.Empty;
            foreach (var data in matchingData)
            {
                try
                {
                    //string[] dateFormats = { "MM/dd/yyyy", "dd/MM/yyyy" }; // Add more formats if needed
                    //string dateSEfront = data.dateSE;
                    //DateTime parsedDate;

                    //bool success = DateTime.TryParseExact(dateSEfront.Trim(),
                    //                                      dateFormats,
                    //                                      CultureInfo.InvariantCulture,
                    //                                      DateTimeStyles.None,
                    //                                      out parsedDate);
                    //string DateSeFormat = string.Empty;
                    //if (success)
                    //{
                    //    DateSeFormat = parsedDate.ToString("yyyy/MM/dd");
                    //}
                    //else
                    //{
                    //    checkcondition = "Invalid date format.";
                    //    break;
                    //}
                    
                    CultureInfo theCultureInfo = CultureInfo.InvariantCulture;
                    con.Open();
                    DataTable DTChkLeave = new DataTable();
                    DTChkLeave = objDAM.CheckIfLeavePresent(data.dateSE.Trim());
                    if (DTChkLeave.Rows.Count > 0)
                    {
                        checkcondition = "Failed_Leave has been added for " + data.dateSE.Trim();
                    }
                    else
                    {
                        //------------------------------old Working----------------------------
                        SqlCommand CMDGetDdlLst = new SqlCommand("SP_CheckCountTimeSheet", con);
                        CMDGetDdlLst.CommandType = CommandType.StoredProcedure;
                        CMDGetDdlLst.Parameters.AddWithValue("@Id", data.Id);
                        CMDGetDdlLst.Parameters.AddWithValue("@DateSe", DateTime.ParseExact(DateTime.ParseExact(data.dateSE.Trim(), "dd/MM/yyyy", theCultureInfo).ToString("MM/dd/yyyy"), "MM/dd/yyyy", theCultureInfo));
                        CMDGetDdlLst.Parameters.AddWithValue("@CreatedBy", UserId);
                        CMDGetDdlLst.Parameters.AddWithValue("@totalStartTime", data.totalStartTime);
                        CMDGetDdlLst.Parameters.AddWithValue("@totalEndTime", data.totalEndTime);
                        CMDGetDdlLst.Parameters.AddWithValue("@totalTravelTime", data.totalTravelTime);
                        object result = CMDGetDdlLst.ExecuteScalar();
                        LogError(data.Id, data.dateSE, data.totalStartTime, data.totalEndTime,result);
                        if (result != null)
                        {
                            checkcondition = (string)result;
                            break;
                        }
                    }
                    con.Close();
                }
                catch (Exception ex)
                {
                    con.Close();
                    checkcondition = "Something Went Wrong!!";
                    string Error = ex.Message.ToString();
                    ErrorLog(Error);

                }
            }
            return Json(new { success = checkcondition });
        }

        public class MatchingData
        {
            public string dateSE { get; set; }
            public float totalStartTime { get; set; }
            public float totalEndTime { get; set; }
            public float totalTravelTime { get; set; }
            public int Id { get; set; }
        }
        

        public void LogError(int id, string Dateformat, float totalStartTime, float totalEndTime, object Result)
        {
            string message = string.Format("Time: {0}", DateTime.Now.ToString("dd/MM/yyyy hh:mm:ss tt"));
            message += Environment.NewLine;
            message += "-----------------------------------------------------------";
            message += Environment.NewLine;
            message += string.Format("Id: {0}", id);
            message += Environment.NewLine;
            message += string.Format("DateSe: {0}", Dateformat);
            message += Environment.NewLine;
            message += string.Format("StartTime: {0}", totalStartTime);
            message += Environment.NewLine;
            message += string.Format("EndTime: {0}", totalEndTime);
            message += Environment.NewLine;
            message += string.Format("Result: {0}", Result);
            message += Environment.NewLine;
            message += "-----------------------------------------------------------";
            message += Environment.NewLine;
            string path = ConfigurationManager.AppSettings["ErrorLogPath"];
            string strFileName = "LogFile_" + DateTime.Now.Date.ToString("dd_MM_yyyy") + ".txt";
            FileStream objFilestream = new FileStream(string.Format("{0}\\{1}", path, strFileName), FileMode.Append, FileAccess.Write);
            StreamWriter objStreamWriter = new StreamWriter((Stream)objFilestream);
            objStreamWriter.WriteLine(message);
            objStreamWriter.Close();
            objFilestream.Close();
        }

        public void ErrorLog(string error)
        {
            string message = string.Format("Time: {0}", DateTime.Now.ToString("dd/MM/yyyy hh:mm:ss tt"));
            message += Environment.NewLine;
            message += "-----------------------------------------------------------";
            message += Environment.NewLine;
            message += string.Format("Error: {0}", error);
            message += Environment.NewLine;
            message += "-----------------------------------------------------------";
            message += Environment.NewLine;
            string path = ConfigurationManager.AppSettings["ErrorLogPath"];
            string strFileName = "ErrorLogFile_" + DateTime.Now.Date.ToString("dd_MM_yyyy") + ".txt";
            FileStream objFilestream = new FileStream(string.Format("{0}\\{1}", path, strFileName), FileMode.Append, FileAccess.Write);
            StreamWriter objStreamWriter = new StreamWriter((Stream)objFilestream);
            objStreamWriter.WriteLine(message);
            objStreamWriter.Close();
            objFilestream.Close();
        }
        //end


        [HttpGet]
        public ActionResult VisitReportFormArcJob(int? PK_Call_ID, int? PK_RM_ID, string status, InspectionvisitReportModel abc, string Pk_callidAVR)
        {


            Session["VisitReportNo"] = null;

            int? ids = PK_Call_ID;
            if (Session["PK_Call_ID"] != null)
            {
                #region

                PK_Call_ID = Convert.ToInt32(Session["PK_Call_ID"]);

                //objDalVisitReport.UpdateStatus(PK_Call_ID, status);


                //ViewBag.SubCatlist = 0;

                if (PK_Call_ID != 0 && PK_Call_ID != null)
                {
                    DataSet DSJobMasterByQtId = new DataSet();
                    DataSet DSEditQutationTabledata = new DataSet();

                    DSJobMasterByQtId = objDalVisitReport.EditInspectionVisitReportByPKCallID(PK_Call_ID);
                    //DSJobMasterByQtId = objDalVisitReport.EditInspectionVisitReportByPKCallID1(PK_Call_ID,PK_RM_ID);

                    if (DSJobMasterByQtId.Tables[0].Rows.Count > 0)
                    {

                        ObjModelVisitReport.Branch = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Branch"]);
                        ObjModelVisitReport.Sap_And_Controle_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Sap_And_Controle_No"]);
                        ObjModelVisitReport.PK_IVR_ID = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["PK_IVR_ID"]);
                        ObjModelVisitReport.Project_Name_Location = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Project_Name_Location"]);
                        ObjModelVisitReport.Address_Of_Inspection = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Address_Of_Inspection"]);
                        ObjModelVisitReport.End_user_Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["End_user_Name"]);
                        ObjModelVisitReport.Vendor_Name_Location = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Vendor_Name_Location"]);
                        ObjModelVisitReport.PK_Call_ID = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["PK_Call_ID"]);
                        ObjModelVisitReport.Notification_Name_No_Date = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Notification_Name_No_Date"]);

                        ObjModelVisitReport.Date_Of_Inspection = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Date_Of_Inspection"]);
                        ObjModelVisitReport.Client_Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Client_Name"]);
                        ObjModelVisitReport.DEC_PMC_EPC_Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["DEC_PMC_EPC_Name"]);
                        ObjModelVisitReport.DEC_PMC_EPC_Assignment_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["DEC_PMC_EPC_Assignment_No"]);
                        ObjModelVisitReport.Po_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Po_No"]);
                        ObjModelVisitReport.Sub_Vendor_Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Sub_Vendor_Name"]);
                        ObjModelVisitReport.Po_No_SubVendor = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Po_No_SubVendor"]);

                        int kick = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Kick_Off_Pre_Inspection"]);
                        ObjModelVisitReport.Kick_Off_Pre_Inspection = Convert.ToBoolean(kick);

                        int Mi = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Material_identification"]);
                        ObjModelVisitReport.Material_identification = Convert.ToBoolean(Mi);

                        int Interim_Stages = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Interim_Stages"]);
                        ObjModelVisitReport.Interim_Stages = Convert.ToBoolean(Interim_Stages);

                        int Document_review = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Document_review"]);
                        ObjModelVisitReport.Document_review = Convert.ToBoolean(Document_review);

                        int Final_Inspection = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Final_Inspection"]);
                        ObjModelVisitReport.Final_Inspection = Convert.ToBoolean(Final_Inspection);

                        int Re_inspection = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Re_inspection"]);
                        ObjModelVisitReport.Re_inspection = Convert.ToBoolean(Re_inspection);

                        ObjModelVisitReport.Conclusion = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Conclusion"]);
                        ObjModelVisitReport.Pending_Activites = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Pending_Activites"]);
                        ObjModelVisitReport.Identification_Of_Inspected = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Identification_Of_Inspected"]);
                        ObjModelVisitReport.Identification_Of_Inspected_AfterSave = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Identification_Of_Inspected"]);

                        ObjModelVisitReport.Areas_Of_Concerns = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Areas_Of_Concerns"]);
                        ObjModelVisitReport.Non_Conformities_raised = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Non_Conformities_raised"]);
                        ObjModelVisitReport.Signatures = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Signatures"]);
                        ObjModelVisitReport.Type = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Type"]);
                        ObjModelVisitReport.Report_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Report_No"]);
                        ObjModelVisitReport.Call_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Call_No"]);

                        int Inspection_records = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Inspection_records"]);
                        ObjModelVisitReport.Inspection_records = Convert.ToBoolean(Inspection_records);

                        int Inspection_Photo = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Inspection_Photo"]);
                        ObjModelVisitReport.Inspection_Photo = Convert.ToBoolean(Inspection_Photo);

                        int Other_Specify = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Other_Specify"]);
                        ObjModelVisitReport.Other_Specify = Convert.ToBoolean(Other_Specify);

                        ObjModelVisitReport.SubJob_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["SubJob_No"]);
                        ObjModelVisitReport.PK_SubJob_Id = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["PK_SubJob_Id"]);


                        ObjModelVisitReport.Type = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Type"]);
                        ObjModelVisitReport.Br_Id = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Br_Id"]);
                        ObjModelVisitReport.SubType = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["JobType"]);
                        //ObjModelVisitReport.SubVendorPODate = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["SubVendorPODate"]);
                        ObjModelVisitReport.SubSubVendorDate_of_PO = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["SubvendorPODate1"]);
                        ObjModelVisitReport.CreatedDate = Convert.ToDateTime(DSJobMasterByQtId.Tables[0].Rows[0]["CreatedDate"]);
                        ObjModelVisitReport.chkARC = Convert.ToBoolean(DSJobMasterByQtId.Tables[0].Rows[0]["chkARC"]);
                        ObjModelVisitReport.ARCFirstPrint = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["ARCFirstPrint"]);
                        if (DSJobMasterByQtId.Tables[1].Rows.Count > 0)
                        {
                            ObjModelVisitReport.IVRCount = Convert.ToInt32(DSJobMasterByQtId.Tables[1].Rows[0]["IVRCount"]);
                        }

                        #region Bind Activity 23 july 

                        DataSet dtGateDate = new DataSet();
                        //string Date = "";
                        //string Dates;
                        dtGateDate = ObjActivity.GetDate(PK_Call_ID);  //if data is null Get dates from visit report
                        //if (dtGateDate.Tables[0].Rows.Count > 0)
                        //{
                        //    Date = dtGateDate.Tables[0].Rows[0]["Date_Of_Inspection"].ToString();

                        //}

                        string Date = "";
                        string Dates;
                        Date = ObjModelVisitReport.Date_Of_Inspection;
                        Dates = Date.Trim().TrimStart(','); // to remove first comma

                        string[] ArrDates = Dates.Split(',');

                        foreach (var dr in ArrDates) // loop for adding add from dataset to list<modeldata>  
                        {
                            lmd.Add(new NonInspectionActivity
                            {
                                DateSE = dr,
                                //Vendor_Name = dtGateDate.Tables[0].Rows[0]["Vendor_Name_Location"].ToString(),
                                //EstimatedTime = dtGateDate.Tables[0].Rows[0]["EstimatedHours"].ToString(),
                                Description = dtGateDate.Tables[0].Rows[0]["Vendor_Name_Location"].ToString(),
                                StartTime = Convert.ToDouble(dtGateDate.Tables[0].Rows[0]["EstimatedHours"]),
                            });
                        }

                        ViewData["Dates"] = ArrDates;
                        // ViewBag.Dates = ArrDates;
                        ViewBag.Dates = lmd;
                        ViewBag.DataEntryView = "Yes";


                        #endregion
                    }
                    else
                    {




                        DSEditQutationTabledata = objDalVisitReport.GetCallDetailsARC(Pk_callidAVR);

                        ObjModelVisitReport.Vendor_Name_Location = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Vendor_Name"]);
                        ObjModelVisitReport.Po_No = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["PO_Number"]);
                        ObjModelVisitReport.Sub_Vendor_Name = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["SubVendorName"]);
                        ObjModelVisitReport.Po_No_SubVendor = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["SubVendorPoNo"]);
                        //ObjModelVisitReport.SubVendorPODate = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["SubVendorPODate"]);
                        //ObjModelVisitReport.SubSubVendorDate_of_PO = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["SubVendorPODate"]);
                        ObjModelVisitReport.Date_of_PO = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Date_of_Po"]);

                        //ObjModelVisitReport.Vendor_Name_Location = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Vendor_Name"]);
                        //ObjModelVisitReport.Po_No = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["SubVendorPONo"]);
                        //ObjModelVisitReport.Sub_Vendor_Name = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["SubVendorName"]);
                        //ObjModelVisitReport.Po_No_SubVendor = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Po_No_SSJob"]);


                        ObjModelVisitReport.Sap_And_Controle_No = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Job"]);
                        ObjModelVisitReport.Branch = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Executing_Branch"]);
                        ObjModelVisitReport.Date_Of_Inspection = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Actual_Visit_Date"]);
                        //ObjModelVisitReport.Project_Name_Location = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Project_Name"]);
                        ObjModelVisitReport.Address_Of_Inspection = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Job_Location"]);
                        //ObjModelVisitReport.End_user_Name = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["End_Customer"]);
                        //ObjModelVisitReport.SubJob_No = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Sub_Job"]);
                        //ObjModelVisitReport.PK_SubJob_Id = Convert.ToInt32(DSEditQutationTabledata.Tables[0].Rows[0]["PK_SubJob_Id"]);
                        ObjModelVisitReport.Client_Name = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Company_Name"]);
                        //ObjModelVisitReport.PK_Call_ID = Convert.ToInt32(DSEditQutationTabledata.Tables[0].Rows[0]["PK_Call_ID"]);
                        ObjModelVisitReport.Br_Id = Convert.ToInt32(DSEditQutationTabledata.Tables[0].Rows[0]["Br_Id"]);
                        //ObjModelVisitReport.DEC_PMC_EPC_Name = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["DECName"]);
                        //ObjModelVisitReport.DEC_PMC_EPC_Assignment_No = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["DECNumber"]);
                        ObjModelVisitReport.Notification_Name_No_Date = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["source"]);
                        ObjModelVisitReport.SubType = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["JobType"]);
                        ObjModelVisitReport.chkARC = Convert.ToBoolean(DSEditQutationTabledata.Tables[0].Rows[0]["chkARC"]);
                        if (DSEditQutationTabledata.Tables[2].Rows.Count > 0)
                        {
                            ObjModelVisitReport.IVRCount = Convert.ToInt32(DSEditQutationTabledata.Tables[2].Rows[0]["IVRCount"]);
                        }
                        ObjModelVisitReport.CallIDs = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["CallIDs"]);
                        #region Bind Activity 23 july 

                        DataSet dtGateDate = new DataSet();
                        //string Date = "";
                        //string Dates;
                        dtGateDate = ObjActivity.GetDate(PK_Call_ID);  //if data is null Get dates from visit report
                        //if (dtGateDate.Tables[0].Rows.Count > 0)
                        //{
                        //    Date = dtGateDate.Tables[0].Rows[0]["Date_Of_Inspection"].ToString();

                        //}

                        string Date = "";
                        string Dates;
                        Date = ObjModelVisitReport.Date_Of_Inspection;
                        Dates = Date.Trim().TrimStart(','); // to remove first comma
                        string strCallID = "";
                        string strCallIDs;
                        strCallID = ObjModelVisitReport.Date_Of_Inspection;
                        strCallIDs = strCallID.Trim().TrimStart(','); // to remove first comma

                        string[] ArrDates = Dates.Split(',');
                        string[] ArrCallIDs = strCallIDs.Split(',');

                        //foreach (var dr in ArrDates) // loop for adding add from dataset to list<modeldata>  
                        //{
                        //    lmd.Add(new NonInspectionActivity
                        //    {
                        //        DateSE = dr,
                        //        //Vendor_Name = dtGateDate.Tables[0].Rows[0]["Vendor_Name_Location"].ToString(),
                        //        //EstimatedTime = dtGateDate.Tables[0].Rows[0]["EstimatedHours"].ToString(),
                        //        CallId = ArrCallIDs[cnt].ToString(),
                        //        Description = dtGateDate.Tables[0].Rows[0]["Vendor_Name_Location"].ToString(),
                        //      //  StartTime = Convert.ToDouble(dtGateDate.Tables[0].Rows[0]["EstimatedHours"]),
                        //    });
                        //}

                        for (int cnt = 0; cnt < ArrDates.Count(); cnt++)
                        {
                            lmd.Add(new NonInspectionActivity
                            {
                                DateSE = ArrDates[cnt].ToString(),
                                CallId = ArrCallIDs[cnt].ToString(),
                                Description = dtGateDate.Tables[0].Rows[0]["Vendor_Name_Location"].ToString(),

                            });
                        }

                        ViewData["Dates"] = ArrDates;
                        // ViewBag.Dates = ArrDates;
                        ViewBag.Dates = lmd;
                        ViewBag.DataEntryView = "Yes";

                        DataTable dsGetStamp = new DataTable();
                        List<InspectionvisitReportModel> lstCompanyDashBoard = new List<InspectionvisitReportModel>();

                        // Check if objDalVisitReport is null
                        if (objDalVisitReport != null)
                        {
                            // Call the method only if objDalVisitReport is not null
                            dsGetStamp = objDalVisitReport.GetDataByPK_Call_Id(Pk_callidAVR);

                            // Check if the returned DataTable has rows
                            if (dsGetStamp.Rows.Count > 0)
                            {
                                foreach (DataRow dr in dsGetStamp.Rows)
                                {
                                    lstCompanyDashBoard.Add(new InspectionvisitReportModel
                                    {
                                        SubJob_No = dr["Sub_Job"] != DBNull.Value ? Convert.ToString(dr["Sub_Job"]) : "",
                                        Po_No = dr["p1"] != DBNull.Value ? Convert.ToString(dr["p1"]) : "",
                                        Date_of_PO = dr["Date_of_Po"] != DBNull.Value ? Convert.ToString(dr["Date_of_Po"]) : "",
                                        Project_Name_Location = dr["Project_Name"] != DBNull.Value ? Convert.ToString(dr["Project_Name"]) : "",
                                        DEC_PMC_EPC_Name = dr["DECName"] != DBNull.Value ? Convert.ToString(dr["DECName"]) : "",
                                        DEC_PMC_EPC_Assignment_No = dr["DECNumber"] != DBNull.Value ? Convert.ToString(dr["DECNumber"]) : "",
                                        End_user_Name = dr["End_Customer"] != DBNull.Value ? Convert.ToString(dr["End_Customer"]) : "",
                                    });
                                }
                            }
                        }
                        else
                        {

                        }

                        // Assign lstCompanyDashBoard to ViewBag
                        ViewBag.lstDOrderType = lstCompanyDashBoard;


                        #endregion


                        Session["PK_Call_ID"] = PK_Call_ID;

                        ObjModelVisitReport.Pk_callidAVR = Pk_callidAVR;

                        //if (ids != "" || ids != null)
                        //{
                        //    var Data = objDalVisitReport.GetReportList(Convert.ToInt32(ids));
                        //    ViewBag.SubCatlist = new SelectList(Data, "ReportName", "ReportName");
                        //}
                        //else
                        //{
                        //    var Data = objDalVisitReport.GetAllReportList();
                        //    ViewBag.SubCatlist = new SelectList(Data, "ReportName", "ReportName");
                        //}



                    }
                    return View(ObjModelVisitReport);
                }
                else
                {
                    return RedirectToAction("CallsListByInspector", "CallsMaster");
                }
                #endregion
            }
            else
            {
                #region

                //added by shrutika salve 30052024



                if (status != null)
                {

                }




                var Data = objDalVisitReport.GetAllReportList();
                ViewBag.SubCatlist = new SelectList(Data, "PK_CALL_ID", "ReportName");
                //ViewBag.SubCatlist = 0;

                if (Pk_callidAVR != "" && Pk_callidAVR != null)
                {
                    DataSet DSJobMasterByQtId = new DataSet();
                    DataSet DSEditQutationTabledata = new DataSet();
                    //added by shrutika salve 30052025

                    DSJobMasterByQtId = objDalVisitReport.EditInspectionVisitReportByPKCallIDARC(Pk_callidAVR);

                    // DSJobMasterByQtId = objDalVisitReport.EditInspectionVisitReportByPKCallID(PK_Call_ID);
                    //  }


                    if (DSJobMasterByQtId.Tables[0].Rows.Count > 0)
                    {
                        //10 Aug
                        #region Get Activity Data  
                        ds = ObjActivity.GetDataACR(Pk_callidAVR); // Get data from callid (tblnoninspectionActivity)

                        if (ds.Tables[0].Rows.Count != 0)
                        {
                            foreach (DataRow dr in ds.Tables[0].Rows) // loop for adding add from dataset to list<modeldata>  
                            {
                                lmd.Add(new NonInspectionActivity
                                {
                                    Id = Convert.ToInt32(dr["Id"]),
                                    ActivityType = Convert.ToString(dr["ActivityType"]),
                                    Location = Convert.ToString(dr["Location"]),
                                    DateSE = Convert.ToString(dr["DateSE"]),
                                    //EndDate = Convert.ToString(dr["enddate"]),
                                    //StartDate = Convert.ToString(dr["StartDate"]),
                                    //EndDate = Convert.ToString(dr["EndDate"]),
                                    ServiceCode = Convert.ToString(dr["ServiceCode"]),
                                    Description = Convert.ToString(dr["Description"]),
                                    StartTime = Convert.ToDouble(dr["StartTime"]),
                                    EndTime = Convert.ToDouble(dr["EndTime"]),
                                    Attachment = Convert.ToString(dr["Attachment"]),
                                    TravelTime = Convert.ToDouble(dr["TravelTime"])

                                });
                            }

                            ViewBag.Dates = lmd;
                        }
                        #endregion



                        ObjModelVisitReport.ReportNoName = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["ReportNo"]);
                        Session["VisitReportNo"] = Convert.ToString(ObjModelVisitReport.ReportNoName);
                        ObjModelVisitReport.Branch = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Branch"]);
                        ObjModelVisitReport.Sap_And_Controle_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Sap_And_Controle_No"]);
                        ObjModelVisitReport.PK_IVR_ID = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["PK_IVR_ID"]);
                        //ObjModelVisitReport.Project_Name_Location = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Project_Name_Location"]);
                        ObjModelVisitReport.Address_Of_Inspection = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Address_Of_Inspection"]);
                        // ObjModelVisitReport.End_user_Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["End_user_Name"]);
                        //ObjModelVisitReport.Vendor_Name_Location = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Vendor_Name_Location"]);
                        ObjModelVisitReport.PK_Call_ID = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["PK_Call_ID"]);
                        ObjModelVisitReport.Notification_Name_No_Date = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Notification_Name_No_Date"]);

                        ObjModelVisitReport.Date_Of_Inspection = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Date_Of_Inspection"]);
                        ObjModelVisitReport.Client_Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Client_Name"]);
                        //ObjModelVisitReport.DEC_PMC_EPC_Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["DEC_PMC_EPC_Name"]);
                        //ObjModelVisitReport.DEC_PMC_EPC_Assignment_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["DEC_PMC_EPC_Assignment_No"]);
                        //ObjModelVisitReport.Po_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Po_No"]);
                        //ObjModelVisitReport.Sub_Vendor_Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Sub_Vendor_Name"]);
                        //ObjModelVisitReport.Po_No_SubVendor = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Po_No_SubVendor"]);

                        int kick = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Kick_Off_Pre_Inspection"]);
                        ObjModelVisitReport.Kick_Off_Pre_Inspection = Convert.ToBoolean(kick);

                        int Mi = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Material_identification"]);
                        ObjModelVisitReport.Material_identification = Convert.ToBoolean(Mi);

                        int Interim_Stages = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Interim_Stages"]);
                        ObjModelVisitReport.Interim_Stages = Convert.ToBoolean(Interim_Stages);

                        int Document_review = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Document_review"]);
                        ObjModelVisitReport.Document_review = Convert.ToBoolean(Document_review);

                        int Final_Inspection = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Final_Inspection"]);
                        ObjModelVisitReport.Final_Inspection = Convert.ToBoolean(Final_Inspection);

                        int Re_inspection = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Re_inspection"]);
                        ObjModelVisitReport.Re_inspection = Convert.ToBoolean(Re_inspection);

                        ObjModelVisitReport.Conclusion = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Conclusion"]);
                        ObjModelVisitReport.Pending_Activites = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Pending_Activites"]);
                        ObjModelVisitReport.Identification_Of_Inspected = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Identification_Of_Inspected"]);
                        ObjModelVisitReport.Identification_Of_Inspected_AfterSave = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Identification_Of_Inspected"]);
                        ObjModelVisitReport.Areas_Of_Concerns = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Areas_Of_Concerns"]);
                        ObjModelVisitReport.Non_Conformities_raised = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Non_Conformities_raised"]);
                        ObjModelVisitReport.Signatures = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Signatures"]);
                        ObjModelVisitReport.Type = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Type"]);
                        ObjModelVisitReport.Report_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Report_No"]);
                        ObjModelVisitReport.Call_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Call_No"]);

                        int Inspection_records = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Inspection_records"]);
                        ObjModelVisitReport.Inspection_records = Convert.ToBoolean(Inspection_records);

                        int Inspection_Photo = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Inspection_Photo"]);
                        ObjModelVisitReport.Inspection_Photo = Convert.ToBoolean(Inspection_Photo);

                        int Other_Specify = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Other_Specify"]);
                        ObjModelVisitReport.Other_Specify = Convert.ToBoolean(Other_Specify);

                        ObjModelVisitReport.SubJob_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["SubJob_No"]);
                        ObjModelVisitReport.PK_SubJob_Id = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["PK_SubJob_Id"]);


                        ObjModelVisitReport.Type = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Type"]);
                        ObjModelVisitReport.Br_Id = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Br_Id"]);
                        ObjModelVisitReport.ReviseReason = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["ReviseReason"]);
                        //ObjModelVisitReport.Date_of_PO = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Date_of_Po"]);
                        //ObjModelVisitReport.SubSubVendorDate_of_PO = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["SubvendorPODate1"]);
                        ObjModelVisitReport.SubType = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["JobType"]);
                        ObjModelVisitReport.CreatedDate = Convert.ToDateTime(DSJobMasterByQtId.Tables[0].Rows[0]["CreatedDate"]);

                        ObjModelVisitReport.chkARC = Convert.ToBoolean(DSJobMasterByQtId.Tables[0].Rows[0]["chkARC"]);
                        ObjModelVisitReport.ARCFirstPrint = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["ARCFirstPrint"]);

                        if (DSJobMasterByQtId.Tables[1].Rows.Count > 0)
                        {
                            ObjModelVisitReport.IVRCount = Convert.ToInt32(DSJobMasterByQtId.Tables[1].Rows[0]["IVRCount"]);
                        }
                        ObjModelVisitReport.ReportNoForPDF = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Report"]);
                        ObjModelVisitReport.ReviseReportNoForPDF = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["ReviseReportNoForPDF"]);
                        ObjModelVisitReport.CallIDs = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["CallIDs"]);
                        ObjModelVisitReport.Pk_callidAVR = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Pk_call_idARC"]);
                        //ObjModelVisitReport.ddlReviseReason = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["ddlReviseReason"]);


                        DataTable dsGetStamp = new DataTable();
                        List<InspectionvisitReportModel> lstCompanyDashBoard = new List<InspectionvisitReportModel>();

                        // Check if objDalVisitReport is null
                        if (objDalVisitReport != null)
                        {

                            // Call the method only if objDalVisitReport is not null
                            dsGetStamp = objDalVisitReport.GetDataByPK_Call_Id(Pk_callidAVR);

                            // Check if the returned DataTable has rows
                            if (dsGetStamp.Rows.Count > 0)
                            {
                                foreach (DataRow dr in dsGetStamp.Rows)
                                {
                                    lstCompanyDashBoard.Add(new InspectionvisitReportModel
                                    {

                                        PK_SubJob_IdARC = dr["pk_subjob_id"] != DBNull.Value ? Convert.ToString(dr["pk_subjob_id"]) : "",
                                        PK_Call_ID = dr["pk_call_id"] != DBNull.Value ? Convert.ToInt32(dr["pk_call_id"]) : 0,
                                        SubJob_No = dr["Sub_Job"] != DBNull.Value ? Convert.ToString(dr["Sub_Job"]) : "",
                                        Po_No = dr["p1"] != DBNull.Value ? Convert.ToString(dr["p1"]) : "",
                                        Date_of_PO = dr["Date_of_Po"] != DBNull.Value ? Convert.ToString(dr["Date_of_Po"]) : "",
                                        Project_Name_Location = dr["Project_Name"] != DBNull.Value ? Convert.ToString(dr["Project_Name"]) : "",
                                        DEC_PMC_EPC_Name = dr["DECName"] != DBNull.Value ? Convert.ToString(dr["DECName"]) : "",
                                        DEC_PMC_EPC_Assignment_No = dr["DECNumber"] != DBNull.Value ? Convert.ToString(dr["DECNumber"]) : "",
                                        End_user_Name = dr["End_Customer"] != DBNull.Value ? Convert.ToString(dr["End_Customer"]) : "",
                                    });
                                }
                            }
                        }
                        else
                        {

                        }

                        // Assign lstCompanyDashBoard to ViewBag
                        ViewBag.lstDOrderType = lstCompanyDashBoard;

                    }
                    else
                    {
                        DSEditQutationTabledata = objDalVisitReport.GetCallDetailsARC(Pk_callidAVR);
                        if (DSEditQutationTabledata.Tables[0].Rows.Count > 0)
                        {
                            ObjModelVisitReport.Vendor_Name_Location = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Vendor_Name"]);
                            //ObjModelVisitReport.Po_No = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["PO_Number"]);
                            ObjModelVisitReport.Sub_Vendor_Name = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["SubVendorName"]);
                            ObjModelVisitReport.Po_No_SubVendor = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["SubVendorPoNo"]);
                            //ObjModelVisitReport.SubSubVendorDate_of_PO = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["SubVendorPODate"]);

                            ObjModelVisitReport.Sap_And_Controle_No = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Job"]);
                            ObjModelVisitReport.Branch = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Executing_Branch"]);
                            ObjModelVisitReport.Date_Of_Inspection = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Actual_Visit_Date"]);
                            //ObjModelVisitReport.Project_Name_Location = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Project_Name"]);
                            ObjModelVisitReport.Address_Of_Inspection = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Job_Location"]);
                            //ObjModelVisitReport.End_user_Name = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["End_Customer"]);
                            //ObjModelVisitReport.SubJob_No = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Sub_Job"]);
                            ObjModelVisitReport.PK_SubJob_Id = Convert.ToInt32(DSEditQutationTabledata.Tables[0].Rows[0]["PK_SubJob_Id"]);
                            ObjModelVisitReport.Client_Name = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Company_Name"]);
                            //ObjModelVisitReport.PK_Call_ID = Convert.ToInt32(DSEditQutationTabledata.Tables[0].Rows[0]["PK_Call_ID"]);
                            ObjModelVisitReport.Br_Id = Convert.ToInt32(DSEditQutationTabledata.Tables[0].Rows[0]["Br_Id"]);

                            // ObjModelVisitReport.DEC_PMC_EPC_Name = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["DECName"]);
                            // ObjModelVisitReport.DEC_PMC_EPC_Assignment_No = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["DECNumber"]);
                            ObjModelVisitReport.Notification_Name_No_Date = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["source"]);
                            // ObjModelVisitReport.Date_of_PO = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Date_of_Po"]);
                            ObjModelVisitReport.SubType = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["JobType"]);
                            ObjModelVisitReport.chkARC = Convert.ToBoolean(DSEditQutationTabledata.Tables[0].Rows[0]["chkARC"]);
                            ObjModelVisitReport.CallIDs = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["CallIDs"]);

                        }

                        if (DSEditQutationTabledata.Tables[2].Rows.Count > 0)
                        {
                            ObjModelVisitReport.IVRCount = Convert.ToInt32(DSEditQutationTabledata.Tables[2].Rows[0]["IVRCount"]);
                        }
                        #region Bind Activity 23 july 

                        DataSet dtGateDate = new DataSet();

                        dtGateDate = ObjActivity.GetDateACR(Pk_callidAVR);  //if data is null Get dates from visit report


                        string Date = "";
                        string Dates;
                        Date = ObjModelVisitReport.Date_Of_Inspection;
                        Dates = Date.Trim().TrimStart(','); // to remove first comma

                        string strCallID = "";
                        string strCallIDs;
                        Date = ObjModelVisitReport.Date_Of_Inspection;
                        Dates = Date.Trim().TrimStart(','); // to remove first comma

                        strCallID = ObjModelVisitReport.CallIDs;
                        strCallIDs = strCallID.Trim().TrimStart(','); // to remove first comma

                        string[] ArrDates = Dates.Split(',');
                        string[] ArrCallIDs = strCallIDs.Split(',');

                        //foreach (var dr in ArrDates) // loop for adding add from dataset to list<modeldata>  
                        //{
                        //    lmd.Add(new NonInspectionActivity
                        //    {
                        //        DateSE = dr,
                        //        //Vendor_Name = dtGateDate.Tables[0].Rows[0]["Vendor_Name_Location"].ToString(),
                        //        //EstimatedTime = dtGateDate.Tables[0].Rows[0]["EstimatedHours"].ToString(),

                        //        Description = dtGateDate.Tables[0].Rows[0]["Vendor_Name_Location"].ToString(),
                        //     //   StartTime = Convert.ToDouble(0),//Convert.ToDouble(dtGateDate.Tables[0].Rows[0]["EstimatedHours"]),
                        //    });
                        //}

                        for (int cnt = 0; cnt < ArrDates.Count(); cnt++)
                        {
                            lmd.Add(new NonInspectionActivity
                            {
                                DateSE = ArrDates[cnt].ToString(),
                                CallId = ArrCallIDs[cnt].ToString(),
                                Description = dtGateDate.Tables[0].Rows[0]["Vendor_Name_Location"].ToString(),

                            });
                        }

                        ViewData["Dates"] = ArrDates;
                        // ViewBag.Dates = ArrDates;
                        ViewBag.Dates = lmd;
                        ViewBag.DataEntryView = "Yes";

                        DataTable dsGetStamp = new DataTable();
                        List<InspectionvisitReportModel> lstCompanyDashBoard = new List<InspectionvisitReportModel>();

                        // Check if objDalVisitReport is null
                        if (objDalVisitReport != null)
                        {
                            // Call the method only if objDalVisitReport is not null
                            dsGetStamp = objDalVisitReport.GetDataByPK_Call_Id(Pk_callidAVR);

                            // Check if the returned DataTable has rows
                            if (dsGetStamp.Rows.Count > 0)
                            {
                                foreach (DataRow dr in dsGetStamp.Rows)
                                {
                                    lstCompanyDashBoard.Add(new InspectionvisitReportModel
                                    {

                                        PK_SubJob_IdARC = dr["pk_subjob_id"] != DBNull.Value ? Convert.ToString(dr["pk_subjob_id"]) : "",
                                        PK_Call_ID = dr["pk_call_id"] != DBNull.Value ? Convert.ToInt32(dr["pk_call_id"]) : 0,
                                        SubJob_No = dr["Sub_Job"] != DBNull.Value ? Convert.ToString(dr["Sub_Job"]) : "",
                                        Po_No = dr["p1"] != DBNull.Value ? Convert.ToString(dr["p1"]) : "",
                                        Date_of_PO = dr["Date_of_Po"] != DBNull.Value ? Convert.ToString(dr["Date_of_Po"]) : "",
                                        Project_Name_Location = dr["Project_Name"] != DBNull.Value ? Convert.ToString(dr["Project_Name"]) : "",
                                        DEC_PMC_EPC_Name = dr["DECName"] != DBNull.Value ? Convert.ToString(dr["DECName"]) : "",
                                        DEC_PMC_EPC_Assignment_No = dr["DECNumber"] != DBNull.Value ? Convert.ToString(dr["DECNumber"]) : "",
                                        End_user_Name = dr["End_Customer"] != DBNull.Value ? Convert.ToString(dr["End_Customer"]) : "",
                                    });
                                }
                            }
                        }
                        else
                        {

                        }

                        // Assign lstCompanyDashBoard to ViewBag
                        ViewBag.lstDOrderType = lstCompanyDashBoard;


                        #endregion


                        Session["PK_Call_ID"] = PK_Call_ID;



                        string[] idvalue = Pk_callidAVR.Split(',');


                        string firstId = idvalue[0];

                        int parsedId = int.Parse(firstId);

                        ObjModelVisitReport.Pk_callidAVR = Pk_callidAVR;

                        ObjModelVisitReport.PK_Call_ID = parsedId;




                    }
                    return View(ObjModelVisitReport);
                }
                else
                {
                    return RedirectToAction("CallsListByInspector", "CallsMaster");
                }
                #endregion
            }
        }



        [HttpPost, ValidateInput(false)]
        public ActionResult VisitReportFormArcJob(InspectionvisitReportModel IVR, HttpPostedFileBase File, HttpPostedFileBase FileUpload, ItemDescriptionModel IDM, HttpPostedFileBase FileUpload1, HttpPostedFileBase postedFile1, ReferenceDocumentsModel RD, InspectionActivitiesModel StW, DocumentRevieweModel DR, EquipmentDetailsModel ED, NonInspectionActivity R)
        {
            DataSet DSJobMasterByQtId = new DataSet();
            List<ItemDescriptionModel> itemDescriptionDashBoard = new List<ItemDescriptionModel>();
            int CallId = 0;

            string Result = string.Empty;
            try
            {
                if (IVR.ReportName != null)
                {
                    //IVR.ReportNoName = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["ReportNo"]);
                    DSJobMasterByQtId = objDalVisitReport.IVRByCallID(IVR.ReportName);
                    if (DSJobMasterByQtId.Tables[0].Rows.Count > 0)
                    {
                        CallId = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["PK_Call_ID"]);
                        IVR.ReportNoName = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["ReportNo"]);

                        #region General
                        int _min = 10000;
                        int _max = 99999;
                        Random _rdm = new Random();
                        int Rjno = _rdm.Next(_min, _max);
                        string ConfirmCode = Convert.ToString(Rjno);

                        int _mins = 100000;
                        int _maxs = 999999;
                        Random _rdms = new Random();
                        int Rjnos = _rdm.Next(_mins, _maxs);
                        string ConfirmSecondCode = Convert.ToString(Rjnos);

                        IVR.Report_No = Convert.ToString(ConfirmCode) + ConfirmSecondCode + "-IVR";

                        IVR.PK_Call_ID = Convert.ToInt32(Session["PK_Call_ID"]); //==============Code Added By Rahul
                        IVR.Status = "1";
                        IVR.Type = "IVR";
                        Result = objDalVisitReport.InsertUpdateConclousion(IVR);


                        #endregion


                        #region  item Description
                        DataTable ItemDescriptionDashBoard = new DataTable();

                        //List<ItemDescriptionModel> itemDescriptionDashBoard = new List<ItemDescriptionModel>();
                        //ItemDescriptionDashBoard = objDalVisitReport.GetitemDescriptionARC(PK_Call_ID);
                        if (ItemDescriptionDashBoard.Rows.Count > 0)
                        {

                            foreach (DataRow dr in ItemDescriptionDashBoard.Rows)
                            {

                                var ItemDescription = new ItemDescriptionModel
                                {
                                    PK_ItemD_Id = Convert.ToInt32(dr["PK_ItemD_Id"]),
                                    Po_Item_No = Convert.ToString(dr["Po_Item_No"]),
                                    ItemCode_Description = Convert.ToString(dr["ItemCode_Description"]),
                                    Po_Quantity = Convert.ToString(dr["Po_Quantity"]),
                                    Offered_Quantity = Convert.ToString(dr["Offered_Quantity"]),
                                    //PK_CALL_ID = Convert.ToInt32(dr["PK_Call_ID"]), //==============Code Added By Rahul
                                    PK_CALL_ID = Convert.ToInt32(Session["PK_Call_ID"]), //==============Code Added By Rahul
                                    Item_Code = Convert.ToString(dr["Item_Code"]),
                                    Accepted_Quantity = Convert.ToString(dr["Accepted_Quantity"]),
                                    Cumulative_Accepted_Qty = Convert.ToString(dr["Cumulative_Accepted_Qty"]),
                                    Unit = Convert.ToString(dr["Unit"]),

                                    Status = "1",
                                    Type = "IVR",
                                };
                                string r = objDalVisitReport.InsertItemDescription(ItemDescription);
                            }
                        }
                        #endregion


                        #region Reference Documents
                        DataTable RefranceDocumentsDashBoard = new DataTable();
                        RefranceDocumentsDashBoard = objDalVisitReport.GetReferenceDocuments(CallId);
                        if (RefranceDocumentsDashBoard.Rows.Count > 0)
                        {
                            foreach (DataRow dr in RefranceDocumentsDashBoard.Rows)
                            {
                                var ItemDescription = new ReferenceDocumentsModel
                                {
                                    Document_No = Convert.ToString(dr["Document_No"]),
                                    Document_Name = Convert.ToString(dr["Document_Name"]),
                                    Approval_Status = Convert.ToString(dr["Approval_Status"]),
                                    PK_RD_ID = Convert.ToInt32(dr["PK_RD_ID"]),
                                    VendorDocumentNumber = Convert.ToString(dr["VendorDocumentNumber"]),
                                    PK_CALL_ID = Convert.ToInt32(Session["PK_Call_ID"]), //==============Code Added By Rahul
                                    Type = "IVR",
                                    Status = "1"
                                };
                                Result = objDalVisitReport.InsertReferenceDocuments(ItemDescription);
                            }
                        }
                        #endregion


                        #region Inspection Activities
                        DataTable InspectionActivitesDashBoard = new DataTable();
                        InspectionActivitesDashBoard = objDalVisitReport.GetInspectionActivities(CallId);
                        if (InspectionActivitesDashBoard.Rows.Count > 0)
                        {
                            foreach (DataRow dr in InspectionActivitesDashBoard.Rows)
                            {
                                var InspectionActivities = new InspectionActivitiesModel
                                {

                                    Stages_Witnessed = Convert.ToString(dr["Stages_Witnessed"]),
                                    PK_IA_ID = Convert.ToInt32(dr["PK_IA_ID"]),
                                    PK_CALL_ID = Convert.ToInt32(Session["PK_Call_ID"]), //==============Code Added By Rahul
                                    Type = "IVR",
                                    Status = "1"
                                };
                                Result = objDalVisitReport.InsertInspectionActivities(InspectionActivities);

                            }
                        }
                        #endregion

                        #region Documents Review
                        DataTable DocumentsReviewBoard = new DataTable();
                        DocumentsReviewBoard = objDalVisitReport.GetDocumentRevieweModelByCall_Id(CallId);
                        if (DocumentsReviewBoard.Rows.Count > 0)
                        {
                            foreach (DataRow dr in DocumentsReviewBoard.Rows)
                            {
                                var InspectionActivities = new DocumentRevieweModel
                                {
                                    Description = Convert.ToString(dr["Description"]),
                                    PK_DR_ID = Convert.ToInt32(dr["PK_DR_ID"]),
                                    PK_CALL_ID = Convert.ToInt32(Session["PK_Call_ID"]), //==============Code Added By Rahul
                                    Type = "IVR",
                                    Status = "1",

                                };
                                Result = objDalVisitReport.InsertDocumentReviewe(InspectionActivities);

                            }
                        }
                        #endregion

                        #region Equipments Details
                        DataTable EquipmentDetailsBoard = new DataTable();
                        EquipmentDetailsBoard = objDalVisitReport.GetEquipmentDetailsModelByCall_Id(CallId);
                        if (EquipmentDetailsBoard.Rows.Count > 0)
                        {
                            foreach (DataRow dr in EquipmentDetailsBoard.Rows)
                            {
                                var InspectionActivities = new EquipmentDetailsModel
                                {

                                    Name_Of_Equipments = Convert.ToString(dr["Name_Of_Equipments"]),
                                    Range = Convert.ToString(dr["Range"]),
                                    Id = Convert.ToString(dr["Id"]),
                                    CalibrationValid_Till_date = Convert.ToString(dr["CalibrationValid_Till_date"]),
                                    Certification_No_Date = Convert.ToString(dr["Certification_No_Date"]),
                                    PK_DOE_Id = Convert.ToInt32(dr["PK_DOE_Id"]),
                                    PK_CALL_ID = Convert.ToInt32(Session["PK_Call_ID"]), //==============Code Added By Rahul
                                    Type = "IVR",
                                    Status = "1",


                                };
                                Result = objDalVisitReport.InsertEquipmentDetails(InspectionActivities);

                            }
                        }
                        #endregion


                    }
                }
                else
                {
                    #region Old Code
                    if (IVR.PK_IVR_ID == 0)
                    {
                        string[] pk_call_idARC_Array = IVR.Pk_callidAVR.Split(',');

                        foreach (var items in IVR.vendorDetails)
                        {

                            //int parsedId = int.Parse(pk_call_id);

                            List<string> collectedIds = new List<string>();
                            List<string> collectedpk_sub = new List<string>();
                            List<string> collectedPo_No = new List<string>();
                            List<string> collectedDate_of_PO = new List<string>();
                            List<string> collectedProject_Name_Location = new List<string>();
                            List<string> collectedEnd_user_Name = new List<string>();
                            List<string> collectedDEC_PMC_EPC_Name = new List<string>();
                            List<string> collectedDEC_PMC_EPC_Assignment_No = new List<string>();

                            foreach (var report in IVR.vendorDetails)
                            {
                                //collectedIds.Add(report.pk_call_id);
                                collectedpk_sub.Add(report.PK_SubJob_IdARC);
                                //IVR.Po_No = report.Po_No;
                                //IVR.Date_of_PO = report.Date_of_PO;
                                //IVR.Project_Name_Location = report.Project_Name_Location;
                                //IVR.End_user_Name = report.End_user_Name;
                                //IVR.DEC_PMC_EPC_Name = report.DEC_PMC_EPC_Name;
                                //IVR.DEC_PMC_EPC_Assignment_No = report.DEC_PMC_EPC_Assignment_No;
                                //IVR.SubJob_No = report.SubJob_No;

                                collectedPo_No.Add(report.Po_No);
                                collectedDate_of_PO.Add(report.Date_of_PO);
                                collectedProject_Name_Location.Add(report.Project_Name_Location);
                                collectedEnd_user_Name.Add(report.End_user_Name);
                                collectedDEC_PMC_EPC_Name.Add(report.DEC_PMC_EPC_Name);
                                collectedDEC_PMC_EPC_Assignment_No.Add(report.DEC_PMC_EPC_Assignment_No);

                            }
                            IVR.Pk_callidAVR = IVR.Pk_callidAVR;
                            IVR.PK_SubJob_IdARC = string.Join(",", collectedpk_sub);
                            IVR.SubJob_No = items.SubJob_No;
                            IVR.PK_SubJob_Id = Convert.ToInt32(items.PK_SubJob_IdARC);
                            IVR.PK_Call_ID = items.PK_Call_ID;
                            //IVR.PK_Call_ID = parsedId;
                            //IVR.Po_No = string.Join(",", collectedPo_No);
                            IVR.Po_No = items.Po_No;
                            IVR.Date_of_PO = string.Join(",", collectedDate_of_PO);
                            IVR.Project_Name_Location = items.Project_Name_Location;
                            IVR.End_user_Name = items.End_user_Name;
                            IVR.DEC_PMC_EPC_Name = items.DEC_PMC_EPC_Name;
                            IVR.DEC_PMC_EPC_Assignment_No = items.DEC_PMC_EPC_Assignment_No;
                            //IVR.Date_of_PO = string.Join(",", collectedDate_of_PO);
                            //IVR.Project_Name_Location = string.Join(",", collectedProject_Name_Location);
                            //IVR.End_user_Name = string.Join(",", collectedEnd_user_Name);
                            //IVR.DEC_PMC_EPC_Name = string.Join(",", collectedDEC_PMC_EPC_Name);
                            //IVR.DEC_PMC_EPC_Assignment_No = string.Join(",", collectedDEC_PMC_EPC_Assignment_No);

                            #region Check valid Activity
                            if (R.Activity != null)
                            {
                                foreach (var item in R.Activity)
                                {
                                    // int CurrentTotal = 
                                    DateTime StDt = Convert.ToDateTime(item.StartDate);
                                    R.DateSE = StDt.ToString("dd/MM/yyyy");
                                    R.StartTime = item.StartTime;
                                    R.EndTime = item.EndTime;
                                    R.TravelTime = item.TravelTime;
                                    R.PK_Call_ID = R.PK_Call_ID;
                                    R.CallId = Convert.ToString(item.CallId);
                                    //10 Aug
                                    Double CurrentTotal = Convert.ToDouble(R.StartTime) + Convert.ToDouble(R.EndTime) + Convert.ToDouble(R.TravelTime);
                                    #region Chk Previous Entry
                                    DataTable DTValidateTT = new DataTable();
                                    {
                                        DTValidateTT = objDalVisitReport.CheckPreviousActivityWithCallId(R.DateSE, R.PK_Call_ID);
                                    }
                                    if (R.PK_Call_ID >= 0)
                                    {
                                        DTValidateTT = objDalVisitReport.CheckPreviousActivityWithCallId(R.DateSE, R.PK_Call_ID);
                                    }
                                    else
                                    {
                                        DTValidateTT = objDalVisitReport.CheckPreviousActivity(R.DateSE);
                                    }
                                    DTValidateTT = objDalVisitReport.CheckPreviousActivity(R.DateSE);

                                    DataTable DTChkLeave = new DataTable();
                                    DTChkLeave = objDalVisitReport.CheckIfLeavePresent(R.DateSE);

                                    if (DTChkLeave.Rows.Count > 0)
                                    {
                                        TempData["ErrLeave"] = "Leave has been added for " + StDt.ToString("dd/MM/yyyy");
                                        return RedirectToAction("VisitReportForm", "VisitReport", IVR.PK_Call_ID);
                                    }
                                    //commented by satish yadav
                                    //else
                                    //{
                                    //    if (DTValidateTT.Rows.Count > 0)
                                    //    {
                                    //        Double PriviousTotal = Convert.ToDouble(DTValidateTT.Rows[0]["StartTime"]) + Convert.ToDouble(DTValidateTT.Rows[0]["EndTime"]) + Convert.ToDouble(DTValidateTT.Rows[0]["TravelTime"]);

                                    //        Double GrandTotal = PriviousTotal + CurrentTotal;


                                    //        if (GrandTotal > 24)
                                    //        {
                                    //            TempData["ErrAll24"] = "Exceeded limit of 24 hours for the day " + StDt.ToString("dd/MM/yyyy");
                                    //            return RedirectToAction("VisitReportForm", "VisitReport", IVR.PK_Call_ID);
                                    //        }
                                    //    }
                                    //    else if (CurrentTotal > 24)
                                    //    {
                                    //        TempData["ErrCurrent24"] = "Exceeded limit of 24 hours for the day " + StDt.ToString("dd/MM/yyyy");
                                    //        return RedirectToAction("VisitReportForm", "VisitReport", IVR.PK_Call_ID);
                                    //    }
                                    //    else
                                    //    {

                                    //    }
                                    //}
                                    //end here
                                    #endregion
                                }
                            }


                            #endregion


                            #region Save Activity 
                            if (R.Activity != null)
                            {
                                foreach (var item in R.Activity)
                                {
                                    int total = Convert.ToInt32(item.StartTime);
                                    R.TotalTime = total;
                                    DateTime StDt = Convert.ToDateTime(item.StartDate);
                                    R.DateSE = StDt.ToString("dd/MM/yyyy");
                                    R.StartTime = item.StartTime;
                                    R.EndTime = item.EndTime;
                                    R.TravelTime = item.TravelTime;
                                    R.Description = item.Description;
                                    R.PK_Call_ID = R.PK_Call_ID;
                                    R.CallId = Convert.ToString(item.CallId);
                                    R.PK_SubJob_Id = Convert.ToString(IVR.PK_SubJob_Id);
                                    R.pk_call_idARC = Convert.ToString(IVR.Pk_callidAVR);
                                    R.Sub_Job = IVR.SubJob_No;
                                    Result = ObjActivity.InsertUpdateActivity(R);

                                    if (Convert.ToInt16(Result) > 0)
                                    {
                                        //ModelState.Clear();
                                        TempData["message"] = "Record Added Successfully...";
                                    }
                                    else
                                    {
                                        TempData["message"] = "Something went Wrong! Please try Again";
                                    }
                                }
                            }



                            #endregion

                            #region File Upload Code 


                            HttpPostedFileBase Imagesection;
                            if (!string.IsNullOrEmpty(Convert.ToString(Request.Files["img_Banner"])))
                            {
                                Imagesection = Request.Files["img_Banner"];
                                if (Imagesection != null && Imagesection.FileName != "")
                                {
                                    IVR.Signatures = CommonControl.FileUpload("Content/JobDocument/", Imagesection);
                                }
                                else
                                {
                                    if (Imagesection.FileName != "")
                                    {
                                        IVR.Signatures = "NoImage.gif";
                                    }
                                }
                            }


                            #endregion
                            int _min = 10000;
                            int _max = 99999;
                            Random _rdm = new Random();
                            int Rjno = _rdm.Next(_min, _max);
                            string ConfirmCode = Convert.ToString(Rjno);

                            int _mins = 100000;
                            int _maxs = 999999;
                            Random _rdms = new Random();
                            int Rjnos = _rdm.Next(_mins, _maxs);
                            string ConfirmSecondCode = Convert.ToString(Rjnos);
                            if (Session["PK_Call_ID"] != null)
                            {
                                IVR.PK_Call_ID = Convert.ToInt32(Session["PK_Call_ID"]); //==============Code Added By Rahul

                                DSJobMasterByQtId = objDalVisitReport.EditInspectionVisitReportByPKCallIDARC(IVR.Pk_callidAVR);
                                if (DSJobMasterByQtId.Tables[0].Rows.Count > 0)
                                {
                                    ObjModelVisitReport.ReportNoName = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["ReportNo"]);
                                    ObjModelVisitReport.SubType = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["JobType"]);
                                }

                            }
                            //IVR.PK_Call_ID = Convert.ToInt32(Session["PK_Call_ID"]); //==============Code Added By Rahul
                            IVR.Report_No = Convert.ToString(ConfirmCode) + ConfirmSecondCode + "-IVR";
                            IVR.ARCReport_No = Convert.ToString(ConfirmCode) + ConfirmSecondCode + "-IVR";
                            IVR.Status = "1";
                            IVR.Type = "IVR";



                            Result = objDalVisitReport.InsertUpdateInspectionvisitARC(IVR);
                            Session["PK_Call_ID"] = null;

                            if (Result != "" && Result != null)
                            {

                                DataTable ReportDashBoard = new DataTable();
                                DataSet UpdateReport = new DataSet();
                                DataSet dtSrNo = new DataSet();
                                string SrNo = "";
                                int intSrNo = 0;
                                ReportModel RM = new ReportModel();
                                int count = 0;
                                //TempData["InsertCompany"] = Result;
                                //objDalVisitReport.UpdateStatus(IVR.PK_Call_ID, "Closed");
                                //return RedirectToAction("UpdateReportsRedirectGeneralTab", new { PK_Call_ID = IVR.PK_Call_ID });

                                #region Insert into Report Master
                                int PK_CALL_ID = Convert.ToInt32(IVR.PK_Call_ID);
                                #region report Count
                                UpdateReport = objDalVisitReport.GetReportByLastId(PK_CALL_ID);
                                if (UpdateReport.Tables[0].Rows.Count > 0)
                                {
                                    RM.PK_RM_ID = Convert.ToInt32(UpdateReport.Tables[0].Rows[0]["PK_RM_ID"]);
                                    RM.Report = Convert.ToString(UpdateReport.Tables[0].Rows[0]["Report"]);
                                    //RM.ImageReport = Convert.ToString(UpdateReport.Tables[0].Rows[0]["ImageReport"]);
                                }

                                #region report Count
                                ReportDashBoard = objDalVisitReport.GetReportByCall_Id(PK_CALL_ID);
                                if (ReportDashBoard.Rows.Count > 0)
                                {
                                    int counts = ReportDashBoard.Rows.Count;
                                    count = counts - 1;
                                }
                                string countNo = Convert.ToString(count);
                                #endregion
                                #endregion





                                #region Generate no
                                if (RM.Report == null)
                                {

                                    dtSrNo = objDalVisitReport.GetSrNo(IVR.SubJob_No);
                                    if (dtSrNo.Tables[0].Rows.Count > 0)
                                    {
                                        SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["SrNo"]);
                                        intSrNo = Convert.ToInt32(SrNo) + 1;
                                    }
                                    else
                                    {
                                        intSrNo = 1;
                                    }
                                    //RM.ReportNo = "IVR-" + ObjModelVisitReport.SubJob_No + "-" + SrNo + "-Rev." + countNo;
                                    RM.ReportNo = "IVR-" + IVR.SubJob_No + "-" + intSrNo + "-Rev." + countNo;


                                }
                                else
                                {
                                    //dtSrNo = objDalVisitReport.GetReportNo(RM.Report);
                                    dtSrNo = objDalVisitReport.GetReportNo(Convert.ToString(RM.PK_RM_ID));
                                    if (dtSrNo.Tables[0].Rows.Count > 0)
                                    {
                                        SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["ReportNo"]);
                                        RM.ReportNo = SrNo;
                                    }


                                }
                                #endregion



                                string[] datafile = Directory.GetFiles(Server.MapPath("~/Content/" + IVR.Call_No));
                                dtSrNo = objDalVisitReport.GetSrNo(IVR.SubJob_No);
                                if (dtSrNo.Tables[0].Rows.Count > 0)
                                {
                                    SrNo = Convert.ToString(dtSrNo.Tables[0].Rows[0]["SrNo"]);

                                }

                                // string finalReportName = "IVR-" + ObjModelVisitReport.SubJob_No.Replace('/', '_') + "-" + SrNo + "-Rev." + countNo.ToString() + ".pdf";
                                //string finalReportName = RM.ReportNo + ".pdf";
                                string finalReportName = RM.ReportNo.Replace('/', '_') + ".pdf"; //23 Feb 2022


                                string ReportName = RM.Report;
                                string ReportNames = "";
                                if (RM.PK_RM_ID != 0)
                                {

                                    RM.Type = "IVR";
                                    RM.Status = "1";
                                    RM.ImageReport = ReportNames;
                                    RM.Report = finalReportName;
                                    RM.ReportName = ReportName;
                                    RM.PK_CALL_ID = PK_CALL_ID;
                                    RM.SubJob_No = IVR.SubJob_No;
                                    RM.PK_SubJob_Id = IVR.PK_SubJob_Id;
                                    RM.ProjectName = IVR.End_user_Name;
                                    RM.Po_No = IVR.Po_No;
                                    RM.Report_No = IVR.Report_No;
                                    Result = objDalVisitReport.InsertUpdateReport(RM);
                                    if (Result != "" && Result != null)
                                    {
                                        TempData["InsertCompany"] = Result;
                                    }
                                }
                                else
                                {
                                    RM.Type = "IVR";
                                    RM.Status = "1";
                                    RM.ImageReport = ReportNames;
                                    RM.Report = finalReportName;
                                    RM.ReportName = ReportName;
                                    RM.Pk_callidAVR = IVR.Pk_callidAVR;
                                    RM.PK_SubJob_IdARC = IVR.PK_SubJob_IdARC;
                                    RM.PK_CALL_ID = PK_CALL_ID;
                                    RM.SubJob_No = IVR.SubJob_No;
                                    RM.PK_SubJob_Id = IVR.PK_SubJob_Id;
                                    RM.ProjectName = IVR.End_user_Name;
                                    RM.Po_No = IVR.Po_No;
                                    RM.Report_No = IVR.Report_No;

                                    Result = objDalVisitReport.InsertUpdateReport(RM);


                                    //List<string> collectedIds = new List<string>();
                                    //List<string> collectedpk_sub = new List<string>();
                                    //List<string> collectedPo_No = new List<string>();
                                    //List<string> collectedDate_of_PO = new List<string>();
                                    //List<string> collectedProject_Name_Location = new List<string>();
                                    //List<string> collectedEnd_user_Name = new List<string>();
                                    //List<string> collectedDEC_PMC_EPC_Name = new List<string>();
                                    //List<string> collectedDEC_PMC_EPC_Assignment_No = new List<string>();

                                    //foreach (var report in IVR.lst1)
                                    //{
                                    //    collectedIds.Add(report.pk_call_idARC);
                                    //    collectedpk_sub.Add(report.PK_SubJob_IdARC);
                                    //    collectedPo_No.Add(report.Po_No);
                                    //    collectedDate_of_PO.Add(report.Date_of_PO);
                                    //    collectedProject_Name_Location.Add(report.Project_Name_Location);
                                    //    collectedEnd_user_Name.Add(report.End_user_Name);
                                    //    collectedDEC_PMC_EPC_Name.Add(report.DEC_PMC_EPC_Name);
                                    //    collectedDEC_PMC_EPC_Assignment_No.Add(report.DEC_PMC_EPC_Assignment_No);

                                    //}
                                    //IVR.pk_call_idARC = string.Join(",", collectedIds);
                                    //IVR.PK_SubJob_IdARC = string.Join(",", collectedpk_sub);
                                    //IVR.Po_No = string.Join(",", collectedPo_No);
                                    //IVR.Date_of_PO = string.Join(",", collectedDate_of_PO);
                                    //IVR.Project_Name_Location = string.Join(",", collectedProject_Name_Location);
                                    //IVR.End_user_Name = string.Join(",", collectedEnd_user_Name);
                                    //IVR.DEC_PMC_EPC_Name = string.Join(",", collectedDEC_PMC_EPC_Name);
                                    //IVR.DEC_PMC_EPC_Assignment_No = string.Join(",", collectedDEC_PMC_EPC_Assignment_No);

                                }
                            }
                        }

                        DataSet dtSrNo1 = new DataSet();
                        DataTable Report = new DataTable();
                        string SrNo1 = "";
                        int intSrNo1 = 0;
                        ReportModel RMS = new ReportModel();
                        int count1 = 0;

                        //Report = objDalVisitReport.GetReport(IVR.Pk_callidAVR);
                        //if (Report.Rows.Count > 0)
                        //{
                        //    int counts = Report.Rows.Count;
                        //    count1 = counts - 1;
                        //}
                        //string countNovalue = Convert.ToString(count1);

                        dtSrNo1 = objDalVisitReport.GetSrNojob(IVR.Sap_And_Controle_No);
                        if (dtSrNo1.Tables[0].Rows.Count > 0)
                        {
                            SrNo1 = Convert.ToString(dtSrNo1.Tables[0].Rows[0]["SrNo"]);
                            intSrNo1 = Convert.ToInt32(SrNo1) + 1;
                        }
                        else
                        {
                            intSrNo1 = 1;
                        }
                        //RM.ReportNo = "IVR-" + ObjModelVisitReport.SubJob_No + "-" + SrNo + "-Rev." + countNo;
                        RMS.ARCReportNo = "IVR-" + IVR.Sap_And_Controle_No + "-" + intSrNo1 + "-Rev." ;

                        string finalARCReportName = RMS.ARCReportNo.Replace('/', '_') + ".pdf"; //23 Feb 2022


                        string ARCReportNames = "";
                        //if (RM.PK_RM_ID != 0)
                        //{

                        //    RM.Type = "IVR";
                        //    RM.Status = "1";
                        //    RM.ImageReport = ReportNames;
                        //    RM.Report = finalReportName;
                        //    RM.ReportName = ReportName;
                        //    RM.PK_CALL_ID = PK_CALL_ID;
                        //    RM.SubJob_No = IVR.SubJob_No;
                        //    RM.PK_SubJob_Id = IVR.PK_SubJob_Id;
                        //    RM.ProjectName = IVR.End_user_Name;
                        //    RM.Po_No = IVR.Po_No;
                        //    RM.Report_No = IVR.Report_No;
                        //    Result = objDalVisitReport.InsertUpdateReport(RM);
                        //    if (Result != "" && Result != null)
                        //    {
                        //        TempData["InsertCompany"] = Result;
                        //    }
                        //}
                        //else
                        //{

                        //    //RM.ImageReport = ReportNames;
                        //    RM.ARCReportNo = finalARCReportName;
                        //    // RM.ReportName = ReportName;
                        //    RM.pk_call_idARC = IVR.Pk_callidAVR;
                        //    RM.PK_SubJob_IdARC = IVR.PK_SubJob_IdARC;
                        //    RM.ProjectName = IVR.Project_Name_Location;
                        //    RM.Po_No = IVR.Po_No;
                        //    RM.Date_of_po = IVR.Date_of_PO;

                        //    Result = objDalVisitReport.UpdateReport(RM);
                        //IVR.ARCReport_No = finalARCReportName;

                        //Result = objDalVisitReport.UpdateInspectionvisit(IVR);
                        //}

                        Result = objDalVisitReport.UpdateReport(IVR.Pk_callidAVR, finalARCReportName);




                        if (Result != "" && Result != null)
                        {
                            TempData["InsertCompany"] = Result;
                        }

                        RMData.Pk_callidAVR = IVR.Pk_callidAVR;
                        return RedirectToAction("VisitReportFormArcJob", RMData);
                        //  return RedirectToAction("UpdateReportsRedirectGeneralTab", new { PK_Call_ID = IVR.PK_Call_ID });
                        #endregion



                        //return RedirectToAction("UpdateReports", new { PK_Call_ID = IVR.PK_Call_ID });

                        // return RedirectToAction("VisitReportForm", new { PK_Call_ID = IVR.PK_Call_ID });    //24-Feb-2020


                    }
                    else
                    {
                        #region File Upload Code 


                        HttpPostedFileBase Imagesection;
                        if (!string.IsNullOrEmpty(Convert.ToString(Request.Files["img_Banner"])))
                        {
                            Imagesection = Request.Files["img_Banner"];
                            if (Imagesection != null && Imagesection.FileName != "")
                            {
                                IVR.Signatures = CommonControl.FileUpload("Content/JobDocument/", Imagesection);
                            }
                            else
                            {
                                if (Imagesection.FileName != "")
                                {
                                    IVR.Signatures = "NoImage.gif";
                                }
                            }
                        }


                        #endregion



                        #region Check valid Activity
                        if (R.Activity != null)
                        {
                            foreach (var item in R.Activity)
                            {
                                DateTime StDt = Convert.ToDateTime(item.StartDate);
                                R.DateSE = StDt.ToString("dd/MM/yyyy");
                                R.StartTime = item.StartTime;
                                R.EndTime = item.EndTime;
                                R.TravelTime = item.TravelTime;
                                R.Id = item.Id;

                                Double CurrentTotal = Convert.ToDouble(R.StartTime) + Convert.ToDouble(R.EndTime) + Convert.ToDouble(R.TravelTime);
                                #region Chk Previous Entry
                                DataTable DTValidateTT = new DataTable();
                                DTValidateTT = objDalVisitReport.CheckPreviousActivity(R.DateSE);

                                DataTable DTChkLeave = new DataTable();
                                DTChkLeave = objDalVisitReport.CheckIfLeavePresent(R.DateSE);

                                if (DTChkLeave.Rows.Count > 0)
                                {
                                    TempData["ErrLeave"] = "Leave is added for the day" + StDt.ToString("dd/MM/yyyy");
                                    return RedirectToAction("VisitReportForm", "VisitReport", new { PK_Call_ID = IVR.PK_Call_ID });
                                }
                                ////else
                                ////{
                                ////    if (R.Id > 0)
                                ////    {
                                ////       if (CurrentTotal > 24)
                                ////       {
                                ////           TempData["ErrCurrent24"] = "You have excided 24 hrs for the day of " + StDt.ToString("dd/MM/yyyy");
                                ////           return RedirectToAction("VisitReportForm", "VisitReport", new { PK_Call_ID = IVR.PK_Call_ID });
                                ////       }
                                ////       else
                                ////       {

                                ////       }

                                ////    }
                                ////    else
                                ////    {
                                ////        if (DTValidateTT.Rows.Count > 0)
                                ////        {
                                ////            Double PriviousTotal = Convert.ToDouble(DTValidateTT.Rows[0]["StartTime"]) + Convert.ToDouble(DTValidateTT.Rows[0]["EndTime"]) + Convert.ToDouble(DTValidateTT.Rows[0]["TravelTime"]);
                                ////            Double GrandTotal = PriviousTotal + CurrentTotal;
                                ////            if (GrandTotal > 24)
                                ////            {
                                ////                TempData["ErrAll24"] = "You have excided 24 hrs for the day of " + StDt.ToString("dd/MM/yyyy");
                                ////                return RedirectToAction("VisitReportForm", "VisitReport", new { PK_Call_ID = IVR.PK_Call_ID });
                                ////            }
                                ////        }
                                ////        else if (CurrentTotal > 24)
                                ////        {
                                ////            TempData["ErrCurrent24"] = "You have excided 24 hrs for the day of " + StDt.ToString("dd/MM/yyyy");
                                ////            return RedirectToAction("VisitReportForm", "VisitReport", new { PK_Call_ID = IVR.PK_Call_ID });
                                ////        }
                                ////        else
                                ////        {

                                ////        }
                                ////    }
                                ////}
                                #endregion
                            }
                        }


                        #endregion

                        #region Update Activity 
                        if (R.Activity != null)
                        {
                            foreach (var item in R.Activity)
                            {
                                int total = Convert.ToInt32(item.StartTime);
                                R.TotalTime = total;
                                DateTime StDt = Convert.ToDateTime(item.StartDate);
                                R.DateSE = StDt.ToString("dd/MM/yyyy");
                                R.StartTime = item.StartTime;
                                R.EndTime = item.EndTime;
                                R.TravelTime = item.TravelTime;
                                R.Description = item.Description;
                                R.PK_Call_ID = R.PK_Call_ID;
                                R.Id = item.Id;
                                Result = ObjActivity.InsertUpdateActivity(R);

                                if (Convert.ToInt16(Result) > 0)
                                {
                                    //ModelState.Clear();
                                    TempData["message"] = "Record Added Successfully...";
                                }
                                else
                                {
                                    TempData["message"] = "Something went Wrong! Please try Again";
                                }
                            }
                        }



                        #endregion

                        int _min = 10000;
                        int _max = 99999;
                        Random _rdm = new Random();
                        int Rjno = _rdm.Next(_min, _max);
                        string ConfirmCode = Convert.ToString(Rjno);

                        int _mins = 100000;
                        int _maxs = 999999;
                        Random _rdms = new Random();
                        int Rjnos = _rdm.Next(_mins, _maxs);
                        string ConfirmSecondCode = Convert.ToString(Rjnos);
                        if (Session["PK_Call_ID"] != null)
                        {
                            IVR.PK_Call_ID = Convert.ToInt32(Session["PK_Call_ID"]); //==============Code Added By Rahul


                        }

                        DSJobMasterByQtId = objDalVisitReport.EditInspectionVisitReportByPKCallIDARC(IVR.Pk_callidAVR);
                        IVR.ReportNoName = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["ReportNo"]);
                        IVR.Report_No = Convert.ToString(ConfirmCode) + ConfirmSecondCode + "-IVR";
                        IVR.Status = "1";
                        IVR.Type = "IVR";
                        IVR.SubType = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["JobType"]);
                        IVR.IsCustomerSpecificReportNumber = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["IsCustomerSpecificReportNumber"]);
                        //IVR.CustomerSpecificReportNumber = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["CustomerSpecificReportNumber"]);
                        IVR.CustomerSpecificReportNumber = IVR.CustomerSpecificReportNumber;//Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["CustomerSpecificReportNumber"]);
                        #region  Excel Upload code
                        Random rnd = new Random();
                        int myRandomNo = rnd.Next(10000000, 99999999);
                        string strmyRandomNo = Convert.ToString(myRandomNo);


                        HttpPostedFileBase files = FileUpload1;

                        if (FileUpload1 != null)
                        {


                            if (/*files.ContentLength > 0*/  files != null && !string.IsNullOrEmpty(files.FileName) || files.FileName.Contains(".xlsx") && files.FileName.Contains(".xlsm"))
                            {
                                GC.Collect();
                                GC.WaitForPendingFinalizers();
                                //string Result = string.Empty;
                                string filePath = string.Empty;
                                // HttpPostedFileBase files = FileUpload;
                                string fileName = files.FileName;
                                string fileContentType = files.ContentType;
                                byte[] fileBytes = new byte[files.ContentLength];
                                var data1 = files.InputStream.Read(fileBytes, 0, Convert.ToInt32(files.ContentLength));
                                var package = new ExcelPackage(files.InputStream);  //===========Go to Manage Nuget in Install ExcellPackge 

                                #region save file to dir
                                //string path = Server.MapPath("~/Content/JobDocument/");
                                string path = Server.MapPath("~/IVRIRNExcel/");
                                if (!Directory.Exists(path))
                                {
                                    Directory.CreateDirectory(path);
                                }


                                filePath = path + Path.GetFileName(strmyRandomNo + FileUpload1.FileName);



                                if (System.IO.File.Exists(filePath))
                                {
                                    System.IO.File.Delete(filePath);


                                }

                                string extension = Path.GetExtension(strmyRandomNo + FileUpload1.FileName);
                                FileUpload1.SaveAs(filePath);


                                filePath = path + Path.GetFileName(strmyRandomNo + FileUpload1.FileName);
                                #endregion





                                Microsoft.Office.Interop.Excel.Application xlApp = new Microsoft.Office.Interop.Excel.Application();
                                Microsoft.Office.Interop.Excel.Workbook excelBook = xlApp.Workbooks.Open(filePath); ;//xlApp.Workbooks.Open(filePath);
                                String[] excelSheets = new String[excelBook.Worksheets.Count];
                                // var Reader = new StreamReader(File.Pa)

                                int i = 0;
                                foreach (Microsoft.Office.Interop.Excel.Worksheet wSheet in excelBook.Worksheets)
                                {
                                    excelSheets[i] = wSheet.Name;
                                    int RowsCount = wSheet.UsedRange.Rows.Count;// - 1;
                                    if (excelSheets[i] == "General ")
                                    {

                                    }
                                    else if (excelSheets[i] == "Item Description")
                                    {
                                        for (int j = 2; j <= RowsCount; j++)
                                        {
                                            //Convert.ToString(workSheet.Cells[rowIterator, 1].Value);
                                            IDM.Po_Item_No = Convert.ToString(((Microsoft.Office.Interop.Excel.Range)wSheet.Cells[j, 1]).Value);
                                            if (IDM.Po_Item_No != null)
                                            {
                                                IDM.Item_Code = Convert.ToString(((Microsoft.Office.Interop.Excel.Range)wSheet.Cells[j, 2]).Value);
                                                IDM.ItemCode_Description = Convert.ToString(((Microsoft.Office.Interop.Excel.Range)wSheet.Cells[j, 3]).Value);
                                                String Unit = Convert.ToString(((Microsoft.Office.Interop.Excel.Range)wSheet.Cells[j, 4]).Value);
                                                if (Unit == "number") { IDM.Unit = "1"; }
                                                else if (Unit == "meter") { IDM.Unit = "2"; }
                                                else if (Unit == "km") { IDM.Unit = "3"; }
                                                else if (Unit == "meter (number)") { IDM.Unit = "4"; }
                                                else if (Unit == "km (number)") { IDM.Unit = "5"; }
                                                else if (Unit == "each") { IDM.Unit = "6"; }
                                                else if (Unit == "Piece") { IDM.Unit = "7"; }
                                                else if (Unit == "Test sample") { IDM.Unit = "8"; }
                                                else if (Unit == "AU - All Unit") { IDM.Unit = "9"; }
                                                else if (Unit == "lot") { IDM.Unit = "10"; }
                                                else if (Unit == "Set") { IDM.Unit = "11"; }
                                                else if (Unit == "Running Meter") { IDM.Unit = "12"; }
                                                else if (Unit == "kg") { IDM.Unit = "13"; }
                                                else if (Unit == "metric ton (tonne)") { IDM.Unit = "14"; }
                                                else if (Unit == "ton") { IDM.Unit = "15"; }
                                                else if (Unit == "cubic millimetre") { IDM.Unit = "16"; }
                                                else if (Unit == "cubic centimeter") { IDM.Unit = "17"; }
                                                else if (Unit == "cubic meter") { IDM.Unit = "18"; }
                                                else if (Unit == "cubic inch") { IDM.Unit = "19"; }
                                                else if (Unit == "cubic foot") { IDM.Unit = "20"; }
                                                else if (Unit == "mm") { IDM.Unit = "21"; }
                                                else if (Unit == "cm") { IDM.Unit = "22"; }
                                                else if (Unit == "in") { IDM.Unit = "23"; }
                                                else if (Unit == "foot") { IDM.Unit = "24"; }
                                                else if (Unit == "mile") { IDM.Unit = "25"; }
                                                else if (Unit == "yard") { IDM.Unit = "26"; }
                                                else if (Unit == "liter") { IDM.Unit = "27"; }
                                                else if (Unit == "kl") { IDM.Unit = "28"; }
                                                else if (Unit == "cl") { IDM.Unit = "29"; }
                                                else if (Unit == "ml") { IDM.Unit = "30"; }
                                                else if (Unit == "g") { IDM.Unit = "31"; }
                                                else if (Unit == "lb") { IDM.Unit = "32"; }
                                                else if (Unit == "oz") { IDM.Unit = "33"; }
                                                else if (Unit == "Sq. mm") { IDM.Unit = "34"; }
                                                else if (Unit == "Sq. cm") { IDM.Unit = "35"; }
                                                else if (Unit == "Sq. meter") { IDM.Unit = "36"; }
                                                else if (Unit == "Sq. in") { IDM.Unit = "37"; }
                                                else if (Unit == "Sq. foot") { IDM.Unit = "38"; }
                                                else
                                                {
                                                    IDM.Unit = "";

                                                }

                                                IDM.Po_Quantity = Convert.ToString(((Microsoft.Office.Interop.Excel.Range)wSheet.Cells[j, 5]).Value);
                                                IDM.Offered_Quantity = Convert.ToString(((Microsoft.Office.Interop.Excel.Range)wSheet.Cells[j, 6]).Value);
                                                IDM.Accepted_Quantity = Convert.ToString(((Microsoft.Office.Interop.Excel.Range)wSheet.Cells[j, 7]).Value);
                                                IDM.Status = "1";
                                                IDM.Type = "IVR";
                                                IDM.PK_CALL_ID = IVR.PK_Call_ID;
                                                Result = objDalVisitReport.InsertUpdateItemDescription(IDM);
                                            }

                                        }
                                    }
                                    else if (excelSheets[i] == "Reference Documents")
                                    {
                                        for (int j = 2; j <= RowsCount; j++)
                                        {
                                            string SrNo = Convert.ToString(((Microsoft.Office.Interop.Excel.Range)wSheet.Cells[j, 1]).Value);
                                            if (SrNo != null)
                                            {
                                                string DocName = Convert.ToString(((Microsoft.Office.Interop.Excel.Range)wSheet.Cells[j, 2]).Value);
                                                if (DocName == "Others (Specify)")
                                                {
                                                    RD.Document_Name = "Others(Specify)";
                                                }
                                                else
                                                {
                                                    RD.Document_Name = DocName;
                                                }
                                                RD.Document_No = Convert.ToString(((Microsoft.Office.Interop.Excel.Range)wSheet.Cells[j, 3]).Value);
                                                RD.VendorDocumentNumber = Convert.ToString(((Microsoft.Office.Interop.Excel.Range)wSheet.Cells[j, 4]).Value);
                                                RD.Approval_Status = Convert.ToString(((Microsoft.Office.Interop.Excel.Range)wSheet.Cells[j, 5]).Value);
                                                RD.PK_CALL_ID = IVR.PK_Call_ID;
                                                Result = objDalVisitReport.InsertUpdateReferenceDocuments(RD);
                                            }


                                        }
                                    }
                                    else if (excelSheets[i] == "Stages Witnessed")
                                    {
                                        for (int j = 2; j <= RowsCount; j++)
                                        {
                                            string StagesWitness = Convert.ToString(((Microsoft.Office.Interop.Excel.Range)wSheet.Cells[j, 1]).Value);
                                            if (StagesWitness != null)
                                            {
                                                StW.Type = "IVR";
                                                StW.Status = "1";
                                                StW.Stages_Witnessed = Convert.ToString(((Microsoft.Office.Interop.Excel.Range)wSheet.Cells[j, 1]).Value);
                                                StW.PK_CALL_ID = IVR.PK_Call_ID;
                                                Result = objDalVisitReport.InsertUpdateInspectionActivities(StW);
                                            }


                                        }
                                    }
                                    else if (excelSheets[i] == "Document reviewed")
                                    {
                                        for (int j = 2; j <= RowsCount; j++)
                                        {
                                            string DocumentRe = Convert.ToString(((Microsoft.Office.Interop.Excel.Range)wSheet.Cells[j, 1]).Value);
                                            if (DocumentRe != null)
                                            {
                                                DR.Type = "IVR";
                                                DR.Status = "1";
                                                DR.PK_CALL_ID = IVR.PK_Call_ID;
                                                DR.Description = Convert.ToString(((Microsoft.Office.Interop.Excel.Range)wSheet.Cells[j, 1]).Value);
                                                Result = objDalVisitReport.InsertUpdateDocumentReviewe(DR);
                                            }
                                        }
                                    }
                                    else if (excelSheets[i] == "Details of measuring instrument")
                                    {

                                        for (int j = 2; j <= RowsCount; j++)
                                        {

                                            string SrNo = Convert.ToString(((Microsoft.Office.Interop.Excel.Range)wSheet.Cells[j, 1]).Value);
                                            if (SrNo != null)
                                            {
                                                ED.Type = "IVR";
                                                ED.Status = "1";
                                                ED.PK_CALL_ID = IVR.PK_Call_ID;
                                                ED.Name_Of_Equipments = Convert.ToString(((Microsoft.Office.Interop.Excel.Range)wSheet.Cells[j, 2]).Value);
                                                ED.Range = Convert.ToString(((Microsoft.Office.Interop.Excel.Range)wSheet.Cells[j, 3]).Value);
                                                ED.Id = Convert.ToString(((Microsoft.Office.Interop.Excel.Range)wSheet.Cells[j, 4]).Value);
                                                ED.CalibrationValid_Till_date = Convert.ToString(((Microsoft.Office.Interop.Excel.Range)wSheet.Cells[j, 5]).Value);
                                                ED.Certification_No_Date = Convert.ToString(((Microsoft.Office.Interop.Excel.Range)wSheet.Cells[j, 6]).Value);

                                                string strNABLseenote1 = Convert.ToString(((Microsoft.Office.Interop.Excel.Range)wSheet.Cells[j, 7]).Value);
                                                if (strNABLseenote1 == "Yes")
                                                {
                                                    ED.NABLseenote1 = Convert.ToBoolean(true);

                                                }
                                                else if (strNABLseenote1 == "No")
                                                {
                                                    ED.NABLseenote1 = Convert.ToBoolean(false);

                                                }
                                                else
                                                {
                                                    ED.NABLseenote1 = Convert.ToBoolean(false);
                                                }

                                                string StrNonNABLseenote2 = Convert.ToString(((Microsoft.Office.Interop.Excel.Range)wSheet.Cells[j, 8]).Value);
                                                if (StrNonNABLseenote2 == "Yes")
                                                {
                                                    ED.NonNABLseenote2 = Convert.ToBoolean(true);

                                                }
                                                else if (StrNonNABLseenote2 == "No")
                                                {
                                                    ED.NonNABLseenote2 = Convert.ToBoolean(false);

                                                }
                                                else
                                                {
                                                    ED.NonNABLseenote2 = Convert.ToBoolean(false);
                                                }


                                                //ED.NonNABLseenote2 = Convert.ToBoolean(((Microsoft.Office.Interop.Excel.Range)wSheet.Cells[j, 8]).Value);


                                                //string strNABLseenote1 = Convert.ToString(((Microsoft.Office.Interop.Excel.Range)wSheet.Cells[j, 7]).Value);
                                                //if(strNABLseenote1=="Yes")
                                                //{
                                                //    ED.NABLseenote1 = "Yes";
                                                //}
                                                //string strNonNABLseenote2 = Convert.ToString(((Microsoft.Office.Interop.Excel.Range)wSheet.Cells[j, 8]).Value);
                                                //if (strNonNABLseenote2 == "Yes")
                                                //{
                                                //    ED.NonNABLseenote2 = Convert.ToString(((Microsoft.Office.Interop.Excel.Range)wSheet.Cells[j, 7]).Value);
                                                //}



                                                Result = objDalVisitReport.InsertUpdateEquipmentDetails(ED);
                                            }

                                        }
                                    }
                                    else if (excelSheets[i] == "Areas of concerns")
                                    {
                                        for (int j = 2; j <= RowsCount; j++)
                                        {
                                            string AreasOfConcerns = Convert.ToString(((Microsoft.Office.Interop.Excel.Range)wSheet.Cells[j, 1]).Value);
                                            if (AreasOfConcerns != null && AreasOfConcerns != "")
                                            {
                                                IVR.PK_Call_ID = IVR.PK_Call_ID;
                                                IVR.Areas_Of_Concerns = AreasOfConcerns;
                                                Result = objDalVisitReport.InsertAreasOfConcern(IVR);
                                            }
                                        }

                                    }
                                    else if (excelSheets[i] == "Pending Activities")
                                    {
                                        for (int j = 2; j <= RowsCount; j++)
                                        {
                                            string PendingActivity = Convert.ToString(((Microsoft.Office.Interop.Excel.Range)wSheet.Cells[j, 1]).Value);
                                            if (PendingActivity != null && PendingActivity != "")
                                            {
                                                IVR.PK_Call_ID = IVR.PK_Call_ID;
                                                IVR.Areas_Of_Concerns = PendingActivity;
                                                Result = objDalVisitReport.InsertPendingActivities(IVR);
                                            }
                                        }
                                    }
                                    else if (excelSheets[i] == "Conclusion ")
                                    {

                                    }


                                    i++;
                                }
                                excelBook.Close();


                            }
                            else
                            {
                                Result = objDalVisitReport.InsertUpdateInspectionvisit(IVR);
                            }
                        }

                        #endregion
                        Result = objDalVisitReport.InsertUpdateInspectionvisit(IVR);
                        if (Result != null && Result != "")
                        {
                            objDalVisitReport.UpdateStatus(IVR.PK_Call_ID, "Closed");

                            #region Get Activity Data  
                            ds = ObjActivity.GetData(Convert.ToInt32(IVR.PK_Call_ID)); // Get data from callid (tblnoninspectionActivity)

                            if (ds.Tables[0].Rows.Count != 0)
                            {
                                foreach (DataRow dr in ds.Tables[0].Rows) // loop for adding add from dataset to list<modeldata>  
                                {
                                    lmd.Add(new NonInspectionActivity
                                    {
                                        Id = Convert.ToInt32(dr["Id"]),
                                        ActivityType = Convert.ToString(dr["ActivityType"]),
                                        Location = Convert.ToString(dr["Location"]),
                                        DateSE = Convert.ToString(dr["DateSE"]),
                                        //EndDate = Convert.ToString(dr["enddate"]),
                                        //StartDate = Convert.ToString(dr["StartDate"]),
                                        //EndDate = Convert.ToString(dr["EndDate"]),
                                        ServiceCode = Convert.ToString(dr["ServiceCode"]),
                                        Description = Convert.ToString(dr["Description"]),
                                        StartTime = Convert.ToDouble(dr["StartTime"]),
                                        EndTime = Convert.ToDouble(dr["EndTime"]),
                                        Attachment = Convert.ToString(dr["Attachment"]),
                                        TravelTime = Convert.ToDouble(dr["TravelTime"])

                                    });
                                }

                                ViewBag.Dates = lmd;
                            }
                            #endregion 


                            TempData["UpdateCompany"] = Result;
                            return View(IVR);
                        }

                    }
                    #endregion
                }

            }
            catch (Exception ex)
            {
                TempData["Message"] = ex.Message.ToString();
                string Error = ex.Message.ToString();
                return RedirectToAction("ErrorPage", "InspectionReleaseNote", new { @Error = Error });
            }

            if (Session["PK_Call_ID"] != null)
            {
                InspectionvisitReportModel IVRNew = new InspectionvisitReportModel();
                IVRNew.PK_Call_ID = Convert.ToInt32(Session["PK_Call_ID"]);
                Session["PK_Call_ID"] = null;
                return RedirectToAction("VisitReportForm", IVRNew);
            }
            else
            {
                Session["PK_Call_ID"] = null;
                return View(IVR);
            }

        }

        
        [HttpGet]
        public ActionResult Visittest(int? PK_Call_ID, int? PK_RM_ID, string status, InspectionvisitReportModel abc)
        {
            //Session["PK_Call_ID"] = null;
            //PK_SubJob_Id = 1;
            // List<EnquiryMaster> lstEnquiryMast = new List<EnquiryMaster>();
            //var Data = objDalVisitReport.GetBranchList();
            //ViewBag.SubCatlist = new SelectList(Data, "Br_Id", "Branch_Name");

            Session["VisitReportNo"] = null;

            int? ids = PK_Call_ID;
            if (Session["PK_Call_ID"] != null)
            {
                #region

                PK_Call_ID = Convert.ToInt32(Session["PK_Call_ID"]);

                //                objDalVisitReport.UpdateStatus(PK_Call_ID, status);


                //ViewBag.SubCatlist = 0;

                if (PK_Call_ID != 0 && PK_Call_ID != null)
                {
                    DataSet DSJobMasterByQtId = new DataSet();
                    DataSet DSEditQutationTabledata = new DataSet();

                    DSJobMasterByQtId = objDalVisitReport.EditInspectionVisitReportByPKCallID(PK_Call_ID);
                    //DSJobMasterByQtId = objDalVisitReport.EditInspectionVisitReportByPKCallID1(PK_Call_ID,PK_RM_ID);

                    if (DSJobMasterByQtId.Tables[0].Rows.Count > 0)
                    {

                        ObjModelVisitReport.Branch = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Branch"]);
                        ObjModelVisitReport.Sap_And_Controle_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Sap_And_Controle_No"]);
                        ObjModelVisitReport.PK_IVR_ID = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["PK_IVR_ID"]);
                        ObjModelVisitReport.Project_Name_Location = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Project_Name_Location"]);
                        ObjModelVisitReport.Address_Of_Inspection = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Address_Of_Inspection"]);
                        ObjModelVisitReport.End_user_Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["End_user_Name"]);
                        ObjModelVisitReport.Vendor_Name_Location = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Vendor_Name_Location"]);
                        ObjModelVisitReport.PK_Call_ID = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["PK_Call_ID"]);
                        ObjModelVisitReport.Notification_Name_No_Date = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Notification_Name_No_Date"]);

                        ObjModelVisitReport.Date_Of_Inspection = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Date_Of_Inspection"]);
                        ObjModelVisitReport.Client_Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Client_Name"]);
                        ObjModelVisitReport.DEC_PMC_EPC_Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["DEC_PMC_EPC_Name"]);
                        ObjModelVisitReport.DEC_PMC_EPC_Assignment_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["DEC_PMC_EPC_Assignment_No"]);
                        ObjModelVisitReport.Po_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Po_No"]);
                        ObjModelVisitReport.Sub_Vendor_Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Sub_Vendor_Name"]);
                        ObjModelVisitReport.Po_No_SubVendor = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Po_No_SubVendor"]);

                        int kick = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Kick_Off_Pre_Inspection"]);
                        ObjModelVisitReport.Kick_Off_Pre_Inspection = Convert.ToBoolean(kick);

                        int Mi = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Material_identification"]);
                        ObjModelVisitReport.Material_identification = Convert.ToBoolean(Mi);

                        int Interim_Stages = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Interim_Stages"]);
                        ObjModelVisitReport.Interim_Stages = Convert.ToBoolean(Interim_Stages);

                        int Document_review = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Document_review"]);
                        ObjModelVisitReport.Document_review = Convert.ToBoolean(Document_review);

                        int Final_Inspection = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Final_Inspection"]);
                        ObjModelVisitReport.Final_Inspection = Convert.ToBoolean(Final_Inspection);

                        int Re_inspection = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Re_inspection"]);
                        ObjModelVisitReport.Re_inspection = Convert.ToBoolean(Re_inspection);

                        ObjModelVisitReport.Conclusion = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Conclusion"]);
                        ObjModelVisitReport.Pending_Activites = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Pending_Activites"]);
                        ObjModelVisitReport.Identification_Of_Inspected = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Identification_Of_Inspected"]);
                        ObjModelVisitReport.Identification_Of_Inspected_AfterSave = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Identification_Of_Inspected"]);

                        ObjModelVisitReport.Areas_Of_Concerns = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Areas_Of_Concerns"]);
                        ObjModelVisitReport.Non_Conformities_raised = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Non_Conformities_raised"]);
                        ObjModelVisitReport.Signatures = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Signatures"]);
                        ObjModelVisitReport.Type = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Type"]);
                        ObjModelVisitReport.Report_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Report_No"]);
                        ObjModelVisitReport.Call_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Call_No"]);

                        int Inspection_records = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Inspection_records"]);
                        ObjModelVisitReport.Inspection_records = Convert.ToBoolean(Inspection_records);

                        int Inspection_Photo = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Inspection_Photo"]);
                        ObjModelVisitReport.Inspection_Photo = Convert.ToBoolean(Inspection_Photo);

                        int Other_Specify = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Other_Specify"]);
                        ObjModelVisitReport.Other_Specify = Convert.ToBoolean(Other_Specify);

                        ObjModelVisitReport.SubJob_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["SubJob_No"]);
                        ObjModelVisitReport.PK_SubJob_Id = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["PK_SubJob_Id"]);


                        ObjModelVisitReport.Type = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Type"]);
                        ObjModelVisitReport.Br_Id = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Br_Id"]);
                        ObjModelVisitReport.SubType = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["JobType"]);
                        //ObjModelVisitReport.SubVendorPODate = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["SubVendorPODate"]);
                        ObjModelVisitReport.SubSubVendorDate_of_PO = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["SubvendorPODate1"]);
                        ObjModelVisitReport.CreatedDate = Convert.ToDateTime(DSJobMasterByQtId.Tables[0].Rows[0]["CreatedDate"]);
                        ObjModelVisitReport.chkARC = Convert.ToBoolean(DSJobMasterByQtId.Tables[0].Rows[0]["chkARC"]);
                        ObjModelVisitReport.ARCFirstPrint = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["ARCFirstPrint"]);
                        ObjModelVisitReport.IsCustomerSpecificReportNumber = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["IsCustomerSpecificReportNumber"]);
                        ObjModelVisitReport.CustomerSpecificReportNumber = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["CustomerSpecificReportNumber"]);
                        if (DSJobMasterByQtId.Tables[1].Rows.Count > 0)
                        {
                            ObjModelVisitReport.IVRCount = Convert.ToInt32(DSJobMasterByQtId.Tables[1].Rows[0]["IVRCount"]);
                        }

                        #region Bind Activity 23 july 

                        DataSet dtGateDate = new DataSet();
                        //string Date = "";
                        //string Dates;
                        dtGateDate = ObjActivity.GetDate(PK_Call_ID);  //if data is null Get dates from visit report
                        //if (dtGateDate.Tables[0].Rows.Count > 0)
                        //{
                        //    Date = dtGateDate.Tables[0].Rows[0]["Date_Of_Inspection"].ToString();

                        //}

                        string Date = "";
                        string Dates;
                        Date = ObjModelVisitReport.Date_Of_Inspection;
                        Dates = Date.Trim().TrimStart(','); // to remove first comma

                        string[] ArrDates = Dates.Split(',');

                        foreach (var dr in ArrDates) // loop for adding add from dataset to list<modeldata>  
                        {
                            lmd.Add(new NonInspectionActivity
                            {
                                DateSE = dr,
                                //Vendor_Name = dtGateDate.Tables[0].Rows[0]["Vendor_Name_Location"].ToString(),
                                //EstimatedTime = dtGateDate.Tables[0].Rows[0]["EstimatedHours"].ToString(),
                                Description = dtGateDate.Tables[0].Rows[0]["Vendor_Name_Location"].ToString(),
                                StartTime = Convert.ToDouble(dtGateDate.Tables[0].Rows[0]["EstimatedHours"]),
                            });
                        }

                        ViewData["Dates"] = ArrDates;
                        // ViewBag.Dates = ArrDates;
                        ViewBag.Dates = lmd;
                        ViewBag.DataEntryView = "Yes";


                        #endregion
                    }
                    else
                    {




                        DSEditQutationTabledata = objDalVisitReport.GetCallDetails(PK_Call_ID);

                        ObjModelVisitReport.Vendor_Name_Location = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Vendor_Name"]);
                        ObjModelVisitReport.Po_No = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["PO_Number"]);
                        ObjModelVisitReport.Sub_Vendor_Name = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["SubVendorName"]);
                        ObjModelVisitReport.Po_No_SubVendor = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["SubVendorPoNo"]);
                        //ObjModelVisitReport.SubVendorPODate = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["SubVendorPODate"]);
                        //ObjModelVisitReport.SubSubVendorDate_of_PO = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["SubVendorPODate"]);
                        ObjModelVisitReport.Date_of_PO = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Date_of_Po"]);

                        //ObjModelVisitReport.Vendor_Name_Location = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Vendor_Name"]);
                        //ObjModelVisitReport.Po_No = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["SubVendorPONo"]);
                        //ObjModelVisitReport.Sub_Vendor_Name = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["SubVendorName"]);
                        //ObjModelVisitReport.Po_No_SubVendor = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Po_No_SSJob"]);


                        ObjModelVisitReport.Sap_And_Controle_No = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Job"]);
                        ObjModelVisitReport.Branch = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Executing_Branch"]);
                        ObjModelVisitReport.Date_Of_Inspection = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Actual_Visit_Date"]);
                        ObjModelVisitReport.Project_Name_Location = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Project_Name"]);
                        ObjModelVisitReport.Address_Of_Inspection = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Job_Location"]);
                        ObjModelVisitReport.End_user_Name = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["End_Customer"]);
                        ObjModelVisitReport.SubJob_No = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Sub_Job"]);
                        ObjModelVisitReport.PK_SubJob_Id = Convert.ToInt32(DSEditQutationTabledata.Tables[0].Rows[0]["PK_SubJob_Id"]);
                        ObjModelVisitReport.Client_Name = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Company_Name"]);
                        ObjModelVisitReport.PK_Call_ID = Convert.ToInt32(DSEditQutationTabledata.Tables[0].Rows[0]["PK_Call_ID"]);
                        ObjModelVisitReport.Br_Id = Convert.ToInt32(DSEditQutationTabledata.Tables[0].Rows[0]["Br_Id"]);
                        ObjModelVisitReport.DEC_PMC_EPC_Name = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["DECName"]);
                        ObjModelVisitReport.DEC_PMC_EPC_Assignment_No = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["DECNumber"]);
                        ObjModelVisitReport.Notification_Name_No_Date = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["source"]);
                        ObjModelVisitReport.SubType = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["JobType"]);
                        ObjModelVisitReport.chkARC = Convert.ToBoolean(DSEditQutationTabledata.Tables[0].Rows[0]["chkARC"]);
                        if (DSEditQutationTabledata.Tables[2].Rows.Count > 0)
                        {
                            ObjModelVisitReport.IVRCount = Convert.ToInt32(DSEditQutationTabledata.Tables[2].Rows[0]["IVRCount"]);
                        }
                        ObjModelVisitReport.CallIDs = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["CallIDs"]);
                        #region Bind Activity 23 july 

                        DataSet dtGateDate = new DataSet();
                        //string Date = "";
                        //string Dates;
                        dtGateDate = ObjActivity.GetDate(PK_Call_ID);  //if data is null Get dates from visit report
                        //if (dtGateDate.Tables[0].Rows.Count > 0)
                        //{
                        //    Date = dtGateDate.Tables[0].Rows[0]["Date_Of_Inspection"].ToString();

                        //}

                        string Date = "";
                        string Dates;
                        Date = ObjModelVisitReport.Date_Of_Inspection;
                        Dates = Date.Trim().TrimStart(','); // to remove first comma
                        string strCallID = "";
                        string strCallIDs;
                        strCallID = ObjModelVisitReport.Date_Of_Inspection;
                        strCallIDs = strCallID.Trim().TrimStart(','); // to remove first comma

                        string[] ArrDates = Dates.Split(',');
                        string[] ArrCallIDs = strCallIDs.Split(',');

                        //foreach (var dr in ArrDates) // loop for adding add from dataset to list<modeldata>  
                        //{
                        //    lmd.Add(new NonInspectionActivity
                        //    {
                        //        DateSE = dr,
                        //        //Vendor_Name = dtGateDate.Tables[0].Rows[0]["Vendor_Name_Location"].ToString(),
                        //        //EstimatedTime = dtGateDate.Tables[0].Rows[0]["EstimatedHours"].ToString(),
                        //        CallId = ArrCallIDs[cnt].ToString(),
                        //        Description = dtGateDate.Tables[0].Rows[0]["Vendor_Name_Location"].ToString(),
                        //      //  StartTime = Convert.ToDouble(dtGateDate.Tables[0].Rows[0]["EstimatedHours"]),
                        //    });
                        //}

                        for (int cnt = 0; cnt < ArrDates.Count(); cnt++)
                        {
                            lmd.Add(new NonInspectionActivity
                            {
                                DateSE = ArrDates[cnt].ToString(),
                                CallId = ArrCallIDs[cnt].ToString(),
                                Description = dtGateDate.Tables[0].Rows[0]["Vendor_Name_Location"].ToString(),

                            });
                        }

                        ViewData["Dates"] = ArrDates;
                        // ViewBag.Dates = ArrDates;
                        ViewBag.Dates = lmd;
                        ViewBag.DataEntryView = "Yes";


                        #endregion


                        Session["PK_Call_ID"] = PK_Call_ID;
                        if (ids != 0 || ids != null)
                        {
                            var Data = objDalVisitReport.GetReportList(Convert.ToInt32(ids));
                            ViewBag.SubCatlist = new SelectList(Data, "ReportName", "ReportName");
                        }
                        else
                        {
                            var Data = objDalVisitReport.GetAllReportList();
                            ViewBag.SubCatlist = new SelectList(Data, "ReportName", "ReportName");
                        }

                    }
                    return View(ObjModelVisitReport);
                }
                else
                {
                    return RedirectToAction("CallsListByInspector", "CallsMaster");
                }
                #endregion
            }
            else
            {
                #region



                if (PK_Call_ID == null)
                {
                    PK_Call_ID = abc.PK_Call_ID;
                }

                if (status != null)
                {
                    //   objDalVisitReport.UpdateStatus(PK_Call_ID, status);
                }


                var Data = objDalVisitReport.GetAllReportList();
                ViewBag.SubCatlist = new SelectList(Data, "PK_CALL_ID", "ReportName");
                //ViewBag.SubCatlist = 0;

                if (PK_Call_ID != 0 && PK_Call_ID != null)
                {
                    DataSet DSJobMasterByQtId = new DataSet();
                    DataSet DSEditQutationTabledata = new DataSet();


                    DSJobMasterByQtId = objDalVisitReport.EditInspectionVisitReportByPKCallID(PK_Call_ID);
                    //DSJobMasterByQtId = objDalVisitReport.EditInspectionVisitReportByPKCallID1(PK_Call_ID,PK_RM_ID);

                    if (DSJobMasterByQtId.Tables[0].Rows.Count > 0)
                    {
                        //10 Aug
                        #region Get Activity Data  
                        ds = ObjActivity.GetData(Convert.ToInt32(PK_Call_ID)); // Get data from callid (tblnoninspectionActivity)

                        if (ds.Tables[0].Rows.Count != 0)
                        {
                            foreach (DataRow dr in ds.Tables[0].Rows) // loop for adding add from dataset to list<modeldata>  
                            {
                                lmd.Add(new NonInspectionActivity
                                {
                                    Id = Convert.ToInt32(dr["Id"]),
                                    ActivityType = Convert.ToString(dr["ActivityType"]),
                                    Location = Convert.ToString(dr["Location"]),
                                    DateSE = Convert.ToString(dr["DateSE"]),
                                    //EndDate = Convert.ToString(dr["enddate"]),
                                    //StartDate = Convert.ToString(dr["StartDate"]),
                                    //EndDate = Convert.ToString(dr["EndDate"]),
                                    ServiceCode = Convert.ToString(dr["ServiceCode"]),
                                    Description = Convert.ToString(dr["Description"]),
                                    StartTime = Convert.ToDouble(dr["StartTime"]),
                                    EndTime = Convert.ToDouble(dr["EndTime"]),
                                    Attachment = Convert.ToString(dr["Attachment"]),
                                    TravelTime = Convert.ToDouble(dr["TravelTime"])

                                });
                            }

                            ViewBag.Dates = lmd;
                        }
                        #endregion

                        //First Level
                        ObjModelVisitReport.Vendor_Name_Location = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Vendor_Name"]);
                        ObjModelVisitReport.Po_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["PO_Number"]);
                        ObjModelVisitReport.Date_of_PO = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Date_of_Po"]);
                        //Second Level
                        ObjModelVisitReport.Sub_Vendor_Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["SubVendorName"]);
                        ObjModelVisitReport.Po_No_SubVendor = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["SubVendorPoNo"]);
                        ObjModelVisitReport.SubSubVendorDate_of_PO = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["SubSubSubVendorPODate"]);
                        //Third Level
                        ObjModelVisitReport.SubSubSubVendorName = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["SubSubVendorName"]);
                        ObjModelVisitReport.SubSubSubPoNo = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["SubSubVendorPoNo"]);
                        ObjModelVisitReport.SubSubSubPoDate = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["SubSubVendorPoDate"]);




                        ObjModelVisitReport.ReportNoName = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["ReportNo"]);
                        Session["VisitReportNo"] = Convert.ToString(ObjModelVisitReport.ReportNoName);
                        ObjModelVisitReport.Branch = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Branch"]);
                        ObjModelVisitReport.Sap_And_Controle_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Sap_And_Controle_No"]);
                        ObjModelVisitReport.PK_IVR_ID = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["PK_IVR_ID"]);
                        ObjModelVisitReport.Project_Name_Location = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Project_Name_Location"]);
                        ObjModelVisitReport.Address_Of_Inspection = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Address_Of_Inspection"]);
                        ObjModelVisitReport.End_user_Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["End_user_Name"]);
                        // ObjModelVisitReport.Vendor_Name_Location = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Vendor_Name_Location"]);
                        ObjModelVisitReport.PK_Call_ID = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["PK_Call_ID"]);
                        ObjModelVisitReport.Notification_Name_No_Date = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Notification_Name_No_Date"]);

                        ObjModelVisitReport.Date_Of_Inspection = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Date_Of_Inspection"]);
                        ObjModelVisitReport.Client_Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Client_Name"]);
                        ObjModelVisitReport.DEC_PMC_EPC_Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["DEC_PMC_EPC_Name"]);
                        ObjModelVisitReport.DEC_PMC_EPC_Assignment_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["DEC_PMC_EPC_Assignment_No"]);
                        //ObjModelVisitReport.Po_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Po_No"]);
                        //ObjModelVisitReport.Sub_Vendor_Name = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Sub_Vendor_Name"]);
                        //ObjModelVisitReport.Po_No_SubVendor = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Po_No_SubVendor"]);

                        int kick = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Kick_Off_Pre_Inspection"]);
                        ObjModelVisitReport.Kick_Off_Pre_Inspection = Convert.ToBoolean(kick);

                        int Mi = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Material_identification"]);
                        ObjModelVisitReport.Material_identification = Convert.ToBoolean(Mi);

                        int Interim_Stages = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Interim_Stages"]);
                        ObjModelVisitReport.Interim_Stages = Convert.ToBoolean(Interim_Stages);

                        int Document_review = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Document_review"]);
                        ObjModelVisitReport.Document_review = Convert.ToBoolean(Document_review);

                        int Final_Inspection = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Final_Inspection"]);
                        ObjModelVisitReport.Final_Inspection = Convert.ToBoolean(Final_Inspection);

                        int Re_inspection = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Re_inspection"]);
                        ObjModelVisitReport.Re_inspection = Convert.ToBoolean(Re_inspection);

                        ObjModelVisitReport.Conclusion = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Conclusion"]);
                        ObjModelVisitReport.Pending_Activites = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Pending_Activites"]);
                        ObjModelVisitReport.Identification_Of_Inspected = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Identification_Of_Inspected"]);
                        ObjModelVisitReport.Identification_Of_Inspected_AfterSave = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Identification_Of_Inspected"]);
                        ObjModelVisitReport.Areas_Of_Concerns = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Areas_Of_Concerns"]);
                        ObjModelVisitReport.Non_Conformities_raised = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Non_Conformities_raised"]);
                        ObjModelVisitReport.Signatures = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Signatures"]);
                        ObjModelVisitReport.Type = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Type"]);
                        ObjModelVisitReport.Report_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Report_No"]);
                        ObjModelVisitReport.Call_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Call_No"]);

                        int Inspection_records = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Inspection_records"]);
                        ObjModelVisitReport.Inspection_records = Convert.ToBoolean(Inspection_records);

                        int Inspection_Photo = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Inspection_Photo"]);
                        ObjModelVisitReport.Inspection_Photo = Convert.ToBoolean(Inspection_Photo);

                        int Other_Specify = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Other_Specify"]);
                        ObjModelVisitReport.Other_Specify = Convert.ToBoolean(Other_Specify);

                        ObjModelVisitReport.SubJob_No = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["SubJob_No"]);
                        ObjModelVisitReport.PK_SubJob_Id = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["PK_SubJob_Id"]);


                        ObjModelVisitReport.Type = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Type"]);
                        ObjModelVisitReport.Br_Id = Convert.ToInt32(DSJobMasterByQtId.Tables[0].Rows[0]["Br_Id"]);
                        ObjModelVisitReport.ReviseReason = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["ReviseReason"]);
                        //ObjModelVisitReport.Date_of_PO = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Date_of_Po"]);
                        //ObjModelVisitReport.SubSubVendorDate_of_PO = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["SubvendorPODate1"]);
                        ObjModelVisitReport.SubType = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["JobType"]);
                        ObjModelVisitReport.CreatedDate = Convert.ToDateTime(DSJobMasterByQtId.Tables[0].Rows[0]["CreatedDate"]);

                        ObjModelVisitReport.chkARC = Convert.ToBoolean(DSJobMasterByQtId.Tables[0].Rows[0]["chkARC"]);
                        ObjModelVisitReport.ARCFirstPrint = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["ARCFirstPrint"]);

                        if (DSJobMasterByQtId.Tables[1].Rows.Count > 0)
                        {
                            ObjModelVisitReport.IVRCount = Convert.ToInt32(DSJobMasterByQtId.Tables[1].Rows[0]["IVRCount"]);
                        }
                        ObjModelVisitReport.ReportNoForPDF = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["Report"]);
                        ObjModelVisitReport.ReviseReportNoForPDF = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["ReviseReportNoForPDF"]);
                        ObjModelVisitReport.CallIDs = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["CallIDs"]);
                        ObjModelVisitReport.ddlReviseReason = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["ddlReviseReason"]);
                        ObjModelVisitReport.IsCustomerSpecificReportNumber = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["IsCustomerSpecificReportNumber"]);
                        ObjModelVisitReport.CustomerSpecificReportNumber = Convert.ToString(DSJobMasterByQtId.Tables[0].Rows[0]["CustomerSpecificReportNumber"]);

                    }
                    else
                    {
                        DSEditQutationTabledata = objDalVisitReport.GetCallDetails(PK_Call_ID);
                        if (DSEditQutationTabledata.Tables[0].Rows.Count > 0)
                        {

                            //First Level
                            ObjModelVisitReport.Vendor_Name_Location = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Vendor_Name"]);
                            ObjModelVisitReport.Po_No = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["PO_Number"]);
                            ObjModelVisitReport.Date_of_PO = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Date_of_Po"]);
                            //Second Level
                            ObjModelVisitReport.Sub_Vendor_Name = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["SubVendorName"]);
                            ObjModelVisitReport.Po_No_SubVendor = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["SubVendorPoNo"]);
                            ObjModelVisitReport.SubSubVendorDate_of_PO = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["SubSubSubVendorPODate"]);
                            //Third Level
                            ObjModelVisitReport.SubSubSubVendorName = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["SubSubVendorName"]);
                            ObjModelVisitReport.SubSubSubPoNo = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["SubSubVendorPoNo"]);
                            ObjModelVisitReport.SubSubSubPoDate = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["SubSubVendorPoDate"]);


                            //ObjModelVisitReport.Vendor_Name_Location = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Vendor_Name"]);
                            //ObjModelVisitReport.Po_No = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["PO_Number"]);
                            //ObjModelVisitReport.Sub_Vendor_Name = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["SubVendorName"]);
                            //ObjModelVisitReport.Po_No_SubVendor = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["SubVendorPoNo"]);
                            //ObjModelVisitReport.SubSubVendorDate_of_PO = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["SubVendorPODate"]);

                            ObjModelVisitReport.Sap_And_Controle_No = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Job"]);
                            ObjModelVisitReport.Branch = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Executing_Branch"]);
                            ObjModelVisitReport.Date_Of_Inspection = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Actual_Visit_Date"]);
                            ObjModelVisitReport.Project_Name_Location = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Project_Name"]);
                            ObjModelVisitReport.Address_Of_Inspection = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Job_Location"]);
                            ObjModelVisitReport.End_user_Name = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["End_Customer"]);
                            ObjModelVisitReport.SubJob_No = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Sub_Job"]);
                            ObjModelVisitReport.PK_SubJob_Id = Convert.ToInt32(DSEditQutationTabledata.Tables[0].Rows[0]["PK_SubJob_Id"]);
                            ObjModelVisitReport.Client_Name = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Company_Name"]);
                            ObjModelVisitReport.PK_Call_ID = Convert.ToInt32(DSEditQutationTabledata.Tables[0].Rows[0]["PK_Call_ID"]);
                            ObjModelVisitReport.Br_Id = Convert.ToInt32(DSEditQutationTabledata.Tables[0].Rows[0]["Br_Id"]);

                            ObjModelVisitReport.DEC_PMC_EPC_Name = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["DECName"]);
                            ObjModelVisitReport.DEC_PMC_EPC_Assignment_No = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["DECNumber"]);
                            ObjModelVisitReport.Notification_Name_No_Date = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["source"]);
                            // ObjModelVisitReport.Date_of_PO = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["Date_of_Po"]);
                            ObjModelVisitReport.SubType = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["JobType"]);
                            ObjModelVisitReport.chkARC = Convert.ToBoolean(DSEditQutationTabledata.Tables[0].Rows[0]["chkARC"]);
                            ObjModelVisitReport.CallIDs = Convert.ToString(DSEditQutationTabledata.Tables[0].Rows[0]["CallIDs"]);

                        }

                        if (DSEditQutationTabledata.Tables[2].Rows.Count > 0)
                        {
                            ObjModelVisitReport.IVRCount = Convert.ToInt32(DSEditQutationTabledata.Tables[2].Rows[0]["IVRCount"]);
                        }
                        #region Bind Activity 23 july 

                        DataSet dtGateDate = new DataSet();
                        //string Date = "";
                        //string Dates;
                        dtGateDate = ObjActivity.GetDate(PK_Call_ID);  //if data is null Get dates from visit report
                        //if (dtGateDate.Tables[0].Rows.Count > 0)
                        //{
                        //    Date = dtGateDate.Tables[0].Rows[0]["Date_Of_Inspection"].ToString();

                        //}

                        string Date = "";
                        string Dates;
                        Date = ObjModelVisitReport.Date_Of_Inspection;
                        Dates = Date.Trim().TrimStart(','); // to remove first comma

                        string strCallID = "";
                        string strCallIDs;
                        Date = ObjModelVisitReport.Date_Of_Inspection;
                        Dates = Date.Trim().TrimStart(','); // to remove first comma

                        strCallID = ObjModelVisitReport.CallIDs;
                        strCallIDs = strCallID.Trim().TrimStart(','); // to remove first comma

                        string[] ArrDates = Dates.Split(',');
                        string[] ArrCallIDs = strCallIDs.Split(',');

                        //foreach (var dr in ArrDates) // loop for adding add from dataset to list<modeldata>  
                        //{
                        //    lmd.Add(new NonInspectionActivity
                        //    {
                        //        DateSE = dr,
                        //        //Vendor_Name = dtGateDate.Tables[0].Rows[0]["Vendor_Name_Location"].ToString(),
                        //        //EstimatedTime = dtGateDate.Tables[0].Rows[0]["EstimatedHours"].ToString(),

                        //        Description = dtGateDate.Tables[0].Rows[0]["Vendor_Name_Location"].ToString(),
                        //     //   StartTime = Convert.ToDouble(0),//Convert.ToDouble(dtGateDate.Tables[0].Rows[0]["EstimatedHours"]),
                        //    });
                        //}

                        for (int cnt = 0; cnt < ArrDates.Count(); cnt++)
                        {
                            lmd.Add(new NonInspectionActivity
                            {
                                DateSE = ArrDates[cnt].ToString(),
                                CallId = ArrCallIDs[cnt].ToString(),
                                Description = dtGateDate.Tables[0].Rows[0]["Vendor_Name_Location"].ToString(),

                            });
                        }

                        ViewData["Dates"] = ArrDates;
                        // ViewBag.Dates = ArrDates;
                        ViewBag.Dates = lmd;
                        ViewBag.DataEntryView = "Yes";


                        #endregion


                        Session["PK_Call_ID"] = PK_Call_ID;
                    }
                    return View(ObjModelVisitReport);
                }
                else
                {
                    return RedirectToAction("CallsListByInspector", "CallsMaster");
                }
                #endregion
            }
        }

        [HttpPost]
        public ActionResult Visittest(InspectionvisitReportModel IVR, HttpPostedFileBase File, HttpPostedFileBase FileUpload, ItemDescriptionModel IDM, HttpPostedFileBase FileUpload1, HttpPostedFileBase postedFile1, ReferenceDocumentsModel RD, InspectionActivitiesModel StW, DocumentRevieweModel DR, EquipmentDetailsModel ED, NonInspectionActivity R)
        {
            return View();
        }



        [HttpPost]
        public JsonResult GetSubSubjobdata(string VisitReport, string jobNumber, string ProjectName, string Vendor, string Client)
        {
            int id = 0;
            string i = "";
            DataTable DSJobMasterByQtId = new DataTable();
            DSJobMasterByQtId = objDalVisitReport.DtGetCallIdsdata(jobNumber, ProjectName, Vendor, Client);

            if (DSJobMasterByQtId.Rows.Count > 0)
            {

                i = String.Join(",", DSJobMasterByQtId.AsEnumerable().Select(x => x.Field<string>("PK_Call_ID").ToString()).ToArray());


            }
            var Data = objDalVisitReport.StringGetReportList(i);

            return Json(Data, JsonRequestBehavior.AllowGet);
        }


        [HttpPost]
        public JsonResult DataCopyNew(InspectionvisitReportModel CopyNew, string Areas_Of_Concerns)
        {
            string Result = "";

            if (CopyNew.ReportNo == null || !CopyNew.ReportNo.Any())
            {
                return Json(new { success = 2, responseText = "Code matched" }, JsonRequestBehavior.AllowGet);
            }
            else
            {

                foreach (var reportName in CopyNew.ReportNo)
                {
                    CopyNew.ReportNoName = reportName;
                    Result = objDalVisitReport.CopyInsertData(CopyNew);

                    if (string.IsNullOrEmpty(Result))
                    {
                        return Json(new { success = 2, responseText = "Something went wrong" }, JsonRequestBehavior.AllowGet);
                    }
                }
                return Json(new { success = 1, responseText = "Code matched" }, JsonRequestBehavior.AllowGet);
            }
        }


    }
}